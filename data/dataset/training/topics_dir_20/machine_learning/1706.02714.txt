Deep-Learning the Landscape
Yang-Hui He
1 Department of Mathematics, City, University of London, EC1V 0HB, UK
2 Merton College, University of Oxford, OX14JD, UK
3 School of Physics, NanKai University, Tianjin, 300071, P.R. China
hey@maths.ox.ac.uk
Abstract
We propose a paradigm to deep-learn the ever-expanding databases which
have emerged in mathematical physics and particle phenomenology, as diverse
as the statistics of string vacua or combinatorial and algebraic geometry. As
concrete examples, we establish multi-layer neural networks as both classifiers
and predictors and train them with a host of available data ranging from Calabi-
Yau manifolds and vector bundles, to quiver representations for gauge theories.
We find that even a relatively simple neural network can learn many significant
quantities to astounding accuracy in a matter of minutes and can also predict
hithertofore unencountered results. This paradigm should prove a valuable tool
in various investigations in landscapes in physics as well as pure mathematics.
1
ar
X
iv
:1
70
6.
02
71
4v
2 
 [
he
p-
th
] 
 1
9 
Ju
n 
20
17
Contents
1 Introduction and Summary 3
2 Neural Networks and Deep-Learning 7
2.1 The Perceptron . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
2.2 Neural Networks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
3 Case Studies 11
3.1 Warm-up: Calabi-Yau Hypersurfaces in WP4 . . . . . . . . . . . . . . 11
3.1.1 Deep-Learning Complex Structure . . . . . . . . . . . . . . . . 12
3.1.2 Deep-Learning Number of Generations . . . . . . . . . . . . . 14
3.2 CICYs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
3.2.1 Four-folds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
3.3 Bundle Cohomology . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
3.4 Aspects of the KS Dataset . . . . . . . . . . . . . . . . . . . . . . . . 22
3.5 Quiver Gauge Theories . . . . . . . . . . . . . . . . . . . . . . . . . . 24
3.5.1 A Hypothetical Input . . . . . . . . . . . . . . . . . . . . . . . 27
3.6 A Reprobate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
4 Conclusions and Prospectus 29
2
1 Introduction and Summary
Theoretical physics now firmly resides within an Age wherein new physics, new mathe-
matics and new data coexist in a symbiosis which transcends inter-disciplinary bound-
aries and wherein concepts and developments in one field are evermore rapidly enrich-
ing another. String theory has spearheaded this vision for the past few decades and
has, perhaps consequently, become a paragon of the theoretical sciences. That she
engenders the cross-fertilization between physics and mathematics is without dispute:
interactions on an unprecedented scale have commingled fields as diverse as quantum
field theory, general relativity, condensed matter physics, algebraic and differential
geometry, number theory, representation theory, category theory, etc. With the ad-
vent of increasingly powerful computers, from this fruitful dialogue has also arisen a
plethora of data, ripe for mathematical experimentation.
This emergence of data in some sense began with the incipience of string phe-
nomenology [1] where compactification of the heterotic string on Calabi-Yau three-
folds (CY3) was widely believed to hold the ultimate geometric unification. A race,
spanning the 1990s, to explicitly construct examples of Calabi-Yau (CY) manifolds en-
sued, beginning ∗ with the so-called complete intersection CY manifolds (CICYs) [2],
proceeding to the hypersurfaces in weighted projective space [3], to elliptic fibra-
tions [4] and ultimately culminating in the impressive (at least some 1010) list of
CY3s from reflexive polytopes [5].
With the realization that the landscape of stringy vacua † might in fact exceed the
number of inequivalent Calabi-Yau threefolds [6] by hundreds of orders of magnitude,
there was a vering of direction toward a more multi-verse or anthropic philosophy.
Nevertheless, hints have emerged that the vastness of the landscape might well be
mostly infertile (cf. the swamp-land of [7]) and that we could live in a very special
universe [8–10], a “des res” corner within a barren vista.
Thus, undaunted by the seeming over-abundance of possible vacua, fortified by the
rapid growth of computing power and inspirited by the omnipresence of big data, the
∗ The interested readers should find the opportunity to have Prof. Philip Candelas FRS, relate to
them the fascinating account of how this was achieved on the then CERN super-computer, involving
dot-matrix printers and magnetic tapes or, Prof. Rolf Schimmrigk, on staring at VAX machines in
Austin over long nights.
† The now-popular figure of some 10500 is a back-of-envelop estimate based on a generic number
of cycles in a generic CY3 that could support fluxes.
3
first two decades of the new millennium saw a return to the earlier principle of creating
and mining geometrical data; the notable fruits of this combined effort between pure
and computational algebraic geometers as well as formally and phenomenologically
inclined physicists have included (q.v. [11] for a review of the various databases)
• Continuing with the Kreuzer-Skarke database, exemplified by
– Finding quotients to reach small Hodge numbers [18];
– Improvement of PALP, the original KS computer programme [15] and in-
corporation into SAGE [19];
– Identifying refined structures [14, 16,17];
– Interactive Calabi-Yau databases as websites [20,21];
– building line-bundles and monad bundles [22] for heterotic phenomenology
in generalizing embedding;
• Generalizing the CICY construction, exemplified by
– Porting the CICY database into Mathematica and establishing a catalogue
of stable bundles [24];
– A database of MSSM and 3-generation models from heterotic compactifi-
cation [25,26,28];
– Relaxing the ambient Fano requirement [23];
– CICY 4-folds [27];
• Finding elliptic and K3 fibred CY for F-theory and string dualities [29, 30],
exemplified by
– Identifying elliptic fibrations [13, 14] from KS data;
– Establishing phenomenologically viable dataset of stable bundles using
spectral covers [28, 31];
– studying finiteness in the elliptic landscape [32];
• D-brane world-volume theories as supersymmetric quiver gauge theories, exem-
plified by
– Classifications of quivers from C3 and C4 orbifolds [33];
4
– non-compact toric CY and brane-tilings [34, 35] and their databases [36–
38,41];
– specializing the toric CY to the reflexive polytopes, whereby linking with
KS data [39,40].
All of the above cases are accompanied by typically accessible data of considerable
size. To the collection of these databases, representing a concrete glimpse onto the
string landscape, we shall refer as landscape data, for lack of better words. For
instance, the heterotic line bundles on CICYs are on the order of 1010, the spectral-
cover bundles on the elliptically fibred Calabi-Yau, 106, the brane-configurations in
the Calabi-Yau volume studies, 105, type II intersecting brane models, 109, etc. Even
by today’s measure, these constitute a fertile playground of data, the likes of which
Google and IBM are constantly analysing. A natural course of action, therefore, is
to do unto this landscape data, what Google et al. do each second of our lives: to
machine-learn.
Let us be precise about what we mean by deep machine-learning this landscape.
Much of the aforementioned data have been the brain-child of the marriage between
physicists and mathematicians, especially incarnated by applications of computa-
tional algebraic geometry, numerical algebraic geometry and combinatorial geometry
to problems which arise from the classification in the physics and recast into a finite,
algorithmic problem in the mathematics (cf. [12]). Obviously, computing power is a
crucial limitation.
Unfortunately, in computational algebraic geometry - on which most of the data
heavily rely, ranging from bundles stability in heterotic compactification to Hilbert
series in brane gauge theories - the decisive step is finding a Groebner basis, which
is notoriously known to be unparallelizable and double-exponential in running time.
Thus, much of the challenge in establishing the landscape data had been to either
circumvent the direct calculation of the Groebner bases by harnessing of the geometric
configuration – e.g., using the combinatorics when dealing with toric varieties. Still,
many of the combinatorial calculations, be they triangulation of polytopes or finding
dual cones, are still exponentially expensive.
The good news for our present purpose is that, much of the data have already been
collected. Oftentimes, as we shall find out in our forthcoming case-studies, tremendous
effort is needed for deceptively simple questions. Hence, to draw inferences from actual
5
theoretical data by deep-learning therefrom would not only help identify undiscovered
patterns but also aid in predicting results which would otherwise cost formidable
computations. Subsequently, we propose our
Paradigm: To set-up neural networks to deep-learn the landscape data,
to recognize unforeseeable patterns (as classifiers) and to extrapolate to
new results (as predictors).
Of course, this paradigm is useful not only to physicists but to also to math-
ematicians; for instance, could our neural work be trained well enough to approx-
imate bundle cohomology calculations? This, and a host of other examples, we
will shortly examine. Indeed, such neural networks have recently been applied to
data analyses in other fields of physics, such as high energy experiment [48], astro-
physics/cosmology [49], energy landscapes [50], and holography [51]. Of note is a
recent conference in the role of deep-learning in fundamental physics [52]. It is there-
fore timely that we should employ this powerful tool to string theory/mathematical
physics as well as to computational problems in pure mathematics.
The organization of the paper is as follows. We begin in §2 with a bird’s-eye-
view of the principles of machine deep-learning and neural networks with emphasis
on its implementations by the latest version of Mathematica so that the readers could
familiarize themselves with this handy tool for their own entertainment.
Then, in §3 we establish various readily adapted and easily constructed neural
networks of the multi-layer perceptron type for a host of examples from the above-
mentioned databases, ranging from Calabi-Yau manifolds, to vector bundles, to quiver
gauge theories, amply demonstrating the usefulness of our paradigm.
Throughout we shall be explicit about the layers and training as well as test
data, adhering to Mathematica syntax for concreteness and familiarity, whilst keeping
track of computation time and accuracy achieved. We beg the readers’ indulgence in
including code, which is perhaps uncustomary in a paper in mathematical physics;
however, the nature of our investigations permits little alternative. We conclude with
prospects, including a list of specific directions and issues, in §4.
6
2 Neural Networks and Deep-Learning
We begin with some rudiments of deep-learning and neural networks; this by no means
embodies an attempt to be a pedagogical introduction to this vast field but only serves
to set some notations and concepts. Emphasis will be placed on their implementation
in the newest versions of Mathematica [45, 46], rather than on a general theory. We
refer the reader to the classic texts [42–44] on the subject.
The prototypical problem which an artificial intelligence (AI) might encounter is
one of text recognition. For example, how does a machine recognize the individual
digits from ? One could try to geometri-
cally define the numbers by their homotopy and other invariants, but this is especially
difficult given that hand-writing has such huge variation.
In some sense, many problems in string theory and in algebraic geometry are of
a similar nature. For example, to compute the cohomology of a vector bundle on
an algebraic variety – which physically could encode the number of generations of
particles in a gauge theory – is a highly non-trivial task of sequence-chasing, but in
the end produces a few non-negative integers, often rather small.
The premise of machine learning is to take an data-driven perspective by sampling
over large quantities of hand-written digits and feeding them into an optimization
routine, whose basic components are called neurons in analogy to the human brain.
When there is a large collection - often organized in layers - of interconnected neurons,
we have a neural network; the more the number of layers, or more generally the
greater the complexity of the inter-connectivity amongst the neurons, the “deeper”
the learning.
2.1 The Perceptron
The archetypal neuron is the so-called perceptron (also called the single-layer per-
ceptron (SLP) to emphasize its simplicity); this is a function f(zi) (called activation
function) of some input vector zi. The function f is usually taken to be binary, or
some approximation thereof, such as by the hyperbolic tangent f(z) = tanh(z) or the
7
logistic sigmoid function
f(z) = σ(z) := (1 + exp(−z))−1 , (2.1)
both of which we shall use liberally later. The activation function is set to contain
real parameters, say of the form f(
∑
i
wizi + b), where wi are called weights and b, the
bias.
Supose we are given training data D = {(x(j)i , d(j)}, which is a collection, labelled
by j, of inputs x
(j)
i and known outputs d
(j). We then consider minimizing on the
parameters wi and b, by some method of steepest descent, so that the error (standard
deviation)
SD =
∑
j
(
f(
∑
i
wix
(j)
i + b)− d(j)
)2
(2.2)
is minimized. We resort to numerical minimization because of the number of param-
eters could be very large in general, especially when there are many input channels
and/or layers. Note that at this simple stage, the principle is very similar to a regres-
sion model in statistics, with the difference that the weight parameters wi are updated
with the introduction of each subsequent new data: this is the neuron “learning”.
In Mathematica versions 11.0 and above, the Neuronetworks package had been up-
dated and integrated into the system functions; however, since it is still experimental
and much of the documentation is rather skeletal, it behoves us to briefly describe
the implementation (in all subsequently examples, we will adhere to Mathematica
notation) as follows:
• We begin by defining the SLP with NetChain[ ] , with argument a list con-
taining a single element (we will generalize this in the next subsection) specifying
the activation function in the layer;
• The layer can be a linear layer specifying a linear transformation by a matrix
of specified dimension, for example
net = NetChain[{LinearLayer[5]}];
or by an appropriate activation function, for instance
net = NetChain[{ElementwiseLayer[Ramp]}],
8
or net = NetChain[{ElementwiseLayer[Tanh]}],
or net = NetChain[{ElementwiseLayer[LogisticSigmoid]}].
• We can initialize the SLP, now called net, with some random weights and bias
via net = NetInitialize[net];
• The neural network can now be trained with actual data. Since with a single
layer not too much can be expected, we will discuss the training in the ensuing
sub-section, after introducing multi-layers.
We remark that in the above, the syntax for the linear layer can simply be ab-
breviated to net = NetChain[{5}]. Likewise, the word ElementWiseLayer can also
be dropped, as in net = NetChain[{Ramp}]. Indeed, many other more sophisti-
cated operations can also be chosen for the layer, such as ConvulutionLayer[ ],
LongShortTermMemoryLayer[ ], etc., and we refer the reader to [47] for some more
pedagogical explanations as well as a useful lexicon of layers.
2.2 Neural Networks
An SLP can be chained together to a multiple layer perceptron (MLP). Sometimes
MLPs and neural networks are used inter-changeably though it should be noted that
MLPs are only a special type of neural networks, viz., feed-forward, because it is a
uni-directional chain. In other words, one joins a list of SLPs in a directed fashion
to produce an MLP, while an neural work is a directed graph (with potential cycles
to allow for feed-back) each node of which is an SLP, analogous to the brain being a
complex directed graph of neurons.
Nevertheless, with an MLP, we can already go quite far. To return to our hand-
writing example, one could resort to many resources on the internet, such as main-
tained by the Modified National Institute of Standards and Technology (MNIST)
database, to which Mathematica can link. The data is simply a string of substitution
rules of the form “writing sample” → “correct identification”:
data = { . . .}
We now follow Wolfram’s documentation for this example. The procedure, as will be
throughout the paper, will be in three steps
9
(1) Data Acquisition: First, the data can be obtained online directly, from which
we take a sample of 100 of a total of some 60,000:
resource = ResourceObject["MNIST"];
data = ResourceData[resource, "TrainingData"];
sample = RandomSample[data, 100];
(2) Establishing Neural Network: Next, an MLP can then be set up as
net = NetChain[{ConvolutionLayer[20, 5], Ramp, PoolingLayer[2, 2],
ConvolutionLayer[50, 5], Ramp, PoolingLayer[2, 2],
FlattenLayer[], 500, Ramp, 10, SoftmaxLayer[]}];
(3) Training Neural Network: Finally, training the neural network is simply
done with the command NetTrain[ ] as
net = NetTrain[net, sample];
Here is where one optimizes on all the parameters (weights and biases) in each
layer, aiming to reduce error (standard deviation) as more data is encountered.
One can check that even learning our relatively small sample gives us rather good
results:
Table[{net[sample[[i, 1]]], sample[[i, 1]]}, {i, 1, 100}]
gives all correct answers.
There is obviously much flexibility in choosing the various layers and some ex-
perimentation may be required (q.v. [47]). We further remark that there are built-in
functionalities in Mathematica such as Classify[ ] and Predict[ ] which perform
similar tasks. However, because they are black-box neural networks, we will adhere
to our explicit MLP throughout this paper for illustrative purposes.
10
3 Case Studies
With the tool presented above, we now proceed to analyse our landscape data, a
fertile ground constituting more than 2 decades of many international collaborations
between physics and mathematicians. Our purpose is to first “learn” from the inherent
structure and then to “predict” unseen properties; considering how difficult some of
the calculations involved had been in establishing the databases, such quick estimates,
even if qualitative, would be highly useful indeed.
3.1 Warm-up: Calabi-Yau Hypersurfaces in WP4
One of the first datasets [3] to experimentally illustrate mirror symmetry was that of
hypersurfaces in weighted projective space WP4, which, though later subsumed by the
Kreuzer-Skarke list [5] since WP4 is toric, is a good starting point because of the sim-
plicity in definition. Given the ambient space WP4[w0:w1:w2:w3:w4] ' (C
5−{0})/∼ where
the equivalence relation is (x0, x1, x2, x3, x4) ∼ (λw0x0, λw1x1, λw2x2, λw3x3, λw4x4) for
points (x0, x1, x2, x3, x4) in C5, λ ∈ C∗ and weights wi=0,...,4 ∈ Z+. This space is in
general singular, but choosing a generic enough homogeneous polynomial of degree
4∑
i=0
wi which misses the singularities, this polynomial defines a hypersurface therein
which is a smooth Calabi-Yau threefold X.
There are 7555 inequivalent such configurations, each specified by a 5-vector
~wi=0,...,4. The Euler characteristic χ of X is easily given in terms of the vector. How-
ever, as is usually the case, the individual Hodge numbers (h1,1, h2,1) are less amenable
to a simple combinatorial formula (even though χ = 2(h1,1 − h2,1) is). In fact, the
original computation had to resort to Landau-Ginzberg techniques from physics to
obtain the full list of Hodge numbers [3]. One could in principle use a combination
of the adjunction formula and Euler sequences, in addition to singularity resolution,
but this is not an easy task to automate.
In Figure 1, we present some standard statistics of the data. In part (a), we
plot the traditional χ = 2(h1,1 − h2,1) against the sum (h1,1 + h2,1), exhibiting mirror
symmetry; the histogram of χ is drawn in part (b). In parts (c) and (d), for reference,
we draw the h1,1 and h2,1 values against the order as presented in the database of [20];
this is to illustrate that while h1,1 has been organized more or less in an increasing
11
χ = 2(h1,1 − h2,1)
h1,1 + h2,1
χ
#
(a) (b)
(c) (d)
Figure 1: From the set of 7555 Calabi-Yau threefold hypersurfaces in WP4, we plot (a)
χ = 2(h1,1 − h2,1) against the sum (h1,1 + h2,1), exhibiting mirror symmetry; (b) a histogram
of χ, showing a concentration of self-mirror manifolds at χ = 0; (c) an ordered list-plot of h1,1
and (d) that of h2,1.
order, h2,1 appears rather random.
3.1.1 Deep-Learning Complex Structure
Let us try to deep-learn the least suggestive set of data, i.e., h2,1, which encodes the
complex structure of the CY3, and presented in Figure 1(d); the human eye cannot
quite discern what patterns may exist therein. We let WPcy3 be the set of training
data, being a list of
{configuration (5-vector), χ, h1,1, h2,1} ,
12
so that a typical element would be something like {{1, 3, 5, 9, 13},−128, 14, 78}. Sup-
pose we have a simple (qualitative) question: how many such CY3s have a relatively
large number of complex deformations? We can, for instance, consider h2,1 > 50 to
be “large” and set up our training data to be
ddd = Table[WPcy3[[i, 1]] -> If[(WPcy3[[i, 4]] > 50, 1, 0],
{i, 1, Length[WPcy3]}];
Next, we set up a neural network (MLP) with the input being a 5-vector and the
output a number, and consisting of 5 total layers, 3 of which are intermediate (called
“hidden layers” in the literature):
net = NetChain[
{LinearLayer[100], ElementwiseLayer[LogisticSigmoid],
ElementwiseLayer[Tanh], LinearLayer[100], SummationLayer[]},
"Input" -> {5}];
(3.3)
The layers are self-explanatory. The input (first) layer is a linear function, essentially
a 5 × 100 matrix, followed by a sigmoid function from (2.1), then by a hyperbolic
tangent, both of which are elementary-wise operations, and another linear layer, here
an 100× 100 matrix, finishing with a weighted sum of the 100-vector into a number.
We now train, with say 500 iterations, our MLP by the data ddd as:
net = NetTrain[net, ddd, MaxTrainingRounds -> 500];
and in under a minute on an ordinary laptop, the MLP is trained.
To appreciate the accuracy of the training we can compare the predicted result
of the network against the actual data. We do so by counting the number of cases
where the net value for a given input differs from the correct value, for instance, by
Select[Table[{Round[net[ddd[[i, 1]]]], ddd[[i, 2]]}, {i, 1, 7555}],
#[[1]] != #[[2]] &] // Length
13
Note that while we have set the data to be binary: 1 if h2,1 > 50 and 0 otherwise, the
neural network does not know this and has, especially with the use of the analytic
functions in layers 2 and 3, optimized the weights and baises to give a (continuous) real
output. Hence, we use round-off to do the comparison. The answer to the above is 282.
In other words, our neural network has, in under one minute, learnt - from a seemingly
random set of data - to answer the question of deciding whether a given CY3 has a
large number of complex parameters, to an accuracy of (7555 − 282)/7555 ' 96.2%.
Impressive indeed!
To appreciate further the predictive power of the network. Suppose that we only
had partial data. This is particularly relevant when for instance, due to computational
limitations, a classification is not yet complete, or when the quantity in question, here
h2,1, has not been or could not be yet computed. Therefore, let us pretend that we
have only data available for the first 3000 out of the 7555 (X, h2,1) pairs. This is less
than a half of the total.
Suppose now we are given a new configuration, one which we have not encountered
before, with what confidence could we predict that it would have a large number for
h2,1? We repeat the last two commands in the above, using NetTrain[ ] on the 3000,
and then testing against the full 7555. We find that 6078 cases were actually correct.
Thus, with rather incomplete training data (about some 40% of the total number in
the classification), the relatively simple neural network consisting of a feed-forward 5
layer MLP, has learnt, in under a minute, our question and predicted new results to
80% accuracy.
3.1.2 Deep-Learning Number of Generations
Emboldened, let us move onto another question, of importance here to string phe-
nomenology: Given a configuration, can one tell whether χ is a multiple of 3? In
the early days of heterotic string compactifications, using what has now come to be
known as the standard embedding, this question was decisive on whether the model
admitted 3 generation of particles in the low-energy effective gauge theory. Of course,
we have an analytic formula for χ in terms of the input 5-vector wi. However, testing
divisibility is not an immediate task.
Again, we can define a binary function taking the value of 1 if χ mod 3 ≡ 0
14
and 0 otherwise. Training with the network in (3.3), we achieve 82% accuracy with
1000 training rounds, taking about 2 minutes; these figures are certainly expected
to improve with increasing number of training rounds and with more layers or more
nodes in the network.
The astute reader might question at this stage why we have adhered to binary
queries. Why not train the network to answer a direct query, i.e., to try for instance
to learn and predict the value of h2,1 itself? This is a matter of spread in the present
dataset: we have only some 104 inputs but we can see that the values of h1,1 ranges
from 1 to almost 500; the neural network would have to learn from a relatively small
sample in order to distinguish some 500 output channels. We simply do not have
enough data here to make more accurate statements, though we will shortly proceed
to multiple-channel output. One can check that net-training on the direct data
ddd=Table[WPcy3[[i, 1]] -> WPcy3[[i, 4]], {i,1,Length[WPcy3]}];
would give the rough trend but not the precise value of the complex structure.
This is precisely in line with our philosophy, the power of deep-learning the land-
scape lies in rapid estimates. The computation of the exact values in the landscape
data often takes tremendous efforts in algebraic geometry and quantum field theory,
and we wish to learn and benefit from the fruits the labour from the last 2 decades. We
aim to identify patterns and draw inferences and to avoid the intense computations.
3.2 CICYs
Having warmed up with the hypersurfaces in weighted projective WP4, let us move
onto our next case, the CICY dataset, of complete intersection Calabi-Yau threefolds
in products of (unweighted) projective spaces. This is both the first Calabi-Yau
database (or, for that matter, the first database in algebraic geometry) [2] and the
most heavily studied recently for phenomenology [23–26, 28]. It has the obvious
advantage that the ambient space is smooth by choice and no singularity resolution is
needed. The reason we study this after the WP4 data is because, as we see shortly, the
input is a configuration of non-negative integer matrices, one rank up in complexity
from the 5-vector input in the previous subsection.
15
Briefly, CICYs embedded as K homogeneous polynomials in Pn1 × . . . × Pnm , of
multi-degree qrj . Here, complete intersection means that the dimension of the ambient
space exceeds the number K of defining equations by precisely 3, i.e., K =
m∑
r=1
nr− 3.
Moreover, the Calabi-Yau condition of vanishing first Chern class of TX translates
to
K∑
j=1
qrj = nr + 1 ∀ r = 1, . . . ,m. Subsequently, each manifold can be written as
an m×K configuration matrix (to which we may sometimes adjoin the first column,
designating the ambient product of projective spaces, for clarity; we should bear in
mind that this column is redundant because of the CY condition):
X =

Pn1 q11 q12 . . . q1K
Pn2 q21 q22 . . . q2K
...
...
...
. . .
...
Pnm qm1 qm2 . . . qmK

m×K ,
qrj ∈ Z≥0;
K =
m∑
r=1
nr − 3 ,
K∑
j=1
qrj = nr + 1 , ∀ r = 1, . . . ,m .
(3.4)
The most famous CICY is, of course, [4|5] or simply the matrix [5], denoting the
quintic hypersurface in P4.
The construction of CICYs is thus reduced to a combinatorial problem of classi-
fying the integer matrices in (3.4). It was shown that such configurations are finite
in number and the best available computer at the time (1990’s), viz., the super-
computer at CERN [2], was employed. A total of 7890 inequivalent manifolds were
found, corresponding to matrices with entries qrj ∈ [0, 5], of size ranging from 1× 1 to
maximum number of rows and columns being 12 and 15, respectively. In a way, this
representation is much closer to our archetypal example of hand-writing recognition
in §2.2 than one might imagine. The standard way to represent an image is to pixelate
it, into blocks of m× n, each of which carrying a colour info, for example, a 3-vector
encapturing the RGB data.
Therefore, we can represent all the 7890 CICYs into 12× 15 matrices over Z/6Z,
embedded starting from the upper-left corner, say, and padding with zeros everywhere
else. A typical configuration (say, number 2000 in the list) thus becomes an image
using Mathematica’s ArrayPlot[ ] which is shown in part (a) of Figure 2. Here,
the purple background are the zeros, the greens are the ones and the one red block
is 2. Indeed, the CICY configuration matrices are rather sparse, dominated by 0 and
following that, by 1. In part (b) of the figure, we try to show the “average” CICY
16
by component-wise average over all the 12 × 15 matrices. Again, we see the largely
purple (entry 0) background, with various shades mixed by the averaging process. It
is rather aesthetically pleasing to see the average CICY as an image.
(a) (b)
Figure 2: We realize the set of 7890 CICYs (Calabi-Yau threefolds as complete intersections in
products of projective spaces) as 12 × 15 matrices, padding with zeros where necessary. Then
all CICY configurations are such matrices with entries in {0, 1, 2, 3, 4, 5}. We consider these as
pixel colors and draw a typical CICY in (a), with 0 being purple. In (b), we average over all
such matrices component-wise, and draw the “average” CICY as a pixelated image.
Now, our input space is much larger than that of the WP4 case consider above:
7890×12×15 is 2 orders of magnitude larger than 7555×5, thus let us indulge ourselves
with a full, rather than binary query. That is, can we deep-learn, say the full list of
Hodge numbers? As usual, the Euler number is relatively easy to obtain and there
is a combinatorial formula in terms of the integers qrj , whilst the individual Hodge
numbers (h1,1, h2,1) involve some non-trivial adjunction and sequence-chasing, which
luckily had been performed for us and occupied a sizeable portion of the exposition
in the Bestiary [2]. Our warm-up exercise is to machine-learn this result.
Again, we set up a list of training rules (padded configuration matrix → h1,1), a
typical entry, adhering to our example in Part (a) of Figure 2, would be
1 1 0 0 0 0 0 0
1 0 1 0 0 0 0 0
0 0 0 1 0 1 0 0
0 0 0 0 1 0 1 0
0 0 0 0 0 0 2 0
0 1 1 0 0 0 0 1
1 0 0 0 0 1 1 0
0 0 0 1 1 0 0 1
0
0 0

12×15
−→ 6 ; (3.5)
17
this is a CY3 of Hodge numbers (h1,1, h2,1) = (8, 22) and hence Euler characteristic
χ = −28. This training list we shall call dd.
We now set up the neural network as
net = NetChain[{LinearLayer[1000], ElementwiseLayer[LogisticSigmoid],
LinearLayer[100], ElementwiseLayer[Tanh], SummationLayer[]},
"Input" -> {12, 15}];
(3.6)
We specified the input as {12,15} and have allowed a quite large linear layer of 1000
weights at the input level to allow for parameters. Next, we train the network with
the list dd, allowing for 1000 iterations to reduce error:
net = NetTrain[net, dd, MaxTrainingRounds -> 1000];
Despite these sumptuous choice of parameters, the training takes about a mere 8
minutes, associating an optimized real number to each configuration (image) and a
simple check of the round-up against actual h1,1
Select[Table[{Round[net[dd[[i, 1]]]], dd[[i, 2]]}, {i, 1, 7890}],
#[[1]] != #[[2]] &] // Length
returns 7, meaning that our network has been trained to an accuracy of (7890 −
7)/7890 ' 99.91% in under 10 minutes!
Thus, we have demonstrated the power of the network as a full classifier, almost
completely learning the Hodge data for CICYs. What about the network as a predic-
tor, which is obviously a more salient question? Let us repeat the methodology above,
viz., to train with a portion of the input data, and see whether it could extrapolate
to the full dataset. Suppose the neural network sees only the first 5000 of dd, which
is particularly pertinent were the classification not complete and which, though not
here, would be the case with most problems in the business.
Using the above neural network takes about 6 minutes. Then, checking against
the full dataset comprising of configurations/images the MLP has never before seen,
18
(a) (b)
Figure 3: We realize the set of 921,497 CICY4s as 16×20 matrices (bottom-right padding with
zeros where necessary) with entries in {0, 1, 2, 3, 4, 5, 6}. Each is then a pixelated images with 7
shades of colour with 0 being, say, purple. In (a), we average over all such matrices component-
wise, and draw the “average” CICY4, in contrast to part (a) of Figure 2. For reference, we
include, in part (b), the histogram of the (now four) Hodge numbers: (h1,1, h2,1, h3,1, h2,2);
because of the spread in values, we perform a log-log plot.
we find 1808 discrepancies. Considering (1) that we have only trained the network
for a mere 6 minutes, (2) that it has seen only a little over half of the data, (3) that
it is a rather elementary MLP with only 5 forward layers, and (4) that the variation
of the output is integral ranging from 0 to 19, with no room for continuous tuning,
achieving 77% accuracy with so little effort is quite amazing.
3.2.1 Four-folds
The generalization from CICY 3-folds to 4-folds, with (3.4) altered mutatis mutandis
(e.g., making K =
m∑
r=1
nr − 4), has more recently been accomplished [27] and the
dataset is, understandably, much larger. Here, we have 921,497 configuration matrices
of size 1× 1 (corresponding to the sextic [5|6]) up to 16 rows and 20 columns, taking
values in 0 to 6, with Euler characteristic ranging from 0 to 2610. The computation
took an impressive 7487 CPU hours, almost 1 entire year if on a single core.
As before, we can consider each CICY4 as an 16 × 20 pixelated image, padding
with zeros where necessary, with 7 shades of colour. We thus have about 1 million
images to learn from. As above, the Euler characteristic has a simple combinatorial
formula in terms of the qrj and it is also an alternating sum in the 4 non-trivial
Hodge numbers (h1,1, h2,1, h3,1, h2,2). In Figure 3, we plot the average over all the
images by component-wise arithmetic mean in part (a) and in part(b), for reference,
we show the distribution of the four Hodge numbers on a log-log plot. Let us try
19
to deep-learn these Hodge numbers. With the same network as in (3.6), but with
"Input" -> {16,20}, we purposefuly take incomplete knowledge by using only the
first 20,000 data points as training data. For h1,1, which ranges between 1 to 24 in the
training set, we achieve almost complete accuracy (22 discrepancies) within about an
hour of deep-learning.
Encouraged, we try to extrapolate: testing against the first 30,000 of the full
dataset, which takes about 30 minutes, we find 23,521 matches, meaning that we
have achieved 78.4% accuracy within 2 hours, much less than the time to compute
h1,1 from first principles. Similarly, for h2,1, which ranges from 0 to 33, we achieve
similar figures. The remaining Hodge numbers, h3,1 and h2,2 have a much wider
spread, taking values in [21, 426] and [204, 1752] respectively, would require more
than 20,000 to train to greater confidence.
There are many more properties of CICYs, and indeed of CY manifolds in general,
comprising an ongoing industry, from identifying torus or K3 fibration structure for
F-theory to adding orientifolds, which we could deep-learn. For now, let us move
onto a closely related subject which has over the last 2 decades vastly generalized the
computation of Hodge numbers.
3.3 Bundle Cohomology
The subject of vector bundle cohomology has, since the so-named “generalized em-
bedding” [1] of compactifying the heterotic string on smooth Calabi-Yau threefolds
X endowed with a (poly-)stable holomorphic vector bundle V , become one of the
most active dialogues between algebraic geometry and theoretical physics. The re-
alization [9] that the theoretical possibility of [1] can be concretely achieved by a
judicious choice of (X, V ) to give the exact MSSM spectrum induced much activity
in establishing relatively large datasets to see how often this might occur statisti-
cally [11,18,22,24,31], culminating in [25,26] which found some 200 out of a scan of
1010 bundles which have exact MSSM content.
Upon this vast landscape let us take an insightful glimpse by taking the dataset
of [31], which are SU(n) vector bundles V on elliptically fibred CY3. By virtue of
a spectral-cover construction [4, 30], these bundles are guaranteed to be stable and
hence preserves N = 1 supersymmetry in the low-effective action, together with GUT
20
gauge groups E6, SO(10) and SU(5) respectively for n = 3, 4, 5.
We take the base of the elliptic fibration - of which there is a finite list [29] - as
the r-th Hirzebruch surface (r = 0, 1, . . . , 12 denoting the inequivalent ways which
P1 can itself fibre over P1 to give a complex surface), in which case the stable SU(n)
bundle is described by 5 numbers (r, n, a, b, λ), with (a, b) ∈ Z+ and λ ∈ Z/2 being
coefficients which specify the bundle via the spectral cover. This ordered 5-vector
will constitute our neural input. The database of viable models were set up in [31],
viable meaning that the bundle-cohomology groups of V are such that
h0(X, V ) = h3(X, V ) = 0 ,
∣∣h1(X, V )− h2(X, V )∣∣ ≡ 0 (mod3) , (3.7)
where the first is a necessary condition for stability and the second, that the GUT
theory has the potential to allow for 3 net generations of particles upon breaking
to MSSM by Wilson lines. Over all the Hirzebruch-based CY3, 14,264 models were
found; a sizeable play-ground.
Suppose we wish the output to be a 2-vector, indicating (I) what the gauge group
is, as denoted by n, and (II) whether there are more generations than anti-generations,
as denoted by the sign of the difference h1(X, V ) − h2(X, V ); this is clearly a phe-
nomenologically interesting question. The fact that the network needs to produce a
vector output need not worry us; we replace the last summation layer of (3.6) by a
linear layer of matrix size 2:
net = NetChain[{LinearLayer[1000], ElementwiseLayer[LogisticSigmoid],
LinearLayer[100], ElementwiseLayer[Tanh], LinearLayer[2]},
"Input" -> {5}];
With 1000 training rounds as before, and with the dataset consisting of replacements
of the form
(r, n, a, b, λ)→ (n, Sign(h1(X, V )− h2(X, V )))
(note that we purposefully kept n common to both input and output as a cross-
check and to see how the network responds to vector output), in about 10 minutes
(the vector output and thus the last linear layer slows the network by a factor of 2
compared to previous trainings), we achieve 100% accuracy (i.e., the neural network
has completely learnt the data). Training with partial data, say 8000 points, a little
21
over half, achieves 68.9% predicative accuracy over the entire set.
Similarly, we could query whether h1(X, V )−h2(X, V ) is even or odd, which is also
an important question because it dictates the parity of the size of the fundamental
group (as a finite discrete symmetry group) of the CY3, which is a difficult issue to
settle theoretically. Using the above network, a 66% accuracy can be attained in 10
minutes. This shows that the pattern here is indeed more difficult to recognize as
compared to the sign, as is consistent with expectations. There are endless variations
to this type of questions and deep-learning and we shall discuss some pertinent ones
in the prospectus; for now, let us match onward to further available data.
3.4 Aspects of the KS Dataset
The largest dataset in Calabi-Yau geometry, and indeed to our knowledge in pure
mathematics, more than such online resources as modular forms or dessins d’enfants,
is the Kreuzer-Skarke list of reflexive (convex lattice) polytopes [5]. There are 4319
in dimension 3 and 473,800,776 in dimension 4. Much work, still ongoing, has been
focused on the latter because the anticanonical divisor within the associated toric
variety defines a smooth Calabi-Yau threefold [20, 21]. We will leave explorations
and deep-learning of this formidable set to future work. For now, let us focus on
the 4319 reflexive lattice polyhedra which has recently been harnessed for certain
Sasaki-Einstein volume conjectures [40].
First, we can represent the data in a conducive way. Each polyhedron ∆ consists
of a list of integer vertices as 3-vectors (of which ∆ is the convex hull); there is a
single interior lattice point (0, 0, 0) and we can record all the n− 1 lattice points on
the boundary facets. Hence, each ∆ is a 3 × n integer matrix M , with one column
being (0, 0, 0). It turns out that n ranges from 5 to 39 (the 5 clearly including
the lattice tetrahedron enclosing the origin), and the entries of M take values in
{−21,−20, . . . , 5, 6}.
Hence, each ∆ is a 3× 39 pixelated image (right padding where necessary), with
28 shades of colour. We show a random sample (number 2000 in KS dataset) in parts
(a) of Figure 4. In part (b), because we now have a mixture of positive and negative
entries to the matrix, we compute the square-root of the component-wise sum of the
squares to the 4319 configurations, giving an idea of the “average” appearance of the
22
reflexive polyhedra.
(a)
(b)
Figure 4: We realize the set of 4319 reflexive polyhedra as 3× 39 matrices (right padding with
zeros where necessary) with entries in {−21,−20, . . . , 5, 6}. Each is then a pixelated image
with 28 shades of colour with 0 being, say, purple. In (a), we show a typical sample; in part
(b), we show the average by component-wise root mean square.
To each ∆ we can associate two different geometries:
• a compact smooth Calabi-Yau 2-fold, or K3-surface K, being a hypersurface
as the anti-canonical divisor in the Fano toric variety X(∆) constructed from
the polytope. These are algebraic K3 surfaces so the Hodge numbers are all
the same. The Picard number Pic(K), one the other hand, is a non-trivial
property and has been computed [5]. The reader is referred to Fig. 16 of [17]
for a distribution of these Picard numbers;
• a non-compact affine Calabi-Yau 4-fold which is the total space of the anti-
canonical bundle over X(∆); this Calabi-Yau space is itself a real cone over a
compact Sasaki-Einstein 7-manifold Y . The various Z-minimized volumes V (Y)
of Y , normalized with respect to S7, are algebraic numbers computed in [40]
(q.v. ibid., Fig. 10 for a distribution of these volumes);
We will now deep-learn Pic(K) and V (Y) with respect to our images. The data
size here is relatively small compared to the previous so once again we will use a
binary function for the volume, say, if V (Y) > 200 then 1, and 0 otherwise. Using the
same simple network as (3.4), but with input size 3× 39, we achieve 57% accuracy in
about 5 mins. Similarly, for the Picard numbers, which range from 0 to 19, the direct
learning can achieve 53% accuracy in equal time, and due to the discrete nature of
the output, had we chosen a step function, say 1 if Pic(Y) > 10 and 0 otherwise,
then a 59% accuracy is attained. Of course, these figures are not as impressive as the
previous case studies, but this is precisely due to the relative paucity of data: less
than 5000. As one would expect, deep-learning must be accompanied by “big data”.
23
A plethora of such big data we certainly have. The 473 million reflexive polytopes
in dimension 4 is the ne plus ultra of our landscape data. In fact, because of the
different possibilities of triangulations, the number of Calabi-Yau threefolds obtained
therefrom is expected to be many orders of magnitude larger than this and is still very
much work in progress. To deep-learn this data is ipso facto a significant endeavour
which we shall leave for a major future undertaking.
For now, let us take a sample of 10,000 from the peak-distribution [17] of Euler
characteristic zero, i.e., self-mirror, manifolds. Here, the configuration can be padded
into 4×21 integer matrices taking integer values in [−14, 9] and the individual Hodge
numbers h1,1 = h2,1 ∈ {14, 15, 16, 17, 18}. This is therefore a well-suited classifier
problem, with input pixelation of 4× 21 with 24 shade and 5-channel output. Again,
we train with partial data, say the first 4000, and then test against the full 10,000
to see its predictive power. In under 5 minutes, the neural network (with modified
input dimension) in (3.6), gives 61% accuracy in predicting the full-set and 78% in
fitting the 4000. Increasing, say, training time or linear-layer size, or adding layers
will undoubtedly increase this already-reassuring performance.
3.5 Quiver Gauge Theories
As a parting example, having been emboldened by our venture, let us tackle affine
varieties in the context of quiver representations. Physically, these correspond to
world-volume gauge theories coming from D-brane probes of geometric singularities
in string theory, as well as as the space of vacua for classes of supersymmetric gauge
theories in various dimension; they have been data-mined since the early days of
AdS/CFT (cf. [33, 34]). When the geometry concerned is an affine toric Calabi-Yau
variety, the realization of brane-tiling [35] has become the correct way to understand
the gauge theory and since then databases have begun to be compiled [36,37].
As far as the input data is concerned, however, it is straight-forward; it consists
of a quiver (as a directed graph, with label 1 as dimension vector for simplicity) and
a relation on the quiver imposed by the Jacobian of a polynomial super-potential
24
(q.v. [11] for a rapid review). For example, the following is a typical quiver:
1
23
W = X12.φ2.X21 −X21.φ1.X12 +X23.φ3.X32−
−X32.φ2.X23 + φ1.X13.X31 − φ3.X31.X13 .
(3.8)
In the above, there are 3 nodes in the quiver and we have denoted arrows a → b as
Xab if a 6= b and as φa if it is an arrow joining node a to itself (for a, b = 1, 2, 3).
There are thus a total of 9 arrows, which can be interpreted as space-times fields in
the gauge theory. The superpotential W is here a cubic polynomial in the 12 arrows,
whose Jacobian ∂W imposes the set of relations. The representation variety is given
as the GIT quotient of ∂W by the gauge-fixing conditions by the Eulerian cycles in
the quiver, and is here the affine variety C × C2/(Z/3Z) which is a local calabi-Yau
threefold, being a direct product of C and an orbifold surface singularity of type A.
We can succinctly encode the above information into two matrices:
1. D-term matrix QD, which comes from the kernel of the incidence matrix d of
the quiver, a 3× 12 matrix each column of which corresponds to an arrow with
−1 as head and +1 as tail and 0 otherwise;
2. F-term matrix QF , a 2×12 matrix each column of which documents where and
with what exponent the field corresponding to the arrow appears in ∂W .
Concatenating QD and QF gives the so-call total charge matrix Qt of the moduli
space as a toric variety (q.v. §2 of [34] for the precise procedure). For the above
example, the incidence matrix d, the Jacbian of the superpotential, and thence the
25
total charge Qt matrices are
d =
 0 −1 −1 1 0 0 1 0 00 1 0 −1 0 −1 0 1 0
0 0 1 0 0 1 −1 −1 0

∂W =

x3x7 − x2x4, x4x5 − x1x4,
x2x5 − x1x2, x2x4 − x6x8,
x1x7 − x7x9, x1x3 − x3x9,
x8x9 − x5x8, x6x9 − x5x6,
x6x8 − x3x7
 Qt =

QD
4 −1 −2 0 −1 0 0 0 0
2 −2 −1 0 1 0 0 0 0
QF
2 −1 −1 0 −1 0 0 1 0
1 0 −1 0 −1 0 1 0 0
1 −1 0 0 −1 1 0 0 0
1 −1 −1 1 0 0 0 0 0

(3.9)
where we have indexed the 9 arrows, in accord with the columns of d, as xi=1,...,9.
The combinatorics and geometry of the above is a long story spanning a lustrum
of research to uncover followed by a decade of still-ongoing investigations. However,
for our present purposes, we will only consider the theories to be data for the neural
network to learn. In the first database of [36], a host of examples (albeit having many
inconsistent theories as D-brane world-volume theories) were tabulated. A total of 375
quiver theories much like the above were catalogued (a catalogue which has recently
been vastly expanded in [37], which also took care of ensuring physicality). Though
not very large, this gives us a playground to test some of our ideas. The input data is
the total charge matrix Qt, the maximal of whose number of rows and columns are,
respectively 33 and 36 , and all taking values in {−3,−2, . . . , 3, 4}.
Now, suppose we wish to know the number of points of the toric diagram associated
to the moduli space, which is clearly an importantly quantity. In principle, this
can be computed: the integer kernel of Qt should give a matrix whose columns are
the coordinates of the toric diagram, with multiplicity. Such multiplicity had been
realized, via the brane-tiling story, to be associated to the perfect matchings of the
bipartite tiling. Nonetheless, one could train the network without any knowledge of
this (where the functions pad[ ] and the list Tilings are self-explanatory):
data = Table[pad[("Qt" /. Tilings[[i]])] ->
Length[Union["Points" /. ("Diag" /. Tilings[[i]])]],
{i, 1, Length[Tilings]}];
ClearAll[net];
26
net = NetChain[{LinearLayer[1000], ElementwiseLayer[LogisticSigmoid],
LinearLayer[100], ElementwiseLayer[Tanh], SummationLayer[]},
"Input" -> {33, 36}];
net = NetTrain[net, data, MaxTrainingRounds -> 1000];
Training with our network with the full list achieves, in under 5 minutes, 99.5%
accuracy.
3.5.1 A Hypothetical Input
Now, let us attempt something more drastic. The step to go from d to Qd is expen-
sive and in fact constituted the major hurdle to understanding D-brane gauge theories
before tiling/dimer-technology; it involves finding Hilbert basis of lattice points and
dual cones in very high dimensions. Even with the latest understanding and imple-
mentation of tilings, finding perfect matchings is still non-trivial [37]. Yet, we know
that the input data d and QF , which can be written down rapidly from definition,
must at some level determine the output. This is thus a perfect problem adapted to
machine learning.
Let us create a matrix, of size 41 × 52, which will accommodate the stacking of
d onto QF , right padding with 0 as necessary. It should again be emphasized that
computationally, this matrix has no meaning with regard to the toric algorithms
developed over the years. The entries of the matrix take integer values in [−2, 3] and
for us, this is formally a 41 × 52 pixelated image with 6 shades of colour. Thus a
typical data would be of the form (say, for the C× C2/(Z/3Z) example above),
−→ 6 , (3.10)
with magenta here denoting 0. Training with the above network still achieves 98.0%
accuracy in learning the entire dataset in less than 5 minutes. Even with 200 ran-
dom samples, the network can predict to an accuracy of 66.4% in minutes, which is
expected to increase with training time as well as sample size.
27
3.6 A Reprobate
Lest the readers’ optimism be elevated to unreasonable heights by the string of suc-
cesses with the neural networks, it is imperative that we be aware of deep-learning’s
limitations. We therefore finish with a sanity check that a neural network is not some
omnipotent magical device, nor an oracle capable of predicting any pattern. An ex-
ample which must be doomed to failure is the primes (or, for that matter, the zeros of
the Riemann zeta function). Indeed, if a neural network could learn some unexpected
pattern in the primes, this would be a rather frightening prospect for mathematics.
Let us thus take our reprobate example to be the following simple dataset
dd = Table[ i -> Prime[i], {i, 1, 5000} ];
Training with our neural network (3.6) and counting discrepancies as always
Select[Table[Round[net[dd[[i, 1]]]]-dd[[i, 2]], {i, 1, 5000}],# == 0 &]//Length
gives 5 after some 10 minutes. That is, of the first 5000 primes, the network has
learnt only 5.
Perhaps having more sophisticated input would help? We can attempt with a
data-structure like
dd = Table[ Table[If[j <= i, Prime[j], 0], {j, 1, 5000}] -> Prime[i + 1],
{i, 1, 5000}];
so that the input is now a zero-right-padded vector associating the n-th prime to the
list of all its precedents. Again, we still achieve no better than a 0.1% accuracy.
Our neural network is utterly useless against this formidable challenge; we are
better off trying a simple regression against some n log(n) curve, as dictated by the
prime number theorem. This is a sobering exercise as well as a further justification
of the various case studied above, that it is indeed meaningful to deep-learn the
landscape data and that our visual represenation of geometrical configurations is an
efficient methodology.
28
4 Conclusions and Prospectus
There are many questions in theoretical physics, or even in pure mathematics, for
which one would only desire a qualitative, approximate, or partial answer, and whose
full solution would often either be beyond the current scope, conceptual or compu-
tational, or would have taken considerable effort to attain. Typical such questions
could be “what is the likelihood of finding a universe with three generations of particles
within the landscape of string vacua or inflationary scenarios”, or “what percentage of
elliptic curves have L-functions with prescribed poles”? Attempting to address these
profound questions have, with the ever-increasing power of computers, engendered
our community’s version of “big data”, which though perhaps humble compared to
some other fields, do comprise, especially considering the abstract nature of the prob-
lems at hand, of significant information often resulting from intense dialogue between
teams of physicists and mathematicians for many years.
On the still-ripening fruits of this labour the philosophy of the last decade or so,
particularly for the string phenomenology and computational geometry community,
has been to (I) create larger and larger datasets and (II) scan through them to test
the likelihood of certain salient features. Now that the data is augmenting in size and
availability, it is only natural to follow the standard procedures of the data-mining
community. In this paper, we have proposed the paradigm of applying deep-learning,
via neural networks, such data. The purpose is twofold, the neural network can act
as
Classifiers by association of input configuration with a requisite quantity, and
pattern-match over a given dataset;
Predictors by extrapolating to hithertofore unencountered configurations, having
deep-learnt a given (partial) dataset.
This is, of course, the archetypal means by which Google deep-learns the internet
and hand-writing recognition software adapts to the reader’s esoteric script. Indeed,
this is why neural networks are far more sophisticated than usual logistic regression
models where a single analytic function with a set of given parameters is used to “best-
fit”. The network in general consists of a multitude of such functions, not necessarily
analytic but rather algorithmic, which mutually interact and recursively optimize.
29
It is intriguing that by going through a wealth of concrete examples from what
we have dubbed landscape data, some of whose creation the author had been a
part, this philosophy remains enlightening. Specifically, we have taken test cases
from a range of problems in mathematical physics, algebraic geometry and repre-
sentation theory, such as Calabi-Yau datasets, classification of stable vector bundles,
and catalogues of quiver varieties and brane tilings. We subsequently saw that even
relatively simple neural networks like the multi-layer perceptron can deep-learning to
extraordinary accuracy.
In some sense, this is not surprising, there is underlying structure to any classifi-
cation problem in our context, which may not be manifest. Indeed, what is novel is
to look at the likes of a complete-intersection Calabi-Yau manifold or an integer poly-
tope as a pixelated image, no different from a hand-written digit, for whose analysis
machine-learning has become the de facto method and a blossoming industry.
The landscape data, be they work of human hands, elements of Nature
or conceptions of Mathematics, have inherent structure, sometimes more
efficiently uncovered by AI via deep-learning.
Thereby, one can rapidly obtain results, before embarking on finding a reductionist
framework for a fundamental theory explaining the results or proceed to intensive
computations from first principles. This paradigm is especially useful when classifica-
tion problems become intractable, which is often the case, here a pragmatic approach
would be to deep-learn partial classification results and predict future outcome (for
this, the predictive accuracy becomes an important issue which we will address mo-
mentarily).
Under this rubric, the possibilities are endless. Several immediate and pertinent
directions spring to mind.
• The largest dataset in algebraic geometry/string theory is the Kreuzer-Skarke
list [5, 20, 21] of reflexive polytopes in dimension 4 from each of which many
Calabi-Yau manifolds (compact and non-compact) can be constructed. To dis-
cover hidden patterns is an ongoing enterprise [14, 17] and the help of deep-
learning would be a most welcome one. Moreover, it is not known how many
compact CYs can arise from inequivalent triangulations of the polytopes and a
30
systematic scan had only been done to small Hodge numbers [21]; we could use
the neural network’s predictive power to extrapolate to the the total number of
triangulations, and hence estimate the total number of Calabi-Yau threefolds.
• The issue of bundle stability and cohomology is a central problem in heterotic
phenomenology as well as algebraic geometry. In many ways, this is a perfect
problem for machine-learning: the input is usually encodable into an integer
matrix or a list of matrices, representing the coefficients in an expansion into
effective divisor classes, the output is simply a vector of integers (in the case of
cohomology) or a binary answer (with respective to a given Kahler class, the
bundle is either stable or not).
The brute-force way involves the usual spectral sequences and determining all
coboundary maps or finding the lattices of subsheafs, expensive by any stan-
dards. In the case of stability checking, this is an enormous effort to arrive at
a yes/no query. With increasing number of explicitly known examples of stable
bundles constructed from first principles, to deep-learn this and then estimate
the probability of a given bundle being stable would be tremendous time-saver.
• Whilst we could continue to list more prospective projects, there are theoretical
issues which have arisen in all the above. First, there is a matter of convergence:
how does increasing the complexity of the neural network or its training time
decrease the error. There are detailed asymptotic studies of this [42–44] which
should be taken into consideration. Second, every prediction must be accompa-
nied by a confidence. The built-in Classify[ ] command gives a probability
for each extrapolated data point. For our neural networks, we have done a naive
comparison to untrained data to get an idea but, especially when dealing the
terra incognita of yet unclassfied data, we need to specify and investigate the
confidence level.
For example, an ideal statement would be: here is a newly constructed mani-
fold, we bearly know its properties and computing them from scratch would be
difficult, however, based on similar manifolds classied before whose landscape
we have deep-learnt, we can say with considence a that its Betti numbers are
b1, b2, . . ..
We hope the reader has been persuaded by not only the scope but also the feasi-
bility of our propsed paradigm, a paradigm of increasing importance in an Age where
even the most abstruse of mathematics or the most theoretical of physics cannot avoid
31
compilations of and invesigations on perpetually growing datasets. The case studies
of deep-learning such landscape of data here presented are but a few nuggets in an
unfathomably vast gold-mine, rich with new science yet to be discovered.
Acknowledgments
Catharinae Sanctae Alexandriae adque Majorem Dei Gloriam.
I am grateful to V.Jejjala, L. Motl (and his kind words), B. Nelson, G. Sankaran,
R. Schimmrigk, R.-K. Seong and R. Thomas for comments on the first version of the
paper. Indeed, I am indebted to the Science and Technology Facilities Council, UK,
for grant ST/J00037X/1, the Chinese Ministry of Education, for a ChangJiang Chair
Professorship at NanKai University, and the city of Tian-Jin for a Qian-Ren Award.
Above all, I thank Merton College, Oxford for continuing to provide a quiet corner
of Paradise for musings and contemplations.
References
[1] P. Candelas, G. T. Horowitz, A. Strominger and E. Witten, “Vacuum Configurations
for Superstrings,” Nucl. Phys. B 258, 46 (1985).
[2] P. Candelas, A. M. Dale, C. A. Lutken, R. Schimmrigk, “Complete Intersection Calabi-
Yau Manifolds,” Nucl. Phys. B 298, 493 (1988).
P. Candelas, C. A. Lutken, R. Schimmrigk, “Complete Intersection Calabi-Yau Mani-
folds. 2. Three Generation Manifolds,” Nucl. Phys. B 306, 113 (1988).
M. Gagnon, Q. Ho-Kim, “An Exhaustive list of complete intersection Calabi-Yau man-
ifolds,” Mod. Phys. Lett. A 9 (1994) 2235.
T. Hubsch., “Calabi-Yau Manifolds: a Bestiary for Physicists,” World Scientific, 1992.
ISBN 10: 981021927X
[3] P. Candelas, M. Lynker, R. Schimmrigk, “Calabi-Yau Manifolds in Weighted P(4),”
Nucl. Phys. B 341, 383 (1990).
[4] A. Grassi, D. R. Morrison, “Group representations and the Euler characteristic of
elliptically fibered Calabi-Yau threefolds,” math/0005196 [math-ag].
R. Y. Donagi, “Principal bundles on elliptic fibrations,” Asian J. Math 1, 214 (1997)
[alg-geom/9702002].
[5] A. C. Avram, M. Kreuzer, M. Mandelberg, H. Skarke, “The Web of Calabi-Yau hy-
persurfaces in toric varieties,” Nucl. Phys. B 505, 625 (1997) [hep-th/9703003]. Victor
32
V. Batyrev, Lev A. Borisov “On Calabi-Yau Complete Intersections in Toric Varieties”,
arXiv:alg-geom/9412017
M. Kreuzer, H. Skarke, “Reflexive polyhedra, weights and toric Calabi-Yau fibrations,”
Rev. Math. Phys. 14, 343 (2002) [math/0001106 [math-ag]].
[6] S. Kachru, R. Kallosh, A. D. Linde and S. P. Trivedi, “De Sitter vacua in string theory,”
Phys. Rev. D 68, 046005 (2003) doi:10.1103/PhysRevD.68.046005 [hep-th/0301240].
[7] C. Vafa, “The String landscape and the swampland,” hep-th/0509212.
[8] F. Gmeiner, R. Blumenhagen, G. Honecker, D. Lust, T. Weigand, “One in a billion:
MSSM-like D-brane statistics,” JHEP 0601, 004 (2006) [hep-th/0510170].
[9] V. Braun, Y. -H. He, B. A. Ovrut, T. Pantev, “The Exact MSSM spectrum from string
theory,” JHEP 0605, 043 (2006) [hep-th/0512177].
[10] P. Candelas, X. de la Ossa, Y. -H. He, B. Szendroi, “Triadophilia: A Special Corner in
the Landscape,” Adv. Theor. Math. Phys. 12, 429 (2008) [arXiv:0706.3134 [hep-th]].
[11] Y. H. He, “Calabi-Yau Geometries: Algorithms, Databases, and Physics,” Int. J. Mod.
Phys. A 28, 1330032 (2013) [arXiv:1308.0186 [hep-th]].
[12] Y.-H. He, P. Candelas, A. Hanany, A. Lukas, B. Ovrut, Ed. Computational Algebraic
Geometry in String, Gauge Theory. Special Issue, Advances in High Energy Physics,
Hindawi publishing,, 2012, doi:10.1155/2012/431898.
[13] V. Braun, “Toric Elliptic Fibrations and F-Theory Compactifications,” JHEP 1301,
016 (2013) [arXiv:1110.4883 [hep-th]].
[14] W. Taylor, “On the Hodge structure of elliptically fibered Calabi-Yau threefolds,”
JHEP 1208, 032 (2012) [arXiv:1205.0952 [hep-th]].
[15] A. P. Braun, J. Knapp, E. Scheidegger, H. Skarke and N. O. Walliser, “PALP - a User
Manual,” arXiv:1205.4147 [math.AG].
[16] P. Candelas, A. Constantin, H. Skarke, “An Abundance of K3 Fibrations from Poly-
hedra with Interchangeable Parts,” arXiv:1207.4792 [hep-th].
[17] Y. H. He, V. Jejjala and L. Pontiggia, “Patterns in Calabi-Yau Distributions,”
arXiv:1512.01579 [hep-th].
[18] P. Candelas, R. Davies, “New Calabi-Yau Manifolds with Small Hodge Numbers,”
Fortsch. Phys. 58, 383 (2010) [arXiv:0809.4681 [hep-th]].
[19] W. A. Stein et al., Sage Mathematics Software (Version ), The Sage Development
Team, 2017, http://www.sagemath.org.
[20] Calabi Yau data, hep.itp.tuwien.ac.at/~kreuzer/CY/
[21] R. Altman, J. Gray, Y. H. He, V. Jejjala and B. D. Nelson, “A Calabi-Yau Database:
Threefolds Constructed from the Kreuzer-Skarke List,” JHEP 1502, 158 (2015)
[arXiv:1411.1418 [hep-th]].
Toric Calabi-Yau Database: www.rossealtman.com
[22] Y. H. He, S. J. Lee and A. Lukas, “Heterotic Models from Vector Bundles on Toric
Calabi-Yau Manifolds,” JHEP 1005, 071 (2010) [arXiv:0911.0865 [hep-th]].
33
Y. H. He, M. Kreuzer, S. J. Lee and A. Lukas, “Heterotic Bundles on Calabi-Yau
Manifolds with Small Picard Number,” JHEP 1112, 039 (2011) [arXiv:1108.1031 [hep-
th]].
[23] L. B. Anderson, F. Apruzzi, X. Gao, J. Gray and S. J. Lee, “A new construc-
tion of CalabiYau manifolds: Generalized CICYs,” Nucl. Phys. B 906, 441 (2016)
[arXiv:1507.03235 [hep-th]].
[24] L. B. Anderson, Y. H. He and A. Lukas, “Heterotic Compactification, An Algorithmic
Approach,” JHEP 0707, 049 (2007) [hep-th/0702210 [HEP-TH]].
[25] L. B. Anderson, J. Gray, A. Lukas and E. Palti, “Heterotic Line Bundle Standard
Models,” JHEP 1206, 113 (2012) [arXiv:1202.1757 [hep-th]].
[26] L. B. Anderson, A. Constantin, J. Gray, A. Lukas and E. Palti, “A Comprehensive Scan
for Heterotic SU(5) GUT models,” JHEP 1401, 047 (2014) [arXiv:1307.4787 [hep-th]].
[27] J. Gray, A. S. Haupt and A. Lukas, “All Complete Intersection Calabi-Yau Four-Folds,”
JHEP 1307, 070 (2013) [arXiv:1303.1832 [hep-th]].
[28] P. Gao, Y. H. He and S. T. Yau, “Extremal Bundles on CalabiYau Threefolds,” Com-
mun. Math. Phys. 336 (2015) no.3, 1167 [arXiv:1403.1268 [hep-th]].
[29] D. R. Morrison, C. Vafa, “Compactifications of F theory on Calabi-Yau threefolds. 1
& 2,” Nucl. Phys. B 473, 74 (1996) [hep-th/9602114]; Nucl. Phys. B 476, 437 (1996)
[hep-th/9603161].
[30] R. Friedman, J. Morgan, E. Witten, “Vector bundles and F theory,” Commun. Math.
Phys. 187, 679 (1997) [hep-th/9701162].
[31] M. Gabella, Y. H. He and A. Lukas, “An Abundance of Heterotic Vacua,” JHEP 0812,
027 (2008) [arXiv:0808.2142 [hep-th]].
[32] M. Cveti, J. Halverson, D. Klevers and P. Song, “On finiteness of Type IIB compactifi-
cations: Magnetized branes on elliptic Calabi-Yau threefolds,” JHEP 1406, 138 (2014)
[arXiv:1403.4943 [hep-th]].
[33] A. Hanany and Y. H. He, “NonAbelian finite gauge theories,” JHEP 9902, 013 (1999)
[hep-th/9811183].
–, “A Monograph on the classification of the discrete subgroups of SU(4),” JHEP 0102,
027 (2001) [hep-th/9905212].
[34] B. Feng, A. Hanany and Y. H. He, “D-brane gauge theories from toric singularities
and toric duality,” Nucl. Phys. B 595, 165 (2001) [hep-th/0003085].
[35] S. Franco, A. Hanany, D. Martelli, J. Sparks, D. Vegh and B. Wecht, “Gauge theories
from toric geometry and brane tilings,” JHEP 0601, 128 (2006) [hep-th/0505211].
[36] J. Davey, A. Hanany and J. Pasukonis, “On the Classification of Brane Tilings,” JHEP
1001, 078 (2010) [arXiv:0909.2868 [hep-th]].
[37] S. Franco, Y. H. He, C. Sun and Y. Xiao, “A Comprehensive Survey of Brane Tilings,”
arXiv:1702.03958 [hep-th].
[38] J. Davey, A. Hanany, N. Mekareeya and G. Torri, “M2-Branes and Fano 3-folds,” J.
34
Phys. A 44, 405401 (2011) [arXiv:1103.0553 [hep-th]].
[39] A. Hanany and R. K. Seong, “Brane Tilings and Reflexive Polygons,” Fortsch. Phys.
60, 695 (2012) [arXiv:1201.2614 [hep-th]].
[40] Y. H. He, R. K. Seong and S. T. Yau, “Calabi-Yau Volumes and Reflexive Polytopes,”
arXiv:1704.03462 [hep-th].
[41] S. Franco, S. Lee, R. K. Seong and C. Vafa, “Brane Brick Models in the Mirror,” JHEP
1702, 106 (2017) [arXiv:1609.01723 [hep-th]].
[42] J. Herz, A. Krough, R. G. Palmer, “Introduction to the Theory of Neural Computa-
tion”, Addison-Wesley, 1991.
[43] M. H. Hassoun, “Fundamentals of Artificial Neural Networks”, MIT Press, 1995.
[44] S. Haykin, “Neural Networks: A Comprehensive Foundation”, Second Edition, Macmil-
lan, New York, 1999.
[45] J. A. Freeman, “Simulating Neural Networks with Mathematica”, Addison-Wesley,
1994.
[46] Wolfram Research, Inc.,Mathematica, Version 11.1, Champaign, IL (2017).
[47] Mathematica v11: Neural Networks, https://mathematica.stackexchange.com/
questions/124977/
[48] K. J. C. Leney [ATLAS Collaboration], “A Neural-Network Clusterisation Algorithm
for the ATLAS Silicon Pixel Detector,” J. Phys. Conf. Ser. 523, 012023 (2014).
[49] C. P. Novaes, A. Bernui, I. S. Ferreira and C. A. Wuensche, “A Neural-Network based
estimator to search for primordial non-Gaussianity in Planck CMB maps,” JCAP 1509,
no. 09, 064 (2015) [arXiv:1409.3876 [astro-ph.CO]].
[50] A. J. Ballard, R. Das, S. Martiniani, D. Mehta, L. Sagun, J. Stevenson, D. Wales,
“Perspective: Energy Landscapes for Machine Learning”, arXiv:1703.07915.
[51] W. C. Gan and F. W. Shu, “Holography as deep-learning,” arXiv:1705.05750 [gr-qc].
[52] Deep-Learning and Physics Conference: http://kabuto.phys.sci.osaka-u.ac.jp/
~koji/workshop/tsrp/Deep_Lerning.html
35

