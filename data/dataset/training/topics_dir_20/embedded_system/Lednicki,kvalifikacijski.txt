Internal publication of the Faculty of Electrical Engineering and Computing, not for distribution
Support for Hardware Devices in Component 
Models for Embedded Systems
Luka Lednicki
Faculty of Electrical Engineering and Computing
University of Zagreb, Croatia
luka.lednicki@fer.hr
Abstract –  With the lowering costs  of  electronic parts  for 
embedded  systems,  complexity  of  their  software  has 
drastically increased. A possible solution for handling this 
high complexity is component-based development, a branch 
of  software  engineering  that  builds  complex  software 
systems  out  of  encapsulated  units  of  software  named 
software  components.  Component-based  approach  has 
proven  beneficial  in  enterprise  systems  and  desktop 
domains.  However,  embedded  system  domain  introduces 
some  domain-specific  problems  (e.g.  satisfying  safety-
criticality  ,  real-time  requirements  and  interaction  with 
environment).  Therefore,  if  we  want  to  use  component-
based approach in embedded systems we must address these 
problems. In this paper we will present an overview of how 
interaction  with  environment  impacts  use  of  component-
based approach for embedded systems and what is needed 
of component models to better address this special need of 
embedded systems.
Keywords  –  Component-based  software  engineering, 
hardware components,  hardware devices, Extra-functional 
properties, analysis
I. INTRODUCTION
As modern  embedded  systems  grow  in  complexity 
component-based  development  is  an  increasingly 
attractive approach utilized to make the development of 
such systems simpler and less error prone [10]. However, 
in embedded system domain component-based approach 
to software development is seldom used in practice, and 
is mostly explored in component models used in research 
context.
Amongst  other  things,  one  of  the  problems  that 
component-based  development  for  embedded  systems 
must  address  is  interaction  of  a  software  system  with 
environment,  the  physical  world  that  the  system  is 
embedded  into  [7].  This  interaction  is  done  using 
hardware  devices,  such  as  sensors  and  actuators.  A 
simple example of an embedded system is a temperature 
regulation system, which keeps an constant temperature 
in a room, cooling or heating the air in it. Such a system 
must  have  at  least  one  temperature  sensor,  and  two 
actuators: one for starting the heating process and one for 
starting the cooling process.  So,  even  if  complexity of 
software  in  such  a  system is  very  low,  its  behavior  is 
highly dependent  on the communication with hardware 
devices, and behavior of devices themselves.
Communication  between  software  and  hardware 
devices can be as simple as writing value to a hardware 
pin or port of the device that the system is deployed on, 
or  as  complex  as  invocation  of  a  service  on  a  remote 
device. In all cases, this interaction with the environment 
implies  dependencies  of  software  components  on  the 
hardware or middleware used to communicate with the 
environment.  Same  environment,  and  combination  of 
hardware and middleware also affect the behavior of an 
embedded  system.  As  reusability  and  analyzability  of 
software  components  and  component  based  systems 
highly rely on such dependencies and effects on behavior, 
failure to adequately express them can hinder the use of 
component-based  approach  in  the  embedded  system 
domain.
In  this  paper  we  will  give  an  overview  of  how 
interaction between hardware and software components 
affects  component-based  approach  for  developing 
embedded systems. We will also present different ways 
in  which  component  models  can  provide  support  for 
hardware  components  and  discuss  how  different 
approaches impact our ability to fully utilize component-
based  development  for  embedded  systems.  We will  as 
well  give  an  overview  of  how  communication  with 
hardware  components  is  resolved  in  some  existing 
component  models.  We  will  also  provide  a  brief 
description of some of the languages that can be used to 
describe hardware devices and their behavior.
II. COMPONENT-BASED DEVELOPMENT FOR EMBEDDED SYSTEMS
Component-based  development  [9] is  a  software 
engineering approach in which software systems are built 
by composing them out of preexisting and reusable units 
of  software,  software  components.  However,  these 
components  are  more  than  just  segments  of  software 
code. In many cases software components are packages 
of  containing  software  code,  different  models  that 
describe  behavior  of  the component,  collection of both 
functional  and  extra-functional  properties  or  attributes 
and  different  documentation  files  that  describe  a 
component. In this way, beside just the benefit of reusing 
components  and  reducing  efforts  needed  for  system 
development by composing systems out of components, 
we  are  able  do  different  types  of  analysis  of  system 
properties  and  behavior  in  early  stages  of  system 
development,  before  the actual  system is complete and 
deployed [8]. 
Extra-functional  properties  like  worst-case  response 
time of some functionality, or memory consumption, are 
often  as  important  when  developing  software  for 
embedded systems as is their main functionality. Because 
of their small size, limited power sources and limitations 
on  cost  embedded  systems  generally  have  poor 
processing  power  and  memory  resources  compared  to 
standard desktop computers.  Also, their functionality is 
often  time  (real-time  systems)  and  safety  critical  (e.g. 
vehicular  electronic  control  units).  Ability  to  conduct 
analysis  in  early  phases  of  system  development,  and 
predict  system behavior and properties (both functional 
and  extra-functional)  can  greatly  improve development 
process of such systems. For this reasons there are many 
component  model  that  aim  embedded  system  domain, 
e.g. SaveCCM [11], Rubus [5], COMDES-II [6], ProCom 
[12], AUTOSAR [1], Koala [13], etc.
As already mentioned, component-based development 
for  embedded  systems  is  still  not  in  a  mature  phase. 
Component models used in industry do not provide all 
the potential benefits of component-based development, 
or are mostly used just for system modeling. On the other 
hand, component models for embedded systems currently 
used in research most often focus on providing support 
for handling only pure software components and rarely 
try to provide comprehensive approach for dealing with 
components  dependent  on  external  devices,  which  is 
essential for real-world use.
III. EFFECTS OF HARDWARE COMPONENTS ON SOFTWARE 
COMPONENT MODELS
Dependencies  on  hardware  components  can  affect 
component  models  on  many  different  levels.  As  main 
functionality of  embedded systems is that  they interact 
with their environment using hardware components, to be 
able  to  fully  utilize  component-based  approach  in 
embedded  systems  we  must  first  identify  how  these 
dependencies affect component models.
From  the  architectural  point  of  view,  such 
dependencies have to be clearly stated and presented for 
developers to be able to see and manage them.
In  the  deployment phase,  software  components  and 
subsystems are allocated to the underlying hardware that 
will support them. In this phase, there must be an ability 
to see dependencies on hardware devices and ensure that 
the  hardware  targeted  for  deployment  can  satisfy  this 
dependencies.
During analysis phase, effects of the external devices 
on behavior of software components must be taken into 
consideration.
Finally,  during  synthesis phase,  we  must  take  care 
that the code generated for software components reflects 
the platform's specifics of communicating with external 
devices.
As reuse of once developed components is one of key 
concepts  of  CBD,  we  also  need  to  make  sure  that 
components  that  are  dependent  on  hardware  can  be 
deployed  on  different  platforms  that  handle  hardware 
devices in different manner.
IV. APPROACHES ON INTEGRATING HARDWARE  COMPONENTS
For  purpose  of  classification  of  how  different 
component models support interaction between hardware 
and  software  components  we  propose  four  different 
groups.  These different  approaches are also depicted in 
Figure 1.
A B
C D
Figure 1: Different approaches to handling hardware components in component models: A – externalized,  
outside component model; B - Implicitly, on code level; C – explicitly, using specialized entities; D –  
explicitly, encapsulated in software components.
Component model
Component model
HW
Component model
Software component
Code
Software component
HW
Software
component
Specialized entity
HW
Component model
Software component
HW
A. Externalized, outside of component model
Some component models avoid providing any support 
for  stating  dependencies  or  communicating  with 
hardware.  Interaction  of  software  components  with 
environment is forbidden. Instead, it is supposed that this 
communication  is  handled  by  software  outside  of 
component  model  framework,  and  then  in  some  way 
presented  as  inputs  or  outputs  to  the  framework  and 
system composed out of components.
Although  this  is  a  valid  approach,  it  is  obviously 
inadequate for use in embedded systems as main task of 
embedded  systems  is  communication  with  their 
environment.  By  not  having  a  way  for  expressing 
interaction with environment, these types of component 
models can make system development more cumbersome 
and less suitable for analysis.
B. Implicitly, on code level
It  is  common  in  component  models  to  handle 
interaction  with  environment  as  any  other  code  inside 
software components. In  this case software components 
communicate  with  hardware  by  direct  method  calls  to 
underlying platform or operating system. These method 
calls are interleaved with the rest of the code, and hard-
coded inside component.
Such treatment of communication with environment 
limits  our  ability  to  fully  utilize  advantages  of 
component-based  development  in  embedded  systems. 
First of all, it stops us from using a component as black-
box as it interacts with its environment in a way that is 
not  visible from it's  outside interface.  Along with that, 
having  platform-specific  communication  hard-coded 
inside component's code can greatly hinder reuse of the 
component, as it can only be reused on the same platform 
with exactly  same configuration.  This  also prevents  us 
from checking validity of deployment because we cannot 
determine if the platform we are deploying on is adequate 
for  our  system.  Analyzability  of  such  systems  is  also 
reduced,  because  we  are  unable  to  take  into  account 
extra-functional  properties  and  behavior  of  hardware 
components.
C. Explicitly, using specialized entities
Another way of handling hardware dependencies and 
interaction  with  environment  is  introducing  special 
entities in component model that will encapsulate them. 
These  entities  are  able  to  communicate  with  normal 
software components, but have syntax and semantics that 
differ from software components.
This  approach  is  appropriate  for  component-based 
development  for  embedded systems as  it  enables  us to 
explicitly state the dependencies of systems on hardware 
components and how software components interact with 
the  environment.  Reuse  of  software  components  is 
simple, as there is a clear boundary between software and 
hardware.  It  also  enables  us  to  include  hardware 
components in system analysis.
One negative aspect of this approach is how it effects 
hierarchical composition of components. It is a common 
case in component  models that  they enable creation of 
composite components, i.e. software components that are 
composed  of  other  software  components  (instead  of 
defining  their  functionality  by  code).  Composite 
components  then  act  as  normal  software  components, 
respecting  same  interface  syntax  and  semantics.  If  we 
encapsulate  hardware  components  in entities  which are 
separate  software  components,  we  have  no  way  of 
including such entities in composite components, as there 
is no way of exposing them in the composite component 
interface.
D. Explicitly, encapsulated in software components
In some component models interaction with hardware 
is inclosed in software components, but exposed through 
component's interface. In this case we are able to describe 
communication  with  hardware  components  using  same 
syntax and semantics as communication between normal 
software components.
Similarly to approach in subsection C, this approach 
allows us to fully utilize component-based approach for 
developing software for embedded systems. Additionally, 
by having the ability to state interaction with hardware 
components as a part of software component interface we 
are able to include hardware components in a hierarchical 
software component model.
V. EXAMPLES OF HARDWARE COMPONENT INTEGRATION
In this section we will give an overview of how some 
of the component models currently used in research or 
industry deal with dependencies on hardware components 
and  how  the  communication  between  hardware  and 
software  components  is  treated.  This  investigation  was 
done as part of research for survey on component models 
currently  in  use  [3].  Although  our  research  covered  a 
number  of  component  models  for  embedded  systems, 
most of them did not provide any documentation or other 
information  on  how  interactions  with  hardware 
components is treated. As a conclusion, we can argue that 
their  support  for  hardware  devices  is  either  implicit 
(encapsulated  in  code)  or  externalized  (outside  of 
component model).
A. Rubus
Rubus component  model  [4],  [5] was  created  by 
Articus  Systems  for  development  of  dependable 
embedded  real-time  systems.  Architectural  elements  of 
Rubus  are  software  items,  which  can  be  either  basic 
software  circuits or  assemblies or  composites of  other 
software items. Interfaces of software items are defined 
by input and output ports. They can be either  used for 
exchanging data  (data  ports)  or  control  signals  (trigger 
ports). Behavior of a software circuit is defined by a C-
language  entry  function.  There  are  no  special 
architectural elements that model external devices such as 
sensors and actuators. Instead, they are modeled by basic 
software  circuits.  Sensors  are  represented  by  software 
circuits  that  have  no  input  data  ports  and  at  least  one 
input  trigger  port,  while  actuators  are  modeled  by 
software circuits that have no output data ports. Platform 
and device dependent information or behavior are hard-
coded in the software circuit's C entry function.
B. COMDES-II
COMDES-II [6] is  a  component-based  software 
framework  aimed  for  efficient  development  of  reliable 
distributed embedded control systems with hard real-time 
requirements.  COMDESS-II  defines  a  two-layer 
component model, having the "upper" layer  specify the 
behavior  of  a  systems  using  active  software  artifacts 
called  actors,  while  the  "lower"  layer  defines  the 
behavior  of  the  actors  using  function  block  instances. 
Interaction of actors with the environment is encapsulated 
in  input and  output  signal  drivers.  Drivers  can  be 
classified as either communication drivers (used to sense 
or actuate signals on a network), or physical drivers (used 
for sensing or actuating physical signals).
C. AUTOSAR
AUTOSAR [1], [2] is a new standardized architecture 
created  by  a  partnership  of  a  number  of  automotive 
manufacturers  and  suppliers  with  a  goal  to  manage 
increasing  complexity  of  vehicular  embedded  systems, 
enable  detection  of  errors  in  early  design  phase  and 
improve flexibility,  scalability,  quality and reliability of 
such  systems.  To  achieve  this,  AUTOSAR  applies 
component  based  approach  for  developing  embedded 
systems.  In  AUTOSAR,  underlying  hardware  that  the 
system  is  deployed  on  is  abstracted  away  by  the 
AUTOSAR  Runtime  Environment that  provides  a 
platform-independent  framework  for  the  application 
layer.  As  a  consequence,  AUTOSAR  applications  can 
only be deployed on a hardware device only if there is an 
existing  AUTOSAR  Runtime  environment  for  this 
specific device. In the application layer dependencies on 
specific  hardware  is  encapsulated  in  special  type  of 
components,  sensor and  actuator components.  These 
components  are  dependent  on  a  specific  sensor  or 
actuator, but are independent of the hardware device that 
the application is deployed on.
VI. HARDWARE DESCRIPTION LANGUAGES
If  we want to have a possibility to explicitly define 
dependencies  of  software  components  on  hardware 
devices,  and provide a possibility to express  properties 
and behavior of hardware devices, we need a formal way 
of  describing  them.  Because  of  the  overall  need  of 
describing hardware in engineering community, there are 
already a number of hardware description languages that 
are used to define hardware on different levels. Some of 
these  languages  can  be  easily  incorporated  into 
component  models  (or  at  least  serve  as  a  model  for 
creating  a  custom hardware  description  language)  that 
would enable description of hardware. In this section we 
will present two hardware description languages that are 
amongst the most notable.
AADL (Architecture  Analysis  & Design  Language) 
[14] is  an  Architectural  Description  Language  (ADL) 
standardized by Society of Automotive Engineers (SAE). 
It  is  used  to  model  both  hardware  and  software 
architecture  of  embedded  systems.  Although  AADL 
models  consist  of  architectural  elements  called 
components,  system  development  in  AADL  does  not 
follow  the  component-based  development  paradigm. 
There are three categories of component abstractions in 
AADL:  application  software  (threads,  thread  groups, 
processes,  data,  and  subprograms),  execution  platform 
(processors,  memory,  devices,  bus)  and  composite 
systems.  During  system  composition,  application 
software  is  bound  to  appropriate  execution  platform 
components.
VHDL [15] is  one  of  the  most  known and widely 
spread Hardware Description Language (HDL). It is used 
for  describing  hardware  interfaces  and  behavior. 
Specification of hardware is on a very low level – data 
types of bits or bit vectors, and integer or real numbers. It 
has also no ability to define extra-functional properties of 
hardware.
VII. CONCLUSION
In  this  paper  we  have  illustrated  how  interaction 
between software components and hardware devices has 
an  important  role  in  component  models  for  embedded 
systems.  In  this  domain,  failure  to  adequately  express 
dependencies  of  software  components  on  hardware 
devices and communication between them can severely 
impair  our  ability  to  use  all  benefits  that  component-
based approach can introduce.
A  survey  of  different  component  models  [3] has 
shown  us  that  in  embedded  systems  component-based 
development  for  embedded  systems  is  still  not  widely 
utilized by industry, and most of the component models 
in  this  domain  are  developed  and  used  in  research 
community. However, lack of any information about how 
hardware devices are included in component models, and 
frequently  inadequate  approaches  of  some  component 
models  that  provide  this  information,  leads  us  to  a 
conclusion that this aspect of embedded systems is still 
not  fully  explored  when  it  comes  to  component-based 
development.
As a consequence, we see a need for further research 
on  how  hardware  devices  can  be  incorporated  in 
component models for embedded systems, and what are 
the  limitations  and  benefits  that  can  be  gained  by 
different approaches to solve this problem.
REFERENCE
[1] AUTOSAR Development Partnership, AUTOSAR 
– Technical Overview, 2008
[2] Heinecke  H.,  Damm W.,  Josko  B.,  Metzner  A., 
Kopetz H., Sangiovanni-Vincentelli A., Di Natale 
M.,  Software  Components  for  Reliable 
Automotive  Systems,  Design,  Automation  and 
Test in Europe, 2008
[3] Juraj  Feljan,  Luka  Lednicki,  Josip  Maras,  Ana 
Petričić,  Ivica  Crnković,  "Classification  and 
Survey of Component Models",  DICES technical 
report,  University  of  Zagreb,  2009,  available  at 
http://www.fer.hr/dices/ 
[4] Systems, http://www.arcticus-systems.com/
[5] Kaj  Hänninen,  Jukka Mäki-Turja,  Mikael  Nolin, 
Mats  Lindberg,  John  Lundbäck,  Kurt-Lennart 
Lundbäck,  The  Rubus  Component  Model  for 
Resource  Constrained  Real-Time  Systems,  3rd 
IEEE  International  Symposium  on  Industrial 
Embedded Systems, 2008
[6] Ke  Xu,  Sierszecki  Krzysztof,  Angelov  Christo, 
COMDES-II: A Component-Based Framework for 
Generative Development of Distributed Real-Time 
Control Systems, RTCSA '07: Proceedings of the 
13th IEEE International Conference on Embedded 
and  Real-Time  Computing  Systems  and 
Applications, 2007
[7] C. Bunse, H.-G. Gross,  "Unifying Hardware and 
Software  Components  for  Embedded  Systems 
Development",  In:  Architecting  Systems  with 
Trustworthy  Components,  R.  Reussner,  J.  A. 
Staffort,  C. A. Szyperski  (Eds),  Lecture  notes  in 
Computer Science, Vol 3938, Springer, 2006.
[8] Crnković  Ivica,  Larsson  Magnus,  "Building 
Reliable  Component-Based  Software  Systems", 
Artech House Publishers, 2002
[9] C.  Szyperski,  "Component  Software:  Beyond 
Object-Oriented Programming", Addisom-Wesley, 
2002
[10]  Atkinson, C.; Bunse, C.; Gross, H.-G.; Peper, C., 
"Component-Based  Software  Development  for 
Embedded  Systems  –  An  Overview  of  Current 
Research  Trends",  Lecture  Notes  in  Computer 
Science, November 2005
[11] M.  Åkerholm,  J.  Carlson,  J.  Fredriksson,  H. 
Hansson,  J. Håkansson, A. Möller, P. Pettersson, 
and M. Tivoli. The SAVE approach to component-
based development of vehicular  systems.  Journal 
of  Systems  and  Software,  80(5):655–  667,  May 
2007.
[12] T. Bureš, J. Carlson, I. Crnković, S. Sentilles, and 
A.  Vulgarakis,  “ProCom  –  the  Progress 
Component  Model  Reference  Manual,  version 
1.0,”  Mälardalen  University,  Technical  Report 
MDH-MRTC-230/2008-1-SE, June 2008.
[13] R. van Ommering,  F.  van der Linden,  and J.  Kramer. 
The Koala component  model for  consumer electronics 
software. In IEEE Computer, pages 78–85. IEEE, March 
2000.
[14] Feiler,  P.  H.,  Gluch,  D.,  Hudak,  J.,  "The 
Architecture  Analysis  &  Design  Language 
(AADL): An Introduction", Software Engineering 
Institute,  Technical  Note,  CMU/SEI-  2006-TN-
011, Feb 2006.
[15] D. Perry, VHDL. New York: McGraw-Hill, 1991.

