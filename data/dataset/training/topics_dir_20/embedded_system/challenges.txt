Challenges in
Embedded Systems
Research & Education
Philip Koopman
koopman@cmu.edu - http://www.ices.cmu.edu/koopman
Institute
for Complex
Engineered
Systems
&Electrical Computer
ENGINEERING
Circa 1980:
What in the world are you 
going to do with all those 
computers?
It's not as if you want one 
in every doorknob!
- Danny Hillis, circa 1980, as told by 
Guy Steele at 1996 CMU SCS 
commencement
1981:
Atari 800 used by hotel 
control startup company
3
Overview
20 Years Later, What’s Left To Research?
u What’s an embedded system?
u Why can’t you just design them like desktop systems?
• Or, how to succeed in a research project and find out you were asking the 
wrong question
u What’s coming next?
• It’s not only stranger than we imagine,
It’s probably stranger than we can imagine.
u What does it take to do good embedded system research?
• What about good embedded system education?
Embedded System =
Computers Inside a Product
5
Embedded System Context
u Don’t think in terms of just cost or just performance --
think in terms of how much you get for:
• $1 chip (on-chip memory only)  -- most of the market
• $10 chip (with one RAM/ROM combo chip) -- much of the market
• $100 chip (with DRAM + 1 boot flash chip) -- a tiny piece of the market
Approximated from EE Times,
March 20, 1995
Source: The Information Architects
1994 Worldwide
Microcontroller Revenue
($Million U.S.)
8-Bit
$4,520M 16-Bit
$2,910M
64-Bit
$220M
$13,490M Total
1994 Worldwide
Microcontroller Units
(Million Devices)
8-Bit
1,200M
16-Bit
276M
64-Bit
2M
2,683M Total
6
It’s About the Applications, Not the Technology
u Technology is not the end; it is the means
– the goal is solving (highly constrained) problems!
7
There Are Many Application Areas
8
Typical Embedded System Constraints
u Small Size, Low Weight
• Hand-held electronics
• Transportation applications -- weight costs money
u Low Power
• Battery power for 8+ hours  (laptops often last only 2 hours)
• Limited cooling may limit power even if AC power available
u Harsh environment
• Power fluctuations, RF interference, lightning
• Heat, vibration, shock
• Water, corrosion, physical abuse
u Safety-critical operation
• Must function correctly
• Must not function incorrectly
u Extreme cost sensitivity
• $.05 adds up over 1,000,000 units
Why Can’t You Design
Embedded Systems
Just Like
Desktop Systems?
10
Case Study: Synthesize A Remote Entry Receiver
u Use Fidelity: a commercial schematic synthesis tool
• Replicate a real automotive product design
• Assess viability in real-world embedded system design environment
u Note: already we are diverging 
from the research mainstream
• Most embedded system 
research is about chip synthesis, 
BUT
most real embedded system 
design is about component 
composition
• Fidelity was chosen because it 
is a design-by-composition tool
11
What’s A Remote Entry Receiver?
u RF receiver for door locks, 
trunk (boot), latch, etc.
• 8-bit microcontroller
• Outputs and inputs vary in:
– Current capacity
– Signal type
• Very cost constrained, but must 
satisfy goals for:
– Power consumption
– Performance @ 5 MHz
– Lifetime
– Warranty period reliability
u Newer functions:
• Transmissions encrypted
• Monitors tire pressure
• “Panic” alarm feature
Remote
Entry
Receiver
Passenger Door
Lock Solonoid
Driver Door
Lock Solonoid
Other Actuators/
Other Outputs
RF Antenna/
IR detector
Other
Inputs
12
The Experiment
u Automotive business driven by 2-week responses to Quote Requests
• Engineer gets 2 weeks to estimate price
• Bid lost if too high
• Business gets 3 years to lose money if too low
u Wouldn’t it be nice if you could do an optimized design in a few
hours?
• Optimal component selection for price
• Guaranteed to meet all constraints
• Generates input to PCB layout tools
u Wouldn’t it be nice if you could re-design monthly for cost savings?
• But, can a CAD tool really match super-macho embedded system engineers?
u Fidelty promised it could do all that
• So, let’s see if it really can
13
Fidelity Tool Details
u Design-by-composition tool from Omniview, Inc.
• Commercialization of Carnegie Mellon Micon tool
• Designed to automated PC motherboard synthesis, and it’s good at that
• Arbitrary synthesis from equations is not the point (it’s not Verilog/VHDL)
u Schematic hierarchy in Mentor Graphics tool set used
• Each “symbol” can link to multiple child “schematics”/(components)
• Exactly one such schematic is used in any given design instance
14
Fidelity Design Representation
u Represents all known components/subsystems
• Searches for optimal combination that meets constraints
SYMBOLSYMBOLSYMBOL
COMPONENT COMPONENT COMPONENT COMPONENT COMPONENT
SYMBOLSYMBOLSYMBOL
SCHEMATIC
TOP-LEVEL
SCHEMATIC
SYMBOLSYMBOL
SCHEMATIC
SYMBOLSYMBOL
SCHEMATIC
SYMBOL
SCHEMATIC
SYMBOL
SCHEMATIC
AND
AND AND AND
OR
OR
15
Design Constraints etc.
u “Design equations” communicate constraints within hierarchy
• Values or value ranges can state power, signal, voltage requirements
• Interval arithmetic inequalities can specify analog circuit parameters
u Global constraints can be used to filter designs
• Power
• Cost
• One or two other user-defined global constraints
16
Fidelity Design Result
u Select optimal set of schematics (design options) given constraints
• Picks exactly one schematic/component per symbol
SYMBOLSYMBOLSYMBOL
COMPONENT COMPONENT COMPONENT COMPONENT COMPONENT
SYMBOLSYMBOLSYMBOL
SCHEMATIC
TOP-LEVEL
SCHEMATIC
SYMBOLSYMBOL
SCHEMATIC
SYMBOLSYMBOL
SCHEMATIC
SYMBOL
SCHEMATIC
SYMBOL
SCHEMATIC
AND
AND AND AND
17
Did It Work?
u Yes, it was able to find optimal design points
• Reproduced hand-done designs using component database
• Used design-by-selection, which was required
(synthesized designs undesirable because of NRE and lead time issues)
u But it was not able to meet all the other requirements!
• Additional engineering constraints
• Business constraints
• Cultural issues
18
Lessons Learned: Electronic Design
u Digital, analog, and power components
• There is often only one digital component (a microcontroller)
Embedded designs interface to an analog world!
u Digital design vs. digital component selection
• Standard components are used for cost, flexibility & cycle time
• Digital design consists of selecting a microcontroller, not IC synthesis
Selecting components may be more important than synthesizing them.
u Incremental design updates
• Want minimum manufacturing disruption for updates, not complete redesign
• Ideally, all design changes are 100% in software
Redesign needs to limit scope of changes, not seek perfect optimality
19
Lessons Learned: System Design
u Design margin & customer variation
• Some customers want it “cheap”, others want it “good”
• Customer-specific input protection circuits, etc. (need product families)
– This was easily handled with design equations
– Variations also occurred per country of sale per manufacturer
• ASICs undesirable; customer changes requirements several times/year
Designs must be tailored and change regularly; investment in ASICs is 
sometimes impractical
u Clock speed limitations
• Receiver CPU limited to 5 MHz by RFI concerns  (RF interference)
• Transmitter limited to 1 MHz(!)
• Cryptographic algorithms were tailored to minimize clock cycles & memory
Faster raw clock rates may not help at all due to RFI & power limitations
20
Lessons Learned: Business & Process
u Lifecycle component cost is more complex than quantity-1 cost:
• Volume-purchasing discounts
• Cost of purchasing dept. time for each component type
• Cost of component qualification
• Cost of vendor qualification
• Cost of component database maintenance
• Cost of logistics (spare parts, warehousing, etc.)
• Limited number of component bins on pick&place equipment
Use minimum number of component types across all products.
u System certification and lifecycle costs can dominate
• All changes must be vetted by customer (warranty cost concerns)
• Many changes must undergo FCC recertification
• Many changes require a new shake&bake life test
Weigh potential benefits against validation & certification costs;
Don’t underestimate cost of recertifying a critical system for a “minor” change
21
More Business & Process Lessons
u CAD tool proficiency matters
• Engineers assigned to products, not engineering functions
• CAD tools have a steep learning curve; expertise evaporates clearly
• Elite corps of CAD experts isn’t viable due to turnover, cost
Complex digital CAD tools may not be viable in many situations
u Model & library database maintenance
• Who updates the price information?
• Companies use internal part numbers, requiring format & number translation
• Who polices database quality?
– Do you want to go bankrupt because someone mis-typed a component price?
Infrastructure costs can be significant when using design tools
u Legacy designs & understandability
• Deep hierarchies for decoupling design issues don’t print well
• Archives are all on paper (for good reason)
CAD designs still have to be printed for long-term records
22
Cultural Issues
u Compelling advantage required to change current practices
• If they can build products today, why should they change?
• “Engineers are free” paradox - why buy them a $50K tool?
Compelling advantage required.  In this case design-to-quote cycle time was a 
very good incentive.
u Computer culture vs. “metal-bending” cultures
• Non-computer engineers may not appreciate (or even believe in) simulation-
based design methods
• Computers are a small part of embedded systems (weight, size, to some 
degree cost)
– But, some companies are waking up to the fact that their main cost is
bending software instead of metal.
• It’s the system that matters, not the whizziness of the technology (usually)
Things we take for granted become major battles in embedded applications
What Does
The Future
Look Like?
24
Today:
25
Embedded + Distributed – Caterpillar 797
ADEM II
Master
ADEM II
Slave 2
ADEM II
Slave 1
ET Service Tool
VIMS II
(ABL2M)
RAC/CLIM
(68K Module)
Chassis Control
(ABL2C)
Braking/Cooling
(ABL2C)
Tire
Monitor
797 System
VIMS - PC
Xmsn/TC
(ABL2C)
CAT Datalink
CAN SAE J1939 Datalink
797sys.vsd
6-18-98
dab/jwf
Warning: All paper copies of this document are uncontrolled
+ 195 sensors and actuators
+ wireless data link
26
Tomorrow: Embedded Computers Everywhere
u Sewing Machines
u Home Appliances
u Communications & 
Translation
u Transportation
u Consumer 
Electronics
u Concrete (sensors)
u Clothing(?)
27
The Future(?)
u Every time I hear a far fetched idea, I can find a web page with a 
photo of a prototype or product
Embedded web server
Digital Frying Pan
29
Sun’s Version of the Wired House
u Will people adopt this other than as a toy?
• Will the same people who can’t set time on a VCR be able to debug their 
house?
u If we can make the system readily accessible, reliable, affordable,
…the possibilities are almost endless
30
Would You Drive A Car In Which:
“THE SOFTWARE is provided ‘AS IS’ and 
with all faults. THE ENTIRE RISK AS TO 
SATISFACTORY QUALITY, 
PERFORMANCE, ACCURACY, AND 
EFFORT (INCLUDING LACK OF 
NEGLIGENCE) IS WITH YOU.”
(You will.)
u Virtually all embedded OS vendors are requiring end-user licenses 
with liability waivers (and they’re already legally binding in some 
states!)
Research & Education
32
Educational Issues
u Embedded system engineers are more generalists in an age of 
specialization
• Multi-disciplinary tradeoffs, often with design team size of 1 engineer
u Need education way beyond traditional A/D, D/A, and assembly:
• Real time operating systems & scheduling
• System design methodologies (requirements / design / test / etc.)
– Many engineers need software/system engineering literacy
• Distributed systems & distributed networks
– Entirely different set of tradeoffs for embedded than for “regular” networks
• Architectural approaches to distributed systems
• Critical system design (dependability, safety)
• Human/computer interfaces
• Specialty skills: low power, design for particular constraints
33
Different Systems Have Different Problems
u Near-desktop systems  (set-top box; wearable computer; etc.)
• Time to market
• Cost
u Embedded control systems (elevators, aircraft, factories)
• Real-time determinacy (architecture) & predictability (compiler)
• Off-the-shelf RTOS (Real Time Operating System)
• Software development problems
• Cost
u Tiny embedded systems (rice cookers, etc.)
• Cost
• Cost
• Compilers/runtime targeting a $1 chip
• Time to market
• Cost
35
Relative Embedded System Importance
…
#837 - Instruction Level Parallelism
• Does ILP make sense on an 8051?  That is still much of the market
• Most embedded systems use older CPU designs (how many MIPS do you 
need in a toaster oven?)
#1 - Cost
• Cost + performance often matters more than performance
• (“Cost” includes issues such as power, size, weight too)
#2 - Time to Market
• (Debugability is an important factor)
#3 - Predictability/Determinacy
• It is important to pick a fast enough processor for worst case
• Is this really debugability in the performance space?
#4 - Security
• Do you want someone hacking your digital wallet?
36
Pressing Research Topics
u System level tradeoffs.
“System” =
• Digital hardware + Analog hardware
• Software
• People/operators
• Mechanical components
• Life cycle support/logistics  -- trade off from transistors to business process
u Affordable dependability
• How can we trust our lives to a $1 microcontroller?   (we will…)
• How can we get a clue about making dependable software for less than $1M
u Design for embedded constraints
• Hard real time
• Harsh environments
• Low cost security
• Low power
• Small memory footprints
• etc.
37
New Applications/Problems
u Very Low Power (wearables; stand-alone devices)
• Battery operation for days, not hours
• Thermal dissipation will be limited by small surface area
u MEMS-based devices
• Micro-Electro-Mechanical
Systems
• In the future, “system-level
integration” includes
electro-mechanical I/O
38
RoSES: Robust Self-Configuring Embedded Systems
u Product families + automatic reconfiguration =
• Operation with failed components
• Automatic integration of inexact spares
• Automatic integration of upgrades
• Fine-grain product family capability
u Potential Impact:
• Logical component interfaces + configuration mgr.
• Fine-grain software component run-time support
• Architectures that are naturally resilient
u First demos in late 2001
39
Generic RoSES System Architecture
Object Bus (Run-Time Infrastructure & Network)
Baseline
Sensor SW
Functionality
Dynamic Interface
to Object Bus
SW
Adapter for
High Level
Logical
Interface
SW
Adapter for
High Level
Logical
Interface
…
Basic
Sensor
Device
SMART SENSORS
Lo
ca
l C
P
U
Lo
ca
l M
em
or
y
Baseline
Actuator SW
Functionality
Dynamic Interface
to Object Bus
SW
Adapter for
High Level
Logical
Interface
Adapter Repository Co-Scheduling & Assigment Tool
SW
Adapter for
High Level
Logical
Interface
…
Basic
Actuator
Device
SMART ACTUATORS
CUSTOMIZATION MANAGER
Lo
ca
l C
P
U
Lo
ca
l M
em
or
y
40
Conclusions
u What’s an embedded system?
• Contains computers that interact with the real world
• Pretty soon, it may be everything!
u Why can’t you just design them like desktop systems?
• Design constraints can be much tighter (cost, size, power, speed, …)
• Life cycle effects are far more important than the disposable PC market
• Software can kill people in these systems
u What about embedded system research & education?
• It’s about the system!
• Requires broad perspective, multidisciplinary tradeoffs, and attention to the 
“ilities”

