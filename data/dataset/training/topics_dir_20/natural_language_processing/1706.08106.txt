Random Forests for Industrial Device
Functioning Diagnostics Using Wireless Sensor
Networks
W. ElGhazel, C. Guyeux, A. Farhat, M. Hakem,
K. Medjaher, N. Zerhouni, and J.M. Bahi
Abstract
In this paper, random forests are proposed for operating devices di-
agnostics in the presence of a variable number of features. In various
contexts, like large or difficult-to-access monitored areas, wired sensor
networks providing features to achieve diagnostics are either very costly
to use or totally impossible to spread out. Using a wireless sensor network
can solve this problem, but this latter is more subjected to flaws. Fur-
thermore, the networks’ topology often changes, leading to a variability
in quality of coverage in the targeted area. Diagnostics at the sink level
must take into consideration that both the number and the quality of the
provided features are not constant, and that some politics like scheduling
or data aggregation may be developed across the network. The aim of
this article is (1) to show that random forests are relevant in this context,
due to their flexibility and robustness, and (2) to provide first examples
of use of this method for diagnostics based on data provided by a wireless
sensor network.
1 Introduction
In machine learning, classification refers to identifying the class to which
a new observation belongs, on the basis of a training set and quantifiable
observations, known as properties.
In ensemble learning, the classifiers are combined to solve a particular
computational intelligence problem. Many research papers encourage
adapting this solution to improve the performance of a model, or reduce
the likelihood of selecting a weak classifier. For instance, Dietterich ar-
gued that averaging the classifiers’ outputs guarantees a better perfor-
mance than the worst classifier [6]. This claim was theoretically proven
correct by Fumera and Roli [8]. In addition to this, and under particular
hypotheses, the fusion of multiple classifiers can improve the performance
of the best individual classifier [15].
Two of the early examples of ensemble classifiers are Boosting and
Bagging. In Boosting algorithm [12], the distribution of the training set
1
ar
X
iv
:1
70
6.
08
10
6v
1 
 [
cs
.A
I]
  2
5 
Ju
n 
20
17
changes adaptively based on the errors generated by the previous clas-
sifiers. In fact, at each step, a higher degree of importance is accorded
to the misclassified instances. At the end of the training, a weight is ac-
corded to each classifier, regarding its individual performance, indicating
its importance in the voting process. As for Bagging [2], the distribution
of the training set changes stochastically and equal votes are accorded to
the classifiers. For both classifiers, the error rate decreases when the size
of the committee increases.
In a comparison made by Tsymbal and Puuronen [14], it is shown that
Bagging is more consistent but unable to take into account the heterogene-
ity of the instance space. In the highlight of this conclusion, the authors
emphasize the importance of classifiers’ integration. Combining various
techniques can provide more accurate results as different classifiers will
not behave in the same manner faced to some particularities in the train-
ing set. Nevertheless, if the classifiers give different results, a confusion
may be induced [10]. It is not easy to ensure reasonable results while com-
bining the classifiers. In this context, the use of random methods could
be beneficial. Instead of combining different classifiers, a random method
uses the same classifier over different distributions of the training set. A
majority vote is then employed to identify the class.
In this article, the use of random forests (RF) is proposed for indus-
trial functioning diagnostics, particularly in the context of devices being
monitored using a wireless sensor network (WSN). A prerequisite in di-
agnostics is to consider that data provided by sensors are either flawless
or simply noisy. However, deploying a wired sensor network on the moni-
tored device is costly in some well-defined situations, specifically in large
scale, moving, or hardly accessible areas to monitor. Such situations en-
compass nuclear power plants or any structure spread in deep water or in
the desert. Wireless sensors can be considered in these cases, due to their
low cost and easy deployment.
WSNs monitoring is somehow unique in the sense that sensors too
are subjected to failures or energy exhaustion, leading to a change in
the network topology. Thus, monitoring quality is variable too and it
depends on both time and location on the device. Various strategies can
be deployed on the network to achieve fault tolerance or to extend the
WSN’s lifetime, like nodes scheduling or data aggregation. However, the
diagnostic processes must be compatible with these strategies, and with a
device coverage of a changing quality. The objective of this research work
is to show that RF achieve a good compromise in that situation, being
compatible with a number of sensors which may be variable over time,
some of them being susceptible to errors. More precisely, we will explain
why random methods are relevant to achieve accurate diagnostics of an
industrial device being monitored using a WSN. The functioning of RF
will then be recalled and applied in the monitoring context. Algorithms
will be provided, and an illustration on a simulated WSN will finally be
detailed.
The remainder of this article is organized as follows. Section 2 sum-
marizes the related work. In Section 3, we overview the research works in
industrial diagnostics. We present the random forest algorithm in Section
4 and give simulation results in Section 5. This research work ends with
2
a conclusion section, where the contribution is summarized and intended
future work is provided.
2 Related work
Many research works have contributed in improving the classification’s
accuracy. For instance, tree ensembles use majority voting to identify
the most popular class. They have the advantage of transforming weak
classifiers into strong ones by combining their knowledge to reduce the
error rate.
Usually, the growth of each tree is governed by random vectors sampled
from the training set, and bagging is one of the early examples of this. In
this method, each tree is grown by randomly selecting individuals from
the training set without replacing them [2]. The use of bagging can be
motivated by three main reasons: (1) it enhances accuracy with the use
of random features, (2) it gives ongoing estimates of the generalization
error, strength, and correlation of combined trees, and (3) it is also good
for unstable classifiers with large variance.
Meanwhile, Freund introduced the adaptive boosting algorithm Ad-
aboost, which he defined as [7]: “a deterministic algorithm that selects
the weights on the training set for input to the next classifier based on
the wrong classifications in the previous classifiers”.
The fact that the classifier focuses on correcting the errors at each new
step remarkably improved the accuracy of classifications.
Shortly after, in [1] randomness was again used to grow the trees. The
split was defined at each node by searching for the best random selection
of features in the training set. Ho [9] introduced the random subspace,
in which he randomly selects a subset of vectors of features to grow each
tree. Diettrich introduced the random split selection where at each node,
a split is randomly selected among k best splits [6].
For these methods, and like bagging, a random vector sampled to
grow a tree is completely independent from the previous vectors, but is
generated with the same distribution.
Random split selection [6] and introducing random noise into the out-
puts [3] both gave better results than bagging. Nevertheless, the algo-
rithms implementing ways of re-weighting the training set, such as Ad-
aboost [7], outperform these two methods [4].
Therefore, Breiman combined the strengths of the methods detailed
above into the random forest algorithm. In this method, individuals are
randomly selected from the training set with replacement. At each node,
a split is selected by reducing the dispersion generated by the previous
step and consequently lowering the error rate. This algorithm is further
detailed in Section 4.
3 Overview of diagnostics
With their constantly growing complexity, current industrial systems wit-
ness costly downtime and failures. Therefore, an efficient health assess-
3
ment technique is mandatory. In fact, in order to avoid expensive shut-
downs, maintenance activities are scheduled to prevent interruptions in
system operation. In early frameworks, maintenance takes place either
after a failure occurs (corrective maintenance), or according to predefined
time intervals (periodic maintenance). Nevertheless, this still generates
extra costs due to “too soon” or “too late” maintenances. Accordingly,
considering the actual health state of the operating devices is important in
the decision making process. Maintenance here becomes condition-based,
and is only performed after the system being diagnosed in a certain health
state.
Diagnostics is an understanding of the relationship between what we
observe in the present and what happened in the past, by relating the
cause to the effect. After a fault takes place, and once detected, an
anomaly is reported in the system behavior. The fault is then isolated
by determining and locating the cause (or source) of the problem. Doing
so, the component responsible for the failure is identified and the extent
of the current failure is measured. This activity should meet several re-
quirements in order to be efficient [5]. these requirements are enumerated
in the following.
• Early detection: in order to improve industrial systems’ reliabil-
ity, fault detection needs to be quick and accurate. Nevertheless,
diagnostic systems need to find a reasonable trade-off between quick
response and fault tolerance. In other words, an efficient diagnostic
system should differentiate between normal and erroneous perfor-
mances in the presence of a fault.
• Isolability: fault isolation is a very important step in the diag-
nostic process. It refers to the ability of a diagnostic system to
determine the source of the fault and identify the responsible compo-
nent. With the isolability attribute, the system should discriminate
between different failures. When an anomaly is detected, a set of
possible faults is generated. While the completeness aspect requires
the actual faults to be a subset of the proposed set, resolution opti-
mization necessitates that the set is as small as possible. A tradeoff
then needs to be found while respecting the accuracy of diagnostics.
• Robustness and resources: it is highly desirable that the diagnos-
tic system would degrade gracefully rather than fail suddenly. For
this finality, the system needs to be robust to noise and uncertain-
ties. In addition to this, a trade-off between system performance and
computational complexity is to be considered. For example, on-line
diagnostics require low complexity and higher storage capacities.
• Faults identifiability: a diagnostics system is of no interest if it
cannot distinguish between normal and abnormal behaviors. It is
also crucial that not only the cause of every fault is identified, but
also that new observations of malfunctioning would not be misclassi-
fied as a known fault or as normal behavior. While it is very common
that a present fault leads to the generation of other faults, combining
the effects of these faults is not that easy to achieve due to a possi-
ble non-linearity. On the other hand, modeling the faults separately
may exhaust the resources in case of large processes.
4
• Clarity: when diagnostic models and human expertise are combined
together, the decision making support is more reliable. Therefore, it
is appreciated that the system explains how the fault was triggered
and how it propagated, and keeps track on the cause/effect relation-
ship. This can help the operator use their experience to evaluate the
system and understand the decision making process.
• Adaptability: operating conditions, external inputs, and environ-
mental conditions change all the time. Thus, to ensure relevant di-
agnostics at all levels,the system should adapt to changes and evolve
in the presence of new information.
Existent diagnostic models have several limitations. Some of which
are summarized in Table 1.
Diagnostic model Drawbacks
Markovian process -Aging is not considered
-Different stages of degradation process
cannot be accounted for
-Large volume of data is required for the
training
-The assumptions are not always practical
Bayesian networks -Prior transitions are not considered
-Complete reliance on accurate thresholds
-Many state transitions are needed for effi-
cient results
-Unable to predict unanticipated states
Neural networks -Significant amount of data for the training
-Retraining is necessary with every change
of conditions
-Pre-processing is needed to reduce inputs
Fuzzy systems -Increasing complexity with every new en-
try
-Domain experts are required
-Results are as good as the developers’ un-
derstanding
Table 1: Limitations of diagnostic models
The degradation process can be considered as a stochastic process.
The evolution of the degradation is a random variable that describes the
different levels of the system’s health state, from good condition to com-
plete deterioration. The deterioration process is multistate and can be
divided into two main categories [11]:
1. Continuous-state space: the device is considered failed when the
predefined threshold is reached.
2. Discrete-state space: the degradation process is divided into a finite
number of discrete levels.
5
As condition-based maintenance relies on reliable scheduling of mainte-
nance activities, an understanding of the degradation process is required.
For this finality, in this paper, we consider the discrete-state space dete-
rioration process.
4 Random forests
The RF algorithm is mainly the combination of Bagging [2] and random
subspace [9] algorithms, and was defined by Leo Breiman as “a combi-
nation of tree predictors such that each tree depends on the values of
a random vector sampled independently and with the same distribution
for all trees in the forest” [4]. This method resulted from a number of
improvements in tree classifiers’ accuracy.
This classifier maximizes the variance by injecting randomness in vari-
able selection, and minimizes the bias by growing the tree to a maximum
depth (no pruning). The steps of constructing the forest are detailed in
Algorithm 1.
Algorithm 1 Random forest algorithm
Input: Labeled training set S, Number of trees T , Number of features F .
Output: Learned random forest RF .
initialize RF as empty
for i in 1..T do
S′i ← bootstrap (S)
initialize the root of tree i
repeat
if current node is terminal then
affect a class
go to the next unvisited node if any
else
select the best feature f∗ among F
sub-tree ← split(S′i, f∗)
add (leftChild, rightChild) to tree i
end if
until all nodes are visited
add tree i to the forest
end for
In a RF, the root of a tree i contains the instances from the training
subset S′i, sorted by their corresponding classes. A node is terminal if
it contains instances of one single class, or if the number of instances
representing each class is equal. In the alternative case, it needs to be
further developed (no pruning). For this purpose, at each node, the feature
that guarantees the best split is selected as follows.
1. The information acquired by choosing a feature can be computed
through:
6
(a) The entropy of Shannon, which measures the quantity of infor-
mation
Entropy(p) = −
c∑
k=1
P (k/p)× log(P (k/p)) (1)
where p is the number of examples associated to a position in the
tree, c is the total number of classes, k/p denotes the fraction of
examples associated to a position in the tree and labelled class
k, P (k/p) is the proportion of elements labelled class k at a
position p.
(b) The Gini index, which measures the dispersion in a population
Gini(x) = 1−
c∑
k=1
P (k/p)2 (2)
where x is a random sample, c is the number of classes, k/p
denotes the fraction of examples associated to a position in the
tree and labelled class k, P (k/p) is the proportion of elements
labelled class k at a position p.
2. The best split is then chosen by computing the gain of informa-
tion from growing the tree at given position, corresponding to each
feature as follows:
Gain(p, t) = f(p)−
n∑
j=1
Pj × f(pj) (3)
where p corresponds to the position in the tree, t denotes the test at
branch n, Pj is the proportion of elements at position p and that go
to position pj , f(p) corresponds to either Entropy(p) or Gini(p).
The feature that provides the higher Gain is selected to split the
node.
The optimal training of a classification problem can be NP-hard. Tree
ensembles have the advantage of running the algorithm from different
starting points, and this can better approximate the near-optimal classi-
fier.
In his paper, Leo Breiman discusses the accuracy of random Forests.
In particular, he gave proof that the generalized error, although differ-
ent from one application to another, always has an upper bound and so
random forests converge [4].
The injected randomness can improve accuracy if it minimizes cor-
relation while maintaining strength. The tree ensembles investigated by
Breiman use either randomly selected inputs or a combination of inputs at
each node to grow the tree. These methods have interesting characteristics
as:
- Their accuracy is at least as good as Adaboost
- They are relatively robust to outliers and noise
- They are faster than bagging or boosting
7
- They give internal estimates of error, strength, correlation, and vari-
able importance
- They are simple and the trees can be grown in parallel
There are four different levels of diversity which were defined in [13],
level 1 being the best and level 4 the worst.
• Level 1: no more than one classifier is wrong for each pattern.
• Level 2: the majority voting is always correct.
• Level 3: at least one classifier is correct for each pattern.
• Level 4: all classifiers are wrong for some pattern.
RF can guarantee that at least level two is reached. In fact, a trained
tree is only selected to contribute in the voting if it does better than
random, i.e. the error rate generated by the corresponding tree has to be
less than 0.5, or the tree will be dropped from the forest [4].
In [16], Verikas et al. argue that the most popular classifiers (Support
Vector Machine SVM, MultiLayer Perceptron MLP, and Relevance Vector
Machine RVM) provide too little insight about the variable importance to
the derived algorithm. They compared each of these methodologies to the
random forest algorithm to find that in most cases RF outperform other
techniques by a large margin.
5 Experimental study
5.1 Data collection
In this paper, we consider two sets of experiments. The sensor network is
constituted by 110 nodes, sensing respectively the levels of temperature
(50 sensors), pressure (50), and humidity (10) on the industrial device
under consideration.
5.1.1 Set of experiment 1
In this set of experiments, we consider that no level of correlation is in-
troduced betweent the different features. Moreover, we suppose that at
time t:
• Under normal conditions, temperature sensors follow a Gaussian law
of parameter (20×(1+0.005t), 1), while these parameters are mapped
to (35, 1) in case of a malfunction of the industrial device. Finally,
these sensors return the value 0 when they break down.
• The Gaussian parameters are (5 × (1 + 0.01t), 0.3) when both the
industrial device and the pressure sensors are in normal conditions.
The parameters are changed to (15, 1) in case of industrial failure,
while the pressure sensors return 1 when they are themselves broken
down.
8
• Finally, the 10 humidity sensors produce data following a Gaussian
law of parameter (52.5× (1 + 0.001t), 12.5) when they are sensing a
well-functioning device. These parameters are set to (70, 10) in case
of device failure, while malfunctioning humidity sensors produce the
value 0.
5.1.2 Set of experiment 2
For this set, a linear correlation is injected between the studied features.
• Under normal conditions, temperature sensors follow a Gaussian law
of parameter (20×(1+0.005t), 1), while these parameters are mapped
to (35, 1) in case of a malfunction of the industrial device. Finally,
these sensors return the value 0 when they break down.
• When both the industrial device and the pressure sensors are in
normal conditions, the value of pressure is computed as (x÷2+10),
where x is the value of temperature. The parameters are changed to
(15, 1) in case of industrial failure, while the pressure sensors return
1 when they are themselves broken down.
• For a well-functioning device, the 10 humidity sensors produce data
in the form of (x×525+12). These parameters are set to (70, 10) in
case of device failure, while malfunctioning humidity sensors produce
the value 0.
For both data sets, the probability that a failure occurs at time t
follows a Bernoulli distribution of parameter t÷ 35000.
Five levels of functioning are attributed to each category of sensors,
depending on the abnormality of the sensed data. These levels are defined
thanks to 4 thresholds, which are 22.9, 24.5, 26, and 28 degrees for the
temperature (a temperature lower than 22.9°C is normal, while a sensed
value larger than 28°C is highly related to a malfunctioning), 5.99, 6.4,
7.9, and 9 bars for the pressure parameter, and finally 68, 80, 92, and 95
percents for the humidity.
Data is generated as follows.
• For each time unit t = 1..100 during the industrial device monitoring,
– For each category c (temperature, pressure, humidity) of sen-
sors:
∗ For each sensor s belonging to category c:
· If s has not yet detected a device failure:
1. s picks a new data, according to the Gaussian law cor-
responding to a well-functioning device, which depends
on both t and c,
2. a random draw from the exponential law detailed pre-
viously is realized, to determine if a breakdown occurs
on the location where s is placed.
· Else s picks a new datum according to the Bernoulli dis-
tribution of a category c sensor observing a malfunction-
ing device.
9
The global failure level F t of a set of 110 sensed data produced by
the wireless sensor network at a given time t is defined as follows. For
each sensed datum dti, i = 1..110, let f ti ∈ {1, .., 5} be the functioning
level related to its category (pressure, temperature, or humidity). Then
F t = max f ti | i = 1..110.
5.2 Random forest design
Figure 1: Example of a tree in the random forest
The random forest, constituted in this set of experiments by 100 trees,
is defined as follows. For each tree Ti, i = 1..100:
• A sample of 67% of dates τ1, . . . , τ67 ∈ {1, ..., 100} is extracted
• The root of the tree Ti is the tuple (]{j | F τj = n, j = 1..67})n=1..5,
where ]X is the cardinality of the finite set X. Thus, its n-th co-
ordinate corresponds to the number of times the device has been in
the global failure n in this sample of observation dates.
• The category c having the largest Gain for the dates in the root
node is selected. The dates are divided into five sets depending on
thresholds related to c. Then, 5 edges labeled by both c and failure
levels l0i = {1, .., 5} are added to Ti, as depicted in Figure 1. They
are directed to (at most) 5 new vertices containing the tuples(
]{j | F τj = n and dτ
i
j
i has a c level equal to li}
)
n=1,..,5
.
In other words, we only consider in this node a sub-sample of dates
having their functioning level for category c equal to l0i , and we divide
the sub-sample into 5 subsets, depending on their global functioning
levels: the tuple is constituted by each cardinality of these subsets,
see Fig. 1.
• The process is continued, with: this vertex as a new root, the reduced
set of observed dates, and the categories minus c. It is stopped when
either all the categories have been regarded, or when tuple of the
node has at least 4 components equal to 0.
10
5.3 Providing a diagnostic on a new set of obser-
vations
Finally, given a new set of observations at a given time, the diagnostics
of the industrial device is obtained as follows.
Let T be a tree in the forest. T will be visited starting from its root
until reaching a leaf as described below.
1. All the edges connected to the root of T are labeled with the same
category c, but with various failure levels. The selected edge e is
the one whose labeled level of failure regarding c corresponds to the
c-level of failure of the observations.
2. If the obtained node n following edge e is a leaf, then the global
level of failure of the observations according to T is the coordinate
of the unique non zero component of the tuple. If not, the tree walk
is continued at item 1 with node n as new root.
The global diagnostics for the given observation is a majority consensus
of all the responses of all the trees in the forest.
5.4 Numerical simulations
The training set is obtained by simulating 100 observations for 10 suc-
cessive times, which results in 1000 instances. The resulting data base is
then used to train 100 trees that will constitute the trained random forest.
Figure 2 presents the delay between the time the system enters a fail-
ure mode and the time of its detection. This is done in the absence of
correlations between the different features. The 0 time value of delay, the
negative values, and positive value refer to in time predictions, early pre-
dictions and late predictions of failures, respectively. The plotted values
are the average result per number of simulations which varies from 1 to
100. With time, sensor nodes start to fail in order to simulate missing
data packets. As a result, the RF algorithm was able to detect 54% of the
failures either in time or before their occurrence.
For each of the 100 performed simulations, we calculated the average
number of errors in fault detection, produced by the trees in the forest.
Figure 3 shows that this error rate remained below 15% through the simu-
lation. This error rate includes both “too early” and “too late” detections.
When certain sensor nodes stop functioning, this leads to a lack on infor-
mation, which has an impact on the quality of predictions; this explains a
sudden increase in the error rate with time. We can conclude from the low
error rate in the absence of some data packets that increasing the number
of trees in the RF helps improve the quality and accuracy of predictions.
As described in Section 5.1.2, a correlation was introduced between
the features. Figure 4 shows the number of successful diagnostics when
the number of tree estimators in the forest changes. As shown in this
figure, the RF method guarantees a 60% success rate when the number of
trees is limited to 5. As this number grows, the accuracy of the method
increases to reach 80% when the number of trees is around 100.
11
Figure 2: Delay in failure detection with respect to the number of simulations.
Figure 3: Error rate in diagnostics with respect to the number of simulations
6 Conclusion
Instead of using wired sensor networks for a diagnostics and health man-
agement method, it is possible to use wireless sensors. Such a use can be
motivated by cost reasons or due to specific particularities of the moni-
tored device. In the context of a changing number and quality of provided
features, the use of random forests may be of interest. These random clas-
sifiers were recalled with details in this article, and the reason behind their
use in the context of a wireless sensors network monitoring was explained.
Finally, algorithms and first examples of use of these random forests for
diagnostics using a wireless sensor network were provided. The simulation
results showed that the algorithm guarantees a certain level of accuracy
12
Figure 4: Number of successful diagnostics with respect to the number of trees.
even when some data packets are missing.
In future work, the authors’ intention is to compare various tools for
diagnostics to the random forests, either when considering wireless sensor
networks or wired ones. Comparisons will be carried out both theoretical
and practical aspects. The algorithm of random forests, for its part, will
be extended to achieve prognostics and health management too. Finally,
the method for diagnosing an industrial device will be tested on a life size
model, to illustrate the effectiveness of the proposed approach.
References
[1] Yali Amit and Donald Geman. Shape quantization and recognition
with randomized trees. Neural Computation, 9:1545–1588, 1997.
[2] Leo Breiman. Bagging predictors. Machine Learning, 24:123–140,
1996.
[3] Leo Breiman. Using adaptive bagging to debias regressions. Technical
report, Statics Department UCB, 1999.
[4] Leo Breiman. Random forests. Machine Learning, 45:5–32, 2001.
[5] Sourabh Dash and Venkat Venkatasubramanian. Challenges in the
industrial applications of fault diagnostic systems. Computers and
Chemical Engineering, 24:785–791, 2000.
[6] Thomas G. Dietterich. An experimental comparison of three methods
for constructing ensembles of decision trees: Bagging, boosting, and
randomization. Machine Learning, 40:139–157, 2000.
13
[7] Y. Freund and R. Schapire. Experiments with a new boosting algo-
rithm. In Proceedings of the Thirteenth International Conference on
Machine Learning, pages 148–156, 1996.
[8] Giorgio Fumera and Fabio Roli. A theoretical and experimental anal-
ysis of linear combiners for multiple classifier systems. IEEE Transac-
tions on Pattern Analysis and Machine Intelligence, 27(6):942–956,
2005.
[9] Tin Kam Ho. The random subspace method for constructing deci-
sion forests. IEEE Transactions on Pattern Analysis and Machine
Intelligence, 20(8):832–844, 1998.
[10] Shigeru Kanemoto, Norihiro Yokotsuka, Noritaka Yusa, and
Masahiko Kawabata. Diversity and integration of rotating machine
health monitoring methods. In Chemical Engineering Transactions,
number 33, pages 169–174, Milan, Italy, 2013.
[11] Ramin Moghaddass and Ming Zuo. An integrated framework for
online diagnostic and prognostic health monitoring using a multistate
deterioration process. Reliability Engieneering and System Safety,
124:92–104, 2014.
[12] Robert E. Schapire. A brief introduction to boosting. In Proceedings
of the sixteenth International Joint Conference on Artificial Intelli-
gence, 1999.
[13] A. Sharkey and N. Sharkey. Combining diverse neural nets. The
Knowledge Egineering Review, 12(3):231–247, 1997.
[14] Alexey Tsymbal and Seppo Puuronen. Bagging and boosting with
dynamic integration of classifiers. In The 4th European Conference
on Principles and Practice of Knowledge Discovery in Data Bases
PKDD, pages 116–125, 2000.
[15] K. Tumer and J. Ghosh. Error correlation and error reduction in
ensemble classifiers. Connection Science, 8:385–404, 1996.
[16] A. Verikas, A. Gelzinis, and M. Bacauskiene. Mining data with ran-
dom forests: A survey and results of new tests. Pattern Recognition,
44:330–349, 2011.
14

