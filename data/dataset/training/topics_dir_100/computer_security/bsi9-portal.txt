Building Security In
Editor: Gary McGraw, gem@cigital.com
software security—remain blithely
unaware of their critical role. With-
out their direct participation, soft-
ware security will languish. In this
installment of Building Security In,
we describe a software security por-
tal that the US Department of
Homeland Security (DHS) Na-
tional Cyber Security Division
(NCSD) is developing (along with
the Carnegie Mellon Software En-
gineering Institute [SEI] and Cigi-
tal). The launch of this portal is
scheduled for October 2005 as part
of the US-CERT Web site. The
portal aims to provide a common,
accessible, well-organized set of in-
formation for practitioners wishing
to do software security. 
Software security:
Strong philosophy,
weak practice
Since 1999, several seminal books
have helped define the software se-
curity field.1–3 These books intro-
duced the approach to building
security in, which practitioners have
since enhanced, expanded, and pub-
lished in various technical articles,
including the Building Security In
series (see the sidebar).
The core philosophy underlying
this approach is that security, like
dependability and reliability, can’t
be added onto a system after the fact
through the addition of sets of fea-
tures, nor can it be tested into a sys-
tem. Instead, security must be
designed and built into a system
from the ground up. More than 90
percent of reported security inci-
dents are the result of exploits
against defects in the design or code
of software, according to the CERT
Coordination Center (CERT/CC)
of the SEI. Although traditional se-
curity efforts attempt to retroac-
tively bolt on devices that make it
more difficult for those defects to
be exploited, such devices simply
aren’t effective.
Standard-issue software develop-
ment lifecycle models—ranging
from the process-heavy Capabilities
Maturity Model (CMM) to the
lightweight Extreme Programming
(XP) approach—are not focused on
creating secure systems. They all ex-
hibit serious shortcomings when the
goal is to develop systems with a
high degree of assurance.4 If they
even address security issues at all,
they’re most often relegated to a sep-
arate thread of project activity fo-
cused on security features; as a
result, security is treated as an add-
on property. For example, although
using applied cryptography (such as
SSL) to protect message traffic is a
useful security feature, the union of
all such security features doesn’t en-
sure secure software.
Any isolation of security con-
siderations from primary system-
development tasks results in an
unfortunate and untenable separa-
tion of concerns. Security should
be integrated and treated on a par
with other system properties. The
only way to develop systems with
required functionality and perfor-
mance that can also withstand ma-
licious attacks is to design and
implement them to be secure. Soft-
ware security is thus a full lifecycle
undertaking in which critical de-
sign decisions and trade-offs must
be clearly and thoroughly under-
stood. In addition, tools for sup-
porting security engineering (for
example, source code analysis
tools) must be integrated into the
software development environ-
ment. By treating software security
risk explicitly throughout the soft-
ware life cycle, we can properly
identify and mitigate the conse-
quences of security failure and suc-
cessful security attack.
For each lifecycle activity, a
team made up of security analysts
and developers must address secu-
rity goals and incorporate best
practices to assure security. In some
situations, existing development
methods can be used to enhance
security. Current research is also
creating new methods that devel-
opers and analysts can apply as they
build software; however, more re-
search and experimentation are re-
quired before the goal of security
can become a reality.5 One way of
illustrating a lifecycle approach that
incorporates security into each
basic phase of software develop-
NANCY R.
MEAD
Software
Engineering
Institute
GARY
MCGRAW
Cigital 
O
ne of the real challenges facing the emerging
field of software security is the lack of an easily
accessible common body of knowledge. Simply
put, most software developers and architects—
the very people who need to understand and practice software
A Portal for 
Software Security
PUBLISHED BY THE IEEE COMPUTER SOCIETY       ■ 1540-7993/05/$20.00 © 2005 IEEE ■ IEEE SECURITY & PRIVACY 75
Building Security In
ment has been intentionally cre-
ated to be process agnostic. That is,
the best practices and methods de-
scribed are applicable to any and all
development approaches as long as
they result in the creation of soft-
ware artifacts. Given this approach,
software development processes as
diverse as the waterfall model, Ra-
tional Unified Process (RUP), XP,
Agile, spiral development, and
CMM involve creating a common
set of software artifacts (the most
common artifact being code). In
this way, we can apply software se-
curity best practices and their asso-
ciated knowledge catalogs
regardless of exactly which “base”
software process is followed. Figure
1 includes best practices (as does
Figure A in the sidebar), knowl-
edge, and tools, all organized ac-
cording to software artifacts.
The BSI Software
Assurance Initiative
The Build Security In (BSI) Soft-
ware Assurance Initiative seeks to
alter the way that software is devel-
oped so that it’s less vulnerable to at-
tack by building security in from
the start. BSI is a project of the
Strategic Initiatives Branch of the
DHS’s NCSD, which has spon-
sored the development and collec-
tion of software assurance and
software security information that
will help software developers and
architects create secure systems.
The effort is managed by Joe Jar-
zombek, the DHS director for soft-
ware assurance.
As part of the initiative, a BSI
content catalog will be made avail-
able as a Web portal in October.
This portal is intended for software
developers and software develop-
ment organizations that want in-
formation and practical guidance
on how to produce secure and reli-
able software. The catalog is based
on the principle that software secu-
rity is fundamentally a software en-
gineering problem that we must
address systematically throughout
the software development life
cycle. The catalog will contain
links to a broad range of informa-
tion about best practices, tools, and
knowledge.
BSI content catalog
Figure 2 identifies aspects of software
assurance covered in the catalog. Ma-
terial will be divided into three major
categories: processes, tools, and
knowledge. This is an alternative way
of organizing software security con-
tent without reference to artifacts.
The categorization is the result
76 IEEE SECURITY & PRIVACY      ■ JULY/AUGUST 2005
Figure 1. The organizing concept for the Build Security In (BSI) portal. The alignment of this view shows not only best
practices (as Figure A in the sidebar does), but also knowledge and tools.
Architecture and design
Architectural risk analysis
Threat modeling
Principles
Guidelines
Historical risks
Modeling tools
Resources
Requirements
Requirements engineering
Misuse and abuse cases
Attack patterns
Resources
Code
Code analysis
Mitigation strategies
Implementation rules
Code analysis
Resources
Foundations
Risk management
Project management
Training and awareness
Measurement and metrics
Software development
life cycle process
Business relevance
Resources
Test plans and results
Security testing
White box testing
Attack patterns
Historical risks
Resources
Integrated system
Penetration testing
Incident handling and monitoring
Assembly and integration
Black box testing
Application firewalls and
  other operational tools
Resources
Key
Best practices
Foundation knowledge
Tools
Resources
Building Security In
of merging an earlier collaboration
framework with ideas presented in
the lifecycle touchpoints diagram
that accompanied each Building
Security In article (see Figure A in
the sidebar). The US National
Cyber Security Taskforce’s report
also identified additional practices
on processes to produce secure
software (www.cyberpartnership.
org/initsoft.html). Soon, the BSI
portal will supplement the task-
force’s practices with process mod-
els and references to appropriate
tools, measurement, and other
resources.
Although the team creating the
portal won’t achieve complete con-
tent coverage immediately, the
DHS plans to launch the portal with
some content in most of the areas
shown in Figure 2. The BSI team
will use feedback received on this
initial content (as well as input from
industry) to prioritize further work
on the catalog.
Software 
assurance aspects
The portal will include several types
of information, categorized for effi-
cient search and utility.
Best practices. A significant por-
tion of the BSI effort is devoted to
best practices that can provide the
biggest return considering the cur-
rent best thinking, available
technology, and industry practice.
As more resources become avail-
able, more practices are proven,
changes occur in the industry envi-
ronment, and technology pro-
gresses, this list will grow.  IEEE
Security & Privacy’s Building Secu-
rity In series has covered several of
these best practices in some detail
(keys BSI2, BSI3, BSI4, BSI5, and
BSI6 in the sidebar). 
Knowledge. Software defects with
security ramifications—including
implementation bugs such as buffer
overflows and design flaws, including
inconsistent error handling—pro-
mise to be with us for years. Recur-
ring patterns of software defects
leading to vulnerabilities have been
identified by longtime software secu-
rity practitioners, and the BSI team is
documenting detailed instructions
on how to produce software without
these defects. This work shows up in
Figure 2 as “guidelines” and “code-
mitigation strategies.”
The BSI team has also identified
principles that provide high-level
direction for avoiding security
problems in design, such as the
principle of least privilege and the
principle of compartmentalization.
We’ll  further describe and enhance
them as the portal evolves. (For
more on foundational knowledge
for software security, see key BSI7
in the sidebar.) The BSI team is
collaborating with the US Na-
tional Institute of Standards and
Technology (NIST), the Interna-
tional Organization for Standard-
ization (ISO), and the IEEE on
standards activities focused on de-
veloping safe and secure subsets of
languages and software assurance
style guides.
Tools. The BSI portal includes in-
formation about which tools devel-
opers and security analysts can use to
detect and/or remove common vul-
www.computer.org/security/ ■ IEEE SECURITY & PRIVACY 77
Figure 2. Components of the BSI content catalog. The three main content areas are best practices, knowledge, and tools,
which are organized by software artifacts, as shown in Figure 1.
TOOLSKNOWLEDGE
Risk
management 
Project
management 
Assembly
and
integration 
Evolution
Training
and
awareness 
Requirements
engineering 
Architectural
risk
analysis
Threat
modeling 
BEST PRACTICES
SDLC
process
Modeling
tools 
Source
code
analysis 
Black box
testing 
tools 
Business
relevance
Attack
patterns Principles Guidelines
Historical
risks
Code-
mitigation
strategies
Source 
code 
analysis 
Security
testing 
Measures
and
metrics 
Incident
handling
and
monitoring
Penetration
testing 
Application
firewalls 
White
box
testing
Deploying
and 
operating 
Building Security In
nerabilities. Of particular interest are
static analysis tools that help devel-
opers look for common security-
critical problems in source code.
The best current commercial tools
support languages such as Java,
CLR, C++, C, and PHP (see key
BSI5 in the sidebar). 
Business Case. Even with deep
technical content, a business case is
required to convince industry to
adopt secure software development
best practices and educate con-
sumers about the need for software
assurance. Therefore, each docu-
mented best practice addresses the
business case for use of that practice.
In addition, the portal will include
an overall business case framework. 
Dynamic navigation. The extent
to which users will find the content
accessible as well as useful will de-
termine how this portal impacts
real-world development practices
and, thus, overall systems security.
The BSI team is trying to make the
content approachable in several
different ways. For example, a soft-
ware engineer might use the cata-
log to determine applicable
security guidelines; an architect
might use security principles to de-
termine how to design an n-tier
application in a secure fashion; and
a development team leader might
use the information to justify soft-
ware assurance techniques to man-
agement by building a business
case. Because the repository will be
structured and designed to evolve
78 IEEE SECURITY & PRIVACY      ■ JULY/AUGUST 2005
Over the past two years, theBuilding Security In series in this
magazine has introduced and dis-
cussed several software security best
practices that developers and security
engineers can apply throughout the
software development life cycle (see
Figure A). The articles in this series,
listed in the table below, provide an
outline for a common body of
software security knowledge. 
The Build Security In (or BSI)
portal will be a living repository for
software security knowledge, best
practices, and content based directly
on the ideas introduced in this
series. The portal will be officially
launched in October.
TITLE KEY AUTHOR IEEE SECURITY & URL: WWW.CIGITAL.COM
PRIVACY CITATION PAPERS/DOWNLOAD/
Software Security BSI1 Gary McGraw 2(2):80–83 bsi1-swsec.pdf
Misuse and Abuse Cases: Getting BSI2 Paco Hope, Gary McGraw, 2(3):32–34 bsi2-misuse.pdf
Past the Positive Annie Anton
Risk Analysis in Software Design BSI3 Denis Verdon, Gary McGraw 2(4):79–84 bsi3-risk.pdf
Software Security Testing BSI4 Bruce Potter, Gary McGraw 2(5):81–85 bsi4-testing.pdf
Static Analysis for Security BSI5 Brian Chess, Gary McGraw 2(6):76–79 bsi5-static.pdf
Software Penetration Testing BSI6 Brad Arkin, Scott Stender, 3(1):84–87 bsi6-pentest.pdf
Gary McGraw
Knowledge for Software Security BSI7 Sean Barnum, Gary McGraw 3(2):74–78 bsi7-knowledge.pdf
Adopting a Software Security BSI8 Dan Taylor, Gary McGraw 3(3):88–91 bsi8-program.pdf
Improvement Program
Table 1. Building Security In articles.
Abuse
cases
Security
requirements
Risk
analysis
External
review
Risk-based
security tests
Static
analysis
(tools)
Risk
analysis
Penetration
testing
Security
breaks
Requirements
and use cases
Design Test
plans
Code Test
results
Field
feedback
Figure A. Software security touchpoints. We can apply several software security best
practices (the arrows) throughout the software development life cycle, given a set of
common software artifacts (shown along the bottom).
Software security best practices BSI series
Building Security In
as well as support usage by a variety
of user types, it will include a dy-
namic navigation interface.
O nce practical guidance and ref-erence materials are available
for the day-to-day work most devel-
opment organizations do, the BSI
team plans to identify and organize
content for practical guidance and
reference materials for enterprise-
level security concerns. 
To help ensure that this software
assurance initiative is accepted and
supported by the community of soft-
ware development organizations, the
team is seeking involvement from
representatives from industry, acade-
mia, and government. Toward this
goal, working groups to guide the
creation of the BSI software assur-
ance portal have been formed. The
Software Technical Working Group
(STWG) is composed of respected
individuals in the technical commu-
nity whose primary function is to re-
view the  portal content’s technical
veracity and identify future content.
Although the portal is currently
in a nascent stage, the BSI team wel-
comes feedback; prior to the site’s
launch, you can send it to Jan Philpot
at the SEI (philpot@sei.cmu.edu).
Community involvement and use is
crucial to the portal’s success,  and
we look forward to help from the
community in improving software
security worldwide. 
References
1. R. Anderson, Security Engineering:
A Guide to Building Dependable Dis-
tributed Systems, John Wiley &
Sons, 2001.
2. J. Viega and G. McGraw, Building
Secure Software, Addison-Wesley,
2001; www.buildingsecure
software.com.
3. M. Howard and D. LeBlanc, Writ-
ing Secure Code, Microsoft Press,
2001.
4. A.B. Marmor–Squires and P.A.
Rougeau, “Issues in Process
Models and Integrated Environ-
ments for Trusted Systems
Development,” Proc. 11th Nat’l
Computer Security Conf., US Govt.
Printing Office, 1998, pp. 109–
113.
5. N.R. Mead et al., “Managing Soft-
ware Development for Survivable
Systems,” Annals Software Eng., vol.
11, no. 1, 2001, pp. 45–78.
Nancy Mead is a senior member of the
technical staff at the Software Engineer-
ing Institute (SEI). She is also a faculty
member at Carnegie Mellon University.
Her research interests are in the areas of
software requirements engineering, soft-
ware architectures, and software metrics.
Mead has a PhD in mathematics from
the Polytechnic Institute of New York,
and a BA and an MS in mathematics
from New York University. She is a senior
member of the IEEE. Contact her at
nrm@sei.cmu.edu.
Gary McGraw is chief technology officer
of Cigital. His real-world experience is
grounded in years of consulting with
major corporations and software pro-
ducers. McGraw is the coauthor of
Exploiting Software (Addison-Wesley,
2004), Building Secure Software (Addi-
son-Wesley, 2001), Java Security (John
Wiley & Sons, 1996), and four other
books. He has a BA in philosophy from
the University of Virginia and a dual PhD
in computer science and cognitive science
from Indiana University. Contact him at
gem@cigital.com.
www.computer.org/security/ ■ IEEE SECURITY & PRIVACY 79
DON’T RUN THE RISK.
BE SECURE.
Ensure that your networks operate safely and provide critical services 
even in the face of attacks. Develop lasting security solutions, with this 
peer-reviewed publication. 
Top security professionals in the field share information you can rely on:
Wireless Security • Securing the Enterprise • Designing for Security Infrastructure 
Security • Privacy Issues • Legal  Issues • Cybercrime • Digital Rights Management 
• Intellectual Property Protection and Piracy • The Security Profession • Education
Order your subscription today.
Submit an article to IEEE Security & Privacy. Log onto Manuscript Central at http://cs-ieee.manuscriptcentral.com/.
www.computer.org/security/

