Software Security
Introduction
Erik Poll
Digital Security
Radboud University Nijmegen
Admin
• NB IMC051 (5EC, for TRU/e) vs ISOFSE (6EC)
• All course material will be on http://www.cs.ru.nl/~erikpoll/ss
• Register in osiris (and hence blackboard)
– If you cannot, send me an email to get on the back-up 
mailing list
• For TRU/e students: get on the TRU/e mailing list                          
https://true-security.nl/admission/
Admin
• September 19: TRU/e borrel after the lecture
• September 22: OWASP evening 
Register at
https://www.owasp.org/index.php/Netherlands_September_22nd,_2016
Goals of this course
• What is software security ? 
Understanding the role that software plays 
– in providing security 
– as source of insecurity
• Principles, methods & technologies to make software more 
secure
– incl. practical experience with some of these
• Typical threats & vulnerabilities that make software less secure, 
and how to avoid them
4
Practicalities: prerequisites
• Introductory security course
• Basic programming skills, in particular
– C(++)  or assembly/machine code
– eg.  malloc(),  free(),  *(p++), &
strings in C using char*
– Java or some other typed OO language
– eg.  public, final, private, protected, 
Exceptions
– bits of PHP and javascript
5
Sample C(++)  code you will see next week
char* copying_a_string(char* string)  {
char* b = malloc(strlen(string));
strcpy(b,a); 
return(b);
}
int using_pointer_arithmetic(int pin[])  {
int sum = 0; 
int *pointer = pin;
for (int i=0; i<4; i++ ){
sum = sum + *pointer;
pointer++;
}
return sum;
}
6
Sample Java code you will see next month
public int summingAnArray(int[] pin)
throws NullPointerException,      
ArrayIndexOutOfBoundsException {
int sum = 0;
for (int i=0; i<4; i++ ){
sum = sum + a[i];
}
return sum;
}
7
Sample Java OO code you will see next month
final class A {
public final static SOME_CONSTANT 2;
private B b1, b2;
protected A ShallowClone(Object o) 
throws ClassCastException {
x = new(A);
x.b1 = ((A)o).b1;
x.b2 = ((A)o).b2;
return x;
}
}
8
Literature & other resources
• Slides etc. available on-line at
http:///www.cs.ru.nl/~erikpoll/ss
• obligatory literature: articles and lecture notes on language-
based security
– see links on webpage
– I’ll be updating this as we go along
• More suggestions for background reading, incl. some good 
books and web-sites
9
Practicalities: form & examination
• 2-hrs lecture every week
– read associated papers & ask questions!
• project work
– PREfast for C++ (individual)
– JML program verification for Java (individual, 6EC version 
only)
– …
• written exam 
• 50% of grade, but you must do the projects,                        
and you must pass the exam
10
Today
• Organisational stuff
• What is "software security"?
• The problem of software insecurity
• The causes of the problem
• Security concepts
• The solution to the problem?
11
Motivation
Quiz
Why can websites, servers, browsers, laptops, 
smartphone, wifi access points, network routers, 
mobile phones, cars, ... be hacked?
Because they contain SOFTWARE!
13
Why a  course on software security?
• Software plays a major role in providing security, and 
is a major source of security problems.
– Software is the weakest link in the security chain, with the 
possible exception of “the human factor” 
• Software security does not get much attention
– in other security courses, or 
– in programming courses, 
or indeed, in much of the security literature!
14
Fairy tales 
Many discussions of security begin with Alice and Bob
How can Alice communicate securely with Bob,                 
when Eve can modify or eavesdrop on the communication?
15
Alice Bob
Eve
16
This is an 
interesting problem,
but it is not the 
biggest problem
Reality & the bigger problem
Alice’s computer is communicating with some other computer
on the internet
How can we prevent  Alice’s computer  from being hacked,                      
when it communicates with some other computer?
NB solving the first problem - securing the communication - does not help!
17sws1
Alice’s 
computer
possibly malicious 
input
18
We focus on software security, but don’t forget
that security is about, in no particular order,
people (users, employees, sys-admins, programmers,...),
access control, passwords, biometrics, cryptology, protocols,
policies & their enforcement, monitoring, auditing, 
legislation,  persecution, liability, risk management,
incompetence, confusion, lethargy, stupidity, mistakes,
complexity, software, bugs, verification, hackers, viruses,
hardware, operating systems, networks, databases, 
public relations, public perception, conventions, standards,
physical protection, data protection, ...
The problem
Slammer Worm (Jan 2002)
20
Pictures taken from The Spread of the Sapphire/Slammer Worm, by David Moore, Vern Paxson, Stefan Savage, Colleen Shannon, Stuart Staniford, 
Nicholas Weaver 
Slammer Worm (Jan 2002)
21
Pictures taken from The Spread of the Sapphire/Slammer Worm, by David Moore, Vern Paxson, Stefan Savage, Colleen Shannon, Stuart Staniford, 
Nicholas Weaver 
Mini-assignment for coming week
To get an impression of the problem, have a look at
http://www.us-cert.gov/ncas       alerts and bulletins
http://www.securitytracker.com/
http://www.securityfocus.com/vulnerabilities
22
Superficial analysis of the problem
Observation 1
All these problems are due to (bad) software 
Namely 
• the Linux/Windows/Mac/… Operating System (OS)
• web browser or web application
• graphics software, for Quicktime, Adobe Flash, PDF ..
• the router software
• the videoconferencing system software
• ...
Such software bugs are why constant patching of 
system is needed to keep them secure
24
Observation 2
All these problems are due to bad software that 
• can be executed/addressed over the network
– eg. in case of Slammer worm
• executes on (untrusted) input obtained over the 
network
– eg. in case of pdf viewers, CMS, routers,...
– or – in the worst case - both
With ever more network connectivity, ever more 
software can be attacked.
25
Changing target of attacks 
• Traditionally, focus on operating system and network
“Solutions”
– regular patching of OS, firewalls, virus scanners
• Increasingly, focus on 
• web applications
• web browser
• mobile devices 
• smartphones, tablets, that bypass firewalls
• embedded software
• software in cars, factories, critical infrastructure...
and targetted attacks on specific organisation or person
26
Changing nature of attackers
27
hacker, 1983
[movie War Games]
hacker, 2010’s
Estonia DoS attack, stuxnet, Sony hack, 
NSA hacks revealed by Snowden,
Ukraine electricity grid                                
hacker, 2010’s
36 M€ internet banking fraud in NL in 2012, 
325 M$ in bitcoins collected by CryptoWall
Current prices for 0days
Changing nature of attackers
• Traditionally, hackers are amateurs motivated by fun
• publishing attacks for the prestige
• Increasingly, hackers are professional
• attackers go underground
• zero-day exploits are worth money
• attackers include 
• organized crime                                                               
with lots of money and (hired) expertise
• government agencies:                                                      
with even more money & in-house expertise
‘Classic’ example: Stuxnet
http://www.ted.com/talks/ralph_langner_cracking_stuxnet_a_21st_century_cyberweapon.html
29
Software (in)security: crucial facts
• No silver bullets!
crypto or special security features do not magically solve all 
problems
– software security ≠ security software
– “if you think your problem can be solve by cryptography, you do not 
understand cryptography and you do not understand your problem”  
[Bruce Schneier]
• Security is emergent property of entire system 
– just like quality
• (Non-functional) security aspects should be integral part of the 
design, right from the start
The causes of the problem
Quick audience poll
• How many of you learned to program in C or C++?
• ~ as a first programming language?
• How many of these courses 
• warned you about buffer overflows?
• explained how to avoid them?
Major causes of problems are
• lack of awareness
• lack of knowledge
• irresponsible teaching of dangerous programming 
languages
32
Quick audience poll
• How many of you have built a web-application?
– in which programming languages?
• What is the secure way of doing a SQL query in this 
language? (to avoid SQL injection)
Major causes of problems are
• lack of awareness
• lack of knowledge
33
1. Security is always a secondary concern
• Security is always a secondary concern
– primary goal of software is to provide some
functionality or services; managing associated
risks is a derived/secondary concern
• There is often a trade-off/conflict between 
– security
– functionality & convenience
where security typically looses out
• more examples of this later...
34
Functionality vs security
• Functionality is about what software should do,
security is (also) about what it should not do
Unless you think like an attacker, 
you will be unaware of any potential threats
35
Functionality vs security: Lost battles?
• operating systems (OSs)
– with huge OS, with huge attack surface
• programming languages
– with easy to use, efficient, but very insecure and error-prone 
mechanisms
• webbrowsers
– with plug-ins for various formats, javascript, ActiveX, Flash, 
...
• email clients
– which automatically cope with all sorts of formats & 
attachments..
36
Functionality vs security : PHP
"After writing PHP forum software for three years now,                           
I've come to the conclusion that it is basically impossible for 
normal programmers to write secure PHP code.
It takes far too much effort. .... PHP's raison d'etre is that it is 
simple to pick up and make it do something useful. There needs 
to be a major push ... to make it safe for the likely level of 
programmers - newbies.                                                            
Newbies have zero chance of writing secure software unless 
their language is safe. ...   "
[Source  http://www.greebo.cnet/?p=320]
37
2. Weakness in depth
input languages, for
interpretable or executable input
eg paths, filenames, .doc, .xls, .pdf, .mp4,...
programming languages
38
hardware (incl network card & peripherals)
application
operating system
webbrowser
with plugins platform
eg Java or .NET
system APIs
middleware
libraries SQL
data
base
2. Weakness in depth
Software 
• runs on a huge, complicated infrastructure
– HW, OS, platforms, webbrowser, lots of libraries & APIs, ...
• is built using complicated languages
– programming languages (incl. machine code)                                                            
and input languages (SQL, HTML, XML, mp4, …)
• using various tools
– compilers, IDEs, preprocessors, dynamic code downloads
These may have security holes, or may make the 
introduction of security holes very easy & likely
39
Recap
Problems are due to
• lack of awareness
– of threats, but also of what should be protected
• lack of knowledge
– of potential security problems, but also of solutions
• compounded by complexity
– software written in complicated languages, using large APIs , 
and running on huge infrastructure
• people choosing functionality over security
40
Security concepts & goals
NB I assume you know all
this stuff; if you don’t, read up on it!
• “is this system secure?”
• “this system is secure”
Why are this question and this claim meaningless?
Starting point for ensuring security
Any discussion of security should start with inventory of
• the stakeholders
• their assets
• the threats to these assets
• attacker model
What are the capabilities & motives of potential attackers?
incl. employees, clients, script kiddies, criminals, NSA, or 
other ATPs (Advance Persistent Threats)
Any discussion of security without understanding these 
issues is meaningless
• what do we secure? against which types of attacks?
43
Software and Security
• Security is about regulating access to assets
– eg. information or functionality
• Software provides functionality
– eg on-line exam results
• This functionality comes with certain risks
– eg what are risks of on-line exam results?
• (Software) security is about managing these risks
44
Security concepts 
45
owners
attackers
countermeasures
risks
availability/
usefulness
assets
vulnerabilities
threats
want to maximise
of
to
want to minimise
impose
increase
want to abuse
give
rise to
may have
require
exploit
increase
lead to
reduce
Security concepts
• Security is about imposing countermeasures to reduce risks to 
assets to acceptable levels
• A security policy is a specification of what security 
requirements/goals the countermeasures are intended to 
achieve
– secure against what and from whom ?
• Security mechanisms to enforce the policy
• Bottlenecks: 
– expressing what we (don't) want in a policy
– enforcing this, dynamically or statically
46
Security Objectives: CIA
• Confidentiality 
– unauthorised users cannot read information
• Integrity
– unauthorised users cannot alter information
• Availability
– authorised users can access information
• Non-repudiation for accountability
– authorised users cannot deny actions
In Dutch: BIV = Beschikbaarheid, Integriteit, Vertrouwlijkheid
47
Security objectives
• Integrity nearly always more important than confidentiality
Eg think of
– your bank account information
– your medical records 
– all the software you use, incl. the entire OS
• Availability may be undesirable
– for privacy you may want certain data to be or become 
unavailable
48
Security goals
The well-known trio
• confidentiality, integrity, authentication (CIA)
but there are more “concrete” goals
• traceability and auditing (forensics)
• monitoring (real-time auditing)
• multi-level security
• privacy & anonymity
• ...
and meta-property
• assurance – that the goals are met
49
How to realise security objectives? AAAA
• Authentication
– who are you?
• Access control/Authorisation
– control who is allowed to do what
– this requires a specification of who is allowed to do what
• Auditing
– check if anything went wrong
• Action
– if so, take action
50
How to realise security objectives?
Other names for the last three A's
• Prevention
– measures to stop breaches of security goals
• Detection
– measures to detect breaches of security goals
• Reaction
– measures to recover assets, repair damage, and persecute 
(and deter) offenders
NB don't ever be tempted into thinking that good prevention 
makes detection & reaction superfluous.
Eg. breaking into any house with windows is trivial; despite this absence of 
prevention, detection & reaction still deter burglars.
51
Threats vs security requirements
• information disclosure
– confidentiality
• tampering with information
– integrity
• denial-of-service (DoS)
– availability
• spoofing
– authentication
• unauthorised access
– access control
52
Countermeasures
• Countermeasures can be non-IT related
– physical security of building
– screening of personnel
– legal framework to deter criminals
– police to catch criminals
– ...
but we won’t consider these
53
Software security
warning: confusing terminology
Common use of terminology can be very confused & confusing: 
(security) weakness, flaw, vulnerability, bug, error, coding defect...
We can make a distinction between
• a security weakness/flaw: 
something that is wrong or could be better 
• a security vulnerability
a weakness/flaw that  can actually be exploited by an attacker 
which requires the flaw to be
- accessible: attacker has to be able to get at it
- exploitable: attacker has to be able to do some damage with it
Eg by unplugging your network connection,
some (many?) vulnerabilities become flaws.
55
software vulnerabilities
Software vulnerabilities can be introduced at two “levels”
• design flaws                                                                               
vulnerability in the design
• bugs aka implementation flaws or code-level defects             
vulnerability in the software introduced when implementing a 
system
Very coarse consensus: bugs and design flaws are equally common
Vulnerabilities also arise on other levels (out of scope for now)
• configuration flaw when installing software on a machine
• the user
• unforeseen consequence of the intended functionality (eg. spam)
56
Typical software security vulnerabilities 
57
Security bugs found in Microsoft bug fix month (2002)
37%
20%
26%
17%
0%
buffer overflow
input validation
code defect
design defect
crypto
bugs aka implementation flaws aka code-level defects             
There are roughly two kinds of implementation flaws
1. bugs that can be understood looking at the program itself                    
(and understanding what it is meant to do!)
– eg. simple typos, confusing two program variables, off-by-one error 
in array access, ...
– sometimes called logic errors, as opposed to syntax errors,   
or an errors in the program logic
2. lower-level problems that can only be spotted if you understand
the underlying platform or other languages/systems the 
program interacts with, eg
– buffer overflow, integer overflow,... in binaries compiled from C(++)
– SQL injection, XSS, CSRF,.... in web-applications
58
The dismal state of software security
The bad news
people keep making the same (types of) mistakes
The good news
people keep making the same (types of) mistakes 
…… so we can do something about it!
“Every upside has its downside” [Johan Cruijff]
59
The wider view of security
throughout 
the software development life cycle
Tackling software insecurity
• Knowledge about standard mistakes is crucial in preventing 
them
– These depends on the programming language,  the 
“platform” (OS, database systems, web-application 
framework,…), and the type of application
– There is lots of info available on this now
• But this is not enough: security to be taken into account from the 
start, throughout the software development life cycle (SDLC)
– several ideas & methodologies to do this
61
Security in Software Development Life Cycle
62
[Source: Gary McGraw, Software security, Security & Privacy Magazine, IEEE, 
Vol 2, No. 2, pp. 80-83, 2004. ]
McGraw’s Touchpoints
Security in Software Development Life Cycle
63
McGraw’s Touchpoints
[book: Software Security: building security in, Gary McGraw, 2006]
Evolution of a tackling software security
Organisations always begin tackling security at the end of the 
SDLC, and then slowly evolve to tackle it earlier 
For example
1. first, do nothing
– some problems may happen & then you patch
2. then, implement support for regular patching
3. then, pre-emptively have products pen-tested
– eg. hire pen-testers, set up bug bounty program, ...
4. then, use static analysis tools when coding
5. then, train your programmers to know about common problems
6. then, think of abuse cases, and develop security tests for them
7. then, start thinking about security before you even start 
development
Methodologies  for security in development life cycle
Common/best  practices, with methods for assessments, and 
roadmaps for improvement
• McGraw’s Touchpoints
BSIMM Building Security In – Maturity Model              
http://bsimm.com
• Microsoft SDL
• OpenSAMM Software Assurance Maturity Model 
http://opensamm.org
65
OpenSAMM’s 4 business functions                             
and 12 security practices
66
Microsoft’s SDL Optimisation Model
Microsoft SDL: STRIDE
• As part of SDL, Microsoft proposed STRIDE as 
methodology for threat modelling 
S – Spoofing 
T - Tampering
R - Repudiation
I – Information Disclosure
D – Denial-of-Service
E – Elevation of Privilege
68
BSIMM
Based on data collected from large enterprises
See https://www.bsimm.com/framework/
69
Spot the (security) flaws in electronic_purse.c
int balance;
void decrease(int amount)
{ if (balance <= amount)
{ balance = balance – amount; }
else { printf(“Insufficient funds\n”); }
}
void increase(int amount)
{ balance = balance + amount;  
}
<= should be >=
what if this sum is 
too large for an int?
what if amount
is negative?
70
Different kinds of implementation flaws
1. possible lack of input validation of 
(untrusted) user input
– could be a design flaw rather than an 
implementation flaw?
– more “fundamental” than the flaws 
below
2. simple mistake in the program logic
3. potential problem depending on how the 
underlying platform work,  eg. in case of 
an integer overflow;
– “lower level” than the flaws above
71
<= should be >=
what if amount
is negative?
what if sum is too 
large for a 64 bit int?
To read coming week
• Gary McGraw, 
Software security, 
Security & Privacy Magazine, Vol 2(2), pp. 80-83, 2004, IEEE
• Brian Chess & Brad Arkin 
Software Security in Practice
Security & Privacy Magazine, Vol 9(2), pp. 89 - 92, 2011, IEEE 
• Check out websites
https://www.us-cert.gov/ncas/bulletins
http://www.us-cert.gov/ncas/alerts/
http://www.securitytracker.com/
http://www.securityfocus.com/vulnerabilities
for security alerts in the past week
72

