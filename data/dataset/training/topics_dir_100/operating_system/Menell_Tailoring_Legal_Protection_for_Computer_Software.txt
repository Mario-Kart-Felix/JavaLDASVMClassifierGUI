Tailoring Legal Protection for
Computer Software
Peter S. Menell*
It became evident by the mid-1970s that intellectual work embodied
in new technologies-in particular, computer software-did not fit
neatly within the traditional forms of legal protection for intellectual
property.' Because of the complexity of these issues, Congress created
the National Commission on New Technological Uses of Copyrighted
Works (CONTU) for the purpose of recommending a national policy
that would provide adequate legal protection for the intellectual work
embodied in new technologies while ensuring public access to those
technologies.2 The Commission conducted hearings and received ex-
pert reports beginning in May 1976. On July 31, 1978, CONTU rec-
ommended that full copyright protection be extended to all forms of
computer software.3 Congress implemented this recommendation in
amendments to federal copyright law enacted in 1980.
4
The computer industry has undergone dramatic change in the nine
years since CONTU issued its recommendations. 5 In 1978, fewer than
200,000 microcomputers (each costing more than $1000) were in use
in the United States.6 By the end of 1986, this number had increased to
* Associate Professor of Law, Georgetown University Law Center. S.B., Massachusetts
Institute of Technology, 1980; J.D., Harvard Law School, 1986; Ph.D., Stanford University,
1986. I am grateful to Timothy Bresnahan, Judge Stephen Breyer, Joseph Brodley, Jeffrey
Cunard, Einer Elhauge, Paul Goldstein, Shane Greenstein, Gillian Hadfield, Bob Perrault,
Steven Shavell, and participants in the law and economics seminar at Harvard Law School for
helpful comments. This research was supported by a grant from the John M. Olin Founda-
tion. An earlier version of this article was awarded First Prize for Harvard Law School in the
Nathan Burkan Memorial Competition. I am solely responsible for all remaining errors.
1. See NATIONAL COMMISSION ON NEw TECHNOLOGICAL USES OF COPYRIGHTED WORKS,
FINAL REPORT 3 (1979) [hereinafter CONTU FINAL REPORT]; Kaufman, Copyrighting Object Code:
Applying Old Legal Tools to New Technologies, 4 COMPUTE/L.J. 421 (1983) (student author).
2. Congress also requested CONTU to study the intellectual property issues raised by
photocopying and computer data bases. CONTU FINAL REPORT, supra note 1, at 3.
3. See id. at 1.
4. Pub. L. No. 96-517, 94 Stat. 3007, 3028 (codified at 17 U.S.C. §§ 101, 117 (1982)).
See generally notes 68-77 infra and accompanying text.
5. Congress conducted hearings in April 1986 to consider the implications of these
changes for public policy. To accompany these hearings, the Office of Technology Assess-
ment prepared a study entitled Intellectual Property Rights in an Age of Electronics and Information.
6. COMPUTER AND BUSINESS EQUIPMENT MANUFACTURING ASSOCIATION, COMPUTER AND
BUSINESS EQUIPMENT MARKETING AND FORECAST DATA BOOK 87 (1985) [hereinafter CBEMA
DATA BOOK].
1329
STANFORD LAW REVIEW
an estimated twelve million.7 Over this same period, computer
software revenues grew at an annual rate of more than 20 percent.8
Problems that have emerged during this period of growth-impedi-
ments to entry by small, independent firms, 9 wasteful expenditure of
vast resources to develop noninfringing, yet compatible computer sys-
tems,10 and the lack of clear industry standards I '-have highlighted se-
rious shortcomings of CONTU's analysis and recommendations.
These problems can be traced to CONTU's inadequate appreciation of
the public goods problem raised by computer software and CONTU's
failure to recognize the unique characteristics of computer software
and systems.
CONTU approached software protection as a typical problem in in-
tellectual property-securing an adequate return for authors and in-
ventors who might otherwise be discouraged in their efforts because of
the low cost of copying. 12 CONTU assumed that simply affording
broad protection to all forms of computer software would encourage
the optimal level of innovation in computer technology, thereby pro-
moting the public interest. The peculiar nature of the public goods
problem with regard to computer software and the network external-
ityI3 inherent in computer systems, however, breaks the neat link, in
the typical case, between broad protection and the inducement of the
optimal level of innovation to promote the public interest.
What ultimately determines the social value of legal protection for
intellectual property is the speed at which and extent to which it fosters
the availability of new, improved, and less expensive products. Tech-
nological innovations at particular stages of the computer industry are
important determinants of social welfare, but only to the extent they
are diffused and adopted. Given the many interrelated stages of the
computer industry-basic research, operating systems, hardware prod-
ucts, integrated hardware systems, peripherals, application programs,
7. Id.
8. Id. at 85.
9. See Nilles, Copyright Protection for Programs Stored in Computer Chips: Competing with IBM
and Apple, 7 HAMLINE L. REv. 103, 122 (1984) (student author) ("Copyright protection for
operating system programs stored in [read-only memory] ... makes it difficult, if not impossi-
ble, for small computer manufacturers to compete with IBM and Apple.").
10. See B. KELLY & D. GRIMES, IBM PC COMPATIBLE COMPUTER DIRECTORY xx-xxi (1985)
(explaining that no system can be totally compatible with the IBM PC without infringing copy-
right laws and noting that some compatible computer manufacturers "invest a great deal of
time and effort to ensure that their systems will support the major software on the market"
which is formatted for the IBM PC); Miller & McMillan, IBM Compatibility, POPULAR Co MPtrr-
ING, Apr. 1984, at 104, 108-10.
11. See Poumelle, The Micro Revolution: Clearing a Path, POPULAR COMPUrING,July 1984, at
81, 81 (lamenting that the "16-bit operating system jungle offers confusion, not standardiza-
tion"); Wilson, Computers: When Will the Slump End, Bus. WK., Apr. 21, 1986, at 58, 58 ("The
biggest impediment to growth [in the computer industry] ... is the lack of a clearly defined set
of hardware and software standards on which to build [computer] networks.").
12. See CONTU FINAL REPORT, supra note 1, at 9-12.
13. See text accompanying notes 43-46 infra.
1330 [Vol. 39:1329
July 1987] COMPUTER SOFTWARE PROTECTION 1331
marketing-and the high costs of contracting among the diverse produ-
cers and consumers at each stage, expansive legal protection at an early
stage inhibits innovation at the other stages. This slows diffusion and
adoption. In addition, when technological advancement at one stage
proceeds by enhancing prior innovations, bundling innovations, and
applying prior innovations in a new area, as, for example, in application
programming, long-lived protection slows innovation, diffusion, and
adoption.
Moreover, because computers are a systems technology exhibiting
network externalities, uniformity in product standards, e.g., uniform
computer operating systems, is a valuable attribute, broadening the
availability of complementary products such as application programs.
14
Uniform product standards broaden the availability of complementary
products such as application programs. Affording full copyright pro-
tection to operating systems-the source of compatibility-can discour-
age adoption of widespread product standards.
This article addresses these shortcomings of the CONTU recom-
mendations by presenting an economic analysis of legal protection for
computer software and suggesting the direction that should be taken. 15
Before we can undertake such an analysis, it is important to have some
familiarity with the technological, economic, and legal landscape. Part
I describes the salient features of computer technology and discusses
the markets for computers and computer products. Part II then identi-
14. CONTU did recognize that the computer industry lacked clear product standards.
See CONTU FINAL REPORT, supra note 1, at 13. They did not, however, comprehend the full
import of the standardization issue nor did they realize its connection to the design of rules
protecting intellectual property. The blame for this critical oversight should not be heaped
solely on the CONTU members. Their panel of expert economists did not address the stan-
dardization/compatibility issue in its report to the Commission. See Y. BRAUNSTEIN, D.
FISCHER, J. ORDOVER, & W. BAUMOL, ECONOMICS OF PROPERTY RIGHS AS APPLIED TO COM-
PUTER SOFTWARE AND DATA BASES (June 1977) [hereinafter ECONOMICS OF PROPERTY RIGHTS]
(report prepared for CONTU).
15. The use of an economic framework for analyzing federal protection for intellectual
property is generally consistent with the intellectual property clause of the U.S. Constitution.
The stated constitutional purpose of Congress' power to grant legal protection to intellectual
property is to "promote the Progress of Science and useful Arts, by securing for limited times
to Authors . . . the exclusive Right to their . . . Writings." U.S. CONST. art. I, § 8. The
Supreme Court has interpreted the copyright law implementing this language to mean that
the benefit accorded the author is a "secondary consideration," United States v. Paramount
Pictures, Inc., 334 U.S. 131, 158 (1948), and that the "economic philosophy behind the clause
empowering Congress to grant patents and copyrights is the conviction that encouragement
of individual effort by personal gain is the best way to advance public welfare," Mazer v. Stein,
347 U.S. 201, 219 (1954). See Breyer, The Uneasy Case for Copyright: A Study of Copyright in Books,
Photocopies, and Computer Programs, 84 HARV. L. REV. 281, 284-93 (1970); Computer Programs and
Proposed Revisions of the Patent and Copyright Laws, 81 HARv. L. REV. 1541, 1549 (1968) (student
author); see also Twentieth Century Music Corp. v. Aiken, 422 U.S. 151, 156 (1975) (although
the immediate effect of copyright law is to secure a fair return for an author's creative labor,
such private motivation "must ultimately serve" to "promot[e] broad public availability" of
the fruits of that labor); Kewanee Oil Co. v. Bicron Corp., 416 U.S. 470, 480-81 (1974);
United States v. Bily, 406 F. Supp. 726, 730 (E.D. Pa. 1975) (noting that the copyright system
is meant to be "no more extensive than is necessary in the long run to elicit a socially optional
[sic] amount of creative activity").
STANFORD LA W REVIEW
fies and describes the two primary sources of market failure that might
justify government intervention: the public goods nature of informa-
tion and the network externality flowing from industry-wide standards.
Part III describes the current state of legal protection for computer
software in the United States.
Parts IV and V analyze, respectively, legal protection for computer
operating systems and application programs. They assess the need for
legal protection and then analyze the economic effects of using copy-
right doctrine to protect these forms of computer software. These
Parts conclude by outlining modes of legal protection that are better
tailored to remedying the market failures in the computer software
market. Part VI offers some concluding remarks.
I. TECHNOLOGICAL AND MARKET BACKGROUND
An understanding of the basic technology of computers is essential
to analyzing legal protection for computer software. This Part briefly
reviews the salient features of computer technology. 16 Section A dis-
cusses the design of computers, highlighting the relationship between
hardware and software. Section B discusses the major types of com-
puter software.
A. Computer Technology
1. Overview of computer processing.
Evolution of the modern computer. The first computing machines con-
sisted solely of hardware. These "dedicated" counting machines could
perform only the one function that they were wired to perform. They
had to be rewired in order to perform a different function.
During the 1940s, scientists developed the first machines that could
store and use encoded instructions or programs. The actual computer
in these programmable or "universal" machines is the central process-
ing unit (CPU). The CPU is wired to perform a basic set of "primitive
functions" such as addition and multiplication. In essence, a computer
processes data by performing controlled sequences of these primitive
functions.
The flexibility provided by programmability greatly enhanced the
utility of computers. Limitations on electronic technology, however,
constrained the computing power of the first generation of com-
puters.' 7 The electronic vacuum tubes that ran these computers were
bulky, consumed large amounts of energy, and generated substantial
heat. The invention of the transistor in the late 1940s greatly expanded
16. See generally S. CURRAN & R. CURNOW, OVERCOMING COMPUTER ILLITERACY: A
FRIENDLY INTRODUCTION TO COMPUTERS (1983); D. LONGLEY & M. SHAIN, DICTIONARY OF IN-
FORMATION TECHNOLOGY (2d ed. 1986).
17. See generally E. FEIGENBAUM & P. MCCORDRUCK, THE FIFTH GENERATION: JAPAN'S
COMPUTER CHALLENGE TO THE WORLD (1983) (tracing the evolution of computer technology).
1332 [Vol. 39:1329
COMPUTER SOFTWARE PROTECTION
the capability of computers. Since computers use binary electronic
switches to store and process information, the great challenge for the
computer industry was to reduce the size of these switches. The devel-
opment of integrated circuits enabled many switches to fit within thin
layers of semiconductor material. By the 1970s, "semiconductor
chips" containing more than 100,000 transistors were being used in
computers.
As chip technology advanced, the size of computers decreased while
their computing power increased. The early computers were predomi-
nantly large and expensive "mainframes." By the early 1960s, ad-
vances in electronics technology enabled computer firms to
manufacture minicomputers. Further advances in electronics, in partic-
ular, the development of low-cost integrated circuits, have made micro-
(or personal) computers possible.
Modern computer design. The basic hardware of a modem computer
system includes a CPU, internal memory storage, and disk drives or
other devices for transferring data and programs into and out of the
internal memory. The internal memory typically features two types of
chips: random access memory (RAM) and read only memory (ROM).
RAM chips serve primarily as temporary storage devices, though they
can also serve as permanent memory for data or programs. Data can be
input into RAMs, erased, or altered. ROM chips have memory perma-
nently embedded in them and therefore can only be read by the com-
puter. Information on ROM chips cannot be altered by the computer
system.
Computer engineers design the programming capability of a com-
puter to suit the user's needs. By building more of the desired func-
tions directly into the wiring of the computer, they can achieve more
efficient processing. This greater speed, however, comes at a cost of
less flexibility-that is, less ability to run a wide range of programs.
This technological trade-off harks back to the early days of computer
technology when all programs were wired into the computer. Advances
in computer technology have made greater efficiencies of processing
possible without the need to hard-wire the computer. When a user has
only a few computing needs or desires high-speed processing, however,
it may still be better to rely heavily upon internal programming.
Most microcomputers feature a high degree of programming flexi-
bility. These computers typically have a general operating system that
controls the hardware components of the system. The operating sys-
tem also assists the computer in reading and implementing externally
stored application programs. The range of application programs that
can be run on a computer determines the computer's flexibility. The
next section will describe the nature of computer software in more
detail.
July 1987] 1333
STANFORD LAW REVIEW
2. Types of computer software.
Computer programs can be written in object code or source code.
Object code consists of sequences of binary units (Os and Is) that the
computer can read directly. In essence, a binary unit simply indicates
whether particular electronic switches should be in the on or off posi-
tion. Source code consists of sequences of instructions in a higher level
computer language (such as Fortran or PL-1). Because computers can
read only object code, compilers (or translaters) within the computer
translate programs written in source code into object code.
There exists a complex hierarchy of computer programs. The two
major categories of programs are operating systems and application
programs.18 Operating systems manage the internal functions of the
computer. 19 They coordinate the reading and writing of data between
the internal memory and the external devices (e.g., disk drives, key-
board, printer), perform basic housekeeping functions for the com-
puter system, and facilitate use of application programs. In essence,
the operating system prepares the computer to execute the application
programs.
Application programs perform the wide range of data processing
tasks sought by the computer user. Examples of application programs
include bookkeeping programs, word processing programs, data
processing programs, and video games.
B. The Markets for Computers and Computer Products
At the most basic level, consumers demand "computing services" to
meet their data processing needs. As we saw in Section A, these needs
can be satisfied completely by hardware, or they can be satisfied by a
general purpose computer equipped with the appropriate application
software. Thus, hardware and software are both substitute and comple-
mentary commodities. Consequently, although this article focuses on
legal protection for computer software, it will be necessary to consider
the implications that various types of legal protection have on the
broader markets of computers and computer products.
1. Demand for computer services.
The demand for computer services is driven by the great diversity of
entities-businesses, government agencies, research institutions, indi-
viduals-with data processing needs. These needs range from simple
calculations to complex scientific applications. Consumers also differ in
18. A third important type of software is called microcode. Microcode, the most basic
level of software, is simply a set of encoded instructions. Microcode typically substitutes for
hardware circuitry that executes the primitive functions of the computer. Because of its close
kinship to hardware, microcode is also referred to as firmware.
19. See generally Cook, Operating System, POPULAR COMpUrING, Aug. 1984, at 111 (review-
ing the major operating systems).
[Vol. 39:13291334
COMPUTER SOFTWARE PROTECTION
the variety of data processing tasks that they must accomplish. A me-
dium-sized business, for example, might have many data processing
tasks for which a computer might prove useful: handling the payroll,
record-keeping, word processing, and projecting business trends. In
contrast, a manufacturing company might simply need to regulate the
temperature of a kiln. A physicist might need a computer to execute
high-speed calculations.
2. Supply of computer services.
The hardware sector of the computer industry consists of original
equipment manufacturers, semiconductor chip manufacturers, and
vendors. The vendors purchase computer components and chips from
the other firms and assemble them into computer systems. A few domi-
nant firms in the industry, like IBM, are involved in all aspects of hard-
ware research and development.
The software sector offers a wide variety of services and products.
This work includes the design of general operating systems, contract
programming, and the development of commercial application pack-
ages. Many large hardware systems manufacturers develop operating
and application software for their systems. There are also many small,
independent firms that specialize in aspects of software services and
product development.
3. Evolution of the computer industry.
The rapid advancement of all aspects of computer technology has
enabled the computer services market to expand at a blistering pace
since the advent of commercial computing in the mid-1950s. Machine
performance has increased by six orders of magnitude since 1955.20
The greater sophistication, enhanced flexibility, and lower cost of com-
puting power have greatly expanded the market for computing serv-
ices. Computers, which not long ago were found only at large
corporations, research institutions, and government agencies, are now
in a substantial portion of American homes. 21
In the hardware field, the trend has been toward smaller, universal
computer systems. In 1965, domestic consumers purchased 260
minicomputers and 5,350 mainframes. 22 Minicomputer unit sales sur-
passed mainframe unit sales by 1974. And microcomputer unit sales
surpassed minicomputer unit sales in their second year of production,
1976.23 It is estimated that sales of microcomputers (costing more than
$1000) reached approximately four million units for 1986. This trans-
20. See Computer Technology Shifts Emphasis to Software: A Special Report, ELECTRONICS, May
8, 1980, at 142, 143.
21. See E. ROGERS, THE DIFFUSION OF HOME COMPUTERS (1982).
22. See CBEMA DATA Boox, supra note 6, at 87.
23. Id.
1335July 1987]
STANFORD LA W REVIEW
lates into revenues of almost twelve billion dollars, giving microcom-
puters the largest share of computer revenues.
24
These trends in hardware have dramatically changed the structure
of the software sector of the industry. Just ten years ago, most software
firms produced custom programs for predominantly commercial cus-
tomers.25 The advent and proliferation of microcomputers and the in-
crease in flexibility of minicomputers have greatly increased the
demand for general purpose application packages. Consequently,
firms that produce commercial application packages for a variety of
computer systems have emerged as the major revenue-generating force
in the computer industry.2
6
Software is expected to play an increasingly important role in the
computer market. The Computer and Business Equipment Manufac-
turers Association predicts that software revenues will grow at an an-
nual rate of 13.6 percent through 1990, compared to a rate of 9.7
percent for the hardware sector of the industry. 27 In the coming years,
a major focus of the industry will be on connecting the vast array of
computer and telecommunication systems. 28
II. ECONOMIC JUSTIFICATIONS FOR GOVERNMENT INTERVENTION IN THE
MARKET FOR COMPUTER SOFTWARE
A fundamental reference point for economic analysis is the proposi-
tion that in the absence of market imperfections, 29 competition will as-
sure an efficient allocation of resources.30 This Part provides a general
discussion of two market failures prevalent in the market for computer
software. Section A discusses the market failure endemic to all markets
in goods that embody technological innovations-the public goods as-
24. Id.
25. See HARBRIDGE HOUSE, LEGAL PROTECTION OF COMPUTER SOFIrVARE: AN INDUSTRIAL
SURVEY (Nov. 1977) (report prepared for CONTU).
26. See U.S. DEPARTMENT OF COMMERCE, INTERNATIONAL TRADE ADMINISTRATION, A
COMPETITIVE ASSESSMENT OF THE U.S. SOFTWARE INDUSTRY 20 (1984) [hereinafter SOFTWARE
TRADE STUDY].
27. See CBEMA DATA BOOK, supra note 6, at 85.
28. See Wilson, supra note 11.
29. Market imperfections arise in many forms. See S. BREYER, REGULATION AND ITS RE-
FORM 15-32 (1982). The more important types are the presence of monopoly or monopsony
power, incomplete or incorrect information on the part of economic agents, and externalities.
Production externalities are costs or benefits accruing to the producer of a good that are
borne directly by neither the seller nor the buyer of the good. Industrial pollution (not
charged to the manufacturer or otherwise "internalized" by the regulatory/legal system) illus-
trates a classic externality problem. Goods for which an individual's consumption of the good
does not preclude others (who do not pay for the good) from consuming part or all of the
good generate consumption externalities. We discuss these types of externalities in greater
detail below. See notes 43-44 infra and accompanying text.
30. See P. SAMUELSON & W. NORDHAUS, ECONOMICS 678 (12th ed. 1985). The focus on
efficiency concerns in this article should not be construed as suggesting that distributional
issues are not important. Rather, it reflects the view that such considerations are better ad-
dressed by taxation policy, welfare policies, and other more direct and better targeted means
of income redistribution.
1336 [Vol. 39:1329
COMPUTER SOFTWARE PROTECTION
pect of information. Section B discusses the market failure created
when individuals' utility or satisfaction from consuming a good de-
pends on the number of other persons consuming the same good.31
This might arise in the computer field, for example, because the availa-
bility of application programs for use with a particular operating system
depends upon the number of people who own microcomputers with
that operating system. Section C explains why these market failures
and the technology and structure of the software industry suggest that a
functional distinction should be made in analyzing legal protection be-
tween operating systems and application programs.
A. Innovation as a Public Good
All markets for goods embodying intellectual property exhibit an
externality commonly referred to as the "public goods" problem.
32
Public goods have two distinguishing features: (1) nonexcludability (it
is difficult to exclude those who do not pay for the good from consum-
ing it); and (2) nonrivalrous competition (additional consumers of the
good do not deplete the supply of the good available to others). Beau-
tiful gardens and military defense are classic examples of public goods.
The private market will undersupply these goods because producers
cannot reap the marginal value of their investment in providing such
goods.
33
As CONTU well recognized, the information comprising innova-
tions in computer software is a prime example of a public good.
3 4
Given the availability of low-cost copying, it is often impossible to ex-
clude nonpurchasers from the benefits of innovative computer pro-
grams once they are made commercially available. Moreover, one
person's use of the information does not detract from any other per-
son's use of that same information. Since the authors and creators of
computer software cannot reap the marginal value of their efforts, in
the absence of other incentives to innovate they will undersupply tech-
nological advances in computer software. The government typically al-
leviates the public goods problem in generating innovation and
original expression by bestowing limited legal protection for goods that
embody novel ideas and literary works that contain original expression.
1. The nature of laws protecting intellectual property.
The basic linkage between the scope of intellectual property protec-
31. See D. HEMENWAY, INDUSTRYWIDE VOLUNTARY PRODUCT STANDARDS (1975); Katz &
Shapiro, Network Externalities, Competition, and Compatibility, 75 AM. ECON. REv. 424, 424 (1985).
32. See Arrow, Economic Welfare and the Allocation of Resourcesfor Invention, in THE RATE AND
DIRECTION OF INvENTIvE Acavrry: ECONOMIC AND SOCIAL FACTORS 609 (1962).
33. See P. SAMUELSON & W. NORDHAUS, supra note 30, at 48-49, 713-15; R. TRESCH, PUB-
LIC FINANCE: A NORMATIVE THEORY 107-29 (198 1); Samuelson, The Pure Theory of Public Expen-
diture, 36 REv. EcoN. & STATISTICS 387 (1954).
34. See CONTU FINAL REPORT, supra note 1, at 9-12.
July 1987] 1337
STANFORD LAW REVIEW
tion and the public welfare involves three steps.3 5 First, enhancing the
scope of intellectual property protection (e.g., by increasing the term of
legal protection or expanding the breadth of legal protection) increases
the expected reward to the creator by enhancing the opportunity for
monopolistic exploitation of any works created. Second, increased re-
wards encourage inventive activity. Moreover, the disclosure of new
discoveries that is encouraged by protection further spurs inventive ac-
tivity. Third, greater investment in inventive activity results in the dis-
covery of more ideas and faster advancement of technology, thereby
increasing the range of products and reducing the cost of products to
society.
This linkage, however, is greatly complicated in markets for prod-
ucts in which innovation occurs at many stages. What ultimately deter-
mines the social value of technological progress is the speed at and
extent to which new, improved, and less expensive products are avail-
able. The number and type of individual technological innovations at
particular intermediate stages are important, but no more important
than the pattern of adoption and diffusion of these innovations.3 6 His-
torical and industry studies of the innovation process find that inven-
tions are highly interdependent: "Technologies ... undergo a gradual,
evolutionary development which is intimately bound up with the course
of their diffusion."37 In fact, "secondary inventions"-including essen-
tial design improvements, refinements, and adaptations to a variety of
uses-are often as crucial to the generation of social benefits as the
initial discovery.38
These interactions have been and continue to be particularly impor-
tant in the evolution of computer technology. Advances in computer
technology are made at many interrelated levels-basic research, sys-
tem-unit hardware, operating systems, peripheral equipment hardware,
application programming, marketing-by diverse individuals, firms,
and research institutions. It cannot be assumed automatically, there-
fore, that expansive legal protection for intellectual property at any one
level will generate both the optimal amount of innovation and the opti-
mal diffusion path.3 9
35. See Kaplow, The Patent-Antitrust Intersection: A Reappraisal, 97 HARV. L. REV. 1813,
1823-24 (1984).
36. See P. DAVID, NEW TECHNOLOGY DIFFUSION, PUBLIC POLICY, AND INDUSTRIAL COMtPETr-
ITIVENESS 6 (Center for Economic Policy Research, Publication No. 46, Apr. 1985).
37. Id. at 20. See generally Rosenberg, Factors Affecting the Diffusion of Technology, 10 EXPLO-
RATIONS ECON. HIsT. 3 (1972).
38. See, e.g., Enos, A Measure of the Rate of Technological Progress in the Petroleum Refining
Industry, 6J. INDUS. ECON. 180, 189 (1958); Mak & Walton, Steamboats and the Great Productivity
Surge in River Transportation, 32 J. ECON. HIsT. 619, 625 (1972).
39. See P. DAVID, supra note 36, at 5 (expressing the concern that increased protection for
intellectual property might hinder diffusion).
1338 [Vol. 39:1329
COMPUTER SOFTWARE PROTECTION
2. Assessing the need for legal protection for intellectual work.
The failure of one of the assumptions underlying the efficiency of
the free market system is only a necessary condition for government
intervention; it is not a sufficient condition. Because of the costs of legal
protection (in terms of adverse effects on the directly affected market as
well as distortions in other markets), the unregulated market, though
not efficient, might still perform better than government regulation.
40
Thus, it is important to assess the extent to which other forces-both
market and nonmarket-tend to offset the adverse effects of the public
goods problem.
The market itself often provides means by which producers of pub-
lic goods can realize sufficient rewards to encourage them to produce
such goods. The first firm to introduce a product earns substantial and
long-lived advantages. 4 1 In addition, producers of innovative products
can internalize some of the benefits of their research efforts by requir-
ing purchasers to enter into long-term maintenance and updating con-
tracts. They can also require purchasers to enter into licensing
agreements that prohibit reproduction of the product and dissemina-
tion of information embodied in the product.
Alternatively, producers can use technological means for preventing
those who do not pay for the good from enjoying the benefits. For
example, anticopying devices can impede reproduction and disclosure
of intellectual work embodied in products. If these means of protecting
research and development are inexpensive and effective, then legal
protection may not be needed to ensure efficient provision of the good.
Indeed, if so, there is no appreciable public goods problem.
Government and private subsidies of research and development can
also alleviate the public goods problem. Government research and de-
velopment subsidies, particularly through the Department of Defense,
have been extremely important in the development of computer tech-
nology.42 Moreover, universities, whose work product typically is in
the public domain, have played an important role in the development
of computer technology.
40. Thus, though recognizing the public goods problem inherent in markets for goods
embodying intellectual property, some commentators have questioned the desirability of gov-
ernment intervention to correct this market imperfection. See, e.g., S. BREYER, supra note 29;
Plant, The Economic Aspecl of Copyright in Books, 1 ECONOMICA (n.s.) 167 (1934).
41. SeeJ. BAIN, BARRIERS TO NEW COMPETITION (1956); BUREAU OF ECONOMICS, U.S. FED-
ERAL TRADE COMMISSION, CONSUMER PREFERENCE, ADVERTISING, AND SALES: ON THE ADVAN-
TAGE FROM EARLY ENTRY (Oct. 1979); Schmalensee, Product Differentiation Advantages of
Pioneering Brands, 72 Am. ECON. REV. 349 (1982).
42. See M. PECK, GOVERNMENT RESEARCH AND DEVELOPMENT SUBSIDIES IN THE AMERICAN
ECONOMY? (Apr. 1985) (Economic Research Institute, Economic Planning Agency, Tokyo,Ja-
pan, discussion paper no. 35); Levin, The Semiconductor Industry, in GOVERNMENT AND TECHNI-
CAL PROGRESS: A CROSS INDUSTRY ANALYSIS 9 (R. Nelson ed. 1982).
1339July 1987]
STANFORD L4 W REVIEW
3. The design of legal protection for intellectual work: balancing costs and
benefits.
As the discussion of diffusion issues above indicates, legal protec-
tion for intellectual property creates real costs to society. In addition to
the direct costs of research and development associated with increased
inventive activity, enlarging the scope of intellectual property protec-
tion increases the losses due to monopolistic exploitation of innova-
tions. The loss of innovations that would have been created in the
absence of legal protection is particularly regrettable. Moreover, a
broad regime of intellectual property protection might inhibit inventive
activity by competitors and producers of complementary and down-
stream products. Finally, a system of protection of intellectual property
will entail administrative expenses, including the cost of keeping
abreast of the legal rights of others and enforcing legal rights.
From the perspective of the public interest, the optimal system for
protecting intellectual work equates the marginal benefit of enhancing
the scope of intellectual work protection with the marginal cost of
greater protection. That is, it equates the benefits of the availability of
more and better products with research costs, losses due to monopolis-
tic exploitation, administrative costs, and inhibiting effects on inventive
activity.
B. Network Externalities
The second principal market failure in the computer software mar-
ket, one that CONTU entirely overlooked in its analysis and recom-
mendations, arises from the presence of network externalities.
Network externalities exist in markets for products for which the utility
or satisfaction that a consumer derives from the product increases with
the number of other consumers of the product.43 The telephone is a
classic example of a product for which there are network externalities.
The benefits to a person from owning a telephone are a function of the
number of other people owning telephones connected to the same tele-
phone network; the more people on the network, the more people each
person can call and receive calls from. Another classic network exter-
nality flows from the prevalence of a standard typewriter keyboard.44
Because almost all English language typewriters feature the same key-
board configuration, commonly referred to as "QWERTY," typists
need learn only one keyboard system.
Network externalities also inhere to product standards that allow for
the interchangeability of complementary products.45 Examples of
43. See Katz & Shapiro, supra note 31.
44. See David, Clio and the Economics of QWVERTIY 75 AM. ECON. REv., May 1985, at 332
(Vol. 75, No. 2, Papers and Proceedings of the 97th Annual Meeting of the American Economic
Association).
45. See D. HEMENWAY, supra note 31.
1340 [Vol. 39:1329
COMPUTER SOFTWRE PROTECTION
products for which this type of network externality is important are
video cassette recorders, phonographs, and computer operating sys-
tems for microcomputers. 46 As discussed in Part I, general computer
operating systems have developed that allow consumers to use a variety
of application software programs on the same system-unit hardware.
The only requirement is that the application program be coded to work
on the operating system embedded in the general computer system.
Thus, the operating system serves as a compatibility nexus for a partic-
ular computer network. Application software producers will develop
more programs for systems that are widely used; hardware producers
will develop more configurations of disk drives, memory, and other fea-
tures for popular operating systems. In general, the benefits of a larger
computer operating system network include a wider variety of applica-
tion software that can run on that operating system, lower search costs
for consumers seeking particular application programs that run on that
operating system, and wider availability of compatible hardware con-
figurations and peripherals.
1. The effect of legal protection for product standards on the realization of
network externalities.
An important economic consideration in markets with significant
network externalities is whether firms will have the correct incentives to
adopt compatible products, thereby enlarging existing networks.
Professors Katz and Shapiro demonstrate that firms might prefer to
adopt noncompatible product standards even though their adoption of
compatible products would increase net social welfare. 47 The explana-
tion for this behavior is that by adopting a compatible standard, a firm
enlarges the size of a network that comprises both the adopter's prod-
uct and its rivals' products. This will have the effect of increasing the
desirability of the rivals' products to consumers, thereby reducing the
adopter's market share (although of a larger market) relative to what it
would have been had the firm adopted a noncompatible product
standard.48
The availability of legal protection for product standards strength-
ens this adverse incentive by allowing firms with brand recognition to
reap increased rewards from developing noncompatible product stan-
dards. In the absence of legal protection for product standards, the
private benefits from introducing a noncompatible product standard
46. See Brock, Competition, Standards and Self-Regulation in the Computer Industr)y in REGUJLAT-
ING THE PRODUCT: QUALITY AND VARIETY 75, 75 (R. Caves & M. Roberts eds. 1975) ("Effective
standards greatly facilitate the interchange of data and programs among the machines of dif-
ferent manufacturers and allow the user to combine equipment from several suppliers.").
47. See Katz & Shapiro, supra note 31, at 435.
48. See id; see also Brock, supra note 46, at 78 ("From the manufacturer's viewpoint, the
value of standards depends upon his competitive position. If he is satisfied with his current
market share, he will want to differentiate his product as much as possible from competing
products .... ").
July 19871 1341
STANFORD LA W REVIEW
will be short-lived. As the product standard gains acceptance in the
marketplace, other firms-perhaps those without wide brand recogni-
tion-will adopt the new product standard, thereby reducing the mar-
ket share of the first producer. By contrast, the availability of legal
protection for product standards greatly increases the rewards that a
firm can reap by successfully introducing a noncompatible product
standard. It allows a firm to enter a market without expanding the net-
work of its rivals, while enabling it to obtain the exclusive right to man-
ufacture and sell products embodying its standard. In this way, the firm
can enjoy a long-term monopoly in the standard, with the option, of
course, of licensing the standard to others at a significant royalty.
Should a proprietary product standard become a de facto industry
standard, the magnitude of external benefits from the network will de-
pend on the ability of the "dominant" firm to serve the market (i.e.,
through diffusion of the products) and the transaction costs of licensing
the standard to firms that can better serve particular segments of the
market.49 Thus when consumers have homogeneous demands, one
firm with mass production and marketing capabilities can adequately
serve the market, ensuring that the full potential benefits of the net-
work are realized. But when consumers have heterogeneous de-
mands-i.e., their needs are sufficiently specialized that one
manufacturing and marketing organization cannot adequately serve all
of them-and costs of licensing are high, the network will not expand
sufficiently to generate its full potential of external benefits.
2. The effects of legal protection for product standards on innovation in
and adoption of new product standards.
While a widely adopted product standard can offer important bene-
fits to consumers and firms, it can also "trap" the industry in an obso-
lete or inferior standard.50 In essence, the installed base built upon the
"old" standard-reflected in durable goods and human capital (train-
ing) specific to the old standard- can create an inertia that makes it
much more difficult for any one producer to break away from the old
standard by introducing a noncompatible product, even if the new stan-
dard offers a significant technological improvement over the current
standard. 51 In this way, network externalities can retard innovation
and slow or prevent adoption of improved product standards.5 2
49. See Katz & Shapiro, supra note 31, at 435-36.
50. See Farrell & Saloner, Standardization, Compatibility, and Innovation, 16 RAND J. EcoN.
70 (1985).
51. See D. HEMENWAY, supra note 31, at 30, 39; Farrell & Saloner, Installed Base and Com-
patibility: Innovation, Product Preannouncements, and Predation, 76 AM. ECON. REV. 940, 940 (1986);
Farrell & Saloner, supra note 50, at 71-72, 75-79 (1985).
52. See W.B. ARTHUR, COMPETING TECHNOLOGIES AND LOCK-IN BY HISTORICAL SMALL
EVENTS: THE DYNAMICS OF ALLOCATION UNDER INCREASING RETURNS 19-21 (Center for Eco-
nomic Policy Research, Stanford University, Publication No. 43) (1985); Farrell & Saloner,
supra note 50, at 75-79.
1342 [Vol. 39:1329
COMPUTER SOFTWARE PROTECTION
As an example of this phenomenon, investigators cite the persis-
tence of the standard "QWERTY" typewriter keyboard despite the
availability of a better key configuration developed by August Dvorak
and W.L. Dealey in 1932. 5 3 Adoption of the better standard appears to
have been effectively stymied by switching costs-the costs of con-
verting or replacing "QWERTY" keyboards and retraining those who
use this system. Because of the fear that national standards would exac-
erbate the inertia problem, the National Bureau of Standards declined
to set interface standards for computers in the early 1970s.
54
The availability of the proper mode of legal protection for product
standards can alleviate this inertia effect by assuring innovators of bet-
ter standards a limited monopoly in the event their standards break
into the market. Without the availability of legal protection, innova-
tors' profits would be diverted as other firms introduced competing
products embodying the improved standard. It should be noted in this
regard that this legal protection is more important for smaller firms
than for firms with well-established reputations because the latter have
less difficulty in establishing new product standards.
At the same time, however, affording legal protection for product
standards encourages investment by competing firms in efforts to cir-
cumvent such legal protection. Firms that are prevented from using
established standards often invest substantial resources in attempts to
develop compatible, noninfringing products. From the broader social
perspective, investment in research solely to circumvent legal protec-
tion, as opposed to advancing the state of the art, is wasteful.
3. The effect of legal protection for product standards on competition and
innovation in complementary products.
In many cases, a product standard is only one component of the
ultimate product. In the computer field, for example, operating sys-
tems (and related ROM chips) are typically sold as part of computer
packages that comprise a basic system-unit, software, and peripherals.
By offering the product standard component only as part of a package
of components, a firm that enjoys legal protection for the product stan-
dard can effectively prevent other firms from offering products that use
the product standard.
In a static model of competition, there is little reason to fear that
this tying phenomenon 55 will be any more harmful from an efficiency
standpoint than the general anticompetitive effect of monopoly power
in the proprietary product standard. 56 All monopoly profits that can be
53. See David, supra note 44.
54. See Lecture by Ruth Davis of the Center for Computer Sciences and Technology,
National Bureau of Standards, at Harvard University (April 1972), cited in D. HEMENWAY, supra
note 31, at 39.
55. See generally 3 P. AREEDA & D. TURNER, AmNrrRusT LAw 733 (1978).
56. See R. BORK, THE ANTrrRusT PARADOX 365-81 (1978); Burstein, A Theory of Full-Line
1343July 1987]
STANFORD LAW REVIEW
obtained from exploitation of packages that comprise the protected
product standard can be reaped by exploitation of the product standard
component alone. When the analysis incorporates dynamic considera-
tions, particularly effects on innovation and maintenance of market
power over time, tying can add to the social welfare losses associated
with monopoly power in the tying product.57 By tying a product stan-
dard to complementary products, a monopolist can effectively discour-
age other firms from attempting to improve such complementary
products because there might be little or no market for them. This can
delay socially valuable innovations and prolong the existence of mo-
nopoly power.58
Even in the presence of these dynamic considerations, a firm will
not necessarily market its product standard in only the most complete
ultimate products. It will want its product line to appeal to a wide
range of consumers-from those seeking a simple version of the prod-
uct to those seeking all of the extras. Moreover, by limiting the variety
in which its product standard is available, the firm enhances the appeal
of rivals' product standards, particularly those that come in a range of
models. These factors affect the extent to which a firm that possesses a
product standard will allow competitors to offer products that comple-
ment its product standard.
4. Government policies to address network externalities.
Network externalities present a problem of coordination among de-
centralized agents. 59 The government has numerous ways to promote
coordination. It can set standards directly, relax antitrust restraints
that prevent private firms from setting voluntary standards, 60 promote
standardization through its market power as a major purchaser, 61 and
facilitate access to industry standards through the design of laws pro-
tecting intellectual property. The question is: What is the mode by
which the government can best strengthen sanctioning or sponsorship
of standards to promote competition, realization of network externali-
ties, and innovation?
Forcing, 55 Nw. U.L. REV. 62, 63 (1960); Markovits, Tie-ins, Reciprocity, and the Leverage Theory,
76 YALE L.J. 1397, 1398 (1967); Smaistrla, An Analysis of Tying Arrangements: Invalidating the
Leverage Hypothesis, 61 TEx. L. REV. 893 (1982) (student author).
57. See Kaplow, Extension of Monopoly Power Through Leverage, 85 COLum. L. REV. 515, 530-
36 (1985); Wollenberg, An Economic Analysis of Tie-In Sales: Re-Examining the Leverage Theory, 39
STAN. L. REV. 737, 749 (1987) (student author).
58. A good example of a monopolist attempting to use a tying arrangement to prolong
monopoly power can be seen in Motion Picture Patents Co. v. Universal Film Manufacturing
Co., 243 U.S. 502 (1917), where the owner of the first patent on movie projectors tied films to
the sale of projectors in an attempt to hinder the development of competition in films.
59. See Carlton & Klamer, The Need for Coordination Among Firms, with Special Reference to
Network Industries, 50 U. Cm. L. REv. 446 (1983).
60. See id.; Ordover & Willig, Antitrust for High-Technology Industries: Assessing Research Joint
Ventures and Mergers, 28 J.L. & ECON. 311 (1985).
61. See Brock, supra note 46, at 91-94.
1344 [Vol. 39:1329
COMPUTER SOFTWARE PROTECTION
This article is primarily concerned with the role of legal protection
as a means of accomplishing these objectives. As we will see below,
however, legal protection can play a detrimental role if not properly
tailored to market conditions. In designing legal protection for intel-
lectual work with network externalities, policymakers should foster the
realization of benefits from standardization-wider availability of prod-
ucts, lower search costs, vigorous competition-while minimizing the
potentially adverse effects of universal access to new technologies on
incentives to innovate better product standards.
C. A Functional Distinction Between Operating Systems and Application
Programs
Every computer program involves different degrees of the public
goods and network externality market failures discussed above. Before
embarking on a formal analysis of legal protection for computer
software, therefore, it is necessary to divide up the product space into
useful categories of study. If a category is too broad, the analysis may
overlook important distinctions among products. On the other hand, if
the product space is divided into too many categories, there is a risk
that policy recommendations will be too narrowly tailored to be admin-
istratively feasible.
62
Fortunately, a fairly clear demarcation emerges from our review of
technological and economic aspects of computer software and the prin-
cipal market failures affecting its provision. Our discussions of techno-
logical aspects of types of computer software and network externalities
highlight a critical distinction between operating systems and applica-
tion programs. Operating systems establish standard protocols and
formats to which application programs and some peripheral equipment
must be tailored. Application programs, by contrast, primarily access
the computer to perform specific user tasks. They usually do not serve
as a standard for other software or hardware. Because the network ex-
ternality concerns associated with operating systems are fundamentally
different from those associated with application programs, it seems sen-
sible, at least as a first cut at the problem, to analyze legal protection for
these two categories of computer software separately. 63
It will be important to keep in mind, however, that the border be-
tween these two categories of software products, like other distinctions
in the computer field, 64 is not crystal clear and is subject to change as
62. Cf F.M. SCHERER, INDUSTRIAL MARKET STRUCTURE AND ECONOMIC PERFORMANCE 454
(2d ed. 1980) ("An ideal patent system would hand-tailor the life of each patent to the pecu-
liar circumstances of the invention it covers, but this is administratively infeasible.").
63. See Karjala, Lessons From the Computer Software Protection Debate in Japan, 1984 ARIz. ST.
LJ. 53, 63 (noting interest in Japan for distinguishing interface software from other software
in the design of legal protection). But see Davidson, Protecting Computer Software: A Comprehensive
Analysis, 1983 ARIZ. ST. LJ. 611, 673-74 (questioning the advisability and practicability of this
distinction).
64. See Samuelson, CONTU Revisited- The Case Against Copyright Protection for Computer Pro-
July 1987] 1345
STANFORD L4 W REVIEW
technology advances. 65 Moreover, there is a risk that legal distinctions,
by altering the nature of property rights, will encourage those affected
to develop products that provide maximum legal protection rather than
social benefit. Despite these cautionary notes, there are clear economic
principles that could guide regulatory authorities and courts in inter-
preting the distinction. In particular, the distinction would turn largely
on whether the product in question serves as a standard that affects
access to an important market.
66
III. LEGAL PROTECTION FOR COMPUTER SOFTWARE
IN THE UNITED STATES
Creators of computer software may seek legal protection under the
three traditional forms of legal protection for intellectual property:
copyright, patent, and trade secret law. In addition, under a 1984
law,67 producers of semiconductor chips can now protect the intellec-
tual work embodied in such chips under a hybrid form of legal protec-
tion. Of these forms of legal protection, copyright usually provides the
most direct and easily attainable protection for computer software.
A. Copyright Law
Under the Copyright Act of 1976,68 a work must satisfy two princi-
pal requirements to obtain copyright protection: (1) It must be an
"original work[] of authorship"; 69 and (2) it must be "fixed in [a] tangi-
ble medium of expression."' 70 An author of a copyrightable work re-
ceives exclusive rights to the use of that work for the author's life plus
fifty years.7 1 Copyright law protects the form in which an idea appears
grams in Machine-Readable Form, 1984 Dura LJ. 663, 672-89 (highlighting the substitutability of
hardware and software).
65. See Cook, Operating Systems in Transition, HIGH TEcH.,June 1984, at 65, 69 (noting that
technological advances have led to new products that blur the distinction between operating
systems and application programs); Davidson, supra note 63, at 674.
66. In this way, the distinction sought here is analogous to the definition of an "essential
facility" under antitrust doctrine. See note 197 infra and accompanying text.
67. Semiconductor Chip Protection Act of 1984, 17 U.S.C. §§ 901-914 (Supp. III 1985).
68. Act of October 19, 1976, Pub. L. No. 94-553, 90 Stat. 2541 (codified at 17 U.S.C.
§§ 101-810 (1982)).
69. The copyright statute enumerates seven categories under "works of authorship" in-
cluding "literary works," defined as follows: "works, other than audiovisual works, expressed
in words, numbers, or other verbal or numerical symbols or indicia, regardless of the nature
of the material objects, such as books, periodicals, manuscripts, phonorecords, film, tapes,
disks, or cards, in which they are embodied." 17 U.S.C. § 101 (1982).
70.
A work is "fixed" in a tangible medium of expression when its embodiment in a copy
or phonorecord, by or under the authority of the author, is sufficiently permanent or
stable to permit it to be perceived, reproduced, or otherwise communicated for a
period of more than transitory duration. A work consisting of sounds, images, or
both, that are being transmitted, is "fixed" for purposes of this title if a fixation of
the work is being made simultaneously with its transmission.
Id. § 102(a) (1982).
71. Id. § 302(a) (1982).
1346 [Vol. 39:1329
COMPUTER SOFTWARE PROTECTION
rather than the idea itself.72
Although the Copyright Act of 1976 does not expressly list com-
puter programs as works of authorship, its legislative history suggests
that Congress considered programs to be copyrightable as literary
works. 73 Any ambiguity about whether copyright protected computer
programs was resolved in 1980 when Congress amended the Act by
adding a definition of a computer program: "A 'computer program' is
a set of statements or instructions to be used directly or indirectly in a
computer in order to bring about a certain result." 74 The amendments
also provide that "it is not an infringement for the owner of a copy of a
computer program to make or authorize the making of another copy or
adaptation of that computer program" when necessary to "the utiliza-
tion of the computer program" or "for archival purposes only." 75 By
carving out an exception to the normal proscriptions against copying,
the language of this section clearly indicates that programs are
copyrightable.
The scope of these provisions has since been delineated by the
courts. In a landmark case, Apple Computer, Inc. v. Franklin Computer
Corp. ,76 the Third Circuit held that the Copyright Act extends to oper-
ating programs as well as application programs, whether fixed in source
code or object code or embodied in read only memory (ROM).
77
B. Patent Law
Patent law protection is available for "any new and useful process,
machine, manufacture, or composition of matter, or any new and useful
improvement thereof." s78 A patent protects its owner not only from
competition by copiers of the inventor's work, but also from those who
independently discover the advance.79 Recipients of patent protection
enjoy rights to exclusive use of the subject matter of their work for sev-
enteen years.8 0
Unlike copyright law, patent law protects the utilitarian aspects of a
work and not just the particular way the invention is expressed. 8 l So as
72. Id. § 102(b) (1982).
73. See H.R. REP. No. 1476, 94th Cong., 2d Sess. 54, reprinted in 1976 U.S. CODE CoNG. &
ADMIN. NEws 5659, 5667 (" '[L]iterary works' . . . includes ... computer programs to the
extent they incorporate authorship in the programmer's expression of original ideas, as dis-
tinguished from the ideas themselves.").
74. 17 U.S.C. § 101 (1982).
75. Id. § 117 (1982).
76. 714 F.2d 1240 (3d Cir. 1983), cert. denied, 464 U.S. 1033 (1984).
77. Id. at 1247-54.
78. 35 U.S.C. § 101 (1982).
79. Id. § 102 (1982).
80. Id. § 154 (1982).
81. Compare id. §§ 101, 102 with 17 U.S.C. § 102(b). But cf Sears, Roebuck & Co. v.
Stiffel Co., 376 U.S. 225, 230 (1964) ("Once [a] patent issues, it is strictly construed [and]
cannot be used to secure any monopoly beyond that contained in the patent ...." (citation
omitted)).
1347July 1987]
STANFORD LAW REVIEW
not to hinder unduly scientific and technological progress, however,
the subject matter of patent law has traditionally been restricted to pre-
vent an inventor from obtaining protection solely for mental
processes, 8 2 scientific principles, 83 laws of nature,8 4 or mathematical
algorithms.85
The Patent and Trademark Office initially took the view that com-
puter programs were not patentable subject matter because they could
be characterized as sequences of mental steps and/or mathematical al-
gorithms.8 6 In the first computer program-related cases to reach it, the
Court of Customs and Patent Appeals (CCPA)8 7 took a more favorable
view toward the patentability of computer programs. Rejecting the
conclusion that sequences of mental steps fall outside patentable sub-
ject matter,88 the CCPA granted protection for computer programs
that conducted spectrographic analysis of the concentration of ele-
ments in a mixture of gases,89 mathematically projected 3-dimensional
figures onto 2-dimensional surfaces,90 and improved seismographic
recordings.9'
In In re Benson,92 the CCPA again reversed the Patent Examiner, and
granted patent protection for a method of converting from one numeri-
cal base to another in conjunction with telephone interconnection
processing. The Supreme Court reversed 93 on the ground that the
granting of the patent would effectively preempt the algorithm embod-
ied in the method. 94 Although the Court stated that its decision did not
preclude patentability for computer programs, 95 the opinion created
great uncertainty about the permissible scope of such protection.
The uncertainty increased when the Supreme Court overturned the
next case in which the CCPA granted patent protection for a computer
program, this time a program for controlling automatic banking de-
82. In re Shao Wen Yuan, 188 F.2d 377, 380 (C.C.P.A. 1951).
83. O'Reilly v. Morse, 56 U.S. (15 How.) 61, 65 (1854).
84. Eibel Process Co. v. Minnesota & Ont. Paper Co., 261 U.S. 45, 52 (1923).
85. Mackay Radio & Tel. Co. v. Radio Corp. of America, 306 U.S. 86, 94 (1939).
86. See Moskowitz, The Metamorphosis of Software-Related Invention Patentability, 3 Cot-
PtrER/L.J. 273, 281-82 (1982).
87. Until October 1, 1982, the Court of Customs and Patent Appeals had jurisdiction
over decisions of the Board of Patent Appeals. 28 U.S.C. § 1542 (1978), repealed by Pub. L.
No. 97-164, 96 Stat. 41 (1982). The CCPA was replaced by the Court of Appeals for the
Federal Circuit, which has exclusive jurisdiction over all patent cases. 28 U.S.C. § 1295(a)
(1982).
88. In re Prater, 415 F.2d 1378, 1387 (C.C.P.A. 1968), affd on this point on reh'g, 415 F.2d
1393, 1401 (1969).
89. In re Prater, 415 F.2d 1393, 1405-06 (C.C.P.A. 1969).
90. In re Berhart, 417 F.2d 1395, 1403 (C.C.P.A. 1969).
91. In re Musgrave, 431 F.2d 882, 893 (C.C.P.A. 1970).
92. 441 F.2d 682 (C.C.P.A. 1971), rev'd sub nom. Gottschalk v. Benson, 409 U.S. 63
(1972).
93. Gottschalk v. Benson, 409 U.S. 63 (1972).
94. Id. at 71-72.
95. Id. at 71.
1348 [Vol. 39:1329
COMPUTER SOFTWARE PROTECTION
vices. 96 The Court reversed the granting of the patent, not on the
ground that the program preempted an algorithm, but because the in-
vention was obvious.9 7 The Court specifically noted that its Benson
holding was limited.98 It again reversed the CCPA in Parker v. Flook,9 9
holding that an invention that embodies a mathematical algorithm for
using an array of variables to update alarm limits could not be pro-
tected because the algorithm, like a scientific principle, is assumed to be
in the prior art.' 0 0 As in its other computer program cases, the Court
noted that it was not holding that computer programs cannot be
patented.101
In the aftermath of these cases, the CCPA continued to grant pat-
ents for computer programs, 10 2 though perhaps with greater re-
serve.1 0 3 The Patent and Trademark Office saw these cases as
conflicting with the Supreme Court's earlier pronouncements. 10 4 In
1980, the Supreme Court granted certiorari in two such cases. In the
first, the CCPA had granted a patent for a computer program embod-
ied in firmware that made it possible to communicate directly with in-
ternal registers in the computer.'0 5 An equally divided Supreme Court
affirmed without commenting on the merits.10 6 In the other case, Dia-
mond v. Diehr,10 7 the CCPA had granted a patent for a rubber curing
process which used a programmed computer to determine the precise
curing time.' 0 8 In a five to four decision, the Supreme Court affirmed.
Viewing the claim "as a whole," the Court concluded that the process
at issue was no different from other historically patentable industrial
processes that transform one article, in this case raw, uncured synthetic
rubber, into a different state. 10 9 The Court did not think the claim was
any less patentable because it employed a mathematical algorithm in
the process." 0 It distinguished Parker v. Flook I on the ground that
96. Dann v. Johnston, 425 U.S. 219 (1975).
97. Id at 230.
98. i at 224.
99. 437 U.S. 584 (1978).
100. Id. at 595.
101. Id
102. See In reJohnson, 589 F.2d 1070 (C.C.P.A. 1978) (granting patent protection for a
computer-implemented method of filtering noise from data obtained in seismic
measurement).
103. See, e.g., In re Sarkar, 588 F.2d 1330 (C.C.P.A. 1978) (rejecting a claim for a tech-
nique for mathematically modeling flow parameters of a river); In re Gelnovatch, 595 F.2d 32
(C.C.P.A. 1979) (rejecting a claim for a process for determining values for use in a model of a
microwave circuit).
104. See Moskowitz, supra note 86, at 303-04.
105. In re Bradley, 600 F.2d 807 (C.G.P.A. 1979), affd sub nom. Diamond v. Bradley, 450
U.S. 381 (1981). The court found that the patent claim did not involve or preempt a mathe-
matical algorithm. Id. at 813.
106. Diamond v. Bradley, 450 U.S. 381 (1981).
107. 450 U.S. 175 (1981).
108. In re Diehr, 602 F.2d 892 (C.C.P.A. 1979).
109. 450 U.S. at 184.
110. Id. at 185-88.
1349July 1987]
STANFORD LAW REVIEW
the invention in that case used an algorithm simply to generate an
alarm limit, which is merely a numerical value; in effect, a patent would
have preempted use of that formula. 112 By contrast, a patent on the
process in Diamond v. Diehr would only preempt others from using the
complex series of steps in the process. 113
Since the decision in Diamond v. Diehr, the Patent and Trademark
Office has taken a more liberal attitude toward applications for com-
puter program patents. 14 The CCPA has cautiously expanded patent
protection for computer programs. In particular, its decision in In re
Pardo 115 portends greater patent protection for computer operating
system programs. The inventor in In re Pardo sought patent protection
for an invention that converted a computer from a sequential processor
to one that is not dependent on the order in which it receives program
steps. 1 6 The CCPA held that the fact that the invention uses an al-
gorithm did not render it unpatentable." 7 The court concluded that
the application properly recited a process for controlling the internal
operations of a computer and did not fall within one of the judicially
determined exceptions to the patent law."
l8
Despite the availability of patent protection for computer programs
that satisfy the requirements of the patent law, a variety of factors dis-
courage computer programmers from seeking patent protection. In
contrast to copyright law, which requires only that computer programs
be original, patent law has a relatively high statutory threshold: A com-
puter program must be novel, nonobvious, and useful in order to qual-
ify for protection. The standards for novelty, nonobviousness, and
usefulness with respect to computer programs are still relatively
uncertain.
The patent application process also poses numerous disincentives
to seeking patent protection for computer programs. The great cost
and long delay associated with obtaining patent protection reduce the
benefits significantly. A prospective patent owner must first prepare a
careful application." 19 The application must then go through a lengthy
substantive review by the Patent and Trademark Office. 120 Given the
great speed with which computer technology is evolving, this process is
111. 437 U.S. 584 (1978).
112. 450 U.S. at 186-87.
113. Id. at 187.
114. See Moskowitz, supra note 86, at 309-1I.
115. 684 F.2d 912 (C.C.P.A. 1982).
116. Id. at 913-14.
117. Id. at 915-16.
118. Id. at 916.
119. See 35 U.S.C. §§ 111-115 (1982). This is in marked contrast to the ease ofsecuring
copyright protection with its lower standard of originality than patent protection, see, e.g., Al-
fred Bell & Co. v. Catalda Fine Arts, Inc., 191 F.2d 99 (2d Cir. 1951), greater ease and shorter
delay in getting a copyright registration certificate, and longer duration. See Samuelson, supra
note 64, at 722.
120. See 35 U.S.C. § 131 (1982).
1350 [Vol. 39:1329
July 1987] COMPUTER SOFTWARE PROTECTION
worth going through for only a small portion of programs developed.
Furthermore, the patentee must make substantial public disclosures if
patent protection is granted, 12' thereby facilitating access by others to
what might otherwise be a trade secret.
122
C. Trade Secret Law
Common law and state statutes may be used to protect trade secrets
embodied in computer software.' 23 Although trade secret law varies
from state to state, a widely adopted definition of a trade secret is:
any formula, pattern, device or compilation of information which is
used in one's business, and which gives him an opportunity to obtain
an advantage over competitors who do not know or use it.
The subject matter of a trade secret must be secret.... [A] substan-
tial element of secrecy must exist so that, except by the use of improper
means, there would be difficulty in acquiring the information.... Some
factors to be considered in determining whether given information is
one's trade secret are: (I) the extent to which the information is known
outside of his business; (2) the extent to which it is known by employ-
ees and others involved in his business; (3) the extent of measures
taken by him to guard the secrecy of the information; (4) the value of
the information to him and to his competitors; (5) the amount of effort
or money expended by him in developing the information; (6) the ease
or difficulty with which the information could be properly acquired or
duplicated by others.
124
Thus, to obtain trade secret protection, a business must establish that
its information is novel, valuable in the trade or business, and secret.
The novelty element requires that the information be more than that
commonly known in the trade, though it need not achieve the threshold
level of novelty required for patent protection.125 With regard to com-
puter programs, it is sufficient that the program apply commonly
known concepts to a new function' 26 or embody a novel combination of
generally known concepts. 127 The element of value is usually pre-
sumed if the information is used in the business.
128
The secrecy requirement usually presents the principal obstacle to
121. See id at §§ 111-112, 114, 154.
122. See T. HARRIS, THE LEGAL GUIDE TO SOFTWARE PROTECrION 130 (1985).
123. See, e.g., R. WHrrESEL, UNIFORM TRADE SECRETS Acr (1984).
124. RESTATEMENT Or TORTS § 757 comment b (1939) (withdrawn 1977). The reporters
of the Second Restatement decided that trade secret law more properly belongs in a separate
field of law relating to unfair competition and trade regulation. Consequently, they omitted
this section from the Second Restatement of Torts. See 4 RESTATEMENT (SECOND) OF TORTS 1
(1977). The definition in the text continues to be widely cited. See RESTATEMENT (SEcoND) OF
TORTS app. § 757 (1977 & Supp. 1986-1987) (collecting cases).
125. See R. MILGRIM, TRADE SECRETS 2.08 (1978).
126. See, e.g., Structural Dynamics Research Corp. v. Engineering Mechanics Research
Corp., 401 F. Supp. 1102, 1117-18 (E.D. Mich. 1975).
127. See, e.g., id.; Gilburne &Johnston, Trade Secret Protection for Software Generally and in the
Mass Market, 3 CoMPuTER/L.J. 211, 216 (1982).
128. Gilburne &Johnston, supra note 127, at 215.
1351
STANFORD LAW REVIEW
obtaining trade secret protection for computer programs, particularly
those that are mass marketed. Although absolute secrecy is not re-
quired to obtain trade secret protection, 29 the secrecy element typi-
cally requires that a business endeavor to take in-house measures to
minimize disclosure and restrict dissemination of the secret informa-
tion embodied in products distributed to end-users.' 30 To satisfy the
secrecy requirement, computer software firms typically distribute their
products through limited licensing agreements rather than through
sales contracts. There is concern, however, that such agreements may
be unenforceable as contracts of adhesion' 3' and that mass distribution
of this type may be inconsistent with the requirement of secrecy.
13 2
Commentators suggest that businesses may be able to retain trade se-
cret protection for mass marketed computer programs that are dissemi-
nated only in object code. 133
A business that satisfies the above requirements can prevent those
who discover the trade secret by improper means or from a third party
from using the trade secret, and it can recover damages.' 3 4 A firm is
not protected, however, from one who obtains a protected product
through permissible means (e.g., unrestricted licensing) and discovers
the valuable information contained therein through reverse
engineering.1
3 5
Furthermore, trade secret protection for computer software may be
preempted by the Copyright Act. 136 Although the House Committee
Report indicates that Congress did not intend to preempt state unfair
competition and trade secrecy law, 137 the courts have yet to achieve
unanimity on this point.
138
129. Q-Co Indus. v. Hoffman, 625 F. Supp 608, 617 (S.D.N.Y. 1985); Data Gen. Corp. v.
Digital Computer Controls, Inc., 297 A.2d 437, 439 (Del. 1972).
130. The requirement has been stated as "only that 'a substantial element of secrecy
must exist and this means that' except by use of improper means, there would be difficulty in
acquiring the information." Q-Co. Indus., 625 F. Supp. at 617 (quoting A.H. Emory Co. v.
Marcan Prods. Corp., 389 F.2d 11, 16 (2d Cir. 1968)).
131. See Gilburne &Johnston, supra note 127, at 229.
132. See id. at 229-37.
133. See id. at 233-37; MacGrady, Protection of Computer Software-An Update and Practical
Synthesis, 20 Hous. L. REV. 1033, 1063-64 (1983).
134. RESTATEMENT OF TORTS §§ 757, 758 (1939) (withdrawn 1977). See note 124 supra
for an explanation of why this section is relevant, even though withdrawn.
135. See Gilburne & Johnston, supra note 127, at 233-37. Of course, the holder of the
trade secret could prevent reverse engineering by requiring, through contract, that users not
disassemble or disseminate the program. This, however, adds to the cost and complexity of
licensing computer software.
136. See 17 U.S.C. § 301 (1982). The Supreme Court has ruled that trade secret law is
not preempted by patent law. Kewanee Oil Co. v. Bicron Corp., 416 U.S. 470 (1974).
137. See H.R. REP. No. 307, 96th Cong., 2d Sess., pt. 1, at 23-24 (1980).
138. Cf Warrington Assocs., Inc. v. Real-Time Eng'g Sys., Inc., 522 F. Supp. 367, 368-
69 (N.D. Ill. 1981) (recognizing that trade secret law is not preempted by the Copyright Act
since it is premised on breach of trust and confidentiality, not copying, but noting that regis-
tration of works pursuant to copyright law might destroy the secrecy required for trade secret
protection). Compare Brignoli v. Balch Hardy & Scheinman, Inc., 645 F. Supp. 1201, 1205
(S.D.N.Y. 1986) (holding no preemption if claim contains elements beyond unauthorized re-
1352 [Vol. 39:1329
COMPUTER SOFTWARE PROTECTION
A number of practical considerations also limit the value of trade
secret protection. As matters of common law and state statutes, the
requirements and scope of trade secret protection vary across states.
More significantly, it is difficult for licensors of computer software, par-
ticularly for programs that are mass marketed, to monitor and enforce
licensing agreements. Moreover, proving a violation of trade secret law
can be particularly difficult with regard to computer programs.
13 9
D. Semiconductor Chip Protection Act of 1984
In 1984, Congress enacted legislation establishing a new category of
legal protection for intellectual work embodied in semiconductor chips
(mask works). 140 Since computer software may be fixed in such works
(e.g., the fixing of object code in ROMs), the Semiconductor Chip Pro-
tection Act (SCPA) provides yet another means by which programmers
may protect the intellectual work contained in computer software. The
SCPA provides a ten year term of protection. 141
Unlike the other forms of protection of computer software, the
SCPA is tailored to the unique attributes of the new and evolving tech-
nology of semiconductors.142 For example, the SCPA permits reverse
engineering for the purpose of developing improved versions of mask
works. It also provides an exception for innocent infringement.
143
IV. LEGAL PROTECTION FOR COMPUTER OPERATING SYSTEMS
Having reviewed the technology and economics of computer prod-
ucts, the principal market failures affecting the provision of computer
software, and the various forms of legal protection available for com-
puter programs, we are prepared to assess the efficacy of the prevailing
production and use) with Videotronics, Inc. v. Bend Elecs., 564 F. Supp. 1471, 1477 (D. Nev.
1983) (finding trade secret law preempted in a case where no contractual trade secret rela-
tionship existed between the parties and the defendant copied plaintiff's uncopyrighted elec-
tronic game).
139. See Gilburne &Johnston, supra note 127, at 255-63.
140. Semiconductor Chip Protection Act of 1984, 17 U.S.C. §§ 901-14 (Supp. III 1985).
Section 901(a)(2) of the Act defines a "mask work" as:
a series of related images, however fixed or encoded-
(A) having or representing the predetermined, three-dimensional pattern of
metallic, insulating, or semiconductor material present or removed from the layers of
a semiconductor chip product; and
(B) in which series the relation of the images to one another is that each image
has the pattern of the surface of one form of the semiconductor chip product;
"Semiconductor chip product" is defined as:
the final or intermediate form of any product-
(A) having two or more layers of metallic, insulating, or semiconductor mate-
rial, deposited or otherwise placed on, or etched away or otherwise removed from, a
piece of semiconductor material in accordance with a predetermined pattern; and
(B) intended to perform electronic circuitry functions;
17 U.S.C. § 901(a)(1) (Supp. III 1985).
141. Id. § 904(b) (Supp. III 1985).
142. See generally R. STERN, SEMICONDUCrOR CHIP PROTECTION (1986).
143. 17 U.S.C. § 907(a) (Supp. III 1985).
July 1987] 1353
STANFORD LA W REVIEW
legal regime. This Part presents an economic analysis of legal protec-
tion for the intellectual work embodied in computer operating systems.
Drawing on the economic framework developed in Part II, Section A
assesses the need for legal protection. Section B then analyzes the
costs and benefits of the primary mode of legal protection for operating
systems in the United States-traditional copyright doctrine. Section C
outlines an alternative regime of legal protection for operating systems
that better promotes key economic objectives: innovation and diffusion
of improved technologies, standardization of products capable of gen-
erating network externalities, and vigorous competition.
A. The Need for Legal Protection
According to the economic framework developed in Part II, legal
protection can alleviate the public goods problem inherent in intellec-
tual works. 144 Because legal protection can be costly and have undesir-
able effects, policymakers should first assess the severity of the public
goods problem in particular settings and evaluate any offsetting fac-
tors.' 45 Subsection 1 discusses the severity of the appropriability prob-
lem in computer operating systems. Subsection 2 then evaluates
offsetting factors that reduce the severity of the public goods problem
for computer operating systems. Subsection 3 seeks to clarify the need
for legal protection for operating systems.
1. Appropriability of investment in research and development.
Development costs. The time and cost required to develop, maintain,
and improve operating systems vary widely, depending principally
upon the type and size of the computer system for which the operating
system is designed. 146 Operating systems for the low-end or micro-
computer sector of the market have short development cycles and low
research and development costs relative to the volume of such units
produced. 147 Operating systems for the high-end or mainframe sector
144. See text accompanying notes 32-42 supra.
145. See generally Breyer, supra note 15 (scrutinizing the need for copyright protection for
books, photocopies, and computer programs).
146. See generally SoFrWARE TRADE STUDY, supra note 26 (describing the economics of
software development).
147. Apple Corporation spent approximately $740,000 to develop the 14 main operat-
ing systems and application programs used in its Apple II computer system. See Apple Com-
puter, Inc. v. Franklin Computer Corp., 714 F.2d 1240, 1245 (3d Cir. 1983), cert. dismissed, 464
U.S. 1033 (1984). By November 1984, Apple had sold more than 2,000,000 Apple II systems.
See Rubin, The Life & Death & Life of the Apple II, PERS. COMPUTING, Feb. 1985, at 72, 75.
Apple's operating system development cost per unit sold on the Apple II, therefore, is sub-
stantially less than one dollar.
IBM spent less than this to develop the operating system it uses in its PC line. The main
portion of its operating system was licensed for $50,000. See Rubin & Strehlo, Why So Many
Computers Look Like the "IBM Standard," PERS. COMPUTING, Mar. 1984, at 52, 54. IBM intro-
duced its proprietary link in the system by coding its Basic Input/Output System on a ROM
chip. See B. KELLY & D. GRIMES, supra note 10, at xx.
1354 [Vol. 39:1329
COMPUTER SOFTWARE PROTECTION
of the market have long development and operating phases, and sub-
stantial research and development costs.
14 8
Copying costs. The cost of copying operating systems also varies
greatly across computer systems. Even though crucial components of
some operating systems are coded in ROM, the cost of copying operat-
ing systems for microcomputers is low, especially when considered in
relation to the size of the copier's potential market. In the absence of
copyright protection for microcomputer operating systems, many firms
would introduce microcomputers using copies of the major operating
system components.
1 49
Because of the greater complexity of mainframe operating systems
and the more complex interfaces between mainframe hardware and op-
erating systems, the cost of copying these operating systems is rela-
tively high, but not as high as the original development cost of the
operating systems. However, the lower volumes in the mainframe mar-
ket and the need to maintain and update operating system software
suggest that copying might not be rampant in this sector of the market
in the absence of copyright protection.
Appropriability of investment. On high-end and other low volume prod-
ucts, licensing in conjunction with trade secret protection is a viable
way to capture rewards from investments in operating system research
and development. Because these systems require maintenance and
other services, developers of operating systems implemented on main-
frames and minicomputers can assure themselves of a steady flow of
revenue through services tied to their products. A recent study of the
industry predicts that even "[t]hose whose operating systems are now
in the public domain will use various mechanisms such as renaming,
redistributing the functions, rewriting major sections, and implement-
ing microcode to insure that almost all customers will have to pay some
license charges for their operating systems."'150
In the mini- and microcomputer sectors of the market, the low cost
of copying operating systems does not necessarily mean that develop-
ers of operating systems cannot appropriate a sizable portion of the
benefits of their development investment. The advantage of being the
first to introduce a product featuring a new operating system can en-
able pioneering firms with distinctive trademarks to establish strong
market positions. 151 In a static marketplace, this advantage would be
quickly competed away by copiers. But given the speed with which
computer technology becomes obsolete, innovating firms can reap a
large share of the benefits from an innovation and, through continuing
research, take the lead on improvements and new products.
148. See SOFTVARE TRADE SToDY, supra note 26, at 10.
149. See Rubin & Strehlo, supra note 147.
150. THE FUTURE OF INFORMATION PROCESSING TECHNOLOGY 75 (S. Andriole ed. 1985).
151. See note 41 supra and accompanying text.
1355July 1987]
STANFORD LA W REVIEW [Vol. 39:1329
The substantial network externalities that flow from mini- and
microcomputer operating systems 152 provide an added advantage to
firms with good reputations and large distribution channels. Such com-
panies can use their brand recognition to benefit from network exter-
nalities even in the absence of legal protection for their products.
153
Since they can get trademark protection for their products, they be-
come associated with the industry standard if their product standard is
widely adopted. In a market in which consumers value standardization,
these factors provide "dominant" firms with a limited ability to charge
premium prices and to tie sales of complementary products.
154
2. Offsetting factors.
Research consortia. Investors in research and development can inter-
nalize a portion of the free-rider problem by developing products to-
gether. Through joint ventures, they can share the cost of developing
operating systems.' 55 Of course, this does not prevent those who do
not contribute to the venture from copying the operating systems that
are developed. Those who do participate, however, spread the re-
search and development cost and gain earlier access to the design of
the system.' 56 Moreover, because of the network externalities associ-
ated with operating systems, the entire industry benefits from the ven-
ture to the extent collaboration produces clear industry standards.
152. Since independent software producers target their application programs for oper-
ating systems that are likely to achieve and maintain a substantial market share, computer
companies with high brand recognition could probably convince independent software devel-
opers to begin developing application programs even prior to the introduction of their oper-
ating systems. See Rubin & Strehlo, supra note 147, at 54.
153. CONTU seems to have given short shrift to these considerations. CONTU rea-
soned that there must be adequate legal protection for computer software if authors are to
have the incentive to create and disseminate their works. CONTU posited that computer
programs would be disseminated only if-
(1) the creator may recover all of its costs plus a fair profit on the first sale of the
work, thus leaving it unconcerned about the later publication of the work; or
(2) the creator may spread its costs over multiple copies of the work with some
form of protection against unauthorized duplication of the work; or
(3) the creator's costs are borne by another, as, for example, when the govern-
ment or a foundation offers prizes or awards; or
(4) the creator is indifferent to cost and donates the work to the public.
CONTU FINAL REPORT, supra note 1, at 11. CONTU, however, overlooked the ability of in-
dustry leaders to capitalize on their reputations. Given the importance of network externali-
ties in the computer market, this factor is significant. IBM's meteoric rise to leadership in the
microcomputer market was no doubt assisted by its reputation in other computer and busi-
ness equipment markets.
154. See text accompanying notes 55-58 supra.
155. Such agreements, however, may raise antitrust problems. Cf Ordover & Willig,
supra note 60 (recommending special treatment for high technology joint ventures).
156. Leading firms in the computer industry have formed consortia to undertake re-
search and development on projects considered too basic, long-term, or speculative for firms
to undertake individually. Microelectronics and Computer Technology Corporation-an 18-
firm joint venture brought together by Control Data Corporation-has a $60 million budget
to investigate ways to improve software development processes. See SOFrWARE TRADE STUDY,
supra note 26, at 58.
1356
July 1987] COMPUTER SOFTWARE PROTECTION
Government subsidies. Government subsidies can substitute for direct
commercial profits as a means of promoting research and development.
The federal government generally funds more than one-third of all re-
search and development in the United States.15 7 These subsidies have
been and continue to be an important source of research support in the
computer industry. 158 The Department of Defense currently has major
projects to develop integrated and automated software design tools,' 59
multi-processing, and artificial intelligence. 160 The National Aeronau-
tic and Space Administration is spending eight billion dollars over the
next decade to develop network operating systems and software tools
for the space station project. 161 Although these projects are directed
toward military and space rather than commercial applications, they
will likely spill over into the commercial sphere.
University research. Universities in the United States and abroad con-
duct extensive software research and development. A recent study
notes that operating system research is one of the principal areas of
study at leading U.S., European, and Japanese universities.1 62 Since
the results of much academic research are in the public domain,163 uni-
versity research contributes significantly to the development of operat-
ing systems regardless of the availability of legal protection for
operating systems.
3. The presence of network externalities.
The principal source of network externalities for operating systems
is the interchangeability of complementary products, particularly appli-
cation programs. Since most application software for mainframes is
specific to the computer, mainframe operating systems do not feature
significant network externalities. Those network externalities that arise
for such computers involve their interface connections, which permit
substitution of peripheral equipment. The operating systems are typi-
cally not the critical element in this aspect of compatibility.
By contrast, mini- and microcomputers have significant network ex-
157. See CBEMA DATA BooK, supra note 6, at 32.
158. In 1983, approximately 7% of the National Science Foundation budget and 12% of
the Department of Defense basic research budget went toward research in mathematics and
computer science. See M. PECK, supra note 42, at 10, 17.
159. See SOFrWARE TRADE STUDY, supra note 26, at 57 (five million dollars spent on the
Software Technology for Adaptable and Reliable Systems project in 1984).
160. See id (Strategic Computing project subsidy will be $750 million to $1 billion over
the period 1984-1994).
161. See id.
162. See id. at 60.
163. Until relatively recently, many universities eschewed legal protection for inventions
developed on their campuses as antithetical to the purpose of institutions of higher learning.
See, e.g., A. PALMER, UNIVERSITY RESEARCH AND PATENT PRACTICES AND PROCEDURES (1962).
Other universities sought patent protection but abstained from profit-making in certain fields,
such as public health. See P. Laches, University Patent Poliy, 10J. COLLEGE & UNIV. L. 263, 263
n.3 (1983-1984). More recently, however, many universities have taken a more aggressive
approach to patenting inventions developed on their campuses. Id. at 263 n.1.
1357
STANFORD LA W REVIEW
ternalities. As these types of computers have proliferated, many firms,
both large and small, have developed application programs to run on
the various operating systems. A survey of computer users finds that
software availability is the most important factor in selecting a make
and model of a new mini- or microcomputer.
164
4. Should operating systems be protectable?
The primary focus of economic analysis in assessing the need for
legal protection is to determine whether an adequate level of innova-
tion would be forthcoming in the absence of protection. The foregoing
indicates there is a relatively minor public goods problem in the high
end (mainframe sector) of the operating system market and a poten-
tially significant problem in the middle and lower end of the market,
but that numerous other factors enable producers to reap rewards from
inventive efforts and otherwise encourage research and development in
computer operating systems.
Moreover, the nature of mini- and microcomputer operating sys-
tems as both computer system formats and creative inventions further
suggests that such operating systems would be forthcoming even in the
absence of copyright protection. An analogy to the development of
railroad transportation helps to illuminate this point: By the mid-nine-
teenth century, the basic technologies for developing railroad transpor-
tation existed. Steam engines capable of moving great weights had
been developed. Grades of steel capable of withstanding great force
were available. The remaining step in creating a railroad system was to
choose a standard gauge of track to which railroad equipment could be
conformed. Although choice of an optimal track gauge depended upon
certain factors-e.g., tensile strength of the steel, size of materials to be
transported-the choice among competing gauges was relatively simple
in comparison to the development of the steam engine and steel tech-
nologies. Given the great promise of a rail system to the developing
economies of the nineteenth century, builders of rail equipment did not
need a right to exclusive use of a particular railroad gauge in order to
enter the railroad car market.
Similarly, to a large extent, the technological advances necessary for
the development of microcomputers had already taken place by the
mid-1970s. The last major step was the choice of an operating system
that-like a railroad gauge in the rail transportation industry-would
serve as a standard for firms wishing to build computer systems. Seen
in this light, the desire to create a hardware market would seem incen-
tive enough to encourage development of operating systems.
A crucial consideration is, therefore, the extent to which operating
systems are formats (as opposed to creative inventions). There is no
164. MARKETING SERVICES DEPARTMENT OF THE WALL STREETJOURNAL, MINICOMPUTERS
& SMALL BUSINESS COMPUTERS: A MARKET SURVEY 42 (1979).
1358 [Vol. 39:1329
July 1987] COMPUTER SOFTWARE PROTECTION 1359
question that some operating systems are more useful than others.
Since innovation in operating systems might affect the competitiveness
of the U.S. computer industry and because innovation is not costless,
caution suggests implementing a minimally disruptive system of legal
protection. Moreover, even if no protection was needed to generate
the principal operating systems currently in use, we still might need
legal protection to encourage future generations of operating systems.
The next section turns to the analysis of copyright protection as a pri-
mary means for regulating the market for computer operating systems.
B. The Inappropriateness of Copyright Protection
This Section evaluates the effects of copyright protection for operat-
ing systems on the functioning of computer software and complemen-
tary hardware markets. Subsection 1 analyzes the effects of copyright
protection on innovation and diffusion of new operating systems and
complementary hardware products. Subsection 2 discusses the effects
of copyright protection on the realization of network externalities flow-
ing from standardized operating systems. Subsection 3 analyzes the ef-
fects of copyright protection on competition in the computer industry.
Subsection 4 summarizes the effects of copyright protection for operat-
ing systems.
Because the public goods and network externality problems associ-
ated with operating systems in the mainframe sector of the market are
minimal, there does not seem to be any economic justification for be-
stowing copyright protection on these products. Consequently, we fo-
cus below on the effects of copyright protection on the mini- and
microcomputer sectors of the operating system market.
1. Effects on innovation and diffusion.
As Part I discussed, the computer industry consists of overlapping
markets. Part II described how the availability of legal protection at
particular levels of a multi-level industry can affect innovation at other
levels through diffusion mechanisms. 165 In order to assess the effects
of copyright protection for operating systems on innovation, therefore,
we must look not only at its effects on the incentives to invest in re-
search and development of operating systems but also its effects on in-
novation in and diffusion of complementary products.
Operating systems. In order to encourage socially desirable technolog-
ical innovation, legal protection should be tailored to protect the so-
cially valuable aspect of the intellectual work. Unlike traditional
subjects of copyright protection-literary and artistic works-computer
operating systems are not valued for their expression per se. Operat-
ing systems create value through their utilitarian functions-their abil-
165. See text accompanying notes 35-42 supra.
STANFORD LA W REVIEW
ity to direct the inner workings of computer systems. 166 Yet copyright
law protects only the expression of an idea rather than the idea itself.16
7
Therefore, copyright does not protect the valuable part of operating
systems.' 68 Consequently, copyright protection does not in general
greatly encourage software developers to invent better operating
systems.1
69
A hypothetical example illustrates how copyright protection for op-
erating systems might discourage socially valuable innovation while en-
couraging wasteful research and development expenditures on
emulating existing industry standards. Suppose that David Corpora-
tion, a relatively small computer company, invents HAL, an extremely
valuable microcomputer operating system. David writes some basic ap-
plication programs for the HAL system and introduces it with a modest
marketing campaign. Computer magazines give the HAL system
favorable reviews. As the market for HAL grows, application software
companies begin to develop software packages to run on the innovative
and powerful HAL operating system.
Goliath Corporation, a major computer manufacturer, has carefully
watched the favorable reception that David's HAL system has received
in the marketplace. Goliath decides to enter the market with its own
system and considers its options: (1) negotiating with David for a li-
cense to copy the HAL operating system; or (2) developing a similar
system on its own. Because copyright protects only the expression and
not the ideas of the innovating firm, Goliath can easily develop a prod-
uct embodying the ideas contained in HAL in a different form of ex-
pression. Therefore, it would be bad business judgment for Goliath to
pay for the license if the cost of developing a similar system is lower.
Moreover, Goliath could use its reputation and wide distribution chan-
nels to establish its similar but noncompatible system as the industry
standard. This has the added benefit to Goliath of squeezing David out
of the market.
Goliath's computer programmers and engineers develop the 2001
computer operating system. The 2001 uses the same ideas as the HAL
system but programs designed to run on the 2001 will not run on the
HAL system. In addition, the programmers develop a large library of
application programs to run on the 2001. Goliath also encourages in-
166. See Samuelson, supra note 64, at 727-53.
167. 17 U.S.C. § 102(b) (1982).
168. See Touponse, The Application of Copyright Law to Computer Operating Systems: Apple
Computer, Inc. v. Franklin Computer Corp., 17 CONN. L. R~v. 665, 700 (1985) (student au-
thor) (noting that copyright might not provide adequate protection against piracy because it
only proscribes copying: "The value of the operating system program lies in its usefulness as
well as in its form. Pirates careful not to copy slavishly may legally appropriate return on the
original programmer's creative effort, regardless of copyright, by imitating the logical
processes embodied in the original program.").
169. However, since noninfringing copying is not costless, it does enable the innovator
to earn a higher return on his investment than he would receive without a copyright.
1360 [Vol. 39:1329
COMPUTER SOFTWARE PROTECTION
dependent software firms to develop programs to run on its version of
the HAL system. Goliath releases its 2001 system with great fanfare.
Consumers see that the 2001 will become the industry standard and the
prophecy is quickly fulfilled.
Unfortunately-from the perspective of a society seeking to pro-
mote the development of improved operating systems-David does not
come back to slay Goliath in this story. Quite the contrary. The combi-
nation of inappropriate legal protection and strong network externali-
ties give even a lazy giant more than enough strength to overcome a
smaller, though innovative, competitor.
Even if David wanted to switch to the 2001 system, it would be frus-
trated by Goliath's copyright protection. Although copyright did not
protect David's ideas, it does protect Goliath's expression. In order to
compete, David must invest substantial resources in developing a com-
patible, though noninfringing, system. Thus, copyright now encour-
ages David to devote its research and development to a wasteful effort
to emulate the industry standard.
It might be thought from this hypothetical that even though copy-
right protection discourages small inventors, it protects operating sys-
tems developed by firms capable of reaping network externalities.
Copyright does protect an operating system introduced by a firm capa-
ble of starting a bandwagon. But it still does not protect the ideas em-
bodied in an innovative operating system. Therefore, we could tell
another story of how a dominant firm that through painstaking research
creates a brilliant operating system has its rewards whittled away by
clever copiers who build compatible, yet noninfringing, operating sys-
tems. If the costs of emulating are low, the dominant firm might not be
able to recover its research and development costs. If they are not,
then resources are wasted on efforts to emulate an industry standard.
Complementary products. Because of network externalities flowing
from computer operating systems, it is difficult for hardware manufac-
turers to market computer systems unless they can offer one of the de
facto industry standard operating systems. 170 A number of factors limit
their ability to gain access to an industry standard that is protected by
copyright. As a means of sustaining a dominant position in the market-
place, 171 the owner of an operating system copyright might limit its li-
censing practices as a means of locking consumers into its hardware
and other products and discouraging other firms from developing di-
rectly competing products. 172 In order to sell their hardware products
to such customers, competitors must emulate the industry standard
170. See Nilles, supra note 9, at 122; Stem, "Idea" Swallows "Expression," or a Left-Handed
Way to Say that Second Comers Should Build Their Own Highways to the Market, 2 COMPUTER L. REP.
380 (1983).
171. See text accompanying notes 55-58 supra.
172. This lock-in theory was the basis for the Ninth Circuit's ruling in Digidyne Corp. v.
Data Gen. Corp., 734 F.2d 1336 (1984). See notes 195-196 infra and accompanying text.
July 1987] 1361
STANFORD LAW REVIEW
without infringing its owner's copyright. This is costly and may fail to
achieve a satisfactory level of compatibility; 173 moreover, the follower
takes the risk that the dominant firm will switch operating systems,
thereby leaving followers out in the cold.
174
Even if the owner of the copyright on the industry standard is will-
ing to license it, the transaction costs of doing so may be too high for
many smaller companies with good ideas for improving complementary
products to sign on. 175 In the microcomputer market, there are indica-
tions that IBM's dominant position and refusal to license its proprietary
software (i.e., its Basic Input Output System) have slowed the industry's
move toward lower cost, mass distributed computer systems.
176
A major effect of granting copyright protection to operating sys-
tems, therefore, is to decrease the rate of return of hardware manufac-
turers that wish to compete with a dominant computer manufacturer.
This in turn reduces the incentive of these firms to develop and im-
prove hardware technology. Thus, by not permitting hardware manu-
facturers low cost access to a de facto industry operating system,
copyright law chokes off innovation and diffusion of computer hard-
ware products.
2. Realization of network externalities.
Because exact duplication of expression is not ordinarily required to
reap the benefits of an idea, the monopoly costs of copyright protection
are usually significantly limited. In the case of computer operating sys-
tems, however, functionally exact duplication is essential to achieving
the ability to run application programs designed for a particular operat-
ing system.17 7 In effect, therefore, copyright protection discourages re-
alization of external benefits flowing from broad diffusion of an
industry standard by severely limiting access to that standard.
The members of CONTU were aware of the possibility that granting
copyright for computer software might invoke the idea/expression
identity exception to copyright protection. "In the computer context,
... [the idea/expression identity] means that when specific instructions,
even though previously copyrighted, are the only and essential means
of accomplishing a given task, their later use by another will not
amount to an infringement." 178 In defining a test for this defense to
infringement of operating systems, however, the Third Circuit Court of
Appeals erected a virtually insurmountable burden of proof for would-
173. See B. KELLY & D. GRIMES, supra note 10, at xx.
174. See Rubin & Strehlo, supra note 147, at 65 (quoting StevenJobs, then-chairman of
Apple Computer, as stating "IBM is going to come out with a proprietary version of PC-DOS
that other companies won't be able to buy from Microsoft."); Sandberg-Diment, LB.M. Inau-
gurates a New Standard, N.Y. Times, Apr. 5, 1987, at F20, col.1.
175. See text accompanying note 49 supra.
176. See IBM vs. The Clones, Bus. WK., July 28, 1986, at 62, 68.
177. See B. KELLY & D. GRIMES, supra note 10, at xx-xxi.
178. CONTU FINAL REPORT, supra note 1, at 20.
1362 [Vol. 39:1329
COMPUTER SOFTWARE PROTECTION
be copiers.' 79 In Apple Computer, Inc. v. Franklin Computer Corp., the court
stated that in order for there to be a merger of an idea with its expres-
sion, other methods of expressing the idea must be "foreclosed as a
practical matter."' 80 By finding that compatibility with Apple II
software and hardware was "a commercial and competitive objective"
of Franklin rather than an essential function of the operating system
programs,18 1 the court failed to appreciate the network externality in-
herent in computer operating systems. The competitor can always of-
fer a similar computer product without infringing the dominant firm,
but it cannot (at least without substantial, socially worthless effort) offer
compatibility without infringing. If potential network externalities are
large, then the Third Circuit's decision in Apple has extracted and will
continue to extract a high social cost.
The availability of legal protection for operating systems not only
prevents firms from offering compatible products, but also discourages
them from coordinating efforts to establish and develop uniform indus-
try-wide standards. As we discussed in Part II, dominant firms might
prefer to offer noncompatible products even when net social welfare
would be improved by their adoption of compatible products.' 8 2 This
observation is consistent with Professor Brock's observations about the
evolution of the U.S. computer industry.18 3 He finds that IBM strongly
resisted efforts to standardize computer interfaces and programming
languages. 184 The availability of copyright protection for computer op-
erating systems strengthens dominant firms' ability to resist standardi-
zation by giving them the legal right to enjoin those who adopt their
operating systems. It is not surprising, therefore, to find a lack of
clearly defined standards to be a major impediment to growth in the
U.S. computer industry.'
8 5
3. Conclusions.
Our analysis suggests that there is little need for copyright protec-
tion for operating systems designed to run on mainframe computers.
With respect to mini- and microcomputer operating systems, copyright
protection makes it more difficult for society to reap the benefits of sig-
nificant network externalities, discourages and distorts innovation in
operating systems and complementary computer hardware, and slows
diffusion of computer products. This does not mean that legal protec-
tion cannot alleviate the market failures flowing from the public goods
179. Apple Computer, Inc., v. Franklin Computer Corp., 714 F.2d 1240 (3d Cir. 1983), cert.
dismissed, 464 U.S. 1033 (1984); see Stern, supra note 170, at 382.
180. 714 F.2d at 1252-53.
181. Id. at 1253.
182. See text accompanying notes 47-48 supra.
183. See Brock, supra note 46, at 78-83.
184. Id. at 79, 82, 85-90.
185. See Wilson, supra note 11, at 58; see also Pournelle, supra note 11, at 81 (noting the
great confusion among microcomputer operating systems).
1363July 1987]
STANFORD LAW REVIEW
and network externality attributes of computer operating systems;
rather, it means that copyright is ill suited to remedying these market
failures. In the next Section, we draw upon the lessons from the short-
comings of copyright protection to tailor a system of legal protection
that can better serve the public interest.
C. Tailoring Legal Protection for Operating Systems
Part of the reason for copyright's inability to promote economic effi-
ciency in the provision of computer products is that the public goods
and network externality problems suggest conflicting modes of legal
protection. Public goods problems are alleviated by expanding legal
protection for intellectual work. External benefits from networks are
promoted by facilitating access to a standard. Thus, the difficult policy
question is how to promote standardization while at the same time en-
couraging continuing innovation (along the entire spectrum from
software to hardware). By closely tailoring legal protection to reward
desired innovation while permitting reasonable access to industry stan-
dards, it is possible to reach a satisfactory accomodation of these appar-
ently conflicting objectives.
In theory, patent law is more appropriate than copyright for pro-
tecting the intellectual work contained in computer operating systems.
A patent protects new and useful processes and machines. 186 Given the
interchangeability of hardware and software, 187 it seems logical to pro-
tect computer operating systems and dedicated computers that embody
a particular operating system with the same form of legal protection.
Because patent law protects ideas, those who create patentable operat-
ing systems could be better assured of appropriating a substantial por-
tion of the benefits of their efforts.
As we noted in Part III, it is difficult to obtain patent protection for
computer programs.' 88 It should be pointed out, however, that
although the scope of patent protection for computer software is uncer-
tain, some of the recent cases that have upheld the patentability of com-
puter programs involved programs that manipulate the internal
operations of a computer. ' 89 Moreover, the importance of network ex-
ternalities flowing from widespread access to a common mini- and
microcomputer operating system suggests that legal protection should
be hard to come by and relatively short in duration.
To encourage innovation in operating system technology, Congress
186. Cf Kaufman, supra note 1, at 437-39 (proposing the development of a hybrid "idea
copyright," with a 17-year period like a patent, to enable creators of programs to protect both
the expression and function of computer programs).
187. See text accompanying notes 17-19 supra.
188. See text accompanying notes 78-122 supra.
189. In re Pardo, 684 F.2d 912 (C.C.P.A. 1982); In re Bradley, 600 F.2d 807 (C.C.P.A.
1979), a fd by an equally divided Court sub nom. Diamond v. Bradley, 450 U.S. 381 (1981); see
Davidson, supra note 63, at 674-75.
1364 [Vol. 39:1329
COMPUTER SOFTWARE PROTECTION
should consider creating a hybrid form of patent protection specifically
tailored to accommodate the market failures endemic to the provision
of computer operating systems.190 As with traditional patent law, the
standard for protection should be novelty, nonobviousness, and useful-
ness; dominant firms (or anyone else) should not be able to "lock up"
an industry standard simply by expressing it in a unique way.
To be feasible, the modified form of patent protection for computer
operating systems should be based on a timely examination of patent
applications. And given the rapid pace of technological change in the
computer field and the interest in promoting access to industry stan-
dards, patent protection for operating systems should be shorter in du-
ration than traditional patent protection.' 9 '
In order to promote continued innovation in widely used operating
systems, the operating system patent code should, like the Semiconduc-
tor Chip Protection Act, permit some limited form of reverse engineer-
ing.192 And like traditional patent law, the hybrid code should allow
consumers to buy a ROM chip or other device containing a patented
operating system and modify it for sale to a third person.193
Because traditional patent law affords absolute protection, however,
it would inhibit realization of network externalities from operating sys-
tems satisfying the above subject matter requirements. In order to fa-
cilitate realization of network externalities, therefore, the hybrid patent
code should contain a flexible compulsory licensing provision.' 94 Such
a provision would promote access to an industry standard while assur-
ing rewards to the creator of an innovative and socially valuable operat-
ing system. It would also limit the ability of dominant firms in the
industry to engage in anticompetitive practices.
The need for compulsory licensing as a means for promoting com-
petition and rewarding innovation is brought into focus by the decision
190. Congress has recently followed a sui generis approach in designing legal protection
for semiconductor chips. See text accompanying notes 140-143 supra. Other commentators
have also urged Congress to create a hybrid form of legal protection for computer software.
See Davidson, supra note 63, at 673-82; Galbi, Proposal for New Legislation to Protect Computer
Programming, 17J. COPYRIGHT Soc'Y 280 (1970); Karjala, supra note 63, at 61-81; Samuelson,
Creating a New Kind of Intellectual Property: Applying the Lessons of the Chip Law to Computer Programs,
70 MINN. L. REv. 471, 507, 529-31 (1985); Stern, The Case of the Purloined Object Code: Can It Be
Solved? (Part 2), BYTE, Oct. 1982, at 210, 222.
191. See ECONOMICS OF PROPERTY RIGHTs, supra note 14, at IV-1 to IV-58 (analyzing the
optimal duration of legal protection for computer software); Karjala, supra note 63, at 63-64
(noting that the effect of legal protection on compatibility should be considered before IBM is
granted a 75-year period of protection for its Basic Input/Output System); id. at 67-68 (warn-
ing that too long a period of legal protection for computer software might inhibit develop-
ment of software and hardware).
192. See Samuelson, supra note 190, at 495-97.
193. See id. at 522.
194. Cf Karala, supra note 63, at 66, 68-69 (noting that Japan is carefully considering
the desirability of compulsory licensing in a scheme of legal protection for computer
software); Kaufman, supra note 1, at 437-39 (proposing compulsory licensing for "idea copy-
rights" for computer programs).
1365July 1987]
STANFORD LA W REVIEW
of the Ninth Circuit Court of Appeals in Digidyne Corp. v. Data General
Corp.195 In Data General, the defendant (Data General), a manufacturer
of computers, refused to license its RDOS operating system to firms
using a central processing unit other than Data General's "NOVA" sys-
tem. Recognizing the anticompetitive effects of this practice in a mar-
ket with network externalities, 196 the Ninth Circuit held that Data
General's licensing practices were an unlawful tying arrangement that
violated federal antitrust law.
In light of the strong network externalities flowing from compatibil-
ity, computer operating systems serve as "essential facilities" in com-
puter hardware markets.' 97 Unless a firm can get onto the network, its
products will be at a great disadvantage relative to those that can run
the vast stock of application programs designed for the industry stan-
dard. The operating system royalty rate per use should be set so as to
compensate true innovators for the cost of building a useful "highway"
for the market plus a fair profit (adjusted for the risk of failure). 198 For
high volume products, these rates would probably be low. In the
microcomputer market, for example, the rate would probably be less
than one dollar for access to the major operating systems (assuming
that the Apple and IBM operating systems merited hybrid patent pro-
tection at all).' 99
A patent code for operating systems based on the above outline
strikes a preferable balance of the conflicting policy concerns raised by
computer operating systems. By providing solid protection for truly
innovative and useful operating systems, the code would reward inno-
vation in operating systems. The limits on this regime of protection-
moderate duration, reverse engineering, adaptation-and the provision
for compulsory licensing would promote access to operating systems
that emerge as industry standards, wide diffusion of computer prod-
ucts, and innovation in hardware products. The code would also avoid
195. 734 F.2d 1336 (9th Cir. 1984).
196. The court accepted the plaintiffs' proof of market power on the basis of software
"lock-in." Software lock-in occurs when a computer user develops or purchases application
software designed to run on a particular operating system. This installed base locks the con-
sumer into the hardware products of the owner of that operating system if competitors cannot
gain access to the operating system and the costs of converting software to run on different
operating systems are high. But see Helein, Software Lock-in and Antitrust Tying Arrangements: The
Lessons of Data General, 5 COMPUTER/L. J. 329, 337, 342-43 (1985) (suggesting that conver-
sion costs might not be so high as to justify a finding of market power).
197. Cf Associated Press v. United States, 326 U.S. 1, 21 (1945) (requiring news service
formed by over 1,200 newspapers to grant competing papers access to the service); United
States v. Terminal R.R. Ass'n, 224 U.S. 383, 411-12 (1912) (requiring 14 railroads that con-
trolled access to the only railway bridge into St. Louis to share it with competitors). See gener-
ally Troy, Unplugging the Bottleneck: A New Essential Facility Doctrine, 83 COLUM. L. REv. 441
(1983) (student author) (describing the essential facilities doctrine in antitrust law).
198. See generally Stern, Determining Liability for Infringement of Mask Work Rights Under the
Semiconductor Chip Protection Act, 70 MINN. L. REv. 271, 359-60 (1985) (describing the legal
standard for determining a reasonable royalty).
199. See note 147 supra.
1366 [Vol. 39:1329
July 1987] COMPUTER SOFTWARE PROTECTION
wasteful expenditure of resources on efforts to emulate an industry
standard.
The proposed operating system code would probably entail some-
what higher administrative costs than the current system. Patent exam-
inations, though streamlined, would be significantly more expensive
than the cost of copyright registration. Moreover, compulsory licens-
ing proceedings, as well as the cost of monitoring use of protected op-
erating systems, would add to the expense of the system. If the royalty
rates were low (as the microcomputer example indicates200 ), however,
members of the industry could be expected to cooperate in ensuring
that patent owners were properly compensated.
V. LEGAL PROTECTION FOR APPLICATION PROGRAMS
This Part presents an economic analysis of legal protection for intel-
lectual work embodied in application programs. Section A assesses the
need for legal protection and concludes that the ease with which valua-
ble programs can be copied justifies limited legal protection. Section B
analyzes the costs and benefits of using traditional copyright doctrine
to protect these programs. Section C outlines a sui generis form of
legal protection that would better promote technological innovation
and diffusion of software products.
A. The Need for Legal Protection
At the outset, it will be useful to distinguish between software pro-
grams written specifically for particular consumers (contract programs)
and general purpose programs that can be used by more than one con-
sumer (software packages). Contract programs do not involve the pub-
lic goods problem because the single or few consumers for whom the
programs are designed realize the full benefit of the creator's work;
therefore, the creator can easily limit the distribution of the program
and can charge for its full development and maintenance costs. 20 1
Contract programming has been the mainstay of the software industry
during most of its history. With advances in general purpose comput-
ing in the past decade, however, software packages have become an
important software product, particularly at the low-end or microcom-
puter sector of the market. Because the contract program sector of the
market does not involve significant public goods problems, we focus
below upon the software packages sector of the industry.
The characteristics of software packages vary widely, depending
principally upon the type of computer system on which the application
programs will be run. Software packages for the low end of the market
typically have high unit volumes, short product life cycles, and low or
200. Id.
201. See Keeffe & Mahn, Protecting Software; Is It Worth All the Trouble?, 62 A.B.A. J. 906,
907 (1976).
1367
STANFORD LA W REVIEW
zero maintenance costs. At the upper levels of the equipment size spec-
trum, software packages are characterized by lower unit volumes,
longer product life cycles, and higher maintenance costs.
20 2
In the absence of devices to inhibit copying,203 the cost of copying
software packages for most systems is low. Programs are typically
stored on disks or tapes that can usually be copied directly on the
machine for which they were designed. Even where direct copying is
not possible, resourceful computer programmers and engineers can
often reverse engineer the programs.
Despite the ease of copying, there are ways by which creators of
application programs can recapture their investment in research and
development. Creators of low-volume, high-cost software packages for
high-end computers can often realize much of their cost on the first
units released. The price of these programs can exceed $60,000.204
Moreover, most of this software is not sold outright but is licensed or
leased on a monthly or yearly basis, with separate fees for maintenance,
updating, and improvements. 205 The low volume of these sales makes
it possible for the creator to obtain trade secret protection for her intel-
lectual work.
Appropriating the cost of developing software packages for
microcomputers is more difficult. Prices for these programs-ranging
from $20 to $1000-do not allow creators to recover their investment
costs on the first units sold. They make their return on high volume
sales. 20 6 Because wide-scale marketing is required to achieve high vol-
ume sales, however, creators lose the ability to obtain trade secret
protection.
Creators of high-volume application packages have sought other
means of recapturing their development costs. Some tie maintenance
and program enhancement services to their programs. 20 7 Others use
copy-protect devices that prevent or impede copying.208 However, no
failsafe device without some drawbacks has yet been developed. More-
over, these forms of protection have the undesirable effect of limiting
the consumer's ability to modify programs.
Thus, the ease with which software packages can be copied does
suggest that some form of legal protection is needed to assure creators
of software packages an adequate return to their investment. It should
be emphasized that this concern is most acute in the low-end
202. See SOFrwARE TRADE STUDY, supra note 26, at 12, 14.
203. See Sacks, To Copy-Protect or Not to Copy-Protect?, POPULAR COMPUTING, Oct. 1985, at
73.
204. SOMrWARE TRADE STUDY, supra note 26, at 12.
205. Id. at 12, 14.
206. The rapid advancement of software, however, means that software producers real-
ize most of the return to research and development within a short time after they market their
products. See Seneker & Pearl, Software To Go, FoRBEs, June 20, 1983, at 93, 94.
207. See Antonoff, The New Spreadsheets, PERs. COMPUTING, Nov. 1985, at 107.
208. See Gilburne & Johnston, supra note 127, at 226-27; Sacks, supra note 203, at 73.
1368 [Vol. 39:1329
COMPUTER SOFTWARE PROTECTION
microcomputer sector of the market. Creators of low-volume packages
for medium-sized and large computer systems can use licensing agree-
ments to protect their intellectual work. Moreover, they can tie mainte-
nance, support, and enhancement services to their programs in order
to reap a stream of payments over the life of the programs. Creators of
software packages sold in retail stores do not have these means of pro-
tecting their intellectual work from copiers available and therefore are
in the most need of legal protection.
B. Overinclusiveness of Full Copyright Protection
This Section assesses the efficacy of the current system for protect-
ing intellectual work embodied in application programs. Subsection 1
analyzes the effects of traditional copyright protection on the incentives
to innovate and diffuse computer technologies. Subsection 2 assesses
the role of network externalities in the application software market.
Subsection 3 discusses the effects of traditional copyright protection on
competition in markets for computer hardware and software.
1. Effects on innovation and diffusion.
In a recent survey of two thousand diverse organizations, Software
News found that "documentation" and "ease of use" are the most im-
portant selection criteria among application software users. 209 These
results suggest that expression is a critical factor in the value of applica-
tion software. Thus, copyright protection does protect the socially val-
uable aspect of the intellectual work embodied in application programs.
While copyright does not effectively prevent copiers from making a
few copies (because of detection and enforcement costs), it does inhibit
competing firms from reproducing works on a mass scale.210 There-
fore, copyright greatly enhances the ability of creators of high-volume
application programs to capture a substantial portion of the social value
of their work.
Copyright's long duration of coverage and limitations on adaptation
of protected works, however, inhibit the creation of improvements on
existing programs, thereby constraining diffusion of such programs.
One commentator notes that "[n]ew computer programs ... often rely
on existing programs, and this reliance will surely increase when pro-
grammers reach the stage of creating new programs by computer in-
stead of human intellectual effort." 2 1 1 In addition, innovation in
209. More than 70% of those surveyed considered documentation and ease of use to be
"very important." The next most important criterion was "features/performance," garnering
a 60.6% very important rating. See SOFTWARE TRADE STUDY, supra note 26, at 50, citing 1984
Software User Survey, SOFTWARE NEWS (Jan. 1984).
210. See M. BRESLOW, A. FERGUSON & L. HAVERKAMP, AN ANALYSIS OF COMPUTER AND
PHOTOCOPYING ISSUES FROM THE POINT OF VIEW OF THE GENERAL PUBLIC AND THE ULTIMATE
CONSUMER 121 (1978) (study prepared for CONTU).
211. Karala, supra note 63, at 67, 68 (noting further that "many new programs are de-
1369July 1987]
STANFORD LA W REVIEW
application packages can take the form of combining existing applica-
tion programs in a useful way.21 2 Traditional copyright doctrine does
not easily accomodate this form of innovation. Except where the pro-
grams to be enhanced, combined, or synthesized are in the public do-
main or the proprietary library of the would-be creator, she must
license the desired programs. The transaction costs associated with li-
censing in this context can be prohibitive.
2. Realization of network externalities.
Application programs do create network externalities, but of a dif-
ferent type than operating systems. The value of a user's familiarity
with a particular type of application program-for example, a word
processing program or a spreadsheet-is greater, the more widespread
is the use of that product. This network externality is similar to that
created by a standardized typewriter keyboard.213 In effect, wide adop-
tion of common application programs means that users' acquired skills
are transferable to a different workplace. 214  But unlike the
"QWERTY" example, the switching costs associated with application
programs are relatively small because of the availability of many appli-
cation programs for use with the major formats.
The availability of copyright protection for dominant application
packages will discourage realization of some of the benefits of these
network externality benefits by enhancing the ability of dominant firms
to act unilaterally in establishing proprietary standard programs. For
example, dominant firms might try to have their word processing pack-
ages, spreadsheets, or programming languages adopted, even though
another package of comparable capability has achieved popularity on
the market. Such firms may also undermine efforts to establish uniform
voluntary standards. 215
3. Effects on competition in complementary products.
Unlike the case of operating systems, the potential for consumer
lock-in and tying with application programs is not great under a copy-
veloped through improvements or additions to existing programs. If the improvement is de-
termined to be an adaptation, its use might be enjoined [under traditional Copyright
protection], resulting in impediments to program development as well as duplicative invest-
ments in programs that accomplish similar functions.").
212. See Miller, Software Integration, POPULAR COMPUTING, Dec. 1983, at 106 (noting that
the leading software companies are now introducing sophisticated products that integrate
standard business needs to permit data transfer, multiprocessing, and greater ease of use).
213. See text accompanying note 44 supra.
214. Cf Interview: Apple Computer, Inc., President and Chairman John Sculley-On Fitting into
the IBM World of Computing, PERS. COMPUTING, Apr. 1986, at 145, 147 ("It's becoming appar-
ent that the real cost is not the hardware or even the software. The real cost is teaching the
user.").
215. See, e.g., Brock, supra note 46, at 81-85 (describing IBM's unwillingness to partici-
pate in voluntary effort to establish COBOL as the standard business programming
language).
1370 [Vol. 39:1329
July 1987] COMPUTER SOFTWARE PROTECTION
right regime. Although it is theoretically possible for the creator of an
application program to tie its sale to hardware and operating systems,
this market power is greatly limited by the availability of close substi-
tutes. Unlike the production of operating systems, exact coding is not
essential to producing a similar competing application program.
4. Conclusions.
Copyright protection does promote innovation in application pro-
grams, though not without some inhibiting effects on diffusion and the
realization of network externalities. The next Section suggests ways
that legal protection might be better tailored so as to retain the benefi-
cial effects of copyright protection while reducing some of its negative
impacts.
C. Tailoring Legal Protection for Application Programs.
As with legal protection for operating systems, Congress should
consider creating a special form of legal protection for application pro-
grams.216 Given the importance of improving existing programs as a
primary mode of technological innovation and the presence of some
network externalities, legal protection should be significantly shorter in
duration than traditional copyright protection. The relatively short
commercial life of most application programs217 indicates that legal
protection should be correspondingly short.21
8
The regime for protecting application programs should also allow
for reverse engineering. In designing legal protection for semiconduc-
tor chips, Congress recognized the importance of reverse engineering
in enabling researchers to advance a field in which innovations are cu-
mulative.2 19 A limited reverse engineering provision in the application
software code would similarly promote the advancement of application
software technology.
2 20
Congress should also consider the desirability of a limited form of
compulsory licensing of application packages. In order to realize the
benefits of network externalities and to promote creativity in the inte-
gration of software programs, it would seem worthwhile to allow lim-
ited access to application programs, particularly those that emerge as
industry standards. This could be achieved without dulling primary
creative incentives by delaying the availability of compulsory licensing
for a limited period to allow the creator of the program to reap the
rewards of commercial success.
216. See note 190 supra and accompanying text.
217. See note 206 supra.
218. See text accompanying note 191 supra.
219. See Samuelson, supra note 190, at 496; text accompanying note 192 supra.
220. Cf Samuelson, supra note 190, at 524-25 (recommending similar provision).
1371
STANFORD LAW REVIEW
VI. CONCLUDING REMARKS
This article has highlighted two serious flaws in the analysis that led
Congress to adopt copyright as the primary means for protecting intel-
lectual work embodied in computer software. With regard to the public
goods problem associated with technological innovation, CONTU
failed to distinguish among software products and to assess carefilly
the need for additional legal protection. Second, CONTU completely
overlooked the fact that operating systems serve as product standards
that are capable of producing substantial network externalities.
When these considerations are taken into account, a very different
set of policy recommendations emerges. Legal protection for mini- and
microcomputer operating systems must reward important innovations
without bestowing pure monopolies on expression. It was shown that
copyright protection is far from an ideal solution, as it exacerbates the
market failures endemic to the market for operating systems, and that a
hybrid form of patent protection with the availability of compulsory li-
censing has the potential to overcome these impediments. Mass mar-
keted application programs, on the other hand, are amenable to
copyright-type protection, but such protection should be of much
shorter duration and feature more flexibility than traditional copyright
doctrine.
The analysis and recommendations of this article establish a frame-
work for further research and inquiry. We have highlighted the princi-
pal market failures affecting the provision of computer software and
sketched out their policy implications. But there is much to be learned
by studying each of the factors discussed here in greater detail and with
the aid of technical experts. Congress should appoint a new commis-
sion comprised of computer scientists, economists, and lawyers to
study these problems in depth. The commission should assess a broad
range of policy options-from hybrid forms of legal protection to direct
ways of coordinating industry development-because some of the
problems identified here are neither exclusively nor necessarily best ad-
dressed through affording legal protection.
1372 [Vol. 39:1329

