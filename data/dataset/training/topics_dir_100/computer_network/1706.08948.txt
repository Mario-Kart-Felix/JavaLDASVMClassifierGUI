Training a Fully Convolutional Neural Network to Route Integrated Circuits
Sambhav R. Jain ∗ †
Oracle America
Kye Okabe †
Stanford University
Abstract
We present a deep, fully convolutional neural network that
learns to route a circuit layout ‘net’ with appropriate choice
of metal tracks and wire class combinations. Inputs to the
network are the encoded layouts containing spatial location
of pins to be routed. After 15 fully convolutional stages fol-
lowed by a score comparator, the network outputs 8 layout
layers (corresponding to 4 route layers, 3 via layers and
an identity-mapped pin layer) which are then decoded to
obtain the routed layouts. We formulate this as a binary
segmentation problem on a per-pixel per-layer basis, where
the network is trained to correctly classify pixels in each
layout layer to be ‘on’ or ‘off’. To demonstrate learnability
of layout design rules, we train the network on a dataset of
50,000 train and 10,000 validation samples that we gener-
ate based on certain pre-defined layout constraints. Preci-
sion, recall and F1 score metrics are used to track the train-
ing progress. Our network achieves F1 ≈ 97% on the train
set and F1 ≈ 92% on the validation set. We use PyTorch
for implementing our model.
1. Introduction
Routing is a complex spatial optimization problem in the
physical design of integrated circuits (ICs) that is known to
be NP-complete in most cases [20, 15, 10, 22]. The task
is to optimally connect circuit segments spanning multiple
layout hierarchies and multiple wire classes, while comply-
ing to a strict set of design rules dictated by the foundry’s
process design kit (PDK). The quality of routing determines
circuit performance (frequency), reliability, and can also
impact area. Depending on the type of circuit (ASIC / mem-
ory / processor), the routing objective may prioritize one
over the other, but in general the expectation is to:
• Minimize path delay (resistance/capacitance)
• Minimize congestion (wire crowding, hot spots)
• Maximize routability (availability of tracks)
• Maximize repeatability
∗Corresponding author: sambhav@alumni.stanford.edu
†Indicates equal contribution.
Figure 1. Training samples from our dataset. Top row shows input
data containing pins for a single net case. Bottom row shows input
labels (decoded to 8-bit RGB) containing pins, routes, and vias.
Pins are routed using two wire classes (branch-leg). Wire class
color coding: M3=green, M4=red, M5=grey, M6=blue.
Formally, a circuit layout consists of several sub-blocks
(or cells) with input/output ports (or pins). Connections be-
tween pins use channels (or tracks) in several metal layers
that run orthogonal to one another, separated by insulating
layers with connecting vias. If we treat cells as edges, then
a node in a circuit graph corresponds to a net in the layout,
which connects the driver’s output pin with the input pin(s)
of the receiver(s). Traditionally, when the circuit sizes were
tractable, routing was primarily a manual task. However,
in the past couple decades with exploding circuit sizes and
more than a few billion transistors to be routed, the use of
1
ar
X
iv
:1
70
6.
08
94
8v
1 
 [
cs
.C
V
] 
 2
7 
Ju
n 
20
17
auto-routers is indispensable. Shrinking technology nodes
and more stringent design rules further impact routability.
Commercial electronic design automation (EDA) tools try
to tackle this non-linear optimization problem using various
algorithmic approaches [20] such as (i) exponential algo-
rithms to exhaust the search space for a solution, (ii) heuris-
tic algorithms, (iii) optimal algorithms for special cases of
the problem, or (iv) approximation techniques. These ap-
proaches are iterative in nature and rely on a continually
evolving/changing set of design rules. The routed layouts
may further require significant manual effort and fine tun-
ing to improve the non-optimal routes.
We explore a learning-based approach wherein we train
a deep, fully convolutional network (FCN) to route a layout
net while relying on its ability to learn implicit design rules
from the training data. In order to demonstrate learnability
of layout design rules by the network, we pre-define a set
of basic constraints (not specific to any technology node)
that are embedded in the ground truth layouts generated for
a single net case. The network is trained on our dataset
of 50,000 train and 10,000 validation samples. Input data
(containing pins) and labels (containing pins and routes) are
first encoded on a binary basis per-pixel per-layer (detailed
in Section 3), before feeding to the 15 stage FCN. FCN out-
puts go through a score comparator to give 8-layer encoded
layouts (4 route layers, 3 via layers, and 1 pin layer). We
decode this to 8-bit RGB for visualization. The various ar-
chitectural choices of the FCN are covered in depth in Sec-
tions 4 and 5. The network shows ability to learn (i) the
identity-map for pins, (ii) optimal track locations for routes,
(iii) suitable wire class combination, and (iv) via locations.
2. Related Work
The task of producing routes using orthogonal layers of
parallel channels and vias at intersections is often tackled
heuristically, since an optimal solution does not exist for
this NP-complete problem [20, 15, 10, 22]. Previous work
in this field [27, 17, 2, 26, 25, 28] mostly rely on explicit
rule-based algorithms to tackle parts of this complex task.
For instance, Zajc et al. [28] proposed using hierarchical al-
gorithms for automatic routing of interconnects in two layer
channels. Rivest et al. [17] show a ”greedy” heuristic chan-
nel router assuming all pins and wiring sit on a common
grid. The other class of routers, which have received atten-
tion lately, are objective function based. Alpert et al. [1]
proposed a combination of minimum spanning tree (Prim)
and shortest path tree (Dijkstra) objectives for performance
driven global routing. Constructing routing tree with differ-
ent objectives was also explored, such as timing objective
[21], buffer insertion [13] and wire sizing objective [23],
congestion and thermal objective [18, 8]. A completely dif-
ferent objective for diagonal routing as opposed to the or-
thogonal (Manhattan) routing was also proposed [19].
One of the very first ideas of using neural networks for
circuit routing came from Green and Noakes [6], who di-
vided the routing task into several stages and combined
multiple small back propagation networks to form a com-
plex neural system. They proposed to restrict the routing
task to predefined areas and slide the context window to
complete routes in sections. This divide and conquer ap-
proach helped reduce the complexity of their artificial neu-
ral network router. Our work takes inspiration from the
recent advances in convolutional neural networks (CNN)
[3, 12, 11] which are better suited for visual tasks as they
preserve spatial information in the inputs. Similar to [6], we
fix the routing window to a predefined layout size, however,
in contrast to [6], we develop a single, end-to-end, deep
network using convolutions, which holistically learns mul-
tiple design rules during training, and is able to route using
different wire class combinations, depending on the spatial
spread of the pins. To our best knowledge, this is the first
attempt at routing a circuit layout net using a convolutional
neural network.
3. Dataset
Overview. We develop our own dataset owing to the lack
of a publicly available layout dataset, and the need to use
simplistic design rules to assess learnability by the network
(feasibility). In this section we discuss the design choices
and constraints used when generating 50,000 layouts for
training and 10,000 layouts for validation. Each layout sam-
ple contains both data (pins only) and labels (pins, routes,
vias) for a single net (see Figure 1). The image is pixel-
wise binary encoded in 8 layers of the layout, viz. [pin,
M3, V ia3, M4, V ia4, M5, V ia5, M6]. So each pixel in a
given layer is either ’1’ or ’0’, indicating the presence or ab-
sence of the layer at that spatial location. Our reasoning be-
hind this encoding scheme is discussed in Section 4.1. Thus
training data are stored as tensors of shapeN×1×H×W ,
and labels as tensors of shape N × 8 × H × W , where
H = W = 32. The layouts were sized 32 × 32 pixels,
which we found computationally feasible. We use chunked
HDF5 [24] when storing and loading this large dataset to
avoid memory bottlenecks.
Design rules. These design rules are fundamental to tradi-
tional layout design and do not correspond to any specific
technology node.
1. M2n tracks run horizontally.
2. M2n+1 tracks run vertically.
3. Mn contacts Mn+1 through V ian.
Design choices. We made the following design choices to
reduce the complexity of network implementation. These
could be scaled as needed given sufficient resources.
1. Maximum npins = 5.
2. Layout context window = 11µm× 11µm.
2
3. Total allowed route layers = 4; total via layers = 3.
4. Routes are limited to two wire classes (branch-leg)
(e.g. [M3,M4] or [M4,M5] or [M5,M6]).
5. Metal tracks use pixel grid (one track per pixel).
6. Pin layer is lower than all route layers, and routes need
not drop vias down to the pin layer.
Higher metals normally have less wire resistance per unit
length compared to lower metals, due to their large cross
sectional area and/or better material properties. However,
higher metals also require additional vias to jump up/down
to/from higher layers, which adds to the total resistance. As
a result, there is a break-even route distance above which
a higher metal is preferred. Moreover, for a given layout
size, depending on wire performance data there are only a
limited set of wire classes which make sense for routing.
Using higher or lower wire classes than necessary would be
non-optimal. In our case, we use empirical wire and via
resistance data1 for four such wire classes (say M3 to M6).
We select 11µm as the size of the context window as it gave
us a balanced dataset among the three wire class combina-
tions, viz. [M3,M4], [M4,M5], [M5,M6]. By defining a
context window for routing, we let the possibility open to
have it slide over the entire layout to complete routing in
segments, similar to [6], but we leave the slide-and-route
implementation to future work.
Route algorithm. For each layout we first sample (random
uniform) npins from {2, 3, 4, 5} and (x, y) co-ordinates for
each pin from {0− 31} (since pixel grid is 32× 32). For a
given pin configuration, the direction with the largest spread
of pins is chosen as dominant. The dominant direction uses
a branch, while the non-dominant direction uses legs to con-
nect individual pins to the branch. The choice of metals for
branch and legs is done so as to optimize the combined wire
and via resistance, as explained earlier. From Figure 1, we
can qualitatively see that shorter routes use lower metals
while longer routes use higher metals. We can also see that
a branch is always assigned to the dominant direction, and
legs to the other direction. For visualization, the routed lay-
outs are decoded to 8-bit RGB as follows: M3 as green, M4
as red, M5 as grey and M6 as blue.
4. Model
Overview. Our proposed model consists of a single, end-
to-end, deep network using convolutions, which takes pin
locations for a net as inputs and generates routes in one of
the three wire class combinations, using layout design rules
it learns from training data. We first present a binary scheme
of encoding the input data in Section 4.1. The FCN model
(see Figure 2) and its architectural details are covered in
Section 4.2. Then in Sections 4.3 and 4.4 we describe the
loss function and the details of training respectively.
1Not released due to proprietary reasons
4.1. Binary Encoding Scheme
In typical image generation problems such as generative ad-
versarial nets (GAN) [4], at the point of weight initializa-
tion, networks are intrinsically capable to generate an arbi-
trary color at any pixel coordinate. Subsequently through
the course of training, meaningful color/coordinate com-
binations must be learned. The standard 8-bit RGB color
gamut has 224 color representations (3 color channels, 8 bits
each) which is significantly larger than what we need. Since
our data only deals with 8 layout layers (4 route, 3 via, 1
pin) we can immediately set an upper bound on the repre-
sentation combinations per pixel to 28. To take advantage of
this insight, we choose to encode our data on a binary basis
per-pixel per-layer. Hence instead of representing images
as tensors of shape 3×H×W with range: {0−255} (8-bit
RGB), we encode our dataset as tensors of shape 8×H×W
with a binary range: {0, 1}. By doing so, we are able to for-
mulate this as a layer-wise binary segmentation task, with
cross entropy loss on the scores (16 × H ×W ) to let the
network make a binary decision of the presence of each of
the 8 layers at every pixel in the context window H ×W .
4.2. Network Architecture
Figure 2 illustrates our model with the activation volumes
after each stage. The FCN has a total of 15 convolutional2
stages (see Section 5 for further explanation on the choice of
network depth). All convolutions except the last one are fol-
lowed by batch normalization (BN) [7] and leaky rectified
linear unit (leaky ReLU) [14]. The last convolution stage
(L15) outputs the scores, hence is not followed by BN and
leaky ReLU as they would not affect the relative scores. En-
coded inputs to the FCN are tensors of shapeN×1×H×W ,
where N is the mini-batch size and H = W = 32 (spatial
dimensions). The first stage (L1) uses 33× 33 convolution
with 16 filters, whereas stagesL2 throughL15 use 3×3 con-
volution with 16 filters. We believe the large receptive field
at the head of the network allows a fast grasp of the overall
pin locations and helps the network learn spatial informa-
tion better, as will be explored in Section 5. Strides and
padding for convolutions are such as to preserve the spatial
dimension of the feature maps at each stage. Thus the acti-
vations after each stage are of shape N × 16× 32× 32, or
more generallyN × (α.β)×H×W where α is the number
of layout layers to be learned, and β is the number of seg-
mentation classes (two in our case). Activations from the
last FCN stage (scores) are passed through the score com-
parator to pick the class with a higher score. Thus scores
of shape N × (α.β) ×H ×W are reduced to layout maps
of shape N × α ×H ×W with each pixel being either ‘1’
or ‘0’ indicating the presence or absence of a layer at that
spatial location. For visualization of the routes, we decode
the score comparator outputs to 8-bit RGB.
2Fully connected layers or excessively deep layers were avoided.
3
L1
Nx16x32x32
Encoded Inputs
Nx1x32x32
Range: 0 or 1
Score Comparator
Nx8x32x32
Nx(α)xHxW
Range: 0 or 1
L2
Nx16x32x32
L15 (scores)
Nx16x32x32
Nx(α.β)xHxW
Range: ℝ
Decoded Outputs
Nx3x32x32
Range: 0~255
(8 bit RGB)
pin
M3
Via3
M4
Via4 Via5
M5 M6
Fully Convolutional Network (FCN)
L1 Conv (F=33, P=16, S=1)  BN  Leaky ReLU
L2~14 Conv (F=3, P=1, S=1)  BN  Leaky ReLU
L15 Conv (F=3, P=1, S=1)
Figure 2. Model overview. The encoded layouts (with pins only) are fed to a 15 stage FCN which performs convolutions while preserving
spatial dimensions. The filter size (F), padding (P) and stride (S) used in each stage is indicated. Scores at the end of the FCN are processed
by a score comparator to generate the routed layouts (with pins, routes, and vias) which are visualized after decoding to 8-bit RGB.
4.3. Loss Function
To implement the network objective as a layer-wise binary
segmentation task wherein every pixel in every layer is clas-
sified into one of the two classes (y = 0 or y = 1),
we perform simple but critical reshape operations as fol-
lows. At train time, scores from the FCN (tensor) of shape
N × (α.β) × H × W are first reshaped to a matrix of
shape N.H.W.α × β. The corresponding labels (tensor)
of shape N ×α×H×W are reshaped to a vector of length
N.H.W.α. We then use averaged cross entropy loss (com-
bination of negative log likelihood and softmax) over the
predicted score matrix and label vector, to train our model
(see Eq. 1).
L =
1
N.H.W.α
∑
N.H.W.α
ky
{
− log e
Sy∑
β e
Sβ
}
+λ
∑
n
∑
α×β
∑
w2nα×β
(1)
Class imbalance. Since a majority of pixels in the input
labels are background (y = 0) with very few active pixels
(y = 1), we observe that the network quickly learns to clas-
sify all pixels as background and struggles to learn further.
To mitigate such sparse learning difficulties due to class im-
balance, we use weighted cross entropy loss with weights
ky=1 = 3 and ky=0 = 1.
Regularization. An L2 regularization term was added to
the loss to improve generalization. We sum over squared
weights of 16 convolution filters (
∑
α×β) from each stage
(
∑
n) and use a regularization coefficient λ = 1× 10−5.
4.4. Training and optimization
We train the model from scratch, starting with default
weight initialization. We use Adam [9] with β1 = 0.9,
β2 = 0.999, and  = 1 × 10−8 to train the weights of the
FCN components. We experiment with two different mini-
batch sizes, viz. N = 10 and N = 100 with learning rates
of 5 × 10−5 and 5 × 10−4 respectively (see Section 5). A
mini-batch of 10 runs in approximately 90ms (∼7.5 min per
epoch) and a mini-batch of 100 takes about 600ms (∼5 min
per epoch) on a Tesla K80 GPU. We use PyTorch [16] to
train and implement the network.
5. Experiments
F1 score as accuracy metric. Given the nature of our
training data which is massively unbalanced towards one
class (y = 0), a raw metric comparing pixels of predicted
and actual (ground truth) layouts will easily present an un-
reasonably high pixel-wise accuracy (∼98% in our case)
even if the model incorrectly predicts all pixels to be back-
ground. We instead use the F1 score metric that uses an
equally weighted harmonic mean of precision and recall
based confusion matrix. Precision is a measure of true pos-
itives among all pixels predicted positive. Recall is a mea-
sure of true positives among all pixels ground truth positive.
### Pseudocode
# tp = true positives, tn = true negatives
# fp = false positives, fn = false negatives
precision = tp / (tp+fp)
recall = tp / (tp+fn)
accuracy = (tp+tn) / (tp+tn+fp+fn)
f1_score = 2 * (precision*recall) /
(precision+recall)
4
Figure 3. First stage experiment. We compare training curves with the first FCN stage using filters of size (i) F=3 (left) and (ii) F=33
(right). Small receptive field at the head of the network prevents the model from learning, as seen from the low train accuracy (F1 ≈ 35%)
on the left compared to the one on the right (F1 ≈ 85%) after 200 epochs.
Network depth and receptive field. We choose the FCN
depth such as to have the overall receptive field of the
network cover the entire input image (32 × 32 pixels).
Assuming all stages use 3 × 3 unit-strided convolutions,
3 + 2 × (nstages − 1) > 32, we would need at least
nstages = 15 to allow the network to learn reasonably well.
We observe that reducing the FCN depth below 15 makes it
difficult for the model to perfectly overfit (F1 = 100%) even
a tiny dataset of 4 train samples. Note that our model uses
33× 33 convolutions only in the first stage (see Figure 2).
Significance of F = 33 in the first FCN stage. As dis-
cussed in Section 4.2, we use 33 × 33 convolutional filters
in the first FCN stage as we believe this large receptive field
at the head of the network helps the model quickly learn the
correspondence between spatial spread of pins in the input
and crucial route decisions such as wire class combinations,
track usage, and branch-leg assignment. To demonstrate the
significance of this architecture, we compare two models
differing only in their first FCN stages, viz. (i) F = 3, and
(ii) F = 33. Rest of the model is unchanged. For this ex-
periment we train the two models on a subset of our dataset
(1000 train and 200 validation samples), using mini-batches
of 10, learning rate of 5× 10−5 and regularization strength
of 1 × 10−5. From Figure 3 we see that learning stagnates
around F1 = 35% after 200 epochs with F = 3, whereas
the model is able to quickly overfit the small dataset fairly
well (F1 = 85%) with F = 33. Interestingly, the increas-
ing gap between training and validation accuracies is due to
the small dataset size used for this experiment, causing the
model to overfit to it.
Final training with different mini-batches. Taking inspi-
ration from [5], we conduct the final training using two dif-
ferent mini-batch sizes, viz. N = 10 and N = 100. The
linear scaling rule [5] suggests adjusting the learning rate
linearly as a function of mini-batch size. This makes intu-
itive sense because we make fewer iterative steps per epoch
with a larger mini-batch, hence the step size (learning rate)
needs to be proportionally larger. We set the learning rates
to 5 × 10−5 and 5 × 10−4 for mini-batches of 10 and 100
respectively, which worked reasonably well in our hyperpa-
rameter tuning experiments. To overcome overfitting seen
in Figure 3, we now use our complete dataset of 50,000
train and 10,000 validation samples for training. Figure 4
shows the loss and accuracy curves (on both train and val-
idation sets) for the two mini-batches. The overall trends
look comparable. With mini-batch of 10 (left plot), the
model achieves accuracies F1 ≈ 90% and F1 ≈ 82% on the
train and validation sets after 200 epochs, and takes about
45 epochs to reach validation accuracy of 80%. In con-
trast, with mini-batch of 100 (right plot) the model achieves
F1 ≈ 97% and F1 ≈ 92% on the train and validation
sets after 200 epochs, and takes only 20 epochs to reach
validation accuracy of 80%. Total train time significantly
improved from 25 hours (∼7.5 min per epoch) with mini-
batch of 10 to 16 hours (∼5 min per epoch) with mini-batch
of 100, on a Tesla K80 GPU. The curves show good gen-
eralization of the model on the validation set with only a
small gap (< 5%) between training and validation accura-
cies. Also included are the precision and recall curves for
the second case.
5
Figure 4. Loss and accuracy curves on training and validation sets from final training. Left shows the case with mini-batch of 10, learning
rate of 5× 10−5. Right shows the case with mini-batch of 100, learning rate of 5× 10−4 (linear scaling). Precision and recall curves are
included for the second case. Best accuracy was recorded at F1 ≈ 97% on train set and F1 ≈ 92% on validation set within 200 epochs.
6. Results
To gain insight into the learning process, we show a routed
net example from the validation set with two pins (see
Figure 5). The left image shows the actual routed layout
(ground truth), the center and right images show the pre-
dicted model outputs after 141 and 151 epochs of training
respectively. We first notice that the model grasps orthogo-
nality of adjacent metal layers, assigningM3 (green) to ver-
tical tracks and M4 (red) to horizontal tracks only. Second,
the model learns to connect different wire classes using vias
at intersections. Third, the model learns to assign a branch
to the dominant direction and legs to the non-dominant di-
rection, however since the pins are roughly evenly spaced
in either direction, the model attempts a vertical branch and
horizontal legs. Eventually (after 10 epochs) it learns a
more optimal way by using a horizontal branch and vertical
legs to route, thus matching our ground truth expectation.
Figure 5. Learning example from the validation set. Left image
shows actual layout (ground truth), center and right images show
model predicted layouts after 141 and 151 epochs respectively.
Figure 6 presents some randomly sampled examples
from the training and validation sets, routed by our model
after 191 epochs of training. As seen from the actual
(ground truth) and predicted layouts, the network does well
in (i) learning the identity mapping for pins, (ii) assign-
ing vias to connect metals in adjacent layers, (iii) identi-
fying the correct wire class combination from the overall
pin configuration, and (iv) choosing the optimal track po-
sitions for branch and legs. It uses lower metals to route
pins that are closer, and higher metals for widespread pins.
In some cases, however, the routing is not perfect and the
model misses connections or adds routes at undesired loca-
tions. We typically notice a higher error rate when layouts
have more pins. This could likely be improved if we in-
crease the ratio of training samples in the dataset containing
more pins. While there is room for further improvement,
the FCN model shows good overall ability to learn the lay-
out design rules intrinsic to the dataset used for training.
Future work. Due to the complexity involved in routing
real IC layouts, there are several requirements that need to
be addressed. A few worth mentioning are (1) routing mul-
tiple nets in the presence of previously occupied tracks, (2)
using a finer grid of valid metal tracks customized per wire
class, (3) training on more complex route configurations
such as trunk-branch-leg, (4) adding driver / receiver aware-
ness to pins, (5) adding dedicated pin layers for each wire
class, (6) supporting routing of a bigger layout in segments
using a sliding context window, (7) integrating timing mod-
els for timing-driven routing, (8) training on industry stan-
dard layouts after converting to our layer-encoded binary
standard. Some of these requirements may be implemented
by direct scaling of the model and/or training with dense
6
Figure 6. Examples from training (top row) and validation (bottom row) datasets showing the actual (ground truth) layouts on the left and
the corresponding predicted (model routed) layouts on the right, after 191 epochs of training. The FCN model demonstrates good ability
to learn layout design rules intrinsic to the dataset. Wire class color coding: M3=green, M4=red, M5=grey, M6=blue.
datasets containing more design rules of interest. However,
it is plausible that other requirements may warrant more so-
phisticated architectures, possibly combining several neural
models to construct a complex neural system to route ICs.
7. Conclusion
Inspired by the challenges facing circuit layout routing and
optimization, and the recent advances in the field of con-
volutional neural networks, we introduced a unique ap-
proach to routing ICs using deep, fully convolutional net-
works. To explore learnability of layout design rules by
our FCN model, we created our own dataset based on pre-
defined layout constraints. We then implemented an encod-
ing scheme to efficiently represent inputs to the model. The
proposed FCN architecture efficiently learns to route a sin-
gle net under set design constraints. Our model achieves
good performance with training accuracy of F1 ≈ 97% and
validation accuracy of F1 ≈ 92% within 200 epochs.
8. Acknowledgements
We thank Nishith Khandwala and Wenbin Huang for help-
ful comments and discussion. We gratefully acknowledge
CS231N staff (Stanford) and Google Cloud for the educa-
tional GPU credits used towards this work.
7
References
[1] C. J. Alpert, T. C. Hu, J. H. Huang, and A. B. Kahng. A
direct combination of the prim and dijkstra constructions for
improved performance-driven global routing. In 1993 IEEE
International Symposium on Circuits and Systems, pages
1869–1872 vol.3, May 1993.
[2] M. Burstein and R. Pelavin. Hierarchical channel router.
In 20th Design Automation Conference Proceedings, pages
591–597, June 1983.
[3] K. Fukushima. Neocognitron: A self-organizing neu-
ral network model for a mechanism of pattern recognition
unaffected by shift in position. Biological Cybernetics,
36(4):193–202, 1980.
[4] I. J. Goodfellow, J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative adversarial nets. In Proceedings of the 27th Inter-
national Conference on Neural Information Processing Sys-
tems, NIPS’14, pages 2672–2680, Cambridge, MA, USA,
2014. MIT Press.
[5] P. Goyal, P. Dollár, R. Girshick, P. Noordhuis,
L. Wesolowski, A. Kyrola, A. Tulloch, Y. Jia, and K. He.
Accurate, large minibatch SGD: Training imagenet in 1
hour. arXiv preprint arXiv:1706.02677, 2017.
[6] A. D. P. Green and P. D. Noakes. Neural networks-their use
for the routing of integrated circuits. In Proceedings of the
32nd Midwest Symposium on Circuits and Systems,, pages
501–504 vol.1, Aug 1989.
[7] S. Ioffe and C. Szegedy. Batch normalization: Accelerating
deep network training by reducing internal covariate shift. In
ICML, 2015.
[8] A. Ivanov, P. Hallschmid, and Z. Zhou. Local congestion
and blockage aware routability analysis using adaptive flex-
ible modeling. In 2016 IEEE International Conference on
Electronics, Circuits and Systems (ICECS), pages 438–439,
Dec 2016.
[9] D. P. Kingma and J. Ba. Adam: A method for stochastic
optimization. In Proceedings of the 3rd International Con-
ference on Learning Representations (ICLR), 2014.
[10] M. R. Kramer and J. van Leeuwen. Wire-routing is
NP-complete. http://www.cs.uu.nl/research/
techreps/repo/CS-1982/1982-04.pdf, 1982.
[11] A. Krizhevsky, I. Sutskever, and G. E. Hinton. Imagenet
classification with deep convolutional neural networks. In
F. Pereira, C. J. C. Burges, L. Bottou, and K. Q. Weinberger,
editors, Advances in Neural Information Processing Systems
25, pages 1097–1105. Curran Associates, Inc., 2012.
[12] Y. Lecun, L. D. Jackel, H. A. Eduard, N. Bottou, C. Cartes,
J. S. Denker, H. Drucker, E. Sackinger, P. Simard, and
V. Vapnik. Learning algorithms for classification: A com-
parison on handwritten digit recognition. In Neural Net-
works: The Statistical Mechanics Perspective, pages 261–
276. World Scientific, 1995.
[13] J. Lillis, C.-K. Cheng, and T.-T. Y. Lin. Simultaneous routing
and buffer insertion for high performance interconnect. In
Proceedings of the Sixth Great Lakes Symposium on VLSI,
pages 148–153, Mar 1996.
[14] A. L. Maas, A. Y. Hannun, and A. Y. Ng. Rectifier nonlin-
earities improve neural network acoustic models. In Proc.
ICML, volume 30, 2013.
[15] R. Pal. Multi-layer Channel Routing Complexity and Algo-
rithms. Complexity and Algorithms. Alpha Science, 2000.
[16] Facebook AI Research (FAIR). Pytorch. https://
github.com/pytorch, 2016.
[17] R. L. Rivest and C. M. Fiduccia. A ”greedy” channel
router. In 19th Design Automation Conference, pages 418–
424, June 1982.
[18] D. Roy, P. Ghosal, and N. Das. A thermal and congestion
driven global router for 3d integrated circuits. In Students’
Technology Symposium (TechSym), 2014 IEEE, pages 303–
308, Feb 2014.
[19] T. Samanta, P. Ghosal, H. Rahaman, and P. Dasgupta. A
heuristic method for constructing hexagonal steiner minimal
trees for routing in vlsi. In 2006 IEEE International Sympo-
sium on Circuits and Systems, pages 4 pp.–, May 2006.
[20] N. Sherwani, S. Bhingarde, and A. Panyam. Routing in the
Third Dimension: From VLSI Chips to MCMs. IEEE Press
Series on Microelectronic Systems. Wiley, 1995.
[21] J. Song, C. Jang, K. Cho, S. Go, and J. Chong. Timing driven
global router with a pin partition method for 3d stacked in-
tegrated circuits. In The 18th IEEE International Sympo-
sium on Consumer Electronics (ISCE 2014), pages 1–2, June
2014.
[22] T. G. Szymanski. Dogleg channel routing is np-complete.
IEEE Transactions on Computer-Aided Design of Integrated
Circuits and Systems, 4(1):31–41, January 1985.
[23] X. Tang, R. Tian, H. Xiang, and D. F. Wong. A new al-
gorithm for routing tree construction with buffer insertion
and wire sizing under obstacle constraints. In IEEE/ACM
International Conference on Computer Aided Design. IC-
CAD 2001. IEEE/ACM Digest of Technical Papers (Cat.
No.01CH37281), pages 49–56, Nov 2001.
[24] The HDF Group. Hierarchical data format version 5. http:
//www.hdfgroup.org/HDF5, 2000-2010.
[25] J. S. Wang and R. C. T. Lee. An efficient channel routing
algorithm to yield an optimal solution. IEEE Transactions
on Computers, 39(7):957–962, Jul 1990.
[26] T. Yoshimura. An efficient channel router. In 21st Design Au-
tomation Conference Proceedings, pages 38–44, June 1984.
[27] T. Yoshimura and E. S. Kuh. Efficient algorithms for channel
routing. IEEE Transactions on Computer-Aided Design of
Integrated Circuits and Systems, 1(1):25–35, January 1982.
[28] B. Zajc, D. Tomasevic, and A. Zemva. Automatic rout-
ing of interconnections between cells in integrated circuits.
In [1991 Proceedings] 6th Mediterranean Electrotechnical
Conference, pages 238–241 vol.1, May 1991.
8

