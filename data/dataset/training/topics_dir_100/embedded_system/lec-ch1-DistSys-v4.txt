1
1
CIS 505: Software Systems
Introduction to Distributed Systems
Insup Lee
Department of Computer and Information Science
University of Pennsylvania
CIS 505, Spring 2007
CIS 505, Spring 2007 Distributed Systems 2
Distributed Systems
Why distributed systems?
o availability of powerful yet cheap microprocessors (PCs,
workstations, PDAs, embedded systems, etc.)
o continuing advances in communication technology
What is a distributed system?
o A distributed system is a collection of independent
computers that appear to the users of the system as a single
coherent system.
CIS 505, Spring 2007 Distributed Systems 3
Examples
The world wide web – information, resource
sharing
Clusters, Network of workstations
Distributed manufacturing system (e.g.,
automated assembly line)
Network of branch office computers -
Information system to handle automatic
processing of orders
Network of embedded systems
New Cell processor (PlayStation 3)
CIS 505, Spring 2007 Distributed Systems 4
Advantages and disadvantages
Advantages
o Economics
o Speed
o Inherent distribution
o Reliability
o Incremental growth
Disadvantages
o Software
o Network
o More components to fail
o Security
2
CIS 505, Spring 2007 Distributed Systems 5
Organization of a Distributed System
A distributed system organized as middleware.
Note that the middleware layer extends over multiple machines.
1.1
CIS 505, Spring 2007 Distributed Systems 6
Goals of Distributed Systems
Transparency
Openness
Reliability
Performance
Scalability
CIS 505, Spring 2007 Distributed Systems 7
Transparency
• How to achieve the single-system image, i.e.,
how to make a collection of computers
appear as a single computer.
• Hiding all the distribution from the users as
well as the application programs can be
achieved at two levels:
1) hide the distribution from users
2) at a lower level, make the system look
transparent to programs.
1) and 2) requires uniform interfaces such as access
to files, communication.
CIS 505, Spring 2007 Distributed Systems 8
Transparency in a Distributed System
Different forms of transparency in a distributed system.
Hide whether a (software) resource is in memory or on diskPersistence
Hide the failure and recovery of a resourceFailure
Hide that a resource may be shared by several competitive
users
Concurrency
Hide that a resource may be shared by several competitive
users
Replication
Hide that a resource may be moved to another location while
in use
Relocation
Hide that a resource may move to another locationMigration
Hide where a resource is locatedLocation
Hide differences in data representation and how a resource is
accessed
Access
DescriptionTransparency
3
CIS 505, Spring 2007 Distributed Systems 9
Openness
• Make it easier to build and change
• Monolithic Kernel: systems calls are trapped and
executed by the kernel. All system calls are served
by the kernel, e.g.,  UNIX.
• Microkernel: provides minimal services.
• IPC
• some memory management
• some low-level process management and scheduling
• low-level i/o (E.g., Mach can support multiple file systems,
multiple system interfaces.)
• Standard interface, separation of policy from
mechanism
CIS 505, Spring 2007 Distributed Systems 10
Reliability
• Distributed system should be more reliable
than single system.
– Availability: fraction of time the system is usable.
Redundancy improves it.
– Need to maintain consistency
– Need to be secure
– Fault tolerance: need to mask failures, recover from errors.
• Example: 3 machines with .95 probability of
being up
• (1-.05)**3 vs 1-.05**3 probability of being up
CIS 505, Spring 2007 Distributed Systems 11
Performance
• Without gain on this, why bother with distributed
systems.
• Performance loss due to communication delays:
– fine-grain parallelism: high degree of interaction
– coarse-grain parallelism
• Performance loss due to making the system
fault tolerant.
CIS 505, Spring 2007 Distributed Systems 12
Scalability
• Systems grow with time or become obsolete.
• Techniques that require resources linearly in terms of
the size of the system are not scalable.   (e.g.,
broadcast based query won't work for large
distributed systems.)
• Examples of bottlenecks (i.e., scalability limitations)
o Centralized components: a single mail server
o Centralized tables/data: a single URL address book
o Centralized algorithms: routing based on complete information
4
CIS 505, Spring 2007 Distributed Systems 13
Scalability Problems
Characteristics of decentralized algorithms:
No machine has complete information about
the system state.
Machines make decisions based only on
local information.
Failure of one machine does not ruin the
algorithm.
There is no implicit assumption that a global
clock exists.
CIS 505, Spring 2007 Distributed Systems 14
Scaling Techniques (1)
1.4
The difference between letting:
a) a server or
b) a client check forms as they are being filled
CIS 505, Spring 2007 Distributed Systems 15
Scaling Techniques (2)
1.5
An example of dividing the DNS name space into zones.
CIS 505, Spring 2007 Distributed Systems 16
Pitfalls when Developing Distributed Systems
False assumptions made by first time developer:
The network is reliable.
The network is secure.
The network is homogeneous.
The topology does not change.
Latency is zero.
Bandwidth is infinite.
Transport cost is zero.
There is one administrator.
5
CIS 505, Spring 2007 Distributed Systems 17
Hardware Concepts
1.6
Different basic organizations and memories in distributed
computer systems: multiprocessors vs. multicomputers
CIS 505, Spring 2007 Distributed Systems 18
Multiprocessors (1)
A bus-based multiprocessor
o Cache memory, hit rate, coherence, write-through
cache, snoopy cache
1.7
CIS 505, Spring 2007 Distributed Systems 19
Multiprocessors (2)
a) A crossbar switch
b) An omega switching network
1.8
CIS 505, Spring 2007 Distributed Systems 20
Homogeneous Multicomputer Systems
a) Grid
b) Hypercube
1-9
Tightly coupled vs. loosely coupled
6
CIS 505, Spring 2007 Distributed Systems 21
How slow is the network?
“ping www.cis.upenn.edu”
Round-trip times
o Upenn .5ms
o Princeton 5ms
o Rice 43ms
o Stanford  80ms
o Tsinghua, Beijing 280ms
CIS 505, Spring 2007 Distributed Systems 22
Communication Latency
Latency – “wire delay”
o Time to send and recv one byte of data
o Depends on “distance”
Bandwidth
o Bytes/second
o Depends on size of vehicle
Latency is the bottleneck
o It improves slower than bandwidth
Speed of light
Routers in the middle (traffic stops)
o Request-respond cycles dominate application
CIS 505, Spring 2007 Distributed Systems 23
The speed pyramid
Will the ratios change?
20,000,000WAN
2,000,000Disk
100,000LAN
200Memory
10L2
1register
CIS 505, Spring 2007 Distributed Systems 24
Continuum of Distributed Systems
? ?
small
fast
big
slow
LAN
Global
Internet
Parallel
Architectures
high latency
low bandwidth
autonomous nodes
unreliable network
fear and distrust
independent failures
decentralized administration
Networks
Issues:
naming and sharing
performance and scale
resource management
low latency
high bandwidth
secure, reliable interconnect
no independent failures
coordinated resources
Multiprocessors clusters
fast network
trusting hosts
coordinated
slow network
untrusting hosts
autonomy
[J. Chase]
7
CIS 505, Spring 2007 Distributed Systems 25
Types of Distributed Systems
Distributed Computing Systems
Distributed information systems
Distributed Pervasive/Embedded Systems
CIS 505, Spring 2007 Distributed Systems 26
Cluster Computing Systems
Figure 1-6. An example of a cluster computing system.
CIS 505, Spring 2007 Distributed Systems 27
Grid Computing Systems
Figure 1-7. A layered architecture for grid computing
systems.
CIS 505, Spring 2007 Distributed Systems 28
Transaction Processing Systems (1)
Figure 1-8. Example primitives for transactions.
8
CIS 505, Spring 2007 Distributed Systems 29
Transaction Processing Systems (2)
Characteristic properties of transactions:
Atomic: To the outside world, the
transaction happens indivisibly.
Consistent: The transaction does not
violate system invariants.
Isolated: Concurrent transactions do not
interfere with each other.
Durable: Once a transaction commits,
the changes are permanent.
CIS 505, Spring 2007 Distributed Systems 30
Transaction Processing Systems (3)
Figure 1-9. A nested transaction.
CIS 505, Spring 2007 Distributed Systems 31
Enterprise Application Integration
Figure 1-11. Middleware as a communication facilitator in
enterprise application integration.
CIS 505, Spring 2007 Distributed Systems 32
Distributed Pervasive Systems
Requirements for pervasive systems
Embrace contextual changes.
Encourage ad hoc composition.
Recognize sharing as the default.
9
CIS 505, Spring 2007 Distributed Systems 33
Embedded Home Environment
CIS 505, Spring 2007 Distributed Systems 34
Example: Home and Personal Appliances
Yr
~2025~2015
Volume /
Diversity
2005
Smart homes, home theaters,
games, smart cars, etc.
Intelligent devices, tools,
appliances and software
for assisted living
Home care
facilities
[Liu]
CIS 505, Spring 2007 Distributed Systems 35
Justifications
Rapid advances in component  technologies,
e.g.,
o Smart gadgets, wearable sensors and actuators,
robotic helpers, mobile devices
o Wireless, wideband interconnects
 Increasing critical needs due to
o Aging baby-boom generation
o Long life expectancy
o New safety, security, and privacy concerns
CIS 505, Spring 2007 Distributed Systems 36
Observations
Number of users: 10 – 1000 million
Types of sensors and actuators: 100’s
Number of suppliers: 10 – 100’s
Required reliability: <10,000 recalls/year
User tolerance to glitches: minimum
Product life cycles: 3 – 20 yrs
Tolerable upgrade effort: minimum
The environment  must be open and evolvable, & 
   capable of self diagnosis, healing, maintenance
10
CIS 505, Spring 2007 Distributed Systems 37
Desired Trends
~20152005 ~2025
Volume
&
Diversity
Quality
&
Usability
Unit cost
Maintenance
cost
CIS 505, Spring 2007 Distributed Systems 38
Electronic Health Care Systems (1)
Questions to be addressed for health care systems:
Where and how should monitored data be
stored?
How can we prevent loss of crucial data?
What infrastructure is needed to generate and
propagate alerts?
How can physicians provide online feedback?
How can extreme robustness of the monitoring
system be realized?
What are the security issues and how can the
proper policies be enforced?
CIS 505, Spring 2007 Distributed Systems 39
Electronic Health Care Systems (2)
Figure 1-12. Monitoring a person in a pervasive electronic
health care system, using (a) a local hub or
(b) a continuous wireless connection.
CIS 505, Spring 2007 Distributed Systems 40
Background: Sensor Networks
Types of sensors
o Seismic, low sampling rate magnetic, thermal, visual, infrared,
acoustic and radar
Conditions to monitor
o Temperature, humidity, (vehicular) movement, lightning
condition, pressure, soil makeup, noise levels
o Presence or absence of certain kinds of objects
o Mechanical stress levels on attached objects
o Current characteristics such as speed, direction, and size of an
object
11
CIS 505, Spring 2007 Distributed Systems 41
Technology Trends: Mote Evolution
CIS 505, Spring 2007 Distributed Systems 42
SN Characteristics
Environment
o connect to physical environment (large numbers, dense, real-time)
o Sensor nodes are prone to failures, non-deterministic
o wireless communication
o massively parallel interfaces (to users and applications)
o Limited resources: battery, bandwidth, memory, CPU (power
management critical)
Network
o Topology  changes  dynamically
o sporadic connectivity
o new resources entering/leaving
o large amounts of redundancy
o self-configure/re-configure
CIS 505, Spring 2007 Distributed Systems 43
SN applications
Infrastructure security, military applications
Environmental and Habitat monitoring
Health applications
Smart space/home applications
Other commercial applications
o Industrial Sensing
o Traffic Control, vehicle tracking and detection
o Interactive museums
CIS 505, Spring 2007 Distributed Systems 44
Smart Spaces
Smart School
Smart City
Smart Factory
Other Applications
•   Battlefields/Surveillance
•   Earthquake areas
•   Environmental Monitoring
•   Airport security
•   Emergency Response
•   Location Services
12
CIS 505, Spring 2007 Distributed Systems 45
Sensor Networks (1)
Questions concerning sensor networks:
How do we (dynamically) set up an
efficient tree in a sensor network?
How does aggregation of results take
place? Can it be controlled?
What happens when network links fail?
CIS 505, Spring 2007 Distributed Systems 46
Sensor Networks (2)
Figure 1-13. Organizing a sensor network database, while
storing and processing data (a) only at the operator’s site or …
CIS 505, Spring 2007 Distributed Systems 47
Sensor Networks (3)
Figure 1-13. Organizing a sensor network database, while
storing and processing data … or (b) only at the sensors.
CIS 505, Spring 2007 Distributed Systems 48
The Challenges of Distributed Systems
o Secure communication over public networks
ACI: who sent it, did anyone see it, did anyone change it
o Fault-tolerance
Building reliable systems from unreliable components
nodes fail independently; a distributed system can “partly fail”
[Lamport]: “A distributed system is one in which the failure of a
machine I’ve never heard of can prevent me from doing my work.”
o Replication, caching, naming
Placing data and computation for effective resource sharing, hiding
latency, and finding it again once you put it somewhere.
o Coordination and shared state
What should the system components do and when should they do
it?
Once they’ve all done it, can they all agree on what they did and
when?

