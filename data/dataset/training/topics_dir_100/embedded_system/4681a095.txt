Dissecting Android Malware: Characterization and Evolution
Yajin Zhou
Department of Computer Science
North Carolina State University
yajin zhou@ncsu.edu
Xuxian Jiang
Department of Computer Science
North Carolina State University
jiang@cs.ncsu.edu
Abstract—The popularity and adoption of smartphones has
greatly stimulated the spread of mobile malware, especially on
the popular platforms such as Android. In light of their rapid
growth, there is a pressing need to develop effective solutions.
However, our defense capability is largely constrained by the
limited understanding of these emerging mobile malware and
the lack of timely access to related samples.
In this paper, we focus on the Android platform and
aim to systematize or characterize existing Android malware.
Particularly, with more than one year effort, we have managed
to collect more than 1,200 malware samples that cover the
majority of existing Android malware families, ranging from
their debut in August 2010 to recent ones in October 2011.
In addition, we systematically characterize them from various
aspects, including their installation methods, activation mech-
anisms as well as the nature of carried malicious payloads.
The characterization and a subsequent evolution-based study
of representative families reveal that they are evolving rapidly
to circumvent the detection from existing mobile anti-virus
software. Based on the evaluation with four representative
mobile security software, our experiments show that the best
case detects 79.6% of them while the worst case detects only
20.2% in our dataset. These results clearly call for the need to
better develop next-generation anti-mobile-malware solutions.
Keywords-Android malware; smartphone security
I. INTRODUCTION
In recent years, there is an explosive growth in smartphone
sales and adoption. According to CNN [1], smartphone
shipments have tripled in the past three years (from 40
million to about 120 million). Unfortunately, the increasing
adoption of smartphones comes with the growing prevalence
of mobile malware. As the most popular mobile platform,
Google’s Android overtook others (e.g., Symbian) to become
the top mobile malware platform. It has been highlighted
[2] that “among all mobile malware, the share of Android-
based malware is higher than 46% and still growing rapidly.”
Another recent report also alerts that there is “400 percent
increase in Android-based malware since summer 2010” [3].
Given the rampant growth of Android malware, there is a
pressing need to effectively mitigate or defend against them.
However, without an insightful understanding of them, it is
hard to imagine that an effective mitigation solution can be
practically developed. To make matters worse, the research
community at large is still constrained by the lack of a
comprehensive mobile malware dataset to start with.
The goals and contributions of this paper are three-
fold. First, we fulfil the need by presenting the first large
collection of 1260 Android malware samples1 in 49 different
malware families, which covers the majority of existing
Android malware, ranging from their debut in August 2010
to recent ones in October 2011. The dataset is accumulated
from more than one year effort in collecting related malware
samples, including manual or automated crawling from
a variety of Android Markets. To better mitigate mobile
malware threats, we will release the entire dataset to the
research community at http://malgenomeproject.org/.2
Second, based on the collected malware samples, we
perform a timeline analysis of their discovery and thoroughly
characterize them based on their detailed behavior break-
down, including the installation, activation, and payloads.
The timeline analysis is instrumental to revealing major
outbreaks of certain Android malware in the wild while the
detailed breakdown and characterization of existing Android
malware is helpful to better understand them and shed light
on possible defenses.
Specifically, in our 1260 malware samples, we find that
1083 of them (or 86.0%) are repackaged versions of legiti-
mate applications with malicious payloads, which indicates
the policing need of detecting repackaged applications in the
current Android Markets. Also, we observe that more recent
Android malware families are adopting update attacks and
drive-by downloads to infect users, which are more stealthy
and difficult to detect. Further, when analyzing the carried
payloads, we notice a number of alarming statistics: (1)
Around one third (36.7%) of the collected malware samples
leverage root-level exploits to fully compromise the Android
security, posing the highest level of threats to users’ security
and privacy; (2) More than 90% turn the compromised
phones into a botnet controlled through network or short
messages. (3) Among the 49 malware families, 28 of them
(with 571 or 45.3% samples) have the built-in support of
sending out background short messages (to premium-rate
numbers) or making phone calls without user awareness. (4)
1In this study, we consider the samples with different SHA1 values are
distinct.
2To prevent our dataset from being misused, we may require verifying
user identity or request necessary justification before the dataset can be
downloaded. Please visit the project website for detailed information.
2012 IEEE Symposium on Security and Privacy
© 2012, Yajin Zhou. Under license to IEEE.
DOI 10.1109/SP.2012.16
95
Last but not least, 27 malware families (with 644 or 51.1%
samples) are harvesting user’s information, including user
accounts and short messages stored on the phones.
Third, we perform an evolution-based study of repre-
sentative Android malware, which shows that they are
rapidly evolving and existing anti-malware solutions are
seriously lagging behind. For example, it is not uncom-
mon for Android malware to have encrypted root ex-
ploits or obfuscated command and control (C&C) servers.
The adoption of various sophisticated techniques greatly
raises the bar for their detection. In fact, to evaluate the
effectiveness of existing mobile anti-virus software, we
tested our dataset with four representative ones, i.e., AVG
Antivirus Free, Lookout Security & Antivirus, Norton
Mobile Security Lite, and Trend Micro Mobile Security
Personal Edition, all downloaded from the official Android
Market (in the first week of November, 2011). Sadly, wile
the best case was able to detect 1, 003 (or 79.6%) samples
in our dataset, the worst case can only detect 254 (20.2%)
samples. Furthermore, our analysis shows that malware
authors are quickly learning from each other to create hybrid
threats. For example, one recent Android malware, i.e.,
AnserverBot [4] (reported in September 2011), is clearly
inspired from Plankton [5] (reported in June 2011) to have
the dynamic capability of fetching and executing payload at
runtime, posing significant challenges for the development
of next-generation anti-mobile-malware solutions.
The rest of this paper is organized as follows: Section II
presents a timeline analysis of existing Android malware.
Section III characterizes our samples and shows a detailed
breakdown of their infection behavior. After that, Section IV
presents an evolution study of representative Android mal-
ware and Section V shows the detection results with four
representative mobile anti-virus software. Section VI dis-
cusses possible ways for future improvement, followed by a
survey of related work in Section VII. Lastly, we summarize
our paper in Section VIII.
II. MALWARE TIMELINE
In Table I, we show the list of 49 Android malware
families in our dataset along with the time when each
particular malware family is discovered. We obtain the list
by carefully examining the related security announcements,
threat reports, and blog contents from existing mobile anti-
virus companies and active researchers [6]–[12] as exhaus-
tively as possible and diligently requesting malware samples
from them or actively crawling from existing official and al-
ternative Android Markets. As of this writing, our collection
is believed to reflect the state of the art of Android malware.
Specifically, if we take a look at the Android malware history
[13] from the very first Android malware FakePlayer in
August 2010 to recent ones in the end of October 2011, it
spans slightly more than one year with around 52 Android
malware families reported. Our dataset has 1260 samples
Table I
THE TIMELINE OF 49 ANDROID MALWARE IN OUR COLLECTION (O† :
OFFICAL ANDROID MARKET; A‡ : ALTERNATIVE ANDROID MARKETS)
Malware Samples
Markets Discovered
MonthO† A‡
FakePlayer 6
√
2010-08
GPSSMSSpy 6
√
2010-08
TapSnake 2
√
2010-08
SMSReplicator 1
√
2010-11
Geinimi 69
√
2010-12
ADRD 22
√
2011-02
Pjapps 58
√
2011-02
BgServ 9
√
2011-03
DroidDream 16
√ √
2011-03
Walkinwat 1
√
2011-03
zHash 11
√ √
2011-03
DroidDreamLight 46
√ √
2011-05
Endofday 1
√
2011-05
Zsone 12
√ √
2011-05
BaseBridge 122
√
2011-06
DroidKungFu1 34
√
2011-06
GGTracker 1
√
2011-06
jSMSHider 16
√
2011-06
Plankton 11
√
2011-06
YZHC 22
√ √
2011-06
Crusewin 2
√
2011-07
DroidKungFu2 30
√
2011-07
GamblerSMS 1
√
2011-07
GoldDream 47
√
2011-07
HippoSMS 4
√
2011-07
Lovetrap 1
√
2011-07
Nickyspy 2
√
2011-07
SndApps 10
√
2011-07
Zitmo 1
√ √
2011-07
CoinPirate 1
√
2011-08
DogWars 1
√
2011-08
DroidKungFu3 309
√
2011-08
GingerMaster 4
√
2011-08
NickyBot 1
√
2011-08
RogueSPPush 9
√
2011-08
AnserverBot 187
√
2011-09
Asroot 8
√ √
2011-09
DroidCoupon 1
√
2011-09
DroidDeluxe 1
√
2011-09
Gone60 9
√
2011-09
Spitmo 1
√
2011-09
BeanBot 8
√
2011-10
DroidKungFu4 96
√ √
2011-10
DroidKungFuSapp 3
√
2011-10
DroidKungFuUpdate 1
√ √
2011-10
FakeNetflix 1
√
2011-10
Jifake 1
√
2011-10
KMin 52
√
2011-10
RogueLemon 2
√
2011-10
Total 1260 14 44
in 49 different malware families, indicating a very decent
coverage of existing Android malware.
For each malware family, we also report in the table the
number of samples in our collection and differentiate the
sources where the malware was discovered, i.e., from either
the official or alternative Android Markets. To eliminate
possible false positive in our dataset, we run our collection
through existing mobile anti-virus software for confirmation
(Section V). If there is any miss from existing mobile anti-
virus security software, we will manually verify the sample
and confirm it is indeed a malware.
96
08 09 10 11 12 01 02 03 04 05 06 07 08 09 10
0
2
4
6
8
10
T
h
e
N
u
m
b
e
r
o
f
N
e
w
A
n
d
r
o
id
M
a
lw
a
r
e
F
a
m
il
ie
s
2010 2011
In Android Market
In Both Markets
In Alternative Market
(a) The Monthly Breakdown of New Android Malware Families
08 09 10 11 12 01 02 03 04 05 06 07 08 09 10 11
0
200
400
600
800
1000
1200
1400
T
h
e
C
u
m
u
la
ti
v
e
N
u
m
b
e
r
o
f
N
e
w
M
a
lw
a
re
S
a
m
p
le
s
13 13 13 14 18 23 33
66 66
115
209
403
527
678
1260
DroidKungFu
(including its variants)
AnserverBot
2010 2011
(b) The Cumulative Growth of New Malware Samples in Our Collection
Figure 1. The Android Malware Growth in 2010-2011
To better illustrate the malware growth, we show in Fig-
ures 1(a) and 1(b) the monthly breakdown of new Android
malware families and the cumulative monthly growth of
malware samples in our dataset. Consistent with others [2]
[3], starting summer 2011, the Android malware has indeed
increased dramatically, reflected in the rapid emergence of
new malware families as well as different variants of the
same type. In fact, the number of new Android malware
in July 2011 alone already exceeds the total number in
the whole year of 2010. Figure 1(b) further reveals two
major Android malware outbreaks, including DroidKungFu
(starting June, 2011) and AnserverBot (starting September,
2011). Among these 1260 samples in our collection, 37.5%
of them are related to DroidKungFu [14] and its variants;
14.8% are AnserverBot [4]. Both of them are still actively
evolving to evade the detection from existing anti-virus
software – a subject we will dive into in Section IV.
III. MALWARE CHARACTERIZATION
In this section, we present a systematic characterization
of existing Android malware, ranging from their installation,
activation, to the carried malicious payloads.
A. Malware Installation
By manually analyzing malware samples in our collection,
we categorize existing ways Android malware use to install
onto user phones and generalize them into three main so-
cial engineering-based techniques, i.e., repackaging, update
attack, and drive-by download. These techniques are not
mutually exclusive as different variants of the same type may
use different techniques to entice users for downloading.
1) Repackaging Repackaging is one of the most
common techniques malware authors use to piggyback mali-
cious payloads into popular applications (or simply apps). In
essence, malware authors may locate and download popular
apps, disassemble them, enclose malicious payloads, and
then re-assemble and submit the new apps to official and/or
alternative Android Markets. Users could be vulnerable by
being enticed to download and install these infected apps.
To quantify the use of repackaging technique among our
collection, we take the following approach: if a sample
shares the same package name with an app in the official
Android Market, we then download the official app (if
free) and manually compare the difference, which typically
contains the malicious payload added by malware authors. If
the original app is not available, we choose to disassemble
the malware sample and manually determine whether the
malicious payload is a natural part of the main functionality
of the host app. If not, it is considered as repackaged app.
In total, among the 1260 malware samples, 1083 of them
(or 86.0%) are repackaged. By further classifying them
based on each individual family (Table II), we find that
within the total 49 families in our collection, 25 of them
infect users by these repackaged apps while 25 of them
are standalone apps where most of them are designed to
be spyware in the first place. One malware family, i.e.,
GoldDream, utilizes both for its infection.
Among the 1083 repackaged apps, we find that malware
authors have chosen a variety of apps for repackaging,
including paid apps, popular game apps, powerful utility
apps (including security updates), as well as porn-related
apps. For instance, one AnserverBot malware sample (SHA1:
ef140ab1ad04bd9e52c8c5f2fb6440f3a9ebe8ea) repackaged
a paid app com.camelgames.mxmotor available on the offi-
cial Android Market. Another BgServ [15] malware sam-
ple (SHA1: bc2dedad0507a916604f86167a9fa306939e2080)
repackaged the security tool released by Google to remove
DroidDream from infected phones.
Also, possibly due to the attempt to hide piggy-
backed malicious payloads, malware authors tend to use
the class-file names which look legitimate and benign.
For example, AnserverBot malware uses a package name
com.sec.android.provider.drm for its payload, which
looks like a module that provides legitimate DRM func-
tionality. The first version of DroidKungFu chooses to use
com.google.ssearch to disguise as the Google search mod-
ule and its follow-up versions use com.google.update to
pretend to be an official Google update.
It is interesting to note that one malware family –
jSMSHider – uses a publicly available private key (serial
number: b3998086d056cffa) that is distributed in the An-
droid Open Source Project (AOSP). The current Android
security model allows the apps signed with the same plat-
form key of the phone firmware to request the permissions
97
Table II
AN OVERVIEW OF EXISTING ANDROID MALWARE (PART I: INSTALLATION AND ACTIVATION)
Installation Activation
Repackaging Update
Drive-by
Download
Standalone BOOT SMS NET CALL USB PKG BATT SYS MAIN
ADRD
√ √ √ √
AnserverBot
√ √ √ √ √ √ √ √
Asroot
√
BaseBridge
√ √ √ √ √ √ √
BeanBot
√ √ √
BgServ
√ √ √ √
CoinPirate
√ √ √
Crusewin
√ √ √
DogWars
√
DroidCoupon
√ √ √ √ √
DroidDeluxe
√
DroidDream
√ √
DroidDreamLight
√ √ √
DroidKungFu1
√ √ √ √
DroidKungFu2
√ √ √ √
DroidKungFu3
√ √ √ √
DroidKungFu4
√ √ √ √
DroidKungFuSapp
√ √ √ √
DroidKungFuUpdate
√ √
Endofday
√ √ √
FakeNetflix
√
FakePlayer
√
GamblerSMS
√ √
Geinimi
√ √ √
GGTracker
√ √ √ √ √
GingerMaster
√ √
GoldDream
√ √ √ √ √
Gone60
√
GPSSMSSpy
√ √
HippoSMS
√ √ √ √
Jifake
√ √
jSMSHider
√ √ √
KMin
√ √
Lovetrap
√ √ √
NickyBot
√ √ √
Nickyspy
√ √
Pjapps
√ √ √ √
Plankton
√ √
RogueLemon
√ √
RogueSPPush
√ √
SMSReplicator
√ √
SndApps
√ √
Spitmo
√ √ √ √
TapSnake
√ √
Walkinwat
√
YZHC
√ √
zHash
√ √
Zitmo
√ √ √
Zsone
√ √ √
number of families 25 4 4 25 29 21 4 6 1 2 8 8 5
number of samples 1083 85 4 177 1050 398 288 112 187 17 725 782 56
which are otherwise not available to normal third-party apps.
One such permission includes the installation of additional
apps without user intervention. Unfortunately, a few (ear-
lier) popular custom firmware images were signed by the
default key distributed in AOSP. As a result, the jSMSHider-
infected apps may obtain privileged permissions to perform
dangerous operations without user’s awareness.
2) Update Attack The first technique typically piggy-
backs the entire malicious payloads into host apps, which
could potentially expose their presence. The second tech-
nique makes it difficult for detection. Specifically, it may still
repackage popular apps. But instead of enclosing the payload
as a whole, it only includes an update component that
will fetch or download the malicious payloads at runtime.
As a result, a static scanning of host apps may fail to
capture the malicious payloads. In our dataset, there are four
malware families, i.e., BaseBridge, DroidKungFuUpdate,
AnserverBot, and Plankton, that adopt this attack (Table II).
The BaseBridge malware has a number of variants. While
some embed root exploits that allow for silent installation
of additional apps without user intervention, we here focus
on other variants that use the update attacks without root
exploits. Specifically, when a BaseBridge-infected app runs,
it will check whether an update dialogue needs to be
displayed. If yes, by essentially saying that a new version
is available, the user will be offered to install the updated
version (Figure 2(a)). (The new version is actually stored in
the host app as a resource or asset file.) If the user accepts,
an “updated” version with the malicious payload will then
98
(a) The Update Dialogue (b) Installation of A New Version
Figure 2. An Update Attack from BaseBridge
be installed (Figure 2(b)). Because the malicious payload is
in the “updated” app, not the original app itself, it is more
stealthy than the first technique that directly includes the
entire malicious payload in the first place.
The DroidKungFuUpdate malware is similar to
BaseBridge. But instead of carrying or enclosing the
“updated” version inside the original app, it chooses to
remotely download a new version from network. Moreover,
it takes a stealthy route by notifying the users through
a third-party library [16] that provides the (legitimate)
notification functionality. (Note the functionality is similar
to the automatic notification from the Google’s Cloud to
Device Messaging framework.) In Figure 3, we show the
captured network traffic initiated from the original host app
to update itself. Once downloaded, the “updated” version
turns out to be the DroidKungFu3 malware. As pointed out
in Table I, the DroidKungFuUpdate malware was available
on both official and alternative Android Markets.
The previous two update attacks require user approval to
download and install new versions. The next two malware,
i.e., AnserverBot and Plankton, advance the update attack
by stealthily upgrading certain components in the host apps
not the entire app. As a result, it does not require user
approval. In particular, Plankton directly fetches and runs
a jar file maintained in a remote server while AnserverBot
retrieves a public (encrypted) blog entry, which contains the
actual payloads for update! In Figure 4, we show the actual
network traffic to download AnserverBot payload from the
remote command and control (C&C) server. Apparently,
the stealthy nature of these update attacks poses significant
challenges for their detection (Table VII – Section V).
3) Drive-by Download The third technique applies
the traditional drive-by download attacks to mobile space.
Though they are not directly exploiting mobile browser
vulnerabilities, they are essentially enticing users to down-
load “interesting” or “feature-rich” apps. In our collection,
we have four such malware families, i.e., GGTracker [17],
GET /appfile/acc9772306c1a84abd02e9e7398a2cce/FinanceAccount.apk HTTP/1.1
Host: 219.234.85.214
Connection: Keep-Alive
User-Agent: Apache-HttpClient/UNAVAILABLE (java 1.4)
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Accept-Ranges: bytes
ETag: W/"377865-1315359197000"
Last-Modified: Wed, 07 Sep 2011 01:33:17 GMT
Content-Type: application/vnd.android.package-archive
Content-Length: 377865
Date: Tue, 25 Oct 2011 02:07:45 GMT
PK.........\$?................META-INF/MANIFEST.MF.Y[s...}.....
xNY.@.dW..PD.. r.%.U>...r......N.O’UI.C...,....W.......w./ ....
..../...K....OoP..#../..........".-,..~.S..._.|......o..1..k...
..........]<.Y..,-...,l7zh......%....g..7r......^.BA41.L.......
Figure 3. An Update Attack from DroidKungFuUpdate
 
 GET /s/blog_8440ab780100t0nf.html HTTP/1.1
 User-Agent: Dalvik/1.2.0 (Linux; U; Android 2.2.1; 
         generic Build/MASTER)
 Host: blog.sina.com.cn
 Connection: Keep-Alive
 HTTP/1.1 200 OK
 Server: nginx/0.7.62
 Date: Wed, 21 Sep 2011 01:44:16 GMT
 ...
 v_____:yjEJTTlSvSSVSGRp9NASSSSS<wbr>SSSSSSSSSSSkSSSS7WB5
 rthy<wbr>OV3JeJ4q96sSrc5Os7g6Wsz8<wbr>hJn99P6O6UaRgkSZsu
 ...
Figure 4. An Update Attack from AnserverBot
Jifake [18], Spitmo [19] and ZitMo [20]. The last two are
designed to steal user’s sensitive banking information.
The GGTracker malware starts from its in-app advertise-
ments. In particular, when a user clicks a special advertise-
ment link, it will redirect the user to a malicious website,
which claims to be analyzing the battery usage of user’s
phone and will redirect the user to one fake Android Market
to download an app claimed to improve battery efficiency.
Unfortunately, the downloaded app is not one that focuses
on improving the efficiency of battery, but a malware that
will subscribe to a premium-rate service without user’s
knowledge.
Similarly, the Jifake malware is downloaded when users
are redirected to the malicious website. However, it is not
using in-app advertisements to attract and redirect users.
Instead, it uses a malicious QR code [21], which when
scanned will redirect the user to another URL containing
the Jifake malware. This malware itself is the repackaged
mobile ICQ client, which sends several SMS messages to
a premium-rate number. While QR code-based malware
propagation has been warned earlier [22], this is the first
time that this attack actually occurred in the wild.
The last two Spitmo and ZitMo are ported versions of
nefarious PC malware, i.e., SpyEye and Zeus. They work in
a similar manner: when a user is doing online banking with
a comprised PC, the user will be redirected to download a
particular smartphone app, which is claimed to better protect
online banking activities. However, the downloaded app is
actually a malware, which can collect and send mTANs
or SMS messages to a remote server. These two malware
families rely on the comprised desktop browsers to launch
the attack. Though it may seem hard to infect real users,
the fact that they can steal sensitive bank information raises
serious alerts to users.
4) Others We have so far presented three main social
engineering-based techniques that have been used in existing
99
Table III
THE (ABBREVIATED) ANDROID EVENTS/ACTIONS OF INTEREST TO EXISTING MALWARE
Abbreviation Events Abbreviation Events Abbreviation Events
BOOT
(Boot Completed) BOOT COMPLETED
SMS
(SMS/MMS)
SMS RECEIVED
WAP PUSH RECEIVED
NET
(Network)
CONNECTIVITY CHANGE
PICK WIFI WORK
CALL
(Phone Events)
PHONE STATE
NEW OUTGOING CALL
USB
(USB Storage)
UMS CONNECTED
UMS DISCONNECTED
MAIN
(Main Activity)
ACTION MAIN
PKG
(Package)
PACKAGE ADDED
PACKAGE REMOVED
PACKAGE CHANGED
PACKAGE REPLACED
PACKAGE RESTARTED
PACKAGE INSTALL
BATT
(Power/Battery)
ACTION POWER CONNECTED
ACTION POWER DISCONNECTED
BATTERY LOW
BATTERY OKAY
BATTERY CHANGED ACTION
SYS
(System Events)
USER PRESENT
INPUT METHOD CHANGED
SIG STR
SIM FULL
Android malware. Next, we examine the rest samples that
do not fall in the above three categories. In particular,
our dataset has 1083 repackaged apps, which leaves 177
standalone apps. We therefore look into those standalone
apps and organize them into the following four groups.
The first group is considered spyware as claimed by
themselves – they intend to be installed to victim’s phones on
purpose. That probably explains why attackers have no moti-
vations or the need to lure victim for installation. GPSSMSSpy
is an example that listens to SMS-based commands to record
and upload the victim’s current location.
The second group includes those fake apps that masquer-
ade as the legitimate apps but stealthily perform malicious
actions, such as stealing users’ credentials or sending back-
ground SMS messages. FakeNetflix is an example that
steals a user’s Netflix account and password. Note that
it is not a repackaged version of Netflix app but instead
disguises to be the Netflix app with the same user interface.
FakePlayer is another example that masquerades as a movie
player but does not provide the advertised functionality at
all. All it does is to send SMS messages to premium-rate
numbers without user awareness.
The third group contains apps that also intentionally
include malicious functionality (e.g., sending unauthorized
SMS messages or subscribing to some value-added service
automatically). But the difference from the second group
is that they are not fake ones. Instead, they can provide
the functionality they claimed. But unknown to users, they
also include certain malicious functionality. For example,
one RogueSPPush sample is an astrology app. But it will
automatically subscribe to premium-rate services by inten-
tionally hiding confirmation SMS messages.
The last group includes those apps that rely on the root
privilege to function well. However, without asking the user
to grant the root privilege to these apps, they leverage
known root exploits to escape from the built-in security
sandbox. Though these apps may not clearly demonstrate
malicious intents, the fact of using root exploits without
user permission seems cross the line. Examples in this group
include Asroot and DroidDeluxe.
B. Activation
Next, we examine the system-wide Android events of
interest to existing Android malware. By registering for
the related system-wide events, an Android malware can
rely on the built-in support of automated event notification
and callbacks on Android to flexibly trigger or launch its
payloads. For simplicity, we abbreviate some frequently-
used Android events in Table III. For each malware family
in our dataset, we also report related events in Table II.
Among all available system events, BOOT_COMPLETED is
the most interested one to existing Android malware. This
is not surprising as this particular event will be triggered
when the system finishes its booting process – a perfect
timing for malware to kick off its background services.
In our dataset, 29 (with 83.3% of the samples) mal-
ware families listen to this event. For instance, Geinimi
(SHA1: 179e1c69ceaf2a98fdca1817a3f3f1fa28236b13) lis-
tens to this event to bootstrap the background service –
com.geinimi.AdService.
The SMS_RECEIVED comes second with 21 malware fami-
lies interested in it. This is also reasonable as many malware
will be keen in intercepting or responding incoming SMS
messages. As an example, zSone listens to this SMS_RECEIVED
event and intercepts or removes all SMS message from
particular originating numbers such as “10086” and “10010.”
During our analysis, we also find that certain malware
registers for a variety of events. For example, AnserverBot
registers for callbacks from 10 different events while
BaseBridge is interested in 9 different events. The regis-
tration of a large number of events is expected to allow the
malware to reliably or quickly launch the carried payloads.
In addition, we also observe some malware samples
directly hijack the entry activity of the host apps,
which will be triggered when the user clicks the app
icon on the home screen or an intent with action
ACTION_MAIN is received by the app. The hijacking of
the entry activity allows the malware to immediately
bootstrap its service before starting the host app’s
primary activity. For example, DroidDream (SHA1:
fdf6509b4911485b3f4783a72fde5c27aa9548c7) replaces the
original entry activity with its own com.android.root.main
so that it can gain control even before the original
activity com.codingcaveman.SoloTrial.SplashActivity
is launched. Some malware may also hijack
certain UI interaction events (e.g., button clicking).
An example is the zSone malware (SHA1:
00d6e661f90663eeffc10f64441b17079ea6f819) that invokes
its own SMS sending code inside the onClick() function
of the host app.
100
Table IV
THE LIST OF PLATFORM-LEVEL ROOT EXPLOITS AND THEIR USES IN
EXISTING ANDROID MALWARE
Vulnerable
Program
Root
Exploit
Release
Date
Malware with the Exploit
Linux kernel Asroot [23] 2009/08/16 Asroot
init
(<= 2.2) Exploid [24] 2010/07/15
DroidDream, zHash
DroidKungFu[1235]
adbd (<= 2.2.1)
zygote(<= 2.2.1)
RATC [25]
Zimperlich [26]
2010/08/21
2011/02/24
DroidDream, BaseBridge
DroidKungFu[1235]
DroidDeluxe
DroidCoupon
ashmem
(<= 2.2.1)
KillingInThe
NameOf [27] 2011/01/06
-
vold
(<= 2.3.3)
GingerBreak [28] 2011/04/21 GingerMaster
libsysutils
(<= 2.3.6)
zergRush [29] 2011/10/10 -
C. Malicious Payloads
As existing Android malware can be largely character-
ized by their carried payloads, we also survey our dataset
and partition the payload functionalities into four different
categories: privilege escalation, remote control, financial
charges, and personal information stealing.
1) Privilege Escalation The Android platform is a
complicated system that consists of not only the Linux
kernel, but also the entire Android framework with more
than 90 open-source libraries included, such as WebKit,
SQLite, and OpenSSL. The complexity naturally introduces
software vulnerabilities that can be potentially exploited
for privilege escalation. In Table IV, we show the list of
known Android platform-level vulnerabilities that can be
exploited for privilege exploitations. Inside the table, we also
show the list of Android malware that actively exploit these
vulnerabilities to facilitate the execution of their payloads.
Overall, there are a small number of platform-level vulner-
abilities that are being actively exploited in the wild. The top
three exploits are exploid, RATC (or RageAgainstTheCage),
and Zimperlich. We point out that if the RATC exploit is
launched within a running app, it is effectively exploiting the
bug in the zygote daemon, not the intended adbd daemon,
thus behavoring as the Zimperlich exploit. Considering the
similar nature of these two vulnerabilities, we use RATC to
represent both of them.
From our analysis, one alarming result is that among 1260
samples in our dataset, 463 of them (36.7%) embed at least
one root exploit (Table V). In terms of the popularity of each
individual exploit, there are 389, 440, 4, and 8 samples that
contain exploid, RATC, GingerBreak, and asroot, respec-
tively. Also, it is not uncommon for a malware to have two
or more root exploits to maximize its chances for successful
exploitations on multiple platform versions. (In our dataset,
there are 378 samples with more than one root exploit.)
A further investigation on how these exploits are actually
used shows that many earlier malware simply copy verbatim
the publicly available root exploits without any modification,
even without removing the original debug output strings
or changing the file names of associated root exploits. For
example, DroidDream contains the exploid file name exactly
the same as the publicly available one. However, things have
been changed recently. For example, DroidKungFu does not
directly embed these root exploits. Instead it first encrypts
these root exploits and then stores them as a resource or asset
file. At runtime, it dynamically uncovers these encrypted
root exploits and then executes them properly, which makes
their detection very challenging. In fact, when the first
version of DroidKungFu was discovered, it has been reported
that no single existing mobile anti-virus software at that time
was able to detect it, which demonstrated the “effectiveness”
of this approach. Moreover, other recent malware such as
DroidCoupon and GingerMaster apparently obfuscate the file
names of the associated root exploits (e.g., by pretending
as picture files with png suffix). We believe these changes
reflect the evolving nature of malware development and the
ongoing arms race for malware defense (Section IV).
2) Remote Control During our analysis to examine the
remote control functionality among the malware payloads,
we are surprised to note that 1, 172 samples (93.0%) turn
the infected phones into bots for remote control. Specifically,
there are 1, 171 samples that use the HTTP-based web traffic
to receive bot commands from their C&C servers.
We also observe that some malware families attempt
to be stealthy by encrypting the URLs of remote C&C
servers as well as their communication with C&C servers.
For example, Pjapps uses its own encoding scheme to
encrypt the C&C server addresses. One of its samples
(SH1: 663e8eb52c7b4a14e2873b1551748587018661b3)
encodes its C&C server mobilemeego91.com into
2maodb3ialke8mdeme3gkos9g1icaofm. DroidKungFu3
employs the standard AES encryption scheme and uses the
key Fuck_sExy-aLl!Pw to hide its C&C servers. Geinimi
similarly applies DES encryption scheme (with the key
0x0102030405060708) to encrypt its communication to the
remote C&C server.
During our study, we also find that most C&C servers
are registered in domains controlled by attackers themselves.
However, we also identify cases where the C&C servers are
hosted in public clouds. For instance, the Plankton spyware
dynamically fetches and runs its payload from a server
hosted on the Amazon cloud. Most recently, attackers are
even turning to public blog servers as their C&C servers.
AnserverBot is one example that uses two popular public
blog services, i.e., Sina and Baidu, as its C&C servers to re-
trieve the latest payloads and new C&C URLs (Section IV).
3) Financial Charge Beside privilege escalation and
remote control, we also look into the motivations behind
malware infection. In particular, we study whether malware
will intentionally cause financial charges to infected users.
One profitable way for attackers is to surreptitiously
subscribe to (attacker-controlled) premium-rate services,
such as by sending SMS messages. On Android, there is
101
Table V
AN OVERVIEW OF EXISTING ANDROID MALWARE (PART II: MALICIOUS PAYLOADS)
Privilege Escalation Remote Control Financial Charges Personal Information Stealing
Exploid
RATC/
Zimperlich
Ginger
Break Asroot Encrypted NET SMS
Phone
Call SMS
Block
SMS SMS
Phone
Number
User
Account
ADRD
√
AnserverBot
√ √ †
Asroot
√
BaseBridge
√ √ √ √ † √
BeanBot
√ √ √ † √ √
BgServ
√ √ † √ √
CoinPirate
√ √ † √ √
Crusewin
√ √ √ √
DogWars
√
DroidCoupon
√ √
DroidDeluxe
√
DroidDream
√ √ √
DroidDreamLight
√ √
DroidKungFu1
√ √ √ √ √
DroidKungFu2
√ √ √ √ √
DroidKungFu3
√ √ √ √ √
DroidKungFu4
√
DroidKungFu5
√ √ √ √ √
DroidKungFuUpdate
Endofday
√ √ √
FakeNetflix
√
FakePlayer
√ ‡
GamblerSMS
√
Geinimi
√ √ √ † √ √ √
GGTracker
√ ‡ √ √ √
GingerMaster
√ √ √
GoldDream
√ √ √ † √ √
Gone60
√
GPSSMSSpy
√
HippoSMS
√ ‡ √
Jifake
√ ‡
jSMSHider
√ √ † √ √
KMin
√ √ † √
Lovetrap
√ † √
NickyBot
√ √ √
Nickyspy
√ √ √
Pjapps
√ √ † √ √
Plankton
√
RogueLemon
√ √ † √ √
RogueSPPush
√ ‡ √
SMSReplicator
√ √
SndApps
√
Spitmo
√ √ † √ √ √
TapSnake
Walkinwat
√
YZHC
√ √ ‡ √ √
zHash
√
Zitmo
√
Zsone
√ ‡ √
number of families 6 8 1 1 4 27 1 4 28 17 13 15 3
number of samples 389 440 4 8 363 1171 1 246 571 315 138 563 43
a permission-guarded function sendTextMessage that
allows for sending an SMS message in the background
without user’s awareness. We are able to confirm this type of
attacks targeting users in Russia, United States, and China.
The very first Android malware FakePlayer sends SMS
message “798657” to multiple premium-rate numbers in
Russia. GGTracker automatically signs up the infected user
to premium services in US without user’s knowledge. zSone
sends SMS messages to premium-rate numbers in China
without user’s consent. In total, there are 55 samples (4.4%)
falling in 7 different families (tagged with ‡ in Table V) that
send SMS messages to the premium-rate numbers hardcoded
in the infected apps.
Moreover, some malware choose not to hard-code
premium-rate numbers. Instead, they leverage the flexible
remote control to push down the numbers at runtime. In our
dataset, there are 13 such malware families (tagged with †
in Table V). Apparently, these malware families are more
stealthy than earlier ones because the destination number
will not be known by simply analyzing the infected apps.
In our analysis, we also observe that by automatically
subscribing to premium-rate services, these malware families
need to reply to certain SMS messages. This may due to the
second-confirmation policy required in some countries such
102
INTERNET
READ_PHONE_STATE
ACCESS_NETWORK_STATE
WRITE_EXTERNAL_STORAGE
ACCESS_WIFI_STATE
READ_SMS
RECEIVE_BOOT_COMPLETED
WRITE_SMS
SEND_SMS
RECEIVE_SMS
VIBRATE
ACCESS_COARSE_LOCATION
READ_CONTACTS
ACCESS_FINE_LOCATION
WAKE_LOCK
CALL_PHONE
CHANGE_WIFI_STATE
WRITE_CONTACTS
WRITE_APN_SETTINGS
RESTART_PACKAGES
0 200 400 600 800 1000 1200
1232
1179
1023
847
804
790
688
658
553
499
483
480
457
432
425
424
398
374
349
333
(a) Top 20 Permissions Requested By 1260 Malware Samples
INTERNET
ACCESS_NETWORK_STATE
WRITE_EXTERNAL_STORAGE
READ_PHONE_STATE
VIBRATE
ACCESS_FINE_LOCATION
ACCESS_COARSE_LOCATION
WAKE_LOCK
RECEIVE_BOOT_COMPLETED
ACCESS_WIFI_STATE
CALL_PHONE
CAMERA
READ_CONTACTS
GET_TASKS
GET_ACCOUNTS
SET_WALLPAPER
SEND_SMS
WRITE_SETTINGS
CHANGE_WIFI_STATE
RESTART_PACKAGES
0 200 400 600 800 1000 1200
1122
913
488
433
287
285
263
218
137
134
114
73
71
60
54
49
43
39
34
33
(b) Top 20 Permissions Requested by 1260 Top Free (Benign) Apps on
the Offical Android Market
Figure 5. The Comparison of Top 20 Requested Permissions by Malicious and Benign Apps
as China. Specifically, to sign up a premium-rate service, the
user must reply to a confirming SMS message sent from the
service provider to finalize or activate the service subscrip-
tion. To avoid users from being notified, they will take care
of replying to these confirming messages by themselves. As
an example, RogueSPPush will automatically reply “Y” to
such incoming messages in the background; GGTracker will
reply “YES” to one premium number, 99735, to active the
subscribed service. Similarly, to prevent users from knowing
subsequent billing-related messages, they choose to filter
these SMS messages as well. This behavior is present in
a number of malware, including zSone, RogueSPPush, and
GGTracker.
Besides these premium-rate numbers, some malware also
leverage the same functionality by sending SMS messages
to other phone numbers. Though less serious than previous
ones, they still result in certain financial charges especially
when the user does not have an unlimited messaging plan.
For example, DogWars sends SMS messages to all the con-
tacts in the phone without user’s awareness. Other malware
may also make background phone calls. With the same
remote control capability, the destination number can be
provided from a remote C&C server, as shown in Geinimi.
4) Information Collection In addition to the above
payloads, we also find that malware are actively harvesting
various information on the infected phones, including SMS
messages, phone numbers as well as user accounts. In
particular, there are 13 malware families (138 samples) in
our dataset that collect SMS messages, 15 families (563
samples) gather phone numbers, and 3 families (43 samples)
obtain and upload the information about user accounts. For
example, SndApps collects users’ email addresses and sends
them to a remote server. FakeNetflix gathers users’ Netflix
accounts and passwords by providing a fake but seeming
identical Netflix UI.
We consider the collection of users’ SMS messages is
a highly suspicious behavior. The user credential may be
included in SMS messages. For example, both Zitmo (the
Zeus version on Android) and Spitmo (the SpyEpy version
on Android) attempt to intercept SMS verification messages
and then upload them to a remote server. If successful, the
attacker may use them to generate fraudulent transactions
on behalf of infected users.
D. Permission Uses
For Android apps without root exploits, their capabilities
are strictly constrained by the permissions users grant to
them. Therefore, it will be interesting to compare top permis-
sions requested by these malicious apps in the dataset with
top permissions requested by benign ones. To this end, we
have randomly chosen 1260 top free apps downloaded from
the official Android Market in the first week of October,
2011. The results are shown in Figure 5.
Based on the comparison, INTERNET, READ_PHONE_STATE,
ACCESS_NETWORK_STATE, and WRITE_EXTERNAL_STORAGE per-
missions are widely requested in both malicious and benign
apps. The first two are typically needed to allow for the em-
bedded ad libraries to function properly. But malicious apps
clearly tend to request more frequently on the SMS-related
permissions, such as READ_SMS, WRITE_SMS, RECEIVE_SMS,
and SEND_SMS. Specifically, there are 790 samples (62.7%)
in our dataset that request the READ_SMS permission, while
less than 33 benign apps (or 2.6%) request this permission.
These results are consistent with the fact that 28 malware
families in our dataset (or 45.3% of the samples) that have
the SMS-related malicious functionality.
103
Also, we observe 688 malware samples request the
RECEIVE_BOOT_COMPLETED permission. This number is five
times of that in benign apps (137 samples). This could be
due to the fact that malware is more likely to run back-
ground services without user’s intervention. Note that there
are 398 malware samples requesting CHANGE_WIFI_STATE
permission, which is an order of magnitude higher than that
in benign apps (34 samples). That is mainly because the
Exploid root exploit requires certain hot plug events such as
changing the WIFI state, which is related to this permission.
Finally, we notice that malicious apps tend to request more
permissions than benign ones. In our dataset, the average
number of permissions requested by malicious apps is 11
while the average number requested by benign apps is 4.
Among the top 20 permissions, 9 of them are requested by
malicious apps on average while 3 of them on average are
requested by benign apps.
IV. MALWARE EVOLUTION
As mentioned earlier, since summer of 2011, we have
observed rapid growth of Android malware. In this section,
we dive into representative samples and present a more in-
depth analysis of their evolution. Specifically, we choose
DroidKungFu (including its variants) and AnserverBot for
illustration as they reflect the current trend of Android
malware growth.
A. DroidKungFu
The first version of DroidKungFu (or DroidKungFu1) mal-
ware was detected by our research team [30] in June
2011. It was considered one of the most sophisticated
Android malware at that time. Later on, we further detected
the second version DroidKungFu2 and the third version
DroidKungFu3 in July and August, respectively. The fourth
version DroidKungFu4 was detected by other researchers in
October 2011 [31]. Shortly after that, we also came across
the fifth version DroidKungFuSapp, which is still a new
variant not being detected yet by existing mobile anti-virus
software (Section V). In the meantime, there is another vari-
ant called DroidKungFuUpdate [32] that utilizes the update
attack (Section III). In Table VI, we summarize these six
DroidKungFu variants. In total there are 473 DroidKungFu
malware samples in our dataset.
The emergence of these DroidKungFu variants clearly
demonstrates the current rapid development of Android
malware. In the following, we zoom in various aspects of
DroidKungFu malware.
1) Root Exploits Among these six variants, four of them
contain encrypted root exploits. Some of these encrypted
files are located under the directory “assets”, which look like
normal data files. To the best of our knowledge, DroidKungFu
is the first time we have observed in Android malware to
include encrypted root exploits.
The use of encryption is helpful for DroidKungFu to
evade detection. And different variants tend to use different
encryption keys to better protect themselves. For example,
the key used in DroidKungFu1 is Fuck_sExy-aLl!Pw, which
has been changed to Stak_yExy-eLt!Pw in DroidKungFu4.
It is interesting to notice that in DroidKungFu1, the
file name with the encrypted root exploit is “ratc” – the
acronym of RageAgainstTheCage. In DroidKungFu2 and
DroidKungFu3, this file name with the same root exploit has
been changed to “myicon”, pretending to be an icon file.
2) C&C Servers All DroidKungFu variants have a
payload that communicates with remote C&C servers and
receives the commands from them. Our investigation shows
that the malware keeps changing the ways to store the
C&C server addresses. For example, in DroidKungFu1, the
C&C server is saved in plain-text in a Java class file. In
DroidKungFu2, this C&C server address is moved to a native
program in plaintext. Also, remote C&C servers have been
increased from 1 to 3. In DroidKungFu3, it encrypts the
C&C server addresses in a Java class file. In DroidKungFu4,
it moves the C&C address back to a native program as
DroidKungFu2 but in cipertext. In DroidKungFuSapp, we
observe using a new C&C server and a different home-made
encryption scheme.
3) Shadow Payloads DroidKungFu also carries with
itself an embedded app, which will be stealthily installed
once the root exploit is successfully launched. As a result,
the embedded app will be installed without user’s awareness.
An examination of this embedded app code shows that it is
almost identical to the malicious payload DroidKungFu adds
to the repackaged app. The installation of this embedded app
will ensure that even the repackaged app has been removed,
it can continue to be functional. Moreover, in DroidKungFu1,
the embedded app will show a fake Google Search icon
while in DroidKungFu2, the embedded app is encrypted and
will not display any icon on the phone.
4) Obfuscation, JNI, and Others As briefly mentioned
earlier, DroidKungFu heavily makes use of encryption to hide
its existence. Geinimi is an earlier malware that encrypts
the constant strings to make it hard to analyze. DroidKungFu
instead encrypts not only those constant strings and C&C
servers, but also those native payloads and the embedded
app file. Moreover, it rapidly changes different keys for the
encryption, aggressively obfuscates the class name in the
malicious payload, and exploits JNI interfaces to increase
the difficulty for analysis and detection. For example, both
DroidKungFu2 and DroidKungFu4 uses a native program
(through JNI) to communicate with and fetch bot commands
from remote servers.
The latest version, i.e., DroidKungFuUpdate, employs the
update attack. With its stealthiness, it managed into the
official Android Market for users to download, reflecting
the evolution trend of Android malware to be more stealthy
104
Table VI
THE OVERVIEW OF SIX DroidKungFu MALWARE FAMILIES
Root Exploits C&C Malicious
Component
Embedded
Apk
Samples
Discovered
MonthExploid RATC Encrypted In Native In Java Encrypted Number
DroidKungFu1
√ √ √ √
1 com.google.ssearch plaintext 34 2011-06
DroidKungFu2
√ √ √ √
3 com.eguan.state none 30 2011-07
DroidKungFu3
√ √ √ √ √
3 com.google.update encrypted 309 2011-08
DroidKungFu4
√ √
3 com.safesys none 96 2011-10
DroidKungFuSapp
√ √ √ √
1 com.mjdc.sapp none 3 2011-10
DroidKungFuUpdate - - - - - - - - none 1 2011-10
in their design and infection.
B. AnserverBot
AnserverBot was discovered in September 2011. This
malware piggybacks on legitimate apps and is being actively
distributed among a few third-party Android Markets in
China. The malware is considered one of the most sophisti-
cated Android malware as it aggressively exploits several
sophisticated techniques to evade detection and analysis,
which has not been seen before. Our full investigation of
this malware took more than one week to complete. After
the detailed analysis [33], we believe this malware evolves
from earlier BaseBridge malware. In the following, we will
highlight key techniques employed by AnserverBot. Our
current dataset has 187 AnserverBot samples.
1) Anti-Analysis Though AnserverBot repackages
existing apps for infection, it aims to protect itself by actively
detecting whether the repackaged app has been tampered
with or not. More specifically, when it runs, it will check
the signature or the integrity of the current (repackaged) app
before unfolding its payloads. This mechanism is in place
to thwart possible reverse engineering efforts.
Moreover, AnserverBot aggressively obfuscates its inter-
nal classes, methods, and fields to make them humanly
unreadable. Also, it intentionally partitions the main payload
into three related apps: one is the host app and the other twos
are embedded apps. The two embedded apps share the same
name com.sec.android.touchScreen.server but with different
functionality. One such app will be installed through the
update attack while the other will be dynamically loaded
without being actually installed (similar to Plankton). The
functionality partitioning and coordination, as well as ag-
gressive obfuscation, make its analysis very challenging.
We have the reason to believe that AnserverBot is inspired
by the dynamic loading mechanism from Plankton. In
particular, the dynamic mechanisms to retrieve and load
remote code is not available in earlier BaseBridge malware.
In other words, it exploits the class loading feature in Dalvik
virtual machine to load and execute the malicious payload
at run time. By employing this dynamic loading behavior,
AnserverBot can greatly protect itself from being detected
by existing anti-virus software (Section V). Moreover, with
such dynamic capability in place, malware authors can
instantly upgrade the payloads while still taking advantage
of current infection base.
2) Security Software Detection Another related self-
protection feature used in AnserverBot is that it can de-
tect the presence of certain mobile anti-virus software.
In particular, it contains the encrypted names of three
mobile anti-virus software, i.e., com.qihoo360.mobilesafe,
com.tencent.qqpimsecure and com.lbe.security, and attempts
to match them with those installed apps on the phone. If
any of the three anti-virus software is detected, AnserverBot
will attempt to stop it by calling the restartPackage method
and displaying a dialog window informing the user that the
particular app is stopped unexpectedly.
3) C&C Servers One interesting aspect of AnserverBot
is its C&C servers. In particular, it supports two types of
C&C servers. The first one is similar to traditional C&C
servers from which to receive the command. The second one
instead is used to upgrade its payload and/or the new address
of the first type C&C server. Surprisingly, the second type
is based on (encrypted) blog contents, which are maintained
by popular blog service providers (i.e., Sina and Baidu). In
other words, AnserverBot connects to the public blog site
to fetch the (encrypted) current C&C server and the new
(encrypted) payload. This functionality can ensure that even
if the first type C&C server is offline, the new C&C server
can still be pushed to the malware through this public blog,
which is still active as of this writing.
V. MALWARE DETECTION
The rapid growth and evolution of recent Android
malware pose significant challenges for their detection.
In this section, we attempt to measure the effectiveness
of existing mobile anti-virus software. To this end, we
choose four representative mobile anti-virus software, i.e.,
AVG Antivirus Free v2.9 (or AVG), Lookout Security &
Antivirus v6.9 (or Lookout), Norton Mobile Security
Lite v2.5.0.379 (Norton), and TrendMicro Mobile
Security Personal Edition v2.0.0.1294 (TrendMicro)
and download them from the official Android Market in the
first week of November 2011.
We install each of them on a separate Nexus One phone
running Android version 2.3.7. Before running the security
app, we always update it with the latest virus database. In
the test, we apply the default setting and enable the real-time
protection. After that, we create a script that iterates each
app in our dataset and then installs it on the phone. We will
wait for 30 seconds for the detection result before trying
the next app. If detected, these anti-virus software will pop
up an alert window, which will be recorded by our script.
After the first iteration, we further enable the second-round
scanning of those samples that are not detected in the first
105
Table VII
DETECTION RESULTS FROM FOUR REPRESENTATIVE MOBILE
ANTI-VIRUS SOFTWARE
#
AVG Lookout Norton
Trend
Micro
# % # % # % # %
ADRD 22 22 100.0 13 59.0 5 22.7 11 50.0
AnserverBot 187 165 88.2 89 47.5 2 1.0 57 30.4
Asroot 8 3 37.5 0 0.0 0 0.0 6 75.0
BaseBridge 122 110 90.1 112 91.8 40 32.7 119 97.5
BeanBot 8 0 0.0 0 0.0 0 0.0 0 0.0
Bgserv 9 9 100.0 1 11.1 2 22.2 9 100.0
CoinPirate 1 0 0.0 0 0.0 0 0.0 0 0.0
CruseWin 2 0 0.0 2 100.0 2 100.0 2 100.0
DogWars 1 1 100.0 1 100.0 1 100.0 1 100.0
DroidCoupon 1 0 0.0 0 0.0 0 0.0 0 0.0
DroidDeluxe 1 1 100.0 1 100.0 0 0.0 1 100.0
DroidDream 16 11 68.7 16 100.0 9 56.2 16 100.0
DroidDreamLight 46 14 30.4 45 97.8 11 23.9 46 100.0
DroidKungFu1 34 34 100.0 34 100.0 2 5.8 33 97.0
DroidKungFu2 30 30 100.0 30 100.0 1 3.3 30 100.0
DroidKungFu3 309 0 0.0 307 99.3 1 0.3 305 98.7
DroidKungFu4 96 4 4.1 96 100.0 2 2.0 12 12.5
DroidKungFuSapp 3 0 0.0 0 0.0 0 0.0 0 0.0
DroidKungFuUpdate 1 0 0.0 1 100.0 0 0.0 0 0.0
Endofday 1 1 100.0 1 100.0 1 100.0 1 100.0
FakeNetflix 1 0 0.0 1 100.0 1 100.0 1 100.0
FakePlayer 6 6 100.0 6 100.0 6 100.0 6 100.0
GamblerSMS 1 0 0.0 0 0.0 0 0.0 1 100.0
Geinimi 69 69 100.0 69 100.0 38 55.0 67 97.1
GGTracker 1 1 100.0 1 100.0 1 100.0 1 100.0
GingerMaster 4 4 100.0 4 100.0 4 100.0 4 100.0
GoldDream 47 29 61.7 40 85.1 19 40.4 47 100.0
Gone60 9 9 100.0 9 100.0 4 44.4 7 77.7
GPSSMSSpy 6 0 0.0 6 100.0 2 33.3 3 50.0
HippoSMS 4 0 0.0 2 50.0 2 50.0 2 50.0
Jifake 1 0 0.0 1 100.0 0 0.0 1 100.0
jSMSHider 16 11 68.7 16 100.0 13 81.2 16 100.0
KMin 52 52 100.0 0 0.0 40 76.9 52 100.0
LoveTrap 1 0 0.0 1 100.0 1 100.0 1 100.0
NickyBot 1 0 0.0 0 0.0 0 0.0 0 0.0
NickySpy 2 2 100.0 2 100.0 2 100.0 2 100.0
Pjapps 58 44 75.8 57 98.2 26 44.8 50 86.2
Plankton 11 11 100.0 0 0.0 1 9.0 6 54.5
RogueLemon 2 0 0.0 0 0.0 0 0.0 0 0.0
RogueSPPush 9 9 100.0 3 33.3 0 0.0 8 88.8
SMSReplicator 1 1 100.0 1 100.0 1 100.0 1 100.0
SndApps 10 10 100.0 6 60.0 0 0.0 4 40.0
Spitmo 1 1 100.0 1 100.0 1 100.0 1 100.0
Tapsnake 2 0 0.0 2 100.0 1 50.0 1 50.0
Walkinwat 1 0 0.0 1 100.0 1 100.0 1 100.0
YZHC 22 1 4.5 1 4.5 3 13.6 10 45.4
zHash 11 11 100.0 11 100.0 2 18.1 11 100.0
Zitmo 1 1 100.0 1 100.0 1 100.0 1 100.0
Zsone 12 12 100.0 12 100.0 5 41.6 12 100.0
Detected Samples 689 1003 254 966
(out of 1260) (54.7%) (79.6%) (20.2%) (76.7%)
round. In the second round, we will wait for 60 seconds
to make sure that there is enough time for these security
software to scan the malware.
The scanning results are shown in Table VII. In the table,
the first two columns list the malware family and the number
of the samples in this malware family. The rest columns
show the number of samples as well as the percentage being
detected by the corresponding security software. At the end
of the table, we show the number of detected samples for
each anti-virus software and its corresponding detection rate.
The results are not encouraging: Lookout detected 1003
malware samples in 39 families; TrendMicro detected 966
samples in 42 families; AVG detected 689 samples in 32
families; and Norton detected the least samples (254) in 36
families.
Apparently, these security software take different ap-
proaches in their design and implementation, which lead
to different detection ratio even for the same malware
family. For example, AVG detects all ADRD samples in our
dataset, while Lookout detects 59.0% of them. Also, Lookout
detects most of DroidKungFu3 samples and all DroidKungFu4
samples while AVG can detect none of them (0.0%) or few
of them (4.1%).
There are some malware families that completely fail
these four mobile security software. Examples are BeanBot,
CoinPirate, DroidCoupon, DroidKungFuSapp, NickyBot and
RogueLemon. One reason is that they are relatively new
(discovered from August to October 2011). Therefore, ex-
isting mobile anti-virus companies may not get a chance to
obtain a copy of these samples or extract their signatures.
From another perspective, this does imply that they are still
taking traditional approaches to have a signature database
that represents known malware samples. As a result, if the
sample is not available, it is very likely that it will not be
detected.
VI. DISCUSSION
Our characterization of existing Android malware and an
evolution-based study of representative ones clearly reveal a
serious threat we are facing today. Unfortunately, existing
popular mobile security software still lag behind and it
becomes imperative to explore possible solutions to make
a difference.
First, our characterization shows that most existing An-
droid malware (86.0%) repackage other legitimate (popular)
apps, which indicates that we might be able to effectively
mitigate the threat by policing existing Android Markets for
repackaging detection. However, the challenges lie in the
large volume of new apps created on a daily basis as well as
the accuracy needed for repackaging detection. In addition,
the popularity of alternative Android Markets will also add
significant challenges. Though there is no clear solution in
sight, we do argue for a joint effort involving all parties in
the ecosystem to spot and discourage repackaged apps.
Second, our characterization also indicates that more than
one third (36.7%) of Android malware enclose platform-
level exploits to escalate their privilege. Unfortunately, the
open Android platform has the well-known “fragmentation”
problem, which leads to a long vulnerable time window
of current mobile devices before a patch can be actually
deployed. Worse, the current platform still lacks many
desirable security features. ASLR was not added until very
recently in Android 4.0. Other security features such as
TrustZone and eXecute-Never need to be gradually rolled
out to raise the bar for exploitation. Moreover, our analysis
reveals that the dynamic loading ability of both native code
106
and Dalvik code are being actively abused by existing
malware (e.g., DroidKungFu and AnserverBot). There is a
need to develop effective solutions to prevent them from
being abused while still allowing legitimate uses to proceed.
Third, our characterization shows that existing malware
(45.3%) tend to subscribe to premium-rate services with
background SMS messages. Related to that, most existing
malware intercept incoming SMS messages (e.g., to block
billing information or sidestep the second-confirmation re-
quirement). This problem might be rooted in the lack of fine-
grain control of related APIs (e.g., sendTextMessage).
Specifically, the coarse-grained Android permission model
can be possibly expanded to include additional context
information to better facilitate users to make sound and
informed decisions.
Fourth, the detection results of existing mobile security
software are rather disappointing, which does raise a chal-
lenging question on the best model for mobile malware de-
tection. Specifically, the unique runtime environments with
limited resources and battery could preclude the deployment
of sophisticated detection techniques. Also, the traditional
content-signature-based approaches have been demonstrated
not promising at all. From another perspective, the presence
of centralized marketplaces (including alternative ones) does
provide unique advantages in blocking mobile malware from
entering the marketplaces in the first place.
Last but not least, during the process of collecting mal-
ware samples into our current dataset, we felt confusions
from disorganized or confusing naming schemes. For ex-
ample, BaseBridge has another name AdSMS (by different
anti-virus companies); ADRD is the alias of Hongtoutou; and
LeNa is actually a DroidKungFu variant. One possible solution
may follow the common naming conventions used in desktop
space, which calls for the cooperation from different mobile
security software vendors.
VII. RELATED WORK
Smartphone security and privacy has recently become
a major concern. TaintDroid [34] and PiOS [35] are two
systems that expose possible privacy leaks on Android and
iOS, respectively. Comdroid [36] [37] and Woodpecker [38]
expose the confused deputy problem [39] on Android. Ac-
cordingly, researches have proposed several possible solu-
tions [37] [40] [41] to this issue. Stowaway [42] exposes
the over-privilege problem (where an app requests more
permissions than it uses) in existing apps. Schrittwieser et
al. [43] reports that certain security flaws exist in recent
network-facing messaging apps. Traynor et al. [44] charac-
terizes the impact of mobile botnet on the mobile network.
AdRisk [45] systematically identifies potential risks from
in-app advertisement libraries. Our work is different from
them with a unique focus on systematically characterizing
existing Android malware in the wild.
To improve the smartphone security and privacy, a
number of platform-level extensions have been proposed.
Specifically, Apex [46], MockDroid [47], TISSA [48] and
AppFence [49] extend the current Android framework to
provide find-grained controls of system resources accessed
by untrusted third-party apps. Saint [50] protects the exposed
interfaces of an app to others by allowing the app developers
to define related security policies for runtime enforcement.
Kirin [51] blocks the installation of suspicious apps by
examining the existence of certain dangerous permission
combination. L4Android [52] and Cells [53] run multiply
OSes on a single smartphone for improved isolation and
security. Note that none of them characterizes (or studies
the evolution of) existing Android malware, which is the
main focus of this work.
Among the most related, Felt et al. [54] surveys 46
malware samples on three different mobile platforms, i.e.,
iOS, Android and Symbian, analyzes their incentives, and
discusses possible defenses. In contrast, we examine a much
larger dataset (with 1, 260 malware samples in 49 different
families) on one single popular platform – Android. The
size of our dataset is instrumental to systematically charac-
terizing malware infection behavior and understanding their
evolution. Moreover, the subsequent test of existing mobile
security software further necessitates a change for effective
anti-mobile-malware solutions.
From another perspective, Becher et al. [55] provides
a survey of mobile network security, from the hardware
layer to the user-centric attacks. DroidRanger [56] detects
malicious apps in existing official and alternative Android
Markets. DroidMOSS [57] uses the fuzzy hashing to de-
tect the repackaged apps (potential malware) in third-party
android markets. Enck et al. [58] studies 1, 100 top free
(benign) Android apps to better understand the security
characteristics of these apps. Our work differs from them by
focusing on 1, 260 malicious apps (accumulated from more
than one year effort) and presenting a systematic study of
their installation, activation, and payloads.
VIII. CONCLUSION
In this paper, we present a systematic characterization
of existing Android malware. The characterization is made
possible with our more than one-year effort in collecting
1260 Android malware samples in 49 different families,
which covers the majority of existing Android malware,
ranging from its debut in August 2010 to recent ones in Oc-
tober 2011. By characterizing these malware samples from
various aspects, our results show that (1) 86.0% of them
repackage legitimate apps to include malicious payloads; (2)
36.7% contain platform-level exploits to escalate privilege;
(3) 93.0% exhibit the bot-like capability. A further in-
depth evolution analysis of representative Android malware
shows the rapid development and increased sophistication,
posing significant challenges for their detection. Sadly, the
107
evaluation with four existing mobile anti-virus software
shows that the best case detects 79.6% of them while the
worst case detects only 20.2%. These results call for the
need to better develop next-generation anti-mobile-malware
solutions.
ACKNOWLEDGMENT
We would like to thank our shepherd, Patrick Traynor, and
the anonymous reviewers for their comments that greatly
helped improve the presentation of this paper. We also
want to thank Michael Grace, Zhi Wang, Wu Zhou, Deepa
Srinivasan, Minh Q. Tran, and Lei Wu for the helpful
discussion. This work was supported in part by the US
National Science Foundation (NSF) under Grants 0855297,
0855036, 0910767, and 0952640. Any opinions, findings,
and conclusions or recommendations expressed in this ma-
terial are those of the authors and do not necessarily reflect
the views of the NSF.
REFERENCES
[1] (2011) Smartphone Shipments Tripled Since ’08. Dumb
Phones Are Flat. http://tech.fortune.cnn.com/2011/11/01/
smartphone-shipments-tripled-since-08-dumb-phones-are-
flat.
[2] Number of the Week: at Least 34% of Android Malware Is
Stealing Your Data. http://www.kaspersky.com/about/news/
virus/2011/Number of the Week at Least 34 of Android
Malware Is Stealing Your Data.
[3] Malicious Mobile Threats Report 2010/2011. http://www.
juniper.net/us/en/company/press-center/press-releases/2011/
pr 2011 05 10-09 00.html.
[4] Security Alert: AnserverBot, New Sophisticated Android Bot
Found in Alternative Android Markets. http://www.csc.ncsu.
edu/faculty/jiang/AnserverBot/.
[5] Security Alert: New Stealthy Android Spyware – Plankton –
Found in Official Android Market. http://www.csc.ncsu.edu/
faculty/jiang/Plankton/.
[6] Lookout Mobile Security. https://www.mylookout.com/.
[7] NetQin Mobile Security. http://www.netqin.com/en/.
[8] AVG Mobilation. http://free.avg.com/us-en/antivirus-for-
android.tpl-crp.
[9] Symantec. http://www.symantec.com/.
[10] Fortinet. http://www.fortinet.com/.
[11] TrendMicro. http://www.virustotal.com/.
[12] Security Alerts. http://www.csc.ncsu.edu/faculty/jiang/.
[13] One Year Of Android Malware (Full List). http://
paulsparrows.wordpress.com/2011/08/11/one-year-of-
android-malware-full-list/.
[14] Security Alert: New DroidKungFu Variant – AGAIN! –
Found in Alternative Android Markets. http://www.csc.ncsu.
edu/faculty/jiang/DroidKungFu3/.
[15] Android.Bgserv Found on Fake Google Security Patch.
http://www.symantec.com/connect/blogs/androidbgserv-
found-fake-google-security-patch.
[16] WAPS. http://www.waps.cn/.
[17] GGTracker Technical Tear Down. http://blog.mylookout.
com/wp-content/uploads/2011/06/GGTracker-Teardown
Lookout-Mobile-Security.pdf.
[18] Malicious QR Codes Pushing Android Malware. https://www.
securelist.com/en/blog/208193145/Its time for malicious
QR codes.
[19] First SpyEye Attack on Android Mobile Platform now in
the Wild. https://www.trusteer.com/blog/first-spyeye-attack-
android-mobile-platform-now-wild.
[20] ZeuS-in-the-Mobile - Facts and Theories. http://www.
securelist.com/en/analysis/204792194/ZeuS in the Mobile
Facts and Theories.
[21] QR code. http://en.wikipedia.org/wiki/QR code.
[22] Using QR tags to Attack SmartPhones (Attaging). http://
kaoticoneutral.blogspot.com/2011/09/using-qr-tags-to-
attack-smartphones 10.html.
[23] Asroot. http://milw0rm.com/sploits/android-root-20090816.
tar.gz.
[24] android trickery. http://c-skills.blogspot.com/2010/07/
android-trickery.html.
[25] Droid2. http://c-skills.blogspot.com/2010/08/droid2.html.
[26] Zimperlich sources. http://c-skills.blogspot.com/2011/02/
zimperlich-sources.html.
[27] adb trickery #2. http://c-skills.blogspot.com/2011/01/adb-
trickery-again.html.
[28] yummy yummy, GingerBreak! http://c-skills.blogspot.com/
2011/04/yummy-yummy-gingerbreak.html.
[29] Revolutionary - zergRush local root 2.2/2.3. http://forum.xda-
developers.com/showthread.php?t=1296916.
[30] Security Alert: New Sophisticated Android Malware Droid-
KungFu Found in Alternative Chinese App Markets. http://
www.csc.ncsu.edu/faculty/jiang/DroidKungFu.html.
[31] LeNa (Legacy Native) Teardown. http://blog.mylookout.
com/wp-content/uploads/2011/10/LeNa-Legacy-Native-
Teardown Lookout-Mobile-Security1.pdf.
[32] DroidKungFu Utilizes an Update Attack. http://www.f-secure.
com/weblog/archives/00002259.html.
[33] An Analysis of the AnserverBot Trojan. http://www.csc.ncsu.
edu/faculty/jiang/pubs/AnserverBot Analysis.pdf.
108
[34] W. Enck, P. Gilbert, B.-g. Chun, L. P. Cox, J. Jung, P. Mc-
Daniel, and A. N. Sheth, “TaintDroid: An Information-Flow
Tracking System for Realtime Privacy Monitoring on Smart-
phones,” in Proceedings of the 9th USENIX Symposium on
Operating Systems Design and Implementation, 2010.
[35] M. Egele, C. Kruegel, E. Kirda, and G. Vigna, “PiOS:
Detecting Privacy Leaks in iOS Applications,” in Proceedings
of the 18th Annual Symposium on Network and Distributed
System Security, 2011.
[36] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner, “An-
alyzing Inter-Application Communication in Android,” in
9th Annual International Conference on Mobile Systems,
Applications, and Services, 2011.
[37] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin,
“Permission Re-Delegation: Attacks and Defenses,” in Pro-
ceedings of the 20th USENIX Security Symposium, 2011.
[38] M. Grace, Y. Zhou, Z. Wang, and X. Jiang, “Systematic De-
tection of Capability Leaks in Stock Android Smartphones,”
in Proceedings of the 19th Annual Symposium on Network
and Distributed System Security, 2012.
[39] N. Hardy, “The Confused Deputy: (or why capabilities might
have been invented),” ACM SIGOPS Operating Systems Re-
view, vol. 22, October 1998.
[40] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach,
“QUIRE: Lightweight Provenance for Smart Phone Operat-
ing Systems,” in Proceedings of the 20th USENIX Security
Symposium, 2011.
[41] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi,
and B. Shastry, “Towards Taming Privilege-Escalation At-
tacks on Android,” in Proceedings of the 19th Annual Sym-
posium on Network and Distributed System Security, 2012.
[42] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner,
“Android Permissions Demystied,” in Proceedings of the 18th
ACM Conference on Computer and Communications Security,
2011.
[43] S. Schrittwieser, P. Frhwirt, P. Kieseberg, M. Leithner,
M. Mulazzani, M. Huber, and E. Weippl, “Guess Who’s Tex-
ting You? Evaluating the Security of Smartphone Messaging
Applications,” in Proceedings of the 19th Annual Symposium
on Network and Distributed System Security, 2012.
[44] P. Traynor, M. Lin, M. Ongtang, V. Rao, T. Jaeger, P. Mc-
Daniel, and T. L. Porta, “On Cellular Botnets: Measuring the
Impact of Malicious Devices on a Cellular Network Core,” in
Proceedings of the 16th ACM Conference on Computer and
Communications Security, 2009.
[45] M. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi, “Unsafe
Exposure Analysis of Mobile In-App Advertisements,” in
Proceedings of the 5th ACM Conference on Security and
Privacy in Wireless and Mobile Networks, 2012.
[46] M. Nauman, S. Khan, and X. Zhang, “Apex: Extending
Android Permission Model and Enforcement with User-
Defined Runtime Constraints,” in Proceedings of the 5th ACM
Symposium on Information, Computer and Communications
Security, 2010.
[47] A. R. Beresford, A. Rice, N. Skehin, and R. Sohan, “Mock-
Droid: Trading Privacy for Application Functionality on
Smartphones,” in Proceedings of the 12th International Work-
shop on Mobile Computing System and Applications, 2011.
[48] Y. Zhou, X. Zhang, X. Jiang, and V. W. Freeh, “Taming
Information-Stealing Smartphone Applications (on Android),”
in Proceeding of the 4th International Conference on Trust
and Trustworthy Computing, 2011.
[49] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall,
“These Aren’t the Droids You’re Looking For: Retrofitting
Android to Protect Data from Imperious Applications,” in
Proceedings of the 18th ACM Conference on Computer and
Communications Security, 2011.
[50] M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel,
“Semantically Rich Application-Centric Security in Android,”
in Proceedings of the 25th Annual Computer Security Appli-
cations Conference.
[51] W. Enck, M. Ongtang, and P. McDaniel, “On Lightweight
Mobile Phone Application Certification,” in Proceedings of
the 16th ACM Conference on Computer and Communications
Security, 2009.
[52] M. Lange, S. Liebergeld, A. Lackorzynski, A. Warg, and
M. Peter, “L4Android: A Generic Operating System Frame-
work for Secure Smartphones,” in Proceedings of the 1st
Workshop on Security and Privacy in Smartphones and Mo-
bile Devices, 2011.
[53] J. Andrus, C. Dall, A. Van’t Hof, O. Laadan, and J. Nieh,
“Cells: A Virtual Mobile Smartphone Architecture,” in Pro-
ceedings of the 23rd ACM Symposium on Operating Systems
Principles, 2011.
[54] A. Porter Felt, M. Finifter, E. Chin, S. Hanna, and D. Wagner,
“A Survey of Mobile Malware In The Wild,” in Proceedings
of the 1st Workshop on Security and Privacy in Smartphones
and Mobile Devices, 2011.
[55] M. Becher, F. C. Freiling, J. Hoffmann, T. Holz, S. Uellen-
beck, and C. Wolf, “Mobile Security Catching Up? Revealing
the Nuts and Bolts of the Security of Mobile Devices,” in
Proceedings of the 32nd IEEE Symposium on Security and
Privacy, 2011.
[56] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang, “Hey, You, Get
off of My Market: Detecting Malicious Apps in Official
and Alternative Android Markets,” in Proceedings of the
19th Annual Symposium on Network and Distributed System
Security, 2012.
[57] W. Zhou, Y. Zhou, X. Jiang, and P. Ning, “DroidMOSS:
Detecting Repackaged Smartphone Applications in Third-
Party Android Marketplaces,” in Proceedings of the 2nd ACM
Conference on Data and Application Security and Privacy,
2012.
[58] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri, “A
Study of Android Application Security,” in Proceedings of
the 20th USENIX Security Symposium, 2011.
109

