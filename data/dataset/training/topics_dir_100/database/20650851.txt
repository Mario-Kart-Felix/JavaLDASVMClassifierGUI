Nile: A Query Processing Engine for Data Streams∗
M. A. Hammad, M. F. Mokbel, M. H. Ali, W. G. Aref, A. C. Catlin, A. K. Elmagarmid,
M. Eltabakh, M. G. Elfeky, T. M. Ghanem, R. Gwadera, I. F. Ilyas, M. Marzouk, X. Xiong
Purdue University, West Lafayette, IN., USA
1. Introduction
This demonstration presents the design of “STEAM”,
Purdue Boiler Makers’ stream database system that al-
lows for the processing of continuous and snap-shot
queries over data streams. Specifically, the demon-
stration will focus on the query processing engine,
“Nile”. Nile extends the query processor engine
of an object-relational database management sys-
tem, PREDATOR [4], to process continuous queries
over data streams. Nile supports extended SQL op-
erators that handle sliding-window execution as an
approach to restrict the size of the stored state in op-
erators such as join. More specifically, Nile sup-
ports the following features: (1) Efficient and cor-
rect pipelined execution of sliding window queries over
multiple data streams. The correct execution is en-
forced by two novel pipelined scheduling approaches:
the Time Probing approach and the Negative Tuple ap-
proach [2]. (2) Scalability in terms of the number of
queries [3] and the number of data streams. (3) Ac-
cess control to accept/register new continuous queries
and new streams. (4) Providing guarantees for Qual-
ity of Service and Quality of Answers. (5) Online stream
summary manager. (6) Integrating online data min-
ing tools in query processing over data streams. (7) Ap-
proximate window join processing and joining in a
network of data streams.
2. Stream Query Processing
The main components of the Nile stream query pro-
cessor are shown in the figure. Source streams are mod-
eled via a stream data type, StreamType. Nile commu-
nicates with source streams (e.g., remote locations over
the network or sensor devices) through a Stream Man-
ager. The Stream Manager registers new stream-access
requests and uses the StreamType interface to retrieve
data from the registered streams. Nile uses Stream Scan
(SScan) to communicate with the stream manager. Nile
uses several approaches [2] to schedule the pipelined ex-
ecution of sliding window operators. The first approach
(Time Probing) uses window-based operators, the sec-
ond approach (Negative Tuple) uses a special opera-
tor, W-Expire, to emulate tuple addition to and subtrac-
∗ This work was supported in part by the National Science Founda-
tion under Grants IIS-0093116, EIA-9972883, IIS-9974255, IIS-
0209120, and EIA-9983249.
StreamType
Interface
+/−
W−Expire
+/−
Group−By
MINUS
+/−
SScan
S4
+/−
+/−
Group−By
COUNT
Q1 (Time Probing) Q2 (Negative Tuple) Q3 (Hybrid)
"Nile"
Query
Engine
Manager
Storage
Stream Manager
SScan
S2
SScan
S3
SScanSScan
S6S5
SScan
S7
W−Expire W−Expire
S1
SScan
DISTINCT
+/−+/−
tion from the window content. In addition, the Nega-
tive Tuple approach alleviates the operators from check-
ing the window constraint. The third approach (Hy-
brid) approach uses a mix of the first two approaches.
Nile introduces several window operators, besides win-
dow join [1], such as sliding window DISTINCT, Ag-
gregate, and Set operations. In addition, Nile imple-
ments each operator as a separate preemptive system-
scheduled thread. The operators communicate with each
other through a network of FIFO queues.
3. Description of the Demo
In this demonstration we show the flexibility of the
Nile system to define new streaming sources and execute
sliding window queries. We present applications on real
data sets that include retail transactions from Wal*Mart
stores, video data streams, and spatio-temporal data.
4. Acknowledgment
We would like to thank Michael Franklin for his col-
laboration in developing many of the ideas in Nile.
References
[1] M. A. Hammad, W. G. Aref, and A. K. Elmagarmid.
Stream window join: Tracking moving objects in sensor-
network databases. In SSDBM, 2003.
[2] M. A. Hammad, W. G. Aref, M. J. Franklin, and et al.
Efficient execution of sliding-window queries over data
streams. In Purdue University CSD TR #03-035, 2003.
[3] M. A. Hammad, M. J. Franklin, W. G. Aref, and et al.
Scheduling for shared window joins over data streams. In
VLDB, 2003.
[4] P. Seshadri. Predator: A resource for database research.
SIGMOD Record, 27(1):16–20, 1998.
Proceedings of the 20th International Conference on Data Engineering (ICDE’04) 
1063-6382/04 $ 20.00 © 2004 IEEE 

