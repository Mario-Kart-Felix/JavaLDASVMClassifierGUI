DE-PACRR: Exploring Layers Inside the PACRR Model
Andrew Yates
Max Planck Institute for Informatics
ayates@mpi-inf.mpg.de
Kai Hui
Max Planck Institute for Informatics
Saarbrücken Graduate School of Computer Science
khui@mpi-inf.mpg.de
ABSTRACT
Recent neural IR models have demonstrated deep learning’s utility
in ad-hoc information retrieval. However, deep models have a
reputation for being black boxes, and the roles of a neural IRmodel’s
components may not be obvious at rst glance. In this work, we
aempt to shed light on the inner workings of a recently proposed
neural IR model, namely the PACRR model, by visualizing the
output of intermediate layers and by investigating the relationship
between intermediate weights and the ultimate relevance score
produced. We highlight several insights, hoping that such insights
will be generally applicable.
CCS CONCEPTS
•Information systems →Retrieval models and ranking;Web
searching and information discovery;
1 INTRODUCTION
Deep learning has shown enormous potential in the last few years
and has brought signicant advances in elds such as natural lan-
guage processing and computer vision. More recently, the proposals
of novel neural IR models [1, 2, 4, 5] have demonstrated its potential
to also advance ad-hoc information retrieval. A beer understand-
ing of the functions and inuences in practice of dierent building
blocks used in state-of-the-art neural IR architectures may aid in
further development of neural IR models. In this work, we investi-
gate the operation of the recently proposed PACRR model [2] by
visualizing and analyzing the model’s weights aer training. In par-
ticular, we explore the roles of PACRR’s pooling and combination
layers by visualizing their output and ploing relationships be-
tween their output and the nal document relevance scores. While
doing so we highlight several insights which we deem to be im-
portant to the model’s success, with the hope that this will inspire
the development of future models. We remark that, while we hope
these insights to be generally applicable, PACRR was developed for
use with data on the scale of traditional IR benchmark collections.
Our analyses were performed on such collections, and thus our
results are most applicable to this context.
e rest of this paper is organized as follows. Section 2 briey
describes the PACRR model. We introduce a running example and
describe the datasets and hyperparameters used in Section 3 before
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for prot or commercial advantage and that copies bear this notice and the full citation
on the rst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
Conference’17, Washington, DC, USA
© 2017 Copyright held by the owner/author(s). 123-4567-24-567/08/06. . .$15.00
DOI: 10.475/123 4
investigating the function of PACRR’s layers in more detail. We
conclude in Section 4.
2 OVERVIEW OF PACRR
PACRR takes as input a similarity matrix between a query q and a
documentd , and outputs a scalar relevance score rel(d,q) indicating
the relevance between q and d . During training, one relevant and
one non-relevant query-document pair are encoded as similarity
matrices. e relevance scores for both documents are compared
using a max-margin loss as in Eq. 1.
L(q,d+,d−;Θ) = max(0, 1 − rel(q,d+) + rel(q,d−)) (1)
PACRR is composed of the following layers.
(1) Input: simlq×ld , where the query length lq and document
length ld dimensions are xed. at is, simi, j contains the
word2vec [3] cosine similarity1 between a query term at i
and a document term at j.
(2) CNN kernels followed by max-pooling layers: mul-
tiple convolutional kernels with lf lters identify query-
document term matches for dierent term window sizes,
namely, 2, 3, · · · , lд . e parameter lд determines the max-
imum kernel size. Aerwards, a max-pooling layer retains
only the strongest lter signal for each kernel size, leading
to lд matrices denoted as
C1lq×ld×1 · · ·C
lд
lq×ld×1
,
which we call the lter-pooling layer in this work. e
matrix C1 corresponds to the original similarity matrix,
which already contains unigram scores.
(3) A k-max-pooling layer subsequently pools matching sig-
nals in C1, · · · ,Clд , keeping only the top-ns strongest sig-
nals for each query term and kernel size pair. e output
of this layer is
P1lq×ns , · · · , P
lд
lq×ns .
(4) Combining signals across query terms. An LSTM layer
processes the match signals for each query term, Plq×(lдns ),
and outputs the document’s nal relevance score rel(d,q).
3 EXPLORATION
Asmentioned, the interactions between a query and a document are
rst encoded as the similarity matrix simlq×ld . ereaer, multiple
kernels of dierent sizes are employed to extract salient matching
signals locally, in line with practices in traditional ad-hoc retrieval
models. Next, lter-pooling and k-max-pooling layers are used
1We begin with the Google News word2vec embeddings and continue training them
on our document corpus to avoid missing terms. We set the cosine similarity to 1 for
terms that the Porter stemmer stems to the same strings.
ar
X
iv
:1
70
6.
08
74
6v
1 
 [
cs
.I
R
] 
 2
7 
Ju
n 
20
17
Conference’17, July 2017, Washington, DC, USA A. Yates and K. Hui
Figure 1: Snippet of relevant document APW19980613.0242 from Robust05.
(a) Text markup illustrating unigram term signals present aer the lter-pooling layer.
(b) Text markup illustrating the 3x3 kernel signals present aer the lter-pooling layer.
(c) Text markup illustrating the 5x5 kernel signals present aer the lter-pooling layer.
Figure 2: Text markup illustrating the output of the lter-pooling layer.
to retain the strongest signal(s) for each kernel and each query
term. Ultimately, these strongest signals are combined into a query-
document relevance score rel(d,q). e PACRR model can be de-
scribed as an extraction-distillation-combination sequence, with
CNN kernels extracting relevance matches, pooling layers distilling
the matches into a series of small vectors for each query term, and
a nal layer combining the query term signals into an ultimate
relevance score. Given the large number and high dimensions of
the signals extracted from the CNN kernels, only the distillation
and combination steps are investigated in this work; these are
the steps in which the strongest relevance signals are identied
and combined. Following this extraction-distillation-combination
framework, we aempt to beer understand the functionality of
dierent layers by visualizing their weights or by correlating them
with the model’s ultimate output.
Running example.
Title: railway accidents
Description: what are the causes of railway acci-
dents throughout the world?
Document: as displayed in Figure 1
PACRRModel. emodel is trained over 200 Robust04 queries
for 100 iterations and validated on the remaining 50 Robust04
queries. e query-document pairs analyzed in this work are taken
from Robust05. We set lq = 16 and drop the lowest IDF terms aer
concatenating terms from the title and the description eld in the
query from Trec Robust Track2. lд = 5 is set to enable 2 × 2, 3 × 3,
2hp://trec.nist.gov/data/robust.html
4 × 4 and 5 × 5 kernels. e number of matching signals to keep
for each query term is set to ns = 10.
Distillation. Two pooling layers are involved, namely, the lter-
pooling layer and the k-max-pooling layer.
e use of a lter-pooling layer diers from the pooling strate-
gies employed in computer vision [6], where pooling layers serve
to sub-sample dierent regions of an image. PACRR’s lter-pooling
aims to retain only one salient signal for each kernel among the
dierent lters. e assumption is that all lters measure dierent
types of relevance matches, such as n-gram matches or term prox-
imity matches, thus only the strongest relevance signal needs to be
kept. To illustrate the signals that are distilled by this lter-pooling
layer, a snippet from the example document is displayed. Figure 2a,
Figure 2b and Figure 2c display the markup for kernels with sizes
1× 1, 3× 3 and 5× 5 respectively, showing the strongest lter signal
among all query terms. Kernels with other sizes, namely, 2 × 2 and
4 × 4, are omied given that similar paerns are observed. e
opacity (i.e., darkness of the text) represents the value of the output
of the lter-pooling layer, which is the strength of the signal. e
signal for each kernel size is normalized by the maximum value
among all query-document pairs to make relative dierences in the
visualization more clear. In cases where there is overlap among
dierent windows of text, the strongest signal for each term is used
to determine the term’s opacity.
e text sequenceswith the darkestmarkup represent the strongest
signals, like the unigram signals in Figure 2a and the 3x3 signals
in Figure 2b. Meanwhile, in Figure 2c, a lighter color is observed
even for the strongest signals, illustrating that the strength of the
DE-PACRR Conference’17, July 2017, Washington, DC, USA
(a) Text markup illustrating the remaining unigram term signals aer the k-max-pooling layer.
(b) Text markup illustrating the remaining 3x3 kernel signals aer the k-max-pooling layer.
(c) Text markup illustrating the remaining 5x5 kernel signals aer the k-max-pooling layer.
Figure 3: Text markup illustrating the output of the k-max-pooling layer.
signals is generally smaller from a larger kernel. e use of real
valued cosine similarity in the input matrices allows the model
to match related terms beyond exact matches, thereby expanding
the query. For example, in Figure 2a the terms “locomotives” and
“collision” have relatively high weights though neither term appears
in the query. We can also see that almost all terms have at least
some weight aer the lter-pooling layer, reducing the dierence
between the salient text and the remaining text. is is due to the
way CNN kernels work when combined with real valued similarity.
Taking the dot product of all terms in a window generally produces
non-zero values and acts as a smoothing eect.
Aer the lter-pooling layer a k-max-pooling layer is employed
to further retain the ns -most salient signals for each query term and
kernel size pair, allowing the later combination component to focus
on only the strongest matches. Markup gures aer the k-max-
pooling layer are displayed in Figure 3a, Figure 3b and Figure 3c
for 1 × 1, 3 × 3 and 5 × 5 kernels, respectively. Compared with
the corresponding gures for the lter-pooling layer, the k-max-
pooling layer has removed most of the “background” term signals.
Analogous to a user who nds key terms in a web page, the layer’s
output focuses on the few most relevant text sequences rather
than considering everything. To beer understand its functionality,
we further summarize the output of this layer in Figure 4, which
visualizes a complete example output of the k-max-pooling layer.
Each column corresponds to a query term and each row corresponds
to one kernel size. Each cell is composed of ten bars displaying the
strength for the top ns = 10 signals for each query term under a
particular kernel size. As in the earlier gures, the strength of the
signals are normalized to aid in visualization. It can be seen that
the distribution of the top-ns signal strengths vary widely among
dierent query terms and among kernel sizes.
We argue that the salient signals under a kernel with size lxl are
a mixture of l-gram matching and query proximity in a small text
window with l terms. e laer kind of signals account for more of
the signals with larger l , such as 3x3 kernels. For example, the text
sequence “role accident caused” from Figure 3b is highlighted be-
cause it contains3 the query term “causes,” not because it is a query
trigram. Interestingly, this match was identied by a 3x3 kernel, yet
there is no 3-term query window containing both “accident” and
“causes.” In this match the terms “role” and “accident” have high
weight because they have relatively high word2vec similarity with
“causes,” not because they are matching other query terms. at is,
the two query terms “accident” and “cause” are too far away from
each other to both be considered by the same 3x3 kernel, and thus
the high weight given to “role accident caused” comes from each
term’s relatively high similarity to the single query term “causes.”
Combination. Aer extracting the k-most salient signals for
each kernel along dierent query terms, the model combines them
into a document relevance score rel(d,q). Given the large number
of weights involved in the combination layer, we investigate the
relationships between dierent signal types and the relevance score.
e combination procedure can be viewed as a function mapping
the salient signals from the previous step to a real value. As dis-
played in Figure 4, the combination step’s input consists of the
top ns = 10 signals for dierent query terms and kernel sizes; this
Figure illustrates the combination layer’s entire input.
In this section, we consider the following questions:
- How are signals from dierent kernels combined?
- How are signals from dierent positions in the top-k com-
bined?
To do so, we consider the signals for each position in the top-k one
at a time (e.g., we consider only the second strongest signals). For
each position in the top-k and each kernel size, we divide all signals
from the query terms into ten bins of equal sizes. For each bin we
report the median of the ultimate relevance score produced by the
combination layer. is relationship between signals and relevance
scores is illustrated in Figure 5, where the x-axis corresponds to
the strength of the signals for dierent bins, and the y-axis is the
median of the nal relevance score.
3“Causes” and “caused” are equivalent aer stemming.
Conference’17, July 2017, Washington, DC, USA A. Yates and K. Hui
Figure 4: e complete output of the k-max-pooling layer. Columns correspond to query terms. Rows correspond to kernel
sizes (e.g., n-gram and term proximity matches). Each cell is composed of 10 bars indicating the strength of the top ns = 10
signals for the corresponding query term and kernel size.
0.0 0.2 0.4 0.6 0.8 1.0
normalized max signal across all query terms
1
0
1
2
3
4
5
6
m
e
d
ia
n
 r
e
le
v
a
n
ce
 s
co
re
1x1 kernel
2x2 kernel
3x3 kernel
4x4 kernel
5x5 kernel
(a) Strongest signals in the top-k (i.e., top-k position one)
0.0 0.2 0.4 0.6 0.8 1.0
normalized max signal across all query terms
1
0
1
2
3
4
5
6
m
e
d
ia
n
 r
e
le
v
a
n
ce
 s
co
re
1x1 kernel
2x2 kernel
3x3 kernel
4x4 kernel
5x5 kernel
(b) Second strongest signals in the top-k (i.e., top-k position two)
0.0 0.2 0.4 0.6 0.8 1.0
normalized max signal across all query terms
1
0
1
2
3
4
5
6
m
e
d
ia
n
 r
e
le
v
a
n
ce
 s
co
re
1x1 kernel
2x2 kernel
3x3 kernel
4x4 kernel
5x5 kernel
(c) Fih strongest signals in the top-k (i.e., top-k position ve)
0.0 0.2 0.4 0.6 0.8 1.0
normalized max signal across all query terms
1
0
1
2
3
4
5
6
m
e
d
ia
n
 r
e
le
v
a
n
ce
 s
co
re
1x1 kernel
2x2 kernel
3x3 kernel
4x4 kernel
5x5 kernel
(d) Tenth strongest signals in the top-k (i.e., top-k position ten)
Figure 5: e relationship between documents’ signal strengths and documents’ relevance scores for dierent kernel sizes and
positions in the top-k. e dierence in scores between kernel sizes increases as the top k position increases.
Figure 5 illustrates the fact that dierent kernel sizes areweighted
dierently by the combination layer. For example, in the upper right
corner of Figure 5d, the strongest unigram match with a strength
of 1.0 leads to lower relevance scores than the strongest 5x5 match
with a strength of only 0.7. One explanation is that the loss function
in Eq. 1 compares a relevant and a non-relevant document, which
both can include similar amounts of unigram matches, making the
contributions of the unigram signals less important. Intuitively,
DE-PACRR Conference’17, July 2017, Washington, DC, USA
even aer a document includes all separate query terms, its rele-
vance score can still benet from considering other factors, such as
the relevance signals produced by 2x2 or 3x3 kernels. Strong 5x5
signals are more rare, thus the combination layer tends to reward a
document more when such rare signals are observed. Additionally,
Figure 5 contains clear outliers in the lemost region: there are
some documents that have only weak unigram matches, but still
receive a relevance score of approximately 2.8. is illustrates the
weight that the model gives to inexact term proximity matches
from larger kernels which also include neighboring terms.
Regarding the second question, Figure 5 indicates that all signals
in the top-k are considered when combining results. is illustrates
the utility of performing k-max pooling rather than max pooling,
as is commonly done in computer vision. For example, in Figure 5c,
the h strongest signals for the 5×5 kernel are always less than 0.8,
but the corresponding relevance score is still as large as the highest
relevance score in that gure. Put dierently, though the absolute
values of the matching scores decrease when considering lower
ranked signals, e.g., a 2x2 kernel’s maximum signal is approximately
1.0 in the 2nd position and 0.7 in the 10th position, such later
positions still contribute strongly to the ultimate relevance score.
is consideration of all of the top-k signals is analagous to the
computations employed in many traditional IR methods, such as
TF-IDF, where all occurrences of the query terms are aggregated.
4 CONCLUSION
In this work we explored the pooling and the combination layers
from the recently proposed PACRR model, aiming at generally ap-
plicable insights. We notice that the real valued similarity from
the usage of word2vec expands the query, allowing the model to
assign weights to windows of text with lile or even no exact query
overlap. Together with the usage of kernels with dierent sizes, the
real valued similarity further enables proximity matching, which
becomes more common as the kernel size (i.e., window length) in-
creases. Subsequently, dierent pooling layers retain the strongest
signals from these kernels, making the model focus on the most
salient matches. At the time of combination, such signals from
dierent kernels with dierent strengths are comprehensively con-
sidered by the model, highlighting the necessity to retain more than
the top-1 signal in the pooling layer. Moreover, we remark that
the combination layer actually emphasizes the signals from larger
kernel sizes more strongly, given their rarity relative to the unigram
signals. is demonstrates the strength of a neural IR model to go
beyond unigram matches.
REFERENCES
[1] Jiafeng Guo, Yixing Fan, Qingyao Ai, and W Bruce Cro. 2016. A deep relevance
matching model for ad-hoc retrieval. In Proceedings of the 25th ACM International
on Conference on Information and Knowledge Management. ACM, 55–64.
[2] Kai Hui, Andrew Yates, Klaus Berberich, and Gerard de Melo. 2017. A Position-
Aware Deep Model for Relevance Matching in Information Retrieval. arXiv
preprint arXiv:1704.03940 (2017).
[3] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Je Dean. 2013.
Distributed representations of words and phrases and their compositionality. In
Advances in neural information processing systems. 3111–3119.
[4] Bhaskar Mitra, Fernando Diaz, and Nick Craswell. 2017. Learning to Match Using
Local and Distributed Representations of Text for Web Search. In Proceedings of
WWW 2017. ACM.
[5] Liang Pang, Yanyan Lan, Jiafeng Guo, Jun Xu, and Xueqi Cheng. 2016. A Study
of MatchPyramid Models on Ad-hoc Retrieval. CoRR abs/1606.04648 (2016).
hp://arxiv.org/abs/1606.04648
[6] Karen Simonyan and Andrew Zisserman. 2014. Very deep convolutional net-
works for large-scale image recognition. arXiv preprint arXiv:1409.1556 (2014).

