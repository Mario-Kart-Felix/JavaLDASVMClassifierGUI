Towards Understanding Generalization of Deep
Learning: Perspective of Loss Landscapes
Lei Wu
School of Mathematics, Peking University, Beijing, China
leiwu@pku.edu.cn
Zhanxing Zhu
Beijing Institute of Big Data Research (BIBDR), Beijing, China
Center for Data Science, Peking University, Beijing, China
zhanxing.zhu@pku.edu.cn
Weinan E
Beijing Institute of Big Data Research (BIBDR), Beijing, China
Center for Data Science and BICMR, Peking University, Beijing, China
Department of Mathematics and PACM, Princeton University, Princeton, NJ, USA
weinan@math.princeton.edu
Abstract
It is widely observed that deep learning models with learned parameters generalize
well, even with much more model parameters than the number of training samples.
We systematically investigate the underlying reasons why deep neural networks
often generalize well, and reveal the difference between the minima (with the
same training error) that generalize well and those they don‚Äôt. We show that it
is the characteristics the landscape of the loss function that explains the good
generalization capability. For the landscape of loss function for deep networks, the
volume of basin of attraction of good minima dominates over that of poor minima,
which guarantees optimization methods with random initialization to converge
to good minima. We theoretically justify our findings through analyzing 2-layer
neural networks; and show that the low-complexity solutions have a small norm of
Hessian matrix with respect to model parameters. For deeper networks, extensive
numerical evidence helps to support our arguments.
1 Introduction
Recently, deep learning LeCun et al. [2015] has achieved remarkable success in various application
areas. Despite of its powerful modeling capability, we know little about why deep learning works so
well from a theoretical perspective. This is widely known as the ‚Äúblack-box‚Äù nature of deep learning.
One key observation is that, most of deep neural networks with learned parameters often generalize
very well empirically, even equipped with much more effective parameters than the number of training
samples, i.e. high-capacity. According to conventional statistical learning theory (including VC
dimension Vapnik and Vapnik [1998] and Rademacher complexity measure Bartlett and Mendelson
[2002]), in such over-parameterized and non-convex models, the system is easy to get stuck into
local minima that generalize bad. Some regularization is required to control the generalization error.
However, as shown in Zhang et al. [2017], high-capacity neural networks without any regularization
can still obtain low complexity solutions and generalize well; and suitable regularization only helps
ar
X
iv
:1
70
6.
10
23
9v
1 
 [
cs
.L
G
] 
 3
0 
Ju
n 
20
17
to improve the test error to a small margin. Thus, statistical learning theory cannot explain the
generalization ability of deep learning models.
It is worthy of noting that we call the solutions (or minima) with the same and small training error
‚Äúgood ‚Äù or ‚Äúbad‚Äù if they have significant difference of generalization performance, i.e. test accuracy.
Take the task of MNIST digit classification as an example, with the same 100% training accuracy,
we are curious about the striking difference between the minima achieving above 95% test accuracy
and those bad ones like a random guess, rather than the small difference between the solutions above
95% test accuracy. For those bad solutions that are rarely observed in normal training procedures,
we find them by intentionally adding attacking data to the original training set. To the best of our
knowledge, this is the first time that the bad solutions (with the same and small training error as
good ones) are accessible, see Section 5.1. This directly provides the possiblity of considering the
difference between the good and bad solutions.
In this work, we aim to answer two crucial questions towards understanding the generalization of
deep learning:
‚Ä¢ Quesion 1: What is the property that distinguishes the good solutions (obtained from
optimizers) from those that generalize poorly?
‚Ä¢ Quesion 2: Although there exist many solutions with bad generalization performance,
why do the optimizers with random initialization almost surely converge to the minima
generalizing well?
We provide reasonable explanation to both of the two questions.
For the first one, we find that local minima with large volume of attractors often lead good generaliza-
tion performance, as theoretically studied in Section 3.2 and 4. A Hessian-based analysis is proposed
for quantifying the volume of attractor, based on which extensive numerical evidence (see Section 5)
reveals the important relationship between the generalization performance and the volume of basin of
attractor.
For the second question, several factors are investigated systematically that might endow neural
networks with powerful generalization capability, including initialization, optimization and the
characteristics of the landscapes of objective functions. Through extensive theoretical and empirical
justifications, we exclude the effects of optimization, as illustrated in Section 3.1. And we conjecture
that it is the characteristics of the landscapes of loss functions that automatically guarantees the
optimization methods with random initialization to converge to good minima almost surely, see
Section 3.2. This property is irrelevant with the types of optimization methods adopted during the
training.
Our findings dramatically differ from traditional understanding on generalization of neural network,
which attribute it to some particular optimizers (e.g. stochastic gradient descent), or certain regulariz-
ing techniques (e.g. weight decay or Dropout). These factors can only explain the small difference
between the good solutions, rather than the significant difference between good and bad minima. We
conjecture that the ‚Äúmystery‚Äù of small generalization error is due to the special structure of neural
networks. This is justified through theoretically analyzing the landscape of 2-layer neural network, as
shown in Section 4.
Related work
Different approaches have been employed to discuss the generalization of neural networks. Some
works Hardt et al. [2016], Zhang et al. [2017] explored the implicit regularization property of SGD.
Another perspective relies on the geometry of loss function around a global minimum. It argues
that the solutions that generalize well lie in flat valleys, while bad ones always are located in the
sharp ravine. This observation dates back to the early works Hochreiter et al. [1995], Hochreiter
and Schmidhuber [1997]. Recently Keskar et al. [2017] adopts this perspective to explain why
small-batch SGD often converges to the solution generalizing better than large-batch SGD; and the
authors of Chaudhari et al. [2017], Ye et al. [2017] proposed to use controllable noise to bias the SGD
to find flat solutions. Similar works on this path can also be found in Baldassi et al. [2015, 2016],
where the discrete networks are considered.
2
However, the existing research only considered the small difference between the good solutions,
which are not addressing the two key issues we described previously. In Zhang et al. [2017], through
several numerical experiments, the authors suggest that both explicit and implicit regularizers, when
well tuned, could help to reduce the generalization error to a small margin. However, it is far away
from the essence of interpreting generalization ability.
2 Deep neural networks learn low-complexity solutions
In general, supervised learning usually involves an optimization process of minimizing the empirical
risk,Remp(f) := 1N
‚àëN
i=1 `(f(xi), yi),
fÃÇ = argminf‚ààHRemp(f), (1)
where {(xi, yi)}Ni=1 denotes the training set with N i.i.d. samples, `(¬∑, ¬∑) is the loss function; H
denotes the whole hypothesis space, and the hypothesis f is often parameterized as f(x;Œ∏), such
as deep neural networks. According to central limit theorem (CLT), the generalization error (i.e.
the population version of risk) of one particular learned model fÃÇ ,R(fÃÇ) = Ex,y[`(fÃÇ(x), y)], can be
decomposed into two terms
R(fÃÇ) ‚â§ Remp(fÃÇ) +
‚àö
Varx,y`(fÃÇ(x), y)/
‚àö
N, (2)
where the last term is closely related to the complexity of the solution fÃÇ , i.e. the complexity of
input-output mapping fÃÇ . So with the same and small training error, simple solutions generalize
better than complex solutions. This intuitive explanation is called Occam‚Äôs razor, and No Free Lunch
theorem Shalev-Shwartz and Ben-David [2014] and also related to the minimum description length
(MDL) theory Rissanen [2007], Myung [2000].
2.1 Optimizers converge to low-complexity solutions
In deep learning, Remp can always be trained to an ignorable threshold . So it is the complexity
of candidate solutions that determine the generalization error according to the bound (2). To get
some intuition about this, we use fully connected neural networks (FNN)1 with different number of
layers to fit a three-order polynomial: y = x3 ‚àí 3x2 ‚àí x+ 1+N (0, 0.1). As a comparison, we also
conduct the experiment using kernel ridge regression (KRR) model. In this experiment, training set
consists of only 5 points. For neural networks, all the regularizers are removed; and the regularization
parameter for KRR is set to 0.01. The result is summarized in Figure 1. we can easily observe that
3 2 1 0 1 2 3 4
x
30
20
10
0
10
20
30
y
Fully connected network, width=40
data
2-layer
4-layer
6-layer
8-layer
10-layer
12-layer
complex
2 1 0 1 2 3 4
x
20
0
20
40
60
80
100
120
140
160
y
Kernel ridge regression with polynomial kernel
data
3-order
6-order
8-order 
9-order
Figure 1: (Left), fitting results for 5 data points using FNNs with different number of layers; the overfitting
solution with a high complexity (in dashed line) is intentionally constructed. (Right), fitting results by kernel
regression with different orders of polynomial kernels.
the optimizer did converge to the solutions with low complexity for FNNs with different number of
layers. Especially, the 12-layer network still generalizes well, even with about 18000 parameters
that is much larger than the size of training set. Maybe one think that it is because the hypothesis
space of FNN is not as complicated as we imagine. However, this is not true; and we can find many
high-complexity solutions, one of them shown as the dash line in Figure 1. The overfitting solution in
1ReLU is used as our activation function through all the experiments in this paper
3
the figure can be found by attacking the training set intentionally, see Section 5.1 for more details.
On the other hand, KRR inevitably produces overfitting solutions when increasing the capacity. To
control the complexity of the solutions for KRR models, we have to resort to some regularization.
2.2 Connection with classical learning theory
Classic statistical learning theory describes the generalization error bound for the hypothesis spaceH
as follows (we present it in a non-rigorous way for simplicity),
R(f) ‚â§ Remp(f) + complexity(H)/
‚àö
N, ‚àÄf ‚àà H, (3)
where the term complexity(H) measure the complexity of the whole hypothesis classH, such as VC
dimension Vapnik and Vapnik [1998] and Rademacher complexity Bartlett and Mendelson [2002],
Zhang et al. [2017], etc. Despite of similarity with the bound (2), we emphasize that this bound is
universal for the whole hypothesis spaceH, and even holds for the worst solution. Therefore, it is not
surprising that complexity(H) only leads to a trivial upper bound Zhang et al. [2017]. However, in
practice, what we really care about is the complexity of the specific solutions found by the optimizers,
not the worst case.
As shown in Figure 1 and Section 5.1, for high-capacity deep neural networks, the solution setH‚àó :=
{f |Remp(f) < , with  small enough.} consists of many solutions with diverse generalization
performance, some of which even generalize no better than a random guess. Surprisingly, optimizers
with random initialization rarely converge to the bad solutions inH‚àó. As a comparison, traditional
basis expansion methods do not have the nice property of converging to low-complexity solutions
(see the analysis in Supplementary Materials). Thus, conventional learning theory cannot answer the
Question 2.
3 Perspective of loss landscape for understanding generalization
The key point to understand generalization capability of high-capacity deep learning model boils
down to figuring out the mechanism that guides the optimizers to converge towards low-complexity
solution areas, rather than pursue tighter bounds for complexity of hypothesis class H and the
solution set H‚àó. Recalling the optimization dynamics of SGD, there exists only three factors that
might endow the deep learning models with good generalization performance, (1) the stochasticity
introduced by mini-batch approximation; (2) the specific initialization; (3) the special structure of the
landscape ofRemp(Œ∏). After systematical investigation over the three factors, our central finding can
be summarized as follows,
The geometrical structure of loss function of deep neural networks guides the optimizers to converge
to low-complexity solutions: the volume of basin of good minina dominates over those poor ones
such that random initialization induces starting parameters located in good basins with an
overwhelming probability, leading to the almost sure convergence to good solutions.
3.1 SGD is not the magic
The stochastic approximation of the gradient was originally proposed to overcome the computational
bottleneck in classic gradient descent. It seems natural to imagine that the noise introduced by the
stochastic approximation should help the system to escape the saddle points and local minima. Also
some researchers suggest that SGD acts as an implicit regularizer guiding the system to converge to a
small-norm/better solutions Zhang et al. [2017], Hardt et al. [2016].
To evaluate these observations, we trained three networks by batch gradient descent and SGD on
MNIST dataset. Here we only use the first 10, 000 images as the training set, due to the limited RAM
of GPU for the evaluation of full batch gradient. The architectures of the networks are described in
the Supplementary Materials. As shown in Table 1, the models trained by SGD do perform better
than full batch gradient descent, which is similar as the observed results in Keskar et al. [2017].
However this improvement is limited. We thus can conclude that SGD alone cannot explain the good
generalization capability of deep neural networks, since the generalization we consider focuses on
the significant difference between the good solutions with above 95% test accuracy and those poor
ones not better than a random guess.
4
model mLeNet LeNet sNIN Lin et al. [2013]
full batch (105) 97.75¬± 0.24 97.85¬± 0.05 96.89¬± 0.41
mini batch (128) 98.52¬± 0.13 97.87¬± 0.28 98.41¬± 0.17
Table 1: The test accuracy (‚Äúmean¬±std‚Äù) of the obtained solutions under different networks, based on 6 runs of
the experiments.
3.2 The role of landscape and random initialization
To describe the characteristics of the loss landscape, we borrow the concept of basin of attrac-
tion Hirsch et al. [2012] from dynamical systems, which is the region such that any initial point in that
region will eventually be iterated into the attractor (i.e. minima), denoted as A. Let Bgood,Bbad be the
basins of attractor Agood and Abad w.r.t. the optimization dynamics Œ∏Ãá = ‚àí‚àáŒ∏Remp(Œ∏), respectively.
The empirical observation (see Table 2) that random initialization Œ∏0 ‚àº P0 converges to Agood,
indicates that
P0(Œ∏0 ‚àà Bgood) ‚âà 1, P0(Œ∏0 ‚àà Bbad) ‚âà 0. (4)
If we choose P0 to be the uniform distribution, then we have
Vol(Bbad)
Vol(Bgood)
‚âà 0, (5)
where Vol(B) denotes the volume of the basin of attractor. In terms of Lebesgue measure, the basin
of bad minima is a zero measure set. According to (5), a random initialization of parameters will
be located in the basin of good minima Agood with an overwhelming probability. Consequently,
optimizers will converge to the solutions generalizing well almost surely. So we conjecture that the
ratio (5) should be the reasonable answer to Quesion 2 in Section 1. Now we empirically demonstrate
that some random initialization will result in convergence to good solutions.
We numerically tried different strategies of random initialization, Œ∏0 ‚àº U [0, 0.1], U [0, 1], N (0, 0.1),
and the one proposed in He et al. [2015], i.e. N (0, 2/fanin), where fanin the number of inputs for
each node. No data augmentation or regularization is applied in this experiment. For each network
and method of random initialization, we run the experiments 6 times. The results are reported in
Table 2. It can be easily observed that, with these strategies of random initialization, all the cases
converge to good solutions. This partially supports our conjecture that random initialization induces
that the starting parameters are almost surely located in the basin of good minima.
Initialization LeNet (MNIST) ResNet-18 (CIFAR10)
N (0, 2/fanin) 99.92 ¬± 0.15 / 99.00 ¬± 0.19 100.00 ¬± 0.00 / 84.48 ¬± 0.20
U [0, 1] 99.82 ¬± 0.33 / 98.99 ¬± 0.23 100.00 ¬± 0.00 / 79.06 ¬± 0.59
U [0, 0.1] 99.97 ¬± 0.01 / 99.19 ¬± 0.03 100.00 ¬± 0.00 / 81.54 ¬± 0.28
N (0, 0.1) 99.97 ¬± 0.01 / 99.13 ¬± 0.11 100.00 ¬± 0.00 / 84.56 ¬± 0.40
Table 2: Training/test accuracies for the models trained with various initialization strategies. For each
experiment, we preprocess the data by channel-wise normalization and train it with SGD optimizer for fixed
number of epochs, 50 for LeNet (MNIST) and 160 for ResNet-18 (CIFAR10).
4 Landscape of 2-layer networks
In this section, we analyze the landscape of 2-layer networks to show that the low-complexity
solutions are indeed located in ‚Äúflat‚Äù regions with large volume of attractor basin.
The hypothesis represented by the 2-layer network can be written as,
f(x;Œ∏) :=
K‚àë
k=1
akœÉ(b
T
k x+ ck), (6)
where K is the number of hidden nodes, œÉ(¬∑) denotes the activation function, and Œ∏ =
(a, c, b1, ¬∑ ¬∑ ¬∑ , bk) denotes all the parameters. Assume least square loss is used, then fitting
{(xi,yi)}Ni=1 becomes minimizingRemp(Œ∏) := 1N
‚àëN
i=1 (f(xi;Œ∏)‚àí yi)
2
.Here the Hessian matrix
ofRemp(Œ∏) can be decomposed into two terms: Fisher information and fitting residual,
‚àá2Œ∏Remp(Œ∏) =
1
N
N‚àë
i=1
‚àáŒ∏f(xi;Œ∏)‚àáŒ∏f(xi;Œ∏)T +
1
N
N‚àë
i=1
(f(xi)‚àí yi)‚àá2Œ∏f(xi;Œ∏). (7)
5
The first term in the R.H.S. of Eq. (7) is the empirical Fisher information matrix. The corresponding
population version is defined as IŒ∏ = Ex[‚àáŒ∏f‚àáŒ∏fT ]. According to (6), for any x, we have
‚àÇf
‚àÇak
= œÉ(bTk x+ ck),
‚àÇf
‚àÇbk
= aksk(x)x,
‚àÇf
‚àÇck
= aksk(x),
‚àÇf
‚àÇxl
=
K‚àë
k=1
aksk(x)bk,l, (8)
where sk(x) = œÉ‚Ä≤(bTk x+ ck).
To measure the complexity of a hypothesis f , we choose E‚Äñ‚àáxf‚Äñ22 due to its merit of considering
derivatives w.r.t. input x, which reflects the spatial fluctuation of f . According to Eq. (8), we have
E‚Äñ‚àáxf(x)‚Äñ22 =
‚àë
k1,k2
bTk1bk2Ic(k1, k2), (9)
where Ic is the Fisher information matrix w.r.t model parameters c . By Cauchy-Schwarz inequality,
we can obtain the following theorem to relate the complexity of hypothesis with the Fisher information
matrix w.r.t. model parameters, see Supplementary Materials for the proof.
Theorem 1. For any f(x;Œ∏) expressed by a 2-layer network according to Eq. (6), let B =
(b1, . . . , bK) ‚àà Rd√óK , then we have
2E‚Äñ‚àáxf‚Äñ22 ‚â§ ‚ÄñB‚Äñ4F + ‚ÄñIc‚Äñ2F . (10)
The above theorem establishes the relationship between the hypothesis complexity measured by the
norm of expected input gradient and the Fisher information matrix. Additionally, the latter is also
related to the Hessian ofRemp according to (7), thus we have the following characterization of the
landscape ofRemp.
Corollary 1. For any f expressed by a 2-layer network, let CœÉ := ‚ÄñœÉ‚Ä≤‚Ä≤(z)‚Äñ‚àû, then we have
2E‚Äñ‚àáxf(x)‚Äñ2 ‚â§ ‚Äñ‚àá2cRemp‚Äñ2F + ‚ÄñB‚Äñ4F + 2CœÉD
‚àö
Remp +O
(‚àö
Var‚Äñ‚àáxf‚Äñ22/N
)
(11)
where the last term is the Monte Carlo approximation error, D = maxk |ak|‚Äñbk‚Äñ22 and ‚àá2cRemp
denotes the Hessian matrix w.r.t. c.
The upper bound (11) reveals some remarkable properties of the landscape of Remp(Œ∏). We can
ignore the last term, if number of training samples is large enough compared to Var‚Äñ‚àáxf‚Äñ22. For
ReLU networks, CœÉ = 0, so the complexity of a small-norm hypothesis is bounded by the Frobenius
norm of Hessian‚àá2cRemp. For general activation functions, this is true for the hypotheses with small
training error, i.e. Remp small enough.
Without loss of generality, we can add constraint C := {Œ∏ | ‚ÄñB‚Äñ4F + 2maxk |ak|‚Äñbk‚Äñ22 ‚â§ Œ∑}, with
Œ∑ being very small. Since f(x;Œ∏) is invariant to the node-scaling Neyshabur et al. [2015], i.e.
(ak, bk, ck)‚Üí (Œª‚àí1ak, Œªbk, Œªck), this constraint doesn‚Äôt shrink the hypothesis space. It means that
any hypothesis f(x;Œ∏) has at least one corresponding Œ∏‚Ä≤ ‚àà C, such that f(x;Œ∏) = f(x;Œ∏‚Ä≤). For
Œ∏ ‚àà C, the bound (11) implies that low-complexity solutions lie in the areas with small Hessian. This
indicates that low-complexity solutions are located in the flat and large basins of attractor, while the
high-complexity solutions lie in the sharp and small ones. Therefore, a random initialization tends to
produce starting parameters located in the basin of good minima with a high probability, giving rise
to the almost sure convergence to good minima using gradient-based methods.
In practice, we do not explicitly impose the constraint C. What we do is to randomly initialize the
system close to zero, which implicitly results in the optimizer exploring the landscape in the small
vicinity of zero. Within this area, the high-complexity minima generalizing like random guessing
have much smaller attractor basins. Therefore empirically we never observe that optimizers converge
to these bad solutions, even though they do exist in this area.
In Dinh et al. [2017], the authors argued that the property of Hessian cannot be directly applied
to explain generalization. The reason to this argument is that although E‚Äñ‚àáxf‚Äñ22 is invariant to
node-scaling, the Hessian‚àá2Œ∏Remp(Œ∏) not. However, in most cases of neural networks, the learned
solutions are close to zero (i.e. with small norms) due to the near-zero random initialization, and
thus the term ‚ÄñB‚Äñ4F + 2CœÉD
‚àö
Remp in the bound (11) is dominated by the Hessian ‚Äñ‚àá2cRemp‚Äñ2F .
Therefore, it is reasonable to apply the property of the Hessian to explain the generalization ability.
6
Our theoretical analysis sheds light on the difference between the minima that generalize well and bad,
answering the Question 1 raised in Section 1. This part only provides a rough analysis of hypothesis-
dependent generalization for 2-layer neural networks. For deeper networks, more elaborated analysis
is left as future work.
5 Experiments
For deep neural networks, it is difficult to analytically analyze the landscape of Remp(Œ∏), so we
resort to numerical evidence, as shown in this section.
5.1 Construct solutions with diverse generalization performance
To numerically demonstrate the property described in Eq. (5) and the bound (11), we need find a
large number of minima with diverse generalization ability, particularly including the solutions that
perform as nearly random guesses in test set. However, this is not easy if only relying on the training
set, since the random initialization always converges to solutions generalizing well, due to Eq. (5).
To overcome this difficulty, we design an extra attack dataset to ‚Äúfool‚Äù the networks to produce bad
generalization performance.
For each model, we prepare three datasets, Strain,Stest,Sattack, representing the training, test and
attack set, respectively. All the data points on the attack set are intentionally assigned wrong labels.
Then we solve the following optimization problem instead of the original one,
min
Œ∏
Raemp(Œ∏) :=
1
|Strain|
‚àë
x‚ààStrain
`(f(x;Œ∏), y)
Ô∏∏ Ô∏∑Ô∏∑ Ô∏∏
Rtrain(Œ∏)=Remp(Œ∏)
+Œª
1
|Sattack|
‚àë
x‚ààSattack
`(f(x;Œ∏), ywrong)
Ô∏∏ Ô∏∑Ô∏∑ Ô∏∏
Rattack(Œ∏)
. (12)
Because of the high capacity of over-parameterized neural networks, we can obtain various solutions
achievingRaemp(Œ∏‚àó) ‚â§ Œµ, thusRtrain(Œ∏‚àó) ‚â§ Œµ. But due to the attack term, the performance on the
test set is harmed severely. In practice by tuning the hyperparameter Œª and the size of attack set, a
series of solutions ofRtrain(Œ∏) can be found, and their generalization error can be very bad.
5.2 Spectral analysis of Hessian matrices
Since the volume of attractor basin is a global quantity, it is hard to estimate directly. Fortunately, a
large basin often implies that the local valley around the attractor is very flat and vice versa. Similar
ideas were also explored in Hochreiter and Schmidhuber [1997], Chaudhari et al. [2017], Keskar
et al. [2017]. However, their numerical experiments only consider solutions from Agood. We are
investigating the difference between Agood and Abad to understand why optimizers with random
initialization rarely converges to Abad.
3.5 3.0 2.5 2.0 1.5 1.0 0.5 0.0
               Eigenvalue              (√ó 10‚àí3)
0
5
10
15
20
25
30
35
Fr
e
q
u
e
n
cy
{
Œª : Œª< ‚àí 10‚àí5
}
0 2 4 6 8 10 12 14 16 18
               Eigenvalue              (√ó 10‚àí3)
0
10
20
30
40
50
60
70
80
Fr
e
q
u
e
n
cy
{
Œª : Œª> 10‚àí5
}
0 10 20 30 40 50
index
10-4
10-3
10-2
10-1
100
101
102
lo
g(
Œª
)
Top-50 Eigenvalues
92.92%
80.02%
21.04%
Figure 2: (Left, Middle) Eigenvalues distribution of a model with 92% test accuracy; (Right) Top-k eigenvalues
for three solutions, all with training accuracy 100%. The model used here is mLeNet (number of parameter is
3781), and dataset is MNIST. In the experiment, the first 512 training data are selected as our new training set
with the rest of training data as attack set. The model is initialized byN (0, 2/fanin).
Figure 2 shows an example of the spectrum of the Hessian of a small CNN around minima. The follow-
ing observations are not unique to this model, shared across different models and datasets Chaudhari
7
et al. [2017], Sagun et al. [2016]. (1) There are some negative eigenvalues since the optimizer is
terminated before it converges to the strict minima. (2) Most of the eigenvalues concentrate around
zero. In accordance to the work Freeman [2017], the good solutions form a connected manifold
(allowing small energy barrier). We conjecture that, the large amount of zero eigenvalues might imply
that the dimension of this manifold is large, and the eigenvectors of the zero eigenvalues span the
tangent space of the attractor manifold. The eigenvectors of the other large eigenvalues correspond to
the directions away from the attractor manifold. We leave the justification of this conjecture as future
work. (3) The right most plot shows that the bad solutions have much larger eigenvalues than the
good ones. This indicates that the good solutions lie in the wide valley while bad solutions sit in the
narrow one. It is consistent with our analysis on 2-layer networks.
Based on the above analysis of the spectrum of Hessian, it is natural to use the product of top-k
positive eigenvalues to quantify the inverse volume of the attractor. For a given Hessian matrix H
around a solution, we utilize the logarithm of the product of top-k eigenvalues to approximate the
inverse volume of basin of attractor:
V (k) :=
k‚àë
i=1
log(Œªi(H)). (13)
5.3 Numerical evidence for deep neural networks
Small neural networks We train dozens of mLeNets on two datasets, MNIST and SVHN. For
each experiment, the first 512 of training data are used as our new training set, while the other training
data are used as attack set to help generate diverse solutions according to (12). Different optimizers
are adopted to increase the diversity of the solutions.
Large neural networks The ResNet-32 is used to fit CIFAR-10 dataset, where the first 104
samples of training set are selected as our new training data, with the remaining as the attack set. The
performance is evaluated on the whole test set. No regularization or data augmentation is used. This
model has about 0.5 million of parameters, which is much larger than the number of training set, 104.
Due to the prohibitive cost to compute the spectrum of Hessian, we employ a statistical estimate of
the Frobenius norm of Hessian, although not perfect but computationally feasible for large networks.
For any matrix A ‚àà Rq√óp, the Frobenius norm can be estimated by ‚ÄñA‚Äñ2F = Ev‚ÄñAv‚Äñ22, v ‚àº
N (0, I). Therefore in practice, after replacing the matrix-vector product with finite difference, we
have the following estimator:
H(Œ∏) ‚âà 1
2MŒµ2
M‚àë
i=1
‚Äñ‚àáf(Œ∏ + Œµvi)‚àí‚àáf(Œ∏ ‚àí Œµvi)‚Äñ22, (14)
where {vi}Mi=1 are i.i.d random samples drawn from N(0, I). This estimation of the squared
Frobenius norm of Hessian becomes exact when Œµ‚Üí 0 and M ‚Üí +‚àû. In this experiment, we set
M = 100, Œµ = 10‚àí5.
‚àí300 ‚àí250 ‚àí200 ‚àí150 ‚àí100 ‚àí50 0 50 100‚àë50
i=1 log10(Œªi)
10
20
30
40
50
60
70
80
90
100
Te
st
A
cc
ur
ac
y(
%
)
mLeNet for MNIST
‚àí40 ‚àí20 0 20 40 60 80 100 120 140‚àë50
i=1 log10(Œªi)
10
20
30
40
50
60
70
Te
st
A
cc
ur
ac
y(
%
)
mLeNet for SVHN
10‚àí1 100 101 102
estimated Frobenius norm: ‚Äñ‚àá2Remp‚ÄñF
10
20
30
40
50
60
70
80
te
st
ac
cu
ra
cy
(%
)
ResNet-32 for CIFAR10(104)
Figure 3: Test accuracies versus volume of basin (approximated by different quantities). The red bubbles
represent the solutions found by optimizers without the attacking term. All solutions are initialized from
N (0, 2/fanin) and trained to achieve about 100% accuracy on training set.
The numerical results for both small and large networks are shown in Figure 3 to reveal the relationship
between the test accuracy and the inverse volume of basins. We can easily observe that,
‚Ä¢ Good minima are located in very large valley, while bad ones sit in small valley. The
ratio Vol(Bbad)/Vol(Bgood) in Eq. (5) through the estimation by Eq. (13) and (14) can be
8
exponentially small due to the high dimensionality. This evidently supports our findings that
the volume of basin of good minima dominates over those generalizing poorly, leading to
that the optimization methods with random initialization converge to good solutions almost
surely.
‚Ä¢ There exists some variance of the relationship between generalization error and volume of
basins. Also it is almost impossible to use the V (k) in Eq. (13) to distinguish the minima
with equivalent generalization performance. We conjecture that the reason might be that
Hessian-based characterization of the volume of basin is only a rough estimate. A better
non-local quantity is necessary.
6 Conclusion
In this work, we attempt to answer two important questions towards understanding generalization of
deep learning: what is the difference between the minima that generalize well and poorly; and why
training methods converge to good minima with an overwhelming probability. The 2-layer networks
are analyzed to show that the low-complexity solutions have a small norm of Hessian matrix w.r.t.
model parameters. This directly reveals the difference between good and bad minima. We also
investigate this property for deeper neural networks through various numerical experiments, though
theoretical justification is still a challenge. This property of the Hessian implies that the volume of
basin of good minima dominates over that of poor ones, leading to a almost sure convergence to good
solutions, as demonstrated by various empirical results.
References
C. Baldassi, A. Ingrosso, C. Lucibello, L. Saglietti, and R. Zecchina. Subdominant dense clusters
allow for simple learning and high computational performance in neural networks with discrete
synapses. Physical review letters, 115(12):128101, 2015.
C. Baldassi, C. Borgs, J. Chayes, A. Ingrosso, C. Lucibello, L. Saglietti, and R. Zecchina. Unreason-
able effectiveness of learning neural networks: From accessible states and robust ensembles to basic
algorithmic schemes. Proceedings of the National Academy of Sciences, 113(48):E7655‚ÄìE7662,
2016.
P. L. Bartlett and S. Mendelson. Rademacher and gaussian complexities: Risk bounds and structural
results. Journal of Machine Learning Research, 3(Nov):463‚Äì482, 2002.
P. Chaudhari, A. Choromanska, S. Soatto, and Y. LeCun. Entropy-sgd: Biasing gradient descent into
wide valleys. In International Conference on Learning Representations (ICLR), 2017.
L. Dinh, R. Pascanu, S. Bengio, and Y. Bengio. Sharp minima can generalize for deep nets. arXiv
preprint arXiv:1703.04933, 2017.
J. Freeman, C. D.and Bruna. Topology and geometry of half-rectified network optimization. In
International Conference on Learning Representations (ICLR), 2017.
M. Hardt, B. Recht, and Y. Singer. Train faster, generalize better: Stability of stochastic gradient
descent. In Proceedings of The 33rd International Conference on Machine Learning, pages
1225‚Äì1234, 2016.
K. M. He, X. Y. Zhang, S. Q. Ren, and J. Sun. Delving deep into rectifiers: Surpassing human-level
performance on imagenet classification. In Proceedings of the IEEE international conference on
computer vision, pages 1026‚Äì1034, 2015.
M. W. Hirsch, S. Smale, and R. L. Devaney. Differential equations, dynamical systems, and an
introduction to chaos. Academic press, 2012.
S. Hochreiter and J. Schmidhuber. Flat minima. Neural Computation, 9(1):1‚Äì42, 1997.
S. Hochreiter, J. Schmidhuber, et al. Simplifying neural nets by discovering flat minima. Advances in
Neural Information Processing Systems, pages 529‚Äì536, 1995.
9
N. S. Keskar, D. Mudigere, J. Nocedal, M. Smelyanskiy, and P. T. P. Tang. On large-batch training for
deep learning: Generalization gap and sharp minima. In In International Conference on Learning
Representations (ICLR), 2017.
Y. LeCun, Y. Bengio, and G. Hinton. Deep learning. Nature, 521(7553):436‚Äì444, 2015.
M. Lin, Q. Chen, and S. Yan. Network in network. arXiv preprint arXiv:1312.4400, 2013.
I. J. Myung. The importance of complexity in model selection. Journal of mathematical psychology,
44(1):190‚Äì204, 2000.
B. Neyshabur, R. R. Salakhutdinov, and N. Srebro. Path-sgd: Path-normalized optimization in deep
neural networks. In Advances in Neural Information Processing Systems, pages 2422‚Äì2430, 2015.
J. Rissanen. Information and complexity in statistical modeling. Springer Science & Business Media,
2007.
L. Sagun, L. Bottou, and Y. LeCun. Singularity of the hessian in deep learning. arXiv preprint
arXiv:1611.07476, 2016.
S. Shalev-Shwartz and S. Ben-David. Understanding machine learning: From theory to algorithms.
Cambridge university press, 2014.
V. N. Vapnik and V. Vapnik. Statistical learning theory, volume 1. Wiley New York, 1998.
N. Y. Ye, Z. X. Zhu, and R. K. Mantiuk. Langevin dynamics with continuous tempering for high-
dimensional non-convex optimization. arXiv preprint arXiv:1703.04379, 2017.
C. Zhang, S. Bengio, M. Hardt, B. Recht, and O. Vinyals. Understanding deep learning requires
rethinking generalization. In In International Conference on Learning Representations, 2017.
Supplementary Materials
Appendix A. Model details
This following list gives the details of the model used in this paper:
LeNet Standard model.
mLeNet A modified LeNet. This model is usually used to compute the Hessian. Since we need
to compute a large number of Hessian matrices, the last fully connected layer of LeNet is
replaced by a convolutional layer plus a global average pooling layer. The number of model
parameter is 3781.
sNIN A small network in network model. This model is used to conduct the full batch gradient
descent experiments. Because of the limited GPU memory, the feature numbers of three
block of NIN is set to (20, 30, 20).
ResNet-18/ResNet-32 Standard model (batch normalization is used).
Appendix B: landscape of convex model
For many shallow models, such as basis function modeling and kernel methods, the good and bad
solutions are not distinguishable if only relying on the information of empirical riskRemp(Œ∏). For
instance, considering the following model,
Remp(Œ∏) =
1
N
N‚àë
i=1
`
(
Œ∏TœÜ(xi), yi
)
,
where Œ∏ ‚àà Rd, d > N , œÜ(x) is the feature map. The second-order derivatives can be written as
‚àá2Œ∏Remp =
1
N
N‚àë
i=1
‚àÇ2yÃÇi`(yÃÇi, yi)œÜ(xi)œÜ(xi)
T , yÃÇi = Œ∏
TœÜ(xi)
10
For most loss functions used in practice, ‚àÇ2yÃÇ`(yÃÇ, y) is a constant at yÃÇ = y, e.g. L2 loss, hinge loss,
etc. It implies that around the global minima Œ∏‚àó, the loss surface has both the same first-order and
second-order information, i.e. ‚àáŒ∏Remp = 0 and ‚àá2Œ∏Remp = constant. This directly leads to that
optimizers themselves are unable to find the solution generalizing better due to the indistinguishability
between different global minima. Thus, in order to steer the optimizers to find the low-complexity
solutions, the only way is to introduce some proper regularization to shrink the hypothesis space.
Different from other models, the loss surface of deep neural networks owns the minima that are
distinguishable with each other, see detailed analysis in Section 3.2 and 4. The possibility stems from
the non-convexity of neural networks, which make it possible to seperate the good and bad solutions
into different valleys, distinguished via the information ofRemp.
Appendeix C: Theoretical result proof details
Proof of theorem 1
Because ‚àÇf‚àÇxl =
‚àëK
k=1 aksk(x)bk,l and
‚àÇf
‚àÇck
= aksk(x), so
E‚Äñ‚àáxf(x)‚Äñ2 =
‚à´
œÅ(dx)
‚àë
l
‚àë
k1,k2
ak1ak1bk1,lbk2,lsk1(x)sk2(x)
=
‚à´
œÅ(dx)
‚àë
k1,k2
ak1ak1b
T
k1bk2sk1(x)sk2(x)
=
‚àë
k1,k2
bTk1bk2E
[
‚àÇf
‚àÇck1
‚àÇf
‚àÇck2
]
=
‚àë
k1,k2
bTk1bk2Ic(k1, k2)
(15)
Thus
E‚Äñ‚àáxf(x)‚Äñ2 ‚â§
1
2
‚àë
k1,k2
(
bTk1bk2
)2
+
1
2
I2c (k1, k2)
‚â§ 1
2
‚àë
k1,k2
‚Äñbk1‚Äñ2‚Äñbk2‚Äñ2 +
1
2
‚àë
k1,k2
I2c (k1, k2)
=
1
2
(‚àë
k
‚Äñbk‚Äñ22
)2
+
1
2
‚ÄñIc‚Äñ2F
(16)
Proof of corollary 1
According to central limit theorem, we have
E‚Äñ‚àáxf(x)‚Äñ2 =
‚àë
k1,k2
bTk1bk2Ic(k1, k2)
‚âà
‚àë
k1,k2
bTk1bk2I
N
c (k1, k2) +O
(‚àö
Var‚Äñ‚àáxf‚Äñ22
N
)
=
‚àë
k1,k2
bTk1bk2
(
‚àÇ2Remp
‚àÇck1‚àÇck2
‚àí 1
N
N‚àë
i=1
(f(xi)‚àí yi)
‚àÇ2f
‚àÇck1‚àÇck2
)
+O
(‚àö
Var‚Äñ‚àáxf‚Äñ22
N
)
.
(17)
11
Since ‚àÇ
2f
‚àÇck1‚àÇck2
= Œ¥k1,k2œÉ
‚Ä≤‚Ä≤(bTk1x+ ck1), we have
E‚Äñ‚àáxf(x)‚Äñ2 ‚â§
1
2
(‚àë
k
‚Äñbk‚Äñ22
)2
+
1
2
‚Äñ‚àácRemp‚Äñ2F
‚àí 1
N
‚àë
k1,k2,i
(f(xi)‚àí yi)bTk1bk2Œ¥k1,k2ak1œÉ‚Ä≤‚Ä≤(bTk1xi + c)
Ô∏∏ Ô∏∑Ô∏∑ Ô∏∏
Q
+O
(‚àö
Var‚Äñ‚àáxf‚Äñ22
N
)
.
(18)
Next we assume the second-order derivative of activation function is bounded, i.e. CœÉ := ‚ÄñœÉ‚Ä≤‚Ä≤(x)‚Äñ‚àû
is finite. This assumption is satisfied by commonly-used activation functions, like sigmoid, tanh and
ReLU, etc. Especially for ReLU, CœÉ = 0. So we have,
Q =
1
N
‚àë
k
(f(xi)‚àí yi) ‚Äñbk‚Äñ2akœÉ‚Ä≤‚Ä≤(bTk x+ ck)
‚â§ 1
N
‚àë
k
|f(xi)‚àí yi|‚Äñbk‚Äñ2akCœÉ
‚â§ CœÉD
‚àö
Remp
(19)
where D = maxk |‚Äñbk‚Äñ2ak|. Combining Eq. 18 and Eq. 19, we obtain the following characterization
ofRemp,
2E‚Äñ‚àáxf(x)‚Äñ2 ‚â§ ‚Äñ‚àá2cRemp‚Äñ2F + ‚ÄñB‚Äñ4F + 2CœÉD
‚àö
Remp +O
(‚àö
Var‚Äñ‚àáxf‚Äñ22/N
)
. (20)
12

