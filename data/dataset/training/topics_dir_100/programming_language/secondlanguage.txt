Learning & Leading with Technology  Volume 32   Number 4 
Learning Connections
Student Voices & Computer Science
34
Understanding the concepts and development 
of programming can benefi t students by demand-
ing precision of thought and requiring students 
to clarify and improve on their problem-solving 
process. The goal of beginning programming 
instruction should be to introduce the subject 
in terms familiar to students.
By Justin Solomon
Subject: Computer science, foreign
language
Grades: K–12 (Ages 5–18)
Technology: Programming
Standards: NETS•S 1, 3; NETS•T II; 
NETS•A I (http://www.iste.org/stan-
dards/)
Programming as a 
Second Language
Copyright © 2004, ISTE (International Society for Technology in Education), 1.800.336.5191 (U.S. & Canada) or 1.541.302.3777 (Int’l), iste@iste.org, www.iste.org. All rights reserved.
December/January  2004–05  Learning & Leading with Technology 35
Standard methods of teaching an introductory course in comput-er science, designed to intro-
duce computer programming as a tool 
for mathematicians and engineers at 
the university level, are unnecessarily 
complicated and diffi  cult. Th ey lack a 
common thread that unifi es each unit 
of material and frequently make use 
of mathematical notation, technical 
keywords, and other terms or symbols 
unfamiliar to the average middle or 
high school student. Furthermore, 
they tend to focus on a single more 
advanced language, leading students 
to believe that each programming 
language is a distinct and separate 
entity with a tenuous—at best—
link to other languages. Ironically, 
traditional high school-level computer 
science classes are often driven by the 
Advanced Placement (AP) curriculum 
dictated by the College Board, which 
establishes a narrow set of bench-
marks for evaluating profi ciency in 
computer programming. According 
to research done by Allen Tucker, 
these benchmarks promote memori-
zation over understanding and are of 
limited practical use to the average 
student. (Editor’s note: Find this and 
other Resources on p. 39.) As a result, 
students view programming as more 
of a snapshot than a continuum, 
failing to see the value in pursuing 
a higher level of programming and 
computer applications profi ciency.
To meet the educational require-
ments of a wider and increasingly 
younger audience, computer pro-
gramming instruction needs a com-
prehensive overhaul, with the goal of 
fi tting into school-based curricula as 
a “second language,” starting as early 
as the elementary years. To begin the 
process of revising basic computer 
science curriculum, the goal of begin-
ning programming instruction should 
be to introduce the subject in terms 
more familiar to the average student. 
With simple adjustments to methods 
of programming instruction, students 
could be shown that linguistic terms, 
such as specifi c parts of speech or ele-
ments of grammar, can be common 
denominators in computer program-
ming. Using spoken and written 
language as a metaphor for program-
ming can show commonalities and 
diff erences across programming lan-
guages, the correlation among these 
diff erences, and the repetitive patterns 
of the correlations. In addition, this 
concept can be adapted to reduce the 
intimidation factor of introductory 
programming, making it accessible 
to students from all backgrounds, 
ages, and genders. With this model, 
introductory courses in computer 
programming are more likely to 
provide a solid basis for students in 
all algorithmic thought, as well as 
a foundation for progress to related 
applications and extensions, possibly 
including more advanced languages 
with specifi c advantages and particu-
lar uses.
According to research conducted 
by Letitia Naigles, students intro-
duced to foreign language at a young 
age fi nd it easier to acquire profi cien-
cy in that language. Th e same holds 
true for computer programming. 
Although programming has become 
an important subject for high school 
students to learn, there is no reason 
it cannot be introduced earlier. As a 
discipline, it provides students with 
a unique way of thinking based on 
logic and reasoning. A rudimentary 
understanding of the concepts and 
development of programming can 
benefi t students by introducing them 
to such topics as stepwise refi nement 
and the use of documentation. It 
demands precision of thought and 
requires students to clarify and im-
prove on their problem-solving 
process. Programming has applica-
tions in almost any fi eld, from lan-
Student Voices & Computer Science
Copyright © 2004, ISTE (International Society for Technology in Education), 1.800.336.5191 (U.S. & Canada) or 1.541.302.3777 (Int’l), iste@iste.org, www.iste.org. All rights reserved.
Student Voices & Computer Science
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
Learning & Leading with Technology  Volume 32   Number 436
his or her needs and desires. Unsur-
prisingly, the vocabulary and struc-
tures used to form these demands 
are usually quite direct, as most 
toddlers do not have a deep under-
standing of complex grammatical 
structures.
Programs written by novice com-
puter science students follow the 
same pattern. Beginners fi nd it hard 
to accept that certain statements are 
necessary without understanding their 
purpose. For example, consider the 
following program written in Java, a 
fairly complex programming language 
popular for introductory classes in 
computer science:
import javax.swing.
JOptionPane;
public class SimpleProgram 
{
  public static void 
main(String a[]) {
    String answer;
    answer = JOptionPane.s
howInputDialog(“What is the 
password?”);
    if (Integer.parseInt(a
nswer) == 123)
      JOptionPane.showMess
ageDialog(null, “Correct”);
    else
      JOptionPane.sh
owMessageDialog(null, 
“Incorrect”);
  }
}
Th is code is hardly readable. Most 
beginning programmers do not know 
how or why methods are declared, 
yet alone what it means to call them 
public, static, and void. Also, a single 
typo in this and most other Java pro-
grams could result in any number 
of cryptic errors, from the simple 
unclosed string literal to the terrify-
ing thread death exception. In fact, 
running the above program with the 
input “wrongPassword” will make it 
stop running and output the follow-
ing error message:
guage arts and design to architecture, 
and could be viewed as the basis for 
any type of computer use. Even the 
most fundamental knowledge of 
programming can prove helpful to 
students working on multimedia 
presentations, classroom projects, 
spreadsheets, word processing, or 
data aggregation.
Unfortunately, the somewhat ar-
chaic model for lessons in program-
ming tends to target older, higher-
level students who already understand 
the abstractions and jargon used by 
computer technicians. Th is frequently 
leads to discouragement and failure 
among younger students who might 
otherwise benefi t from knowledge of 
computer programming. Chris Ste-
phenson’s recent survey of high school 
computer science teachers reported 
that many of the schools that do not 
off er computer science instruction 
decided that it was a fi eld best left to 
colleges and universities due to “aca-
demic rigor.” Th is notion is unfound-
ed. Many students in both elementary 
and middle school are profi cient in 
programming, even though they do 
not have the traditional technical or 
mathematical backgrounds.
According to Peter Van Roy’s basic 
constructivist model of education, 
students who study computer sci-
ence as an extension of what they 
already know tend to gain a deeper 
understanding of the subject material. 
Also, Nicola Henze and Wolfgang 
Nejdl found that students who learn 
answers by rote are less likely to un-
derstand or apply them. For these 
reasons, a common-sense model of 
computer science education would 
use something any student can un-
derstand: language. One must learn 
the basic constructs of a language and 
how to manipulate them to be profi -
cient in any language, be it designed 
for communication among comput-
ers or humans. If a computer science 
curriculum encouraged students to 
make connections between computer 
languages and the languages they 
speak, students would have greater 
ease in remembering how to code as 
well as fewer syntax errors. Drawing 
connections between program syntax 
and punctuation, between language 
structure and grammar, students can 
recognize programming problems in 
their everyday lives, making abstract 
topics much more concrete. Th ey will 
have the ability to take an algorithmic 
and logical approach to problem-solv-
ing both inside and outside the tech-
nical realm.
After they make these connections, 
students will be able to communicate 
in the language of the computer how 
problems can be solved in the most 
effi  cient way possible. Programming 
will be much easier to understand 
and it will become less problematic 
to retain the large amounts of knowl-
edge needed to write useful programs. 
Integrated into other classroom work, 
computer programming can be a use-
ful, creative, and thoroughly enter-
taining second language for students 
at all levels.
First Words
According to the American Speech-
Language-Hearing Association, after 
simple nouns, the fi rst words typi-
cally used by infants are commands. 
Straightforward and largely uncom-
plicated, these commands are just 
enough for a young child to convey 
Copyright © 2004, ISTE (International Society for Technology in Education), 1.800.336.5191 (U.S. & Canada) or 1.541.302.3777 (Int’l), iste@iste.org, www.iste.org. All rights reserved.
Student Voices & Computer Science
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
 December/January  2004–05  Learning & Leading with Technology 37
Exception in thread “main” 
java.lang.NumberFormatExce
ption: wrongPassword
  at java.lang.Integer.par
seInt(Integer.java:426)
  at java.lang.Integer.par
seInt(Integer.java:476)
  at SimpleProgram.main(Si
mpleProgram.java:7)
Almost every type of simple error 
comes with its own confusing name 
and “exception.” Forced to explain 
such obscure packages and “features,” 
Java reference manuals are often 
dauntingly long for the average stu-
dent. Many times these errors are so 
long they scroll off  the console or out-
put window. Now observe a similar 
program in BASIC:
PRINT “What is the 
password?”
INPUT password
IF password = 123 PRINT 
“Correct”
ELSE PRINT “Incorrect”
or its counterpart on a TI-83 
calculator:
PROGRAM: PASSWORD
ClrHome
Disp “PASSWORD?”
Input P
If (P=123)
Disp “CORRECT”
If (P≠123)
Disp “INCORRECT”
Th ese programs have one-third to 
one-half the number of lines of their 
counterpart in Java and are much 
easier to read and to write. Th ey look 
closer to a set of directions given 
from one person to another so that 
they could be read from top to bot-
tom without much interpretation. 
Also, every command has a clear pur-
pose, making the debugging process 
straightforward. No “keywords” are 
required to precede certain state-
ments, and the programmer does 
not need to surround blocks of code 
with any type of bracket or brace. Ev-
erything runs from the beginning to 
the end, one line at a time. Th e im-
mediate feedback provided by writing 
short programs and observing their 
output helps students recognize the 
importance of every set of program-
ming skills in the context of their 
own computer needs. Th is prevents 
students from memorizing code seg-
ments without understanding how 
they can be used.
Diff erences in readability alone are 
enough to make a compelling argu-
ment for the use of simple interpreted 
languages by beginners. Several such 
interpreters are freely available or for 
a small price on the Internet. Th ese 
languages, including any member of 
the BASIC family, make it easy for 
programmers to focus on the diff er-
ent structures, commands, and algo-
rithms without concerning themselves 
over the form or style of their pro-
grams. Th ey encourage the develop-
ment of good programming style and 
are similar to the pseudocode used in 
more advanced textbooks. Also, Mar-
celo Zanconi and his colleagues found 
that the use of simple programming 
languages encourages teaching the 
programming process instead of the 
features and peculiarities of a particu-
lar language.
Once students have learned basic 
syntax rules, they should be able to 
read their programs like normal text. 
An eff ective exercise would be to pre-
dict the output of programs before 
running them and to “translate” pro-
grams from computer language to ev-
eryday language and back. Th is type 
of work emphasizes the relationship 
between programming and real-life 
situations. It also will encourage the 
student to recognize the “punctua-
tion” of coding, and that there are 
several elements that make a program 
acceptable to the computer but still 
readable by humans.
Recognizing Verbs and 
Other Useful Parts of Speech
Th e necessity for more complex com-
munication drives children to con-
struct longer sentences by stringing 
more meaningful words together. De-
spite their utility, commands alone do 
not convey action, provide a name or 
label, or describe anything in detail. 
Th us, new language-based constructs 
include at least a subject and a verb, 
and often incorporate modifi ers and 
adjectives.
Th ese terms transfer directly to 
basic structured programming tech-
niques using subroutines and func-
tions. A subroutine is like a pronoun. 
Subroutines represent segments of 
code that can be reused to perform 
the same calculations or output every 
time they are called. Th ey encourage 
new programmers to avoid cutting 
and pasting similar blocks of code for 
a more sophisticated model. Similarly, 
pronouns are used to shorten the 
names of their antecedents. Pronouns 
could be replaced with the noun they 
represent without changing the mean-
ing of their context. In the same way, 
Copyright © 2004, ISTE (International Society for Technology in Education), 1.800.336.5191 (U.S. & Canada) or 1.541.302.3777 (Int’l), iste@iste.org, www.iste.org. All rights reserved.
Student Voices & Computer Science
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
Learning & Leading with Technology  Volume 32   Number 438
Recognizing Nouns
Th e next structure covered in most 
computer science classes is the object. 
Objects are abstract representations 
of all the functions, subroutines, and 
data related to a specifi c item or con-
cept. Th is model requires program-
mers to group their functions and 
data members by purpose. OOP 
has become widely popular in recent 
years and has led to many diffi  cult 
lesson plans. In fact, it has even been 
cited as a top reason why students 
drop their programming courses. 
Other than the traditional “black 
box” lesson about objects and classes, 
there are hardly any resources avail-
able to help teach this particularly 
abstract topic.
OOP, however, could be viewed as 
a programming methodology that fo-
cuses on nouns rather than on verbs. 
To relate objects to nouns, students 
could list all of the actions, informa-
tion, and manipulations associated 
with a certain noun. Th en, they could 
combine their prior knowledge of 
programming techniques and simple 
algorithms with a short lesson on the 
syntax of objects and classes to actual-
ly implement a program that, on the 
most basic level, acts like the noun 
they chose. From there, students can 
work on progressively more diffi  cult 
problems, each focusing on the fact 
that an object should be made for 
every prominent noun in the program 
description. Soon, they will be able 
to apply object-oriented design to ap-
plicable programming situations and 
to understand the concepts of and 
reasons for encapsulation.
At this point, more advanced con-
cepts of OOP such as inheritance, 
polymorphism, and abstraction can 
be introduced individually by relating 
them to linguistics. Inheritance deals 
with the classifi cation of nouns and 
their related verbs. As specifi c nouns 
are grouped together, they will form 
categories, which can be represented 
by abstract objects. For instance, “tri-
angle,” “square,” and “pentagon” could 
be classifi ed under the more abstract 
noun “shapes.” Such simple relation-
ships show naturally the need for such 
complex models as polymorphism, 
which deals with treating all child 
classes the same by using the member 
functions common to all of them. For 
shapes, functions that calculate area 
and perimeter could be called without 
knowing which specifi c shape the 
computer was referencing.
Communicating Ideas
No language is useful unless it can 
be used to communicate ideas. After 
all, it is not the individual words that 
give a sentence or paragraph its mean-
ing, but rather the specifi c sequence 
of words used. Likewise, learning the 
syntax of a programming language is 
useless unless it can be applied to the 
creation of useful, or at least enter-
taining, programs.
Th ere are several ways to approach 
the problem of creating sample situ-
ations that could be solved using a 
computer program. Regardless of the 
every time a subroutine is called it has 
the same “meaning” to the computer 
and produces exactly the same action.
Functions, on the other hand, are 
more like verbs. Functions, called 
methods in Java, take one or more 
parameters and somehow manipulate 
them to eventually return a single val-
ue. Similarly, the subject of a sentence 
aff ects or changes the object through 
the verb. Functions change their use 
and meaning depending on their pa-
rameters and can be used repeatedly 
in the context of a single program. 
Verbs also change meaning depending 
on the context of the sentence.
After students have a complete 
understanding of the programming 
“sentence structure” and control over 
simple data structures, it may be time 
for them to move to a more powerful 
language that supports such para-
digms as object-oriented program-
ming (OOP) and templates. Because 
they have already studied constructs 
used in almost any language such as 
branching and looping, it should not 
be hard to transfer their skills. Now it 
should be more obvious, for instance, 
why the main() function exists in C++ 
or why most Lisp programs start with 
several function defi nitions.
Perhaps the best way to introduce 
students to new languages is to have 
them write the same program in the 
language with which they are already 
familiar and in the new language. As 
a result, they will notice that diff er-
ent programming languages are used 
to express the same idea in diff erent 
ways. Also, they should compare the 
features of the two languages and hy-
pothesize when it might be advanta-
geous to use one rather than the oth-
er. As students will soon discover, the 
linguistics of most commonly used 
programming languages are related.
Reach for the Stars of education! Advertise in L&L. 
Contact Danielle Steele-Larson or visit http://www.iste.org/ll/about/ 
to fi nd details on advertising in ISTE’s fl agship publication.
Copyright © 2004, ISTE (International Society for Technology in Education), 1.800.336.5191 (U.S. & Canada) or 1.541.302.3777 (Int’l), iste@iste.org, www.iste.org. All rights reserved.
Student Voices & Computer Science
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
1000 100010011
size or type of problem, however, the 
following principles will hold true:
• Although a problem can be de-
signed to require the implemen-
tation of a certain algorithm or 
structure, the teacher should allow 
his or her students to discover this 
on their own and to explore their 
own ideas. No requirements can 
be made that a program should 
be written a certain way, although 
a runtime or memory-size limit 
could be enforced. By encouraging 
students to analyze the benefi ts and 
costs of implementing specifi c algo-
rithms or solutions, they will fi nd 
out why longer programs or more 
complex solutions can lead to expo-
nentially faster programs.
• Allow students to work together, 
but make sure that they all contrib-
ute to the programming process. 
Th is way, they will all gain pro-
gramming experience. Student 
collaboration is crucial in encour-
aging understanding when teach-
ers have exhausted the traditional 
means of instruction. Group proj-
ects are especially important in 
OOP, where each member can be 
responsible for a single component 
of a larger program.
• Try to assign programs in order 
of their level of abstraction. Begin 
with programs that have an obvious 
implementation and then move on 
to applications of the specifi c struc-
ture or algorithm and combine with 
previous lessons. Traditional lesson 
plans that could benefi t from this 
process would be ones that involve 
simple algorithms such as search-
ing, sorting, and fi le manipulation.
Th ese concepts are important not 
only in connecting the programming 
world with the real world but also in 
honing students’ generalized problem-
solving skills. Th ere are several diff er-
ent ways to word a sentence, and it is 
important that one can understand 
any type of sentence structure. Simi-
larly, teamwork introduces students 
to the diff erent ways in which people 
approach programming problems and 
the various styles of writing code. Th e 
student should begin to recognize the 
most effi  cient structures and make use 
of them when needed. Teamwork will 
introduce students to careers related 
to computer science, where a whole 
team can work together to write one 
software product.
Achieving Fluency
With some practice, most students 
can gain the skills needed to be 
profi cient in a useful programming 
language. Learning any language is 
diffi  cult. It takes practice, study, and 
the ability to apply several layers of 
abstraction to a concrete problem. A 
good lesson plan that relates code to 
everyday life situations can make the 
experience much easier. Learning to 
code is a very rewarding process that 
will provide the student with skills 
he or she can use for life. If started 
early enough in a student’s academic 
career and taken out of the context 
of achieving a higher score on a stan-
dardized exam such as the AP test, 
programming can become as natural 
as bilingual fl uency earned through 
the study of a second language.
Resources
American Speech-Language-Hearing Associa-
tion. (1997–2004). How does your child 
hear and talk? [Online document]. Avail-
able: http://www.asha.org/public/speech/
development/child_hear_talk.htm.
Henze, N., & Nejdl, W. (1998). Constructiv-
ism in computer science education: Evalu-
ating a teleteaching environment for proj-
ect oriented learning. Interactive Computer 
Aided Learning Concepts and Applications.
 Proceedings of the ICL 98 Workshop, Carin-
thian Institute of Technology, Villach, Austria, 
October 1998. Available: http://citeseer.
ist.psu.edu/henze98constructivism.html
Naigles, L. R. (2002). Form is easy, meaning 
is hard: Resolving a paradox in early child 
language. Cognition, 86, 157–199.
Stephenson, C. (2002). High school computer 
science education: A fi ve-state study. JCSE 
Online. Available: http://www.iste.org/
sigcs/community/jcseonline/2002/02/ste-
phenson.cfm.
Tucker, A. (1996). Strategic directions in 
computer science education. ACM 
Computing Surveys, 28(4), 836–845.
Van Roy, P., (2003). Th e role of language 
paradigms in teaching programming. 
Technical Symposium on Computer 
Science Education, 34, 269–270.
Zanconi, M., Moroni, N., & Señas, P. (1995). 
An educational project in computer 
science for primary and high school. 
SigCSE Bulletin, 27, 27–33.
Justin Solomon is a 17-year-
old junior at Th omas Jeff erson 
High School for Science and 
Technology in Alexandria, 
Virginia. He began program-
ming after the third grade 
and is currently studying arti-
fi cial intelligence and computer graphics. Justin 
recently won fi rst place in the Fairfax County 
Regional and Virginia State Science and Engi-
neering Fairs for computer science. He would like 
to thank Joshua Strong, Karen Budd, Elizabeth 
Lodal, Anita McAnear, and Philip East for their 
assistance in the development of this project.
 December/January  2004–05  Learning & Leading with Technology 39
Copyright © 2004, ISTE (International Society for Technology in Education), 1.800.336.5191 (U.S. & Canada) or 1.541.302.3777 (Int’l), iste@iste.org, www.iste.org. All rights reserved.

