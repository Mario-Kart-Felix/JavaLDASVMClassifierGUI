Chapter 2
Mathematical Optimization Techniques
Objectives The objectives of this chapter are:
• Explaining some optimization techniques.
• Explaining the minimum norm theorem and how it could be used as an optimi-
zation algorithm, where a set of equations can be obtained.
• Introducing the fuzzy system as an optimization technique.
• Introducing the simulated annealing algorithm (SAA) as an optimization
technique.
• Introducing the tabu search algorithm (TSA) as an optimization technique.
• Introducing the genetic algorithm (GA) as an optimization technique.
• Introducing the particle swarm (PS) as an optimization technique.
2.1 Introduction
Growing interest in the application of Artificial Intelligence (AI) techniques to
power system engineering has introduced the potential of using this state-of-the-art
technology. AI techniques, unlike strict mathematical methods, have the apparent
ability to adapt to nonlinearities and discontinuities commonly found in power
systems. The best-known algorithms in this class include evolution programming,
genetic algorithms, simulated annealing, tabu search, and neural networks.
In the last three decades many optimization techniques have been invented and
successfully applied to the operation and control of electric power systems.
This chapter introduces the mathematical background behind the algorithms used
in this book, without going deeply into themathematical proofs of these algorithms, to
help the reader understand the application of these algorithms. Different examples are
offered, where they are needed, to help the reader understand a specific optimization
algorithm.
S.A. Soliman and A.H. Mantawy, Modern Optimization Techniques
with Applications in Electric Power Systems, Energy Systems,
DOI 10.1007/978-1-4614-1752-1_2, # Springer Science+Business Media, LLC 2012
23
2.2 Quadratic Forms [1]
An algebraic expression of the form
fðx;yÞ ¼ ax2 þ bxyþ cy2
is said to be a quadratic form. If we let
X ¼ x
y
" #
Then we obtain
fðx;yÞ ¼ x y½ 
a b
2
b
2
c
" #
x
y
" #
; or
fðXÞ ¼ XTAX
The above equation is in quadratic form. The matrix A in this form is a symmet-
rical matrix.
A more general form for the quadratic function can be written in matrix form as
FðXÞ ¼ XTAX þ BTX þ C
where X is an n  1 vector, A is an n  n matrix, B is an n  1 vector, and C is a
1  1 vector.
Example (2.1)
Given the function
fðx;yÞ ¼ 2x2 þ 4xy y2 ¼ 0
it is necessary to write this function in a quadratic form.
Define the vector
X ¼ x
y
" #
Then
fðx;yÞ ¼ x y½ 
2 2
2 1
 
x
y
" #
FðxÞ ¼ XTAX
24 2 Mathematical Optimization Techniques
where
A ¼ 2 2
2 2
 
Example (2.2)
Obtain the quadratic form for the function
fðx1;x2Þ ¼ 3x21 þ 4x1x2  4x22
Define the vector X as
X ¼ x1 x2½ T
Then
f x1;x2ð Þ ¼ x1 x2½ T
3 2
2 4
 
x1
x2
" #
Then
fðXÞ ¼ XTAX
where
A ¼ 3 2
2 4
 
Let A be an n  n matrix and let X be an n  1 vector. Then, irrespective of
whether A is symmetric:
XTAX ¼
Xn
i¼1
Xn
j¼1
xiaijxj
¼
Xn
i¼1
Xn
j¼1
xiajixj
• An n  n matrix A is positive definite if and only if
XTAX>0 8X 2 Rn;X 6¼ 0ð Þ
• and is positive semidefinite if and only if
XTAX 0 8X 2 Rnð Þ
2.2 Quadratic Forms 25
• Similarly, A is negative definite if, and only if,
XTAX<0 8X 2 Rn;X 6¼ 0ð Þ
• and A is negative semidefinite if and only if
XTAX 0 8X 2 Rnð Þ
2.3 Some Static Optimization Techniques [1–10]
In this section we discuss the general optimization problem without going into
details of mathematical analysis. The first part of the section introduces uncon-
strained optimization, which has many applications throughout this book, and the
second part introduces the constrained optimization problem. Generally speaking,
the optimization problem has the form
Minimize
f x1; . . . ; xnð Þ
(2.1)
Subject to
fi x1; . . . ; xnð Þ ¼ 0; i ¼ 1; . . . ; ‘ð Þ
(2.2)
Cj x1; . . . ; xnð Þ 0; j ¼ 1; . . . ;mð Þ (2.3)
Equation 2.2 represents ‘, ‘ < n, equality constraints, whereas Eq. 2.3 represents
m inequality constraints. By using vector notation, we may express the general
constrained optimization problem as follows.
Minimize
f ðXÞ (2.4)
Subject to
fðXÞ ¼ 0 (2.5)
CðXÞ 0;X 2 Rn (2.6)
The problem formulated in Eqs. 2.4, 2.5, and 2.6 is usually referred to as the
general nonlinear programming problem. Any point X that satisfies these equations
is called a feasible point.
26 2 Mathematical Optimization Techniques
2.3.1 Unconstrained Optimization
The calculus of variations is concerned with the determination of extrema (maxima
and minima) or stationary values of functionals. A functional can be defined as a
function of several other functions. The calculus of variations is a powerful method
for the solution of problems in optimal economic operation of power systems. In
this section we introduce the subject of variational calculus through a derivation of
the Euler equations and associated transversality conditions.
In the unconstrained optimization problem, we need to find the value of the vector
X ¼ [x1, . . ., xn]T that minimizes the function
f x1; . . . ; xnð Þ (2.7)
provided that the function f is continuous and has a first-order derivative.
To obtain the minimum and/or maximum of the function f we set its first
derivative with respect to x to zero
@f x1; . . . ; xnð Þ
@x1
¼ 0 (2.8)
@f x1; . . . ; xnð Þ
@x2
¼ 0 (2.9)
..
.
@f x1; . . . ; xnð Þ
@x1
¼ 0 (2.10)
Equations 2.8, 2.9, and 2.10 represent n equations in n unknowns. The solution
of these equations produces candidate solution points. If the function f has second
partial derivatives, then we calculate the Hessian matrix,
H ¼ @
2f x1; . . . ; xnð Þ
@x2i
:
If the matrix H is positive definite, then the function f is a minimum at the
candidate points, but if the matrix H is negative definite then f is a maximum at the
candidate points. The following examples illustrate these steps.
Example (2.3)
Minimize
f ðx1; x2Þ ¼ x21 þ x1x2 þ x22 x 2 R2
 
To obtain the candidate solution points, we have
2.3 Some Static Optimization Techniques 27
@f x1; x2ð Þ
@x1
¼ 2x1 þ x2 ¼ 0
and
@f x1; x2ð Þ
@x2
¼ x1 þ 2x2 ¼ 0
Solving the above equations yields the candidate solution point as
x1; x

2
 T ¼ 0; 0½ T
Next, we calculate the Hessian matrix using
H ¼
@2f
@x21
@2f
@x1@x2
@2f
@x2@x1
@2f
@x22
2
664
3
775
to obtain
H ¼ 2 1
1 2
 
so
XTHX ¼ x1 x2½ 
2 1
1 2
 
x1
x2
" #
¼ 2 x21 þ x1x2 þ x22
 
¼ 2 x1 þ 1
2
x2
 	2
þ 3
4
x22
( )
Therefore
XTHX>0 8X 6¼ 0ð Þ
and so H is positive definite, and the function f is a minimum at the candidate point.
Note that the positive definiteness of H can also be verified just by calculating
the values of the different determinants, produced from H as
D1ðHÞ ¼ 2 ¼ h11
D2ðHÞ ¼ 4 1ð Þ ¼ 3
Because all Ds are positive, H is a positive definite matrix.
28 2 Mathematical Optimization Techniques
Example (2.4)
Minimize
f x1; x2ð Þ ¼ 34x21  24x1x2 þ 41x22
Set the first derivatives to zero to obtain
@f x1; x2ð Þ
@x1
¼ 68x1  24x2 ¼ 0
@f x1; x2ð Þ
@x2
¼ 24x1 þ 82x2 ¼ 0
The solution to the above equation gives
x1
x2
" #
¼ 0
0
" #
Calculate the Hessian matrix as
H ¼ 68 2424 82
 
Check the definiteness for the Hessian matrix as
D1ðHÞ ¼ h11 ¼ 68 >0
D2ðHÞ ¼ 68 82 24 24 ¼ 1328 >0
Hence H is a positive definite matrix; or calculate the quadratic form:
XTHX ¼ x1 x2½ 
68 24
24 82
 
x1
x2
" #
¼ 68x21  48x1x2 þ 82x22
¼ 2 4x1  3x2ð Þ2 þ 32x21 þ 64x22
so
XTHX>0 8X 6¼ 0ð Þ
hence H is positive definite and f is a minimum at the feasible points.
2.3 Some Static Optimization Techniques 29
Example (2.5)
Minimize
f x1; x2ð Þ ¼ x31  2x21x2 þ x22
We have
@f x1; x2ð Þ
@x1
¼ 3x21  4x1x2 ¼ 0
@f x1; x2ð Þ
@x2
¼ 2x21 þ 2x2 ¼ 0
Solving the above two equations yields the critical points to be
x ¼ x

1
x2
" #
¼
3
4
9
16
2
64
3
75
The Hessian matrix is calculated as
H ¼ 6x1  4x2ð Þ 4x14x1 2
 
At the solution points, we calculate H as
H x1; x

2
  ¼ 94 33 2
 
D1ðHÞ ¼ 9
4
>0
D2ðHÞ ¼ 18
4
 9 ¼  18
4
<0
HenceH x1; x

2
 
is positive semidefinite and so nothing can be concluded about the
nature of the solution point x*. The solution point in this case is called a saddle point.
2.3.2 Constrained Optimization
The problem examined in Sect. 2.3.1 excluded consideration of optimal control
problems having constraint relationships between the scalar elements of the state
trajectory, which occurs in many physical problems. The problem including such a
30 2 Mathematical Optimization Techniques
constraint can be formulated as follows. Find the function x(t) that minimizes the
following cost functional.
J =
ðtf
t0
L x tð Þ; _x tð Þ,t½ dt (2.11)
Subject to satisfying the following constraint:
ðtf
t0
g x tð Þ; _x tð Þ,t½ dt = 0 (2.12)
An example of this problem that occurs in the power system area is the minimi-
zation of the fuel cost of a power plant subject to satisfying the active power balance
equation for the system.
We can form an augmented cost functional by augmenting the cost functional of
Eq. 2.11 by Eq. 2.12 via Lagrange’s multiplier l,
~J ¼
ðtf
t0
~L x tð Þ _x tð Þ,t½ dt (2.13)
where
~L :ð Þ ¼ L :ð Þ þ lg :ð Þ (2.14)
As a result we obtain the following modified Euler equation.
~LxðtÞ  d
dt
~L _xðtÞ
  ¼ 0 (2.15)
or
Lx tð Þ þ gx tð Þ

 
 d
dt
L _x tð Þ þ lg _x tð Þ

 
¼ 0 (2.16)
Example (2.6)
We wish to maximize
J ¼
ð1
1
x tð Þdt
2.3 Some Static Optimization Techniques 31
subject to satisfying
ð1
1
1þ _x2 tð Þ 1=2dt ¼ 1
The augmented cost functional is given by
~J ¼
ð1
1
xðtÞ þ l 1þ _x2ðtÞ 1=2n odt
~L x; _x; tð Þ ¼ x tð Þ þ l 1þ _x2 tð Þ 1=2
~Lx tð Þ ¼ @
~L :ð Þ
@x tð Þ ¼ 1
~L_x tð Þ ¼
@~L :ð Þ
@ _x tð Þ ¼
l _x tð Þ
1þ _x2 tð Þ 1=2
Substituting into Eq. 2.14, one obtains the following Euler equation,
1 l d
dt
_x tð Þ
1þ _x2 tð Þ 1=2 ¼ 0
or
_x tð Þ
1þ _x tð Þ½ 1=2
¼ 1
l
tþ C
The solution of the above equation is given by
ðx x1Þ2þ ðt t1Þ2 ¼ r2
where the parameters x1, t1, and r are chosen to satisfy the boundary conditions.
Another mathematical form of the constrained optimization problem has the form
Minimize
f x1; . . . ; xnð Þ (2.17)
subject to satisfying
fi x1; . . . ; xnð Þ ¼ 0; i ¼ 1; . . . ; ‘ð Þ (2.18)
32 2 Mathematical Optimization Techniques
and
Cj x1; . . . ; xnð Þ 0; j ¼ 1; . . . ;mð Þ (2.19)
Let us consider, for instance, the case when the objective function is subject only
to equality constraints. We form the augmented objective function by adjoining the
equality constraints to the function via Lagrange multipliers to obtain the alterna-
tive form.
Minimize
~f x1; . . . ; xn; lið Þ ¼ f x1; . . . :xnð Þ þ
Xl
i¼1
lifi x1; . . . ; xnð Þ (2.20)
or, in vector form,
~f X; lð Þ ¼ f ðXÞ þ lTfðxÞ (2.21)
Putting the first derivative to zero, we obtain
@~f X; lð Þ
@xi
¼ @f ðxÞ
@xi
þ
X‘
j¼1
lj
@fj
@xi
¼ 0 (2.22)
Equation 2.22 is a set of n equations in (n + ‘) unknowns xi; i ¼ 1; . . . ; n :ð lj;
j ¼ 1; . . . ; ‘Þ. To obtain the solution, the equality constraints must be satisfied; that is,
fi x1; . . . ; xnð Þ ¼ 0 i ¼ 1; . . . ; ‘ (2.23)
Solving Eqs. 2.22 and 2.23, we obtain xi and l

j . This is illustrated in the
following examples.
Example (2.7)
Minimize
f x1; x2ð Þ ¼ x21 þ x22
Subject to
f x1; x2½  ¼ x1 þ 2x2 þ 1 ¼ 0
For this problem n ¼ 2, ‘ ¼ 1, (n + ‘ ¼ 3). The augmented cost function is
given by
~f x1; x2; lð Þ ¼ x21 þ x22 þ l x1 þ 2x2 þ 1ð Þ
2.3 Some Static Optimization Techniques 33
Putting the first derivatives to zero gives
@~f
@x1
¼ 0 ¼ 2x1 þ l
@~f
@x2
¼ 0 ¼ 2x2 þ 2l
and
@~f
@l
¼ 0 ¼ x1 þ 2x2 þ 1 ðequalityconstraintÞ
Solving the above three equations gives
x1 ¼ 
1
5
; x2 ¼ 
2
5
; l ¼ 2
5
Example (2.8)
Minimize
~f x1; x2; lð Þ ¼ 10þ 5x1 þ 0:2x21
 þ 20þ 3x2 þ 0:1x22 
Subject to
x1 þ x2 ¼ 10
The augmented cost function is
~f x1; x2; lð Þ ¼ 30þ 5x1 þ 0:2x21 þ 3x2 þ 0:1x22
 þ l 10 x1  x2ð Þ
Putting the first derivatives to zero we obtain
@~f
@x1
¼ 0 ¼ 5þ 0:4x1  l
@~f
@x2
¼ 0 ¼ 3þ 0:2x2  l
@~f
@l
¼ 0 ¼ 10 x1  x2
Solving the above three equations gives
x1 ¼ 0; x2 ¼ 10 and l ¼ 5
and the minimum of the function is
f 0; 10ð Þ ¼ 30þ 30þ 10 ¼ 70
34 2 Mathematical Optimization Techniques
If there are inequality constraints, then the augmented function is obtained by
adjoining these inequality constraints via Kuhn–Tucker multipliers, to obtain
~f X; l; mð Þ ¼ f ðXÞ þ lTfðXÞ þ mTCðXÞ (2.24)
Putting the first derivative to zero, we obtain
@~f
@X
¼ 0 ¼ @f X
ð Þ
@X
þ lT @f X
ð Þ
@X
þ mT @C X
ð Þ
@X
(2.25)
and
@~f
@l
¼ 0 ¼ f Xð Þ (2.26)
with
mTC Xð Þ ¼ 0 (2.27)
If C Xð Þ>0, then m ¼ 0.
Solving the above equations gives the candidate solution X; l; mð Þ.
Example (2.9)
Recall the previous example; we have
Minimize
f x1; x2ð Þ ¼ 0:1x22 þ 0:2x21 þ 3x2 þ 5x1 þ 30
Subject to the following constraints
x1 þ x2 ¼ 10
with
x1  0
0 x2  15
We form the augmented function as
~f x1; x2; l; m1; m2; m3ð Þ ¼ f x1; x2ð Þ þ l 10 x1  x2ð Þ þ m1x1 þ m2x2 þ m3 15 x2ð Þ
Putting the first derivatives to zero leads to
@~f
@x1
¼ 0 ¼ @f
@x1
 lþ m1 þ m2
@~f
@x2
¼ 0 ¼ @f
@x2
 lþ m2  m3
@~f
@l
¼ 0 ¼ 10 x1  x2
2.3 Some Static Optimization Techniques 35
with
m1x1 ¼ 0;
m2x2 ¼ 0;
m3 15 x2ð Þ ¼ 0
Now we have six equations for six unknowns, however, solving these equations
is very difficult. We assume that none of the variables violates its limits; thus we
obtain
m1 ¼ 0
m2 ¼ 0
m3 ¼ 0
and we must check the solution obtained for these conditions. The solution in this
case is:
x1 ¼ 0; x2 ¼ 10; l ¼ 5
Indeed, as we see, the variables do not violate their limits, and the optimal
solution in this case is
x1 ¼ 0; x2 ¼ 10; l ¼ 5
m1 ¼ 0; m2 ¼ 0; m3 ¼ 0
However, if we change the second inequality constraint to be
0 x2  8
then we can see that for the solution above, x2 ¼ 10 violates the upper limit. In this
case we put
x2 ¼ 8; with m3 8 x2
  ¼ 0
and recalculate x1 as
x1 ¼ 10 x2 ¼ 10 8
x1 ¼ 2; x1>0
 
Under this solution m3 6¼ 0, but m1 ¼ 0 and m2 ¼ 0. To calculate l and m3 we
use the first two equations as
0 ¼ 0:4x1 þ 5 l
36 2 Mathematical Optimization Techniques
or
l ¼ 0:4ð2Þ þ 5
¼ 5:8
and
0 ¼ 0:2x2 þ 3 l  m3
or
m3 ¼ 1:6þ 3 5:8
¼ 1:2
2.4 Pontryagin’s Maximum Principle [11–14]
Let u(t) be an admissible control and x(t) be the corresponding trajectory of the
system described by
_x tð Þ ¼ x tð Þ,u tð Þ,tð Þ (2.28)
Let x(t0), t0, and tf be specified and x(tf) be free. The necessary conditions for u(t)
to be an optimal control, that is, to be the control that takes x(t) from x(0) to some
state x(tf ) while minimizing the functional J
J ¼ G x tf ;tfð Þ þ
ðtf
t0
L x tð Þ,u tð Þ,t½ dt
2
4
3
5 (2.29)
are as follows.
1. There exists a function or vector l(t) such that x(t) and l(t) are the solutions of
the following equations.
_x tð Þ ¼ @H
@ l tð Þ (2.30)
_l tð Þ ¼  @H
@x tð Þ (2.31)
subject to the boundary conditions given by
xðt0Þ ¼ xð0Þ (2.32)
2.4 Pontryagin’s Maximum Principle 37
l tfð Þ ¼ @G :ð Þ
@x tð Þ

t¼tf
at x tð Þ ¼ x tfð Þ (2.33)
where the function H is a scalar function, which is called the Hamiltonian and
is given by
H x tð Þ; u tð Þ; l tð Þ; t½  ¼ L x tð Þ; u tð Þ; t½  þ lT tð Þf x tð Þ; u tð Þ; t½  (2.34)
2. The functional H[x tð Þ; u tð Þ; l tð Þ; t] has a local minimum at
@H
@u tð Þ ¼ 0 (2.35)
In many practical problems, there are inequality constraints on the admissible
control and states and these constraints must be taken into account. As a result Eq. is
no longer applicable. The basic contribution of the maximum principle addresses this
difficulty. In place of Eq. the necessary condition is that the Hamiltonian function H
[x tð Þ; u tð Þ; l tð Þ; t] attains an absolute minimum as a function of u(t) over the admissi-
ble region O for all t in the interval (t0, tf). In other words, the optimal ue satisfies
H x tð Þ; ue tð Þ; l tð Þ; t½  H x tð Þ; u tð Þ; l tð Þ; t½  ue 2 O (2.36)
Example (2.10)
A linear differential system is described by
_x ¼ Axþ Bu
where
A ¼ 0 1
0 0
 
; B ¼ 1 0
0 1
 
; xT ¼ x1; x1½ ; uT ¼ u1; u2½ 
Find u(t) such that
J ¼ 1
2
ð2
0
uk k2dt
is minimum, given xT(0) ¼ [1, 1] and x1(2) ¼ 0.
Define the Hamiltonian H as
H ¼ 1
2
uTuþ lT Axþ Buð Þ
38 2 Mathematical Optimization Techniques
Equation 2.24 leads to the following costate equations.
_l tð Þ ¼  @H
@x
_l tð Þ ¼ AT l
or
_l1 tð Þ ¼ 0 (a)
_l tð Þ ¼  l1 tð Þ (b)
with
l1ð2Þ ¼ l2ð2Þ ¼ 0 ðbecause G ¼ 0Þ (c)
Integration of Eqs. (a) and (b) with the boundary Eq. (c) gives
l1ðtÞ ¼ C1 (d)
l2ðtÞ ¼ C1ð2 tÞ (e)
H has a local minimum at
@H
@u tð Þ ¼ 0 (f)
or
uðtÞ ¼ BT lðtÞ (g)
We have
_x ¼ Axþ Bu
Substituting for u(t) from Eq. (g) in the above equation, we obtain
_x ¼ Ax BBT l (h)
The solution of the above equation with Eqs. (d) and (e) gives
xt tð Þ ¼ C1t2 þ 16C1t3 þ t C1tþ C2
x2 tð Þ ¼ 2C1tþ 12C1t2 þ C3
2.4 Pontryagin’s Maximum Principle 39
Using the boundary conditions at t ¼ 0, xT(0) ¼ [1, 1] gives
1 ¼ C2
1 ¼ C3
The state x1(t) now is given by
x1 tð Þ ¼ C1t2 þ 16 C1t3 þ t C1tþ 1
By using the boundary condition at t ¼ 2, x1(2) ¼ 0,
0 ¼ 4C1 þ 86 C1 þ 2 2C1 þ 1
C1¼ 914
We are now in a position to write the system equations that satisfied the
boundary conditions as
l1 tð Þ ¼ 914
l2ðtÞ ¼ 9
14
2 tð Þ
x1 tð Þ ¼  914t2 þ 328t2 þ 514tþ 1
x2 tð Þ ¼ 97tþ 928t2 þ 1
u1 tð Þ ¼  914
u2ðtÞ ¼  9
14
2 tð Þ
Example (2.11)
For the fixed plant dynamics given by
_x tð Þ ¼ u tð Þ; x 0ð Þ ¼ x0;
determine the optimal closed-loop control that minimizes for fixed tf,
J ¼ 1
2
Sx2 tfð Þ þ 12
ðtf
0
u tð Þ2dt
where S is an arbitrary constant. Do this by first determining the optimum open-loop
control and trajectory and then let u(t) ¼ k(t) x(t).
40 2 Mathematical Optimization Techniques
Define the Hamiltonian as
H ¼ 1
2
u2 tð Þ þ l tð Þu tð Þ
We have
l tð Þ ¼  @H
@x
¼ 0
Integrating directly we obtain
l tð Þ ¼ C1 (a)
From the boundary term G ¼ 1
2
Sx2 tfð Þ; we have
l tfð Þ ¼ @G
@x tð Þ

t¼tf
l tfð Þ ¼ Sx tfð Þ
(b)
Substituting from Eq. b into Eq. 2.31a at t ¼ tf, l(tf ) ¼ Sx(tf ),
C1 ¼ Sx(tfÞ
l tð Þ ¼ Sx tfð Þ
(c)
H has a local minimum at
@H
@u tð Þ ¼ 0
or
0 ¼ uðtÞ þ lðtÞ
Hence, the open-loop control is given by
uðtÞ ¼ Sxðtf Þ (d)
Also, we have
_x tð Þ ¼ u tð Þ
or
_x tð Þ ¼ Sx tfð Þ
2.4 Pontryagin’s Maximum Principle 41
Integrating the above equation directly and by using at t ¼ 0, x(t) ¼ x(0), we
obtain
xðtÞ ¼ Sxðtf Þtþ xð0Þ (e)
Now, the closed-loop control is given by
uðtÞ ¼ kðtÞ½SxðtfÞtþ xð0Þ
or
uðtÞ ¼ SkðtÞ xðtfÞtþ kðtÞ xð0Þ
2.5 Functional Analytic Optimization Technique [6]
The aim of this section is to discuss the application of one important minimum
norm result as an optimization technique that has been used as a powerful tool in the
solution of problems treated in this book [6, 15]. Before we do this, a brief
discussion of relevant concepts from functional analysis is given.
2.5.1 Norms
A norm, commonly denoted by k k, is a real-valued and positive definite scalar. The
norm satisfies the following axioms.
ð1Þ xk k 0 for all x 2 X; xk k ¼ 0 $ x ¼ 0
ð2Þ xþ yk k xk k þ yk k for each x; y 2 X
ð3Þ axk k ¼ aj j  xk k for all scalars a and each x 2 X
Anormed linear (vector) spaceX is a linear space inwhich every vectorxhas a norm
(length). The norm functional is used to define a distance and a convergence measure
d x,yð Þ ¼ x yk k
For example, let [0, T] be a closed bounded interval. The space of continuous
functions x(t) on [0, T] can have one of the following norms.
xk k1 ¼
ðT
0
x tð Þj jdt
42 2 Mathematical Optimization Techniques
xk k2 ¼
ðT
0
x tð Þj j2dt
2
4
3
5
1=2
The normed linear space becomes a metric space under the (usual) metric [5].
2.5.2 Inner Product (Dot Product)
Consider the real three-dimensional Euclidean space E3. A vector or element in E3
is an ordered real triple x ¼ (x1, x2, x3) in which the norm is defined by
xk k ¼ x1j j2 þ x2j j2 þ x3j j2

 1=2
From linear algebra in a Euclidean space E, if x is multiplied with another vector
y ¼ (y1, y2, y3), the result is (dot product)
ðx; yÞ ¼ x1y1 þ x2y2 þ x3y3
or
<x; y> ¼
X3
i¼1
xiyi
In the space E3 the angle y between x and y is also defined and is related to the
norm by the equation
x,yh i ¼ xk k  yk k cos y
If the two vectors are orthogonal, y ¼ 90	, then their inner product is zero
x,yh i ¼ 0
and they are collinear, y ¼ 0, if their inner product is equal to
x,yh i ¼ 
 xk k  yk k
In the complex space E3 the inner product between any two vectors x ¼ (x1, x2, x3)
and y ¼ (y1, y2, y3) can be defined by
x,yh i ¼ x1y1 þ x2y2 þ x3y3
Using these ideas as a background, let us now formulate the basic definition of an
inner product in an abstract linear space.
2.5 Functional Analytic Optimization Technique 43
Let X be a linear space. A rule that assigns a scalar x,yh i to every pair of elements
x, y∈ X is called an inner product function if the following conditions are satisfied.
1: x,yh i ¼ y,xh i
2: axþ by; zh i ¼ a x,zh i þ b y,zh i
3: lx,yh i ¼ l x,yh i
4: x, yh i 0; x, xh i ¼ 0 $ x ¼ 0
5: x, xh i ¼ xk k2
A linear space X is called a Hilbert space if X is an inner product space that is
complete with respect to the norm induced by the inner product.
Equivalently, a Hilbert space is a Banach space whose norm is induced by an
inner product. Let us now consider some specific examples of Hilbert spaces. The
space En is a Hilbert space with inner product as defined by
x, yh i ¼ xTy
or
x, yh i ¼
Xn
i¼1
xiyi
The space L2 [0, T] is a Hilbert space with inner product
x, yh i ¼
ðT
0
x tð Þy tð Þdt
We have in this book a very useful Hilbert space. The elements of the space are
vectors whose components are functions of time such as active power generation by
the system units over the interval [0, Tf]. Given a positive definite matrix B(t) whose
elements are functions of time as well, we can define the Hilbert space Ln2B 0;Tfð Þ.
The inner product in this case is given by
V tð Þ; tð Þh i ¼
ðTf
0
VT tð ÞB tð ÞU tð Þdt
for every V(t) and U(t) in the space.
44 2 Mathematical Optimization Techniques
2.5.3 Transformations
Let X and Y be linear vector spaces and let D be a subset of X. A rule that associates
with every element x ∈ D and element y ∈ Y is said to be a transformation from X
to Y with domain D. If y corresponds to x under T, we write y ¼ T(x) and y is
referred to as the image of x under T. Alternatively, a transformation is referred to as
an operator.
The transformation T: X ! Y is said to be linear if
T a1x1 þ a2x2ð Þ ¼ a1T x1ð Þ þ a2T x2ð Þ
for all a1, a2 ∈ R (the real line) and for every x1, x2 ∈ X.
The linear operator T from a normed space X to a normed space Y is said to be
bounded if there is a constant M such that Txk kM xk k for all x ∈ X. The normed
space of all bounded linear operators from the normed space X into the normed
space Y is denoted by B (X, Y). Examples of bounded linear operators include one
transformation useful for our purposes. This is T: Ln1Bð0;TfÞ ! Rm defined by
b ¼ T [U (t)]
b ¼
ðTf
0
MTI tð Þdt
In practical applications there are many transformations; among these
transformations we have [6] the following.
1. If two power plants supply a demand PD(t) such that the active power balance
equation is satisfied
PDðtÞ ¼ P1ðtÞ þ P2ðtÞ
2. If time is not included as a parameter the above equation can be written as
PDðtÞ ¼ MTPðtÞ
where
M ¼ col 1; 1ð Þ
PðtÞ ¼ col P1ðtÞ;P2ðtÞ½ 
This defines a transformation T: L22ð0;TfÞ ! L2ð0;TfÞ sending functions
[P1(t), P2(t)] into their image PD(t). Observe that T ¼ MT.
2.5 Functional Analytic Optimization Technique 45
A functional is a transformation from a linear space into the space of real or
complex scalars. A typical functional is the objective functional of optimal econ-
omy operation of m thermal plants given by
J Psð Þ ¼
ðTf
0
Xm
i¼1
a1 þ b1Psi tð Þ þ g1P2si tð Þ
 
dt
In the above equation the space Lm2 0;Tfð Þ of thermal power generation vector
functions is mapped into the real scalar space. In a linear space X, a functional f is
linear if for any two vectors x1, x2 ∈ X, and any two scalars a1 and a2 we have
f a1x1 þ a1x2ð Þ ¼ a1f x1ð Þ þ a2f x2ð Þ
On a normed space a linear functional f is bounded if there is a constant M such
that f ðxÞM xk kj j for every x ∈ X. The space of these linear functionals is a
normed linear space X* . X* is the normed dual space of X and is a Banach space.
If X is a Hilbert space then X ¼ X*. Thus Hilbert spaces are self-dual. For the
normed linear space to be a reflexive, X ¼ X**. Any Hilbert space is reflexive.
Let X and Y be normed spaces and let T ∈ B (X, Y). The adjoint (conjugate)
operator T *: Y* ! X* is defined by
x;Tyh i ¼ Tx; yh i
An important special case is that of a linear operator T:H ! GwhereH andG are
Hilbert spaces. IfG andH are real, then they are their own duals and the operator T *
can be regarded as mapping G into H. In this case the adjoint relation becomes
Tx; yh i ¼ x;Tyh i
Note that the left-hand side inner product is taken in G whereas the right-hand
side inner product is taken in H.
Composite transformations can be formed as follows. Suppose T and G are
transformationsT:X ! Y andG:Y ! Z.Wedefine the transformationGT:X ! Z by
GTð ÞðxÞ ¼ G TðxÞð Þ
We then say that GT is a composite of G and T, respectively.
2.5.4 The Minimum Norm Theorem
With the above-outlined definitions inmind,we can now introduce one powerful result
in optimization theory. The theorem described here is only one of a wealth of results
that utilize functional analytic concepts to solve optimization problems effectively.
46 2 Mathematical Optimization Techniques
Theorem. Let B andD be Banach spaces. Let T be a bounded linear transformation
defined on B with values in D. Let û be a given vector in B. For each x in the range of
T, there exists a unique element ux ∈ B that satisfies
x ¼ Tu
while minimizing the objective functional
J uð Þ ¼ u ûk k
The unique optimal ux ∈ B is given by
ux ¼ Tþ x Tû½  þ û
where the pseudoinverse operator T + in the case of Hilbert spaces is given by
T þ x ¼ T ½TT   1 x
provided that the inverse of TT * exists.
The theorem as stated is an extension of the fundamental minimum norm
problem where the objective functional is
J uð Þ ¼ uk k
The optimal solution for this case is
u x ¼ T þ x
with T + being the pseudoinverse associated with T.
The above equations for the optimal control vector u can be obtained by using
the Lagrange multiplier argument. The augmented cost functional can be obtained
by adjoining to the cost functional the equality constraint via the Lagrange multi-
plier as follows.
~J uð Þ ¼ u ûk k2 þ l; x Tuð Þh i
where l is a multiplier (in fact l ∈ D) to be determined so that the constraint
x ¼ Tu is satisfied. By utilizing properties of the inner product we can write
~J uð Þ ¼ u û T l=2ð Þk k2  T l=2ð Þk k2 þ l; xh i
Only the first norm of the above equation depends explicitly on the control
vector u. To minimize ~J we consider only
~J uð Þ ¼ u û T l=2ð Þk k
2.5 Functional Analytic Optimization Technique 47
The minimum of the above equation is clearly achieved when
ux ¼ ûþ T l=2ð Þ
To find the value of (l/2) we use the equality constraint
x ¼ Tu x
which gives
l=2ð Þ ¼ TT½ 1 x Tû½ 
It is therefore clear that with an invertible TT * we write
ux ¼ T TT½ 1 x Tû½ 
which is the required result. In the above equation if û ¼ 0 we obtain
u x ¼ T  TT ½   1 x
which is the same result obtained for the fundamental minimum norm problem.
In applying this result to our physical problem we need to recall two important
concepts from ordinary constrained optimization. These are the Lagrange multiplier
rule and the Kuhn–Tucker multipliers. An augmented objective functional is
obtained by adjoining to the original cost functional terms corresponding to the
constraints using the necessary multipliers. The object in this case is to ensure that
the augmented functional can indeed be cast as a norm in the chosen space. A set of
linear constraints on the control vector is singled out; this set, under appropriate
conditions, defines the bounded linear transformation T.
2.6 Simulated Annealing Algorithm (SAA) [16–26]
Annealing is the physical process of heating up a solid until it melts, followed by
cooling it down until it crystallizes into a state with a perfect lattice. During this
process, the free energy of the solid is minimized. Practice shows that the cooling
must be done carefully in order not to get trapped in a locally optimal lattice
structure with crystal imperfections. In combinatorial optimization, we can define
a similar process. This process can be formulated as the problem of finding (among
a potentially very large number of solutions) a solution with minimal cost. Now, by
establishing a correspondence between the cost function and the free energy, and
between the solutions and physical states, we can introduce a solution method in the
field of combinatorial optimization based on a simulation of the physical annealing
48 2 Mathematical Optimization Techniques
process. The resulting method is called simulated annealing (SA). The salient
features of the SA method may be summarized as follows.
• It could find a high-quality solution that does not strongly depend on the choice
of the initial solution.
• It does not need a complicated mathematical model of the problem under study.
• It can start with any given solution and try to improve it. This feature could be
utilized to improve a solution obtained from other suboptimal or heuristic
methods.
• It has been theoretically proved to converge to the optimum solution [16].
• It does not need large computer memory.
In this chapter we propose an implementation of a Simulated Annealing Algo-
rithm (SAA) to solve the Unit Commitment Problem (UCP). The combinatorial
optimization subproblem of the UCP is solved using the proposed SAA and the
Economic Dispatch Problem (EDP) is solved via a quadratic programming routine.
Two different cooling schedules are implemented and compared. Three examples
are solved to test the developed computer model.
2.6.1 Physical Concepts of Simulated Annealing [79]
Simulated annealing was independently introduced by Kirkpatrick, Gela, and
Vecchi in 1982 and 1983 [18] and Cerny in 1985 [19]. The slow cooling in
annealing is achieved by decreasing the temperature of the environment in steps.
At each step the temperature is maintained constant for a period of time sufficient
for the solid to reach thermal equilibrium. At equilibrium, the solid could have
many configurations, each corresponding to different spins of the electrons and to a
specific energy level.
At equilibrium the probability of a given configuration, Pconfg, is given by the
Boltzman distribution,
Pconfg ¼ K:e 
Econfg
Cp
 
;
where Econfg is the energy of the given configuration and K is a constant [20].
Reference [21] proposed a Monte Carlo method to simulate the process of
reaching thermal equilibrium at a fixed temperature Cp. In this method, a randomly
generated perturbation of the current configuration of the solid is applied so that a
trial configuration is obtained. Let Ec and Et denote the energy level of the current
and trial configurations, respectively. If Ec> Et, then a lower energy level has been
reached, and the trial configuration is accepted and becomes the current configura-
tion. On the other hand, if Ec Et then the trial configuration is accepted as the
current configuration with probability e½ðEcEtÞ=Cp. The process continues where a
transition to a higher energy level configuration is not necessarily rejected.
2.6 Simulated Annealing Algorithm (SAA) 49
Eventually thermal equilibrium is achieved after a large number of perturbations,
where the probability of a configuration approaches a Boltzman distribution. By
gradually decreasing Cp and repeating Metropolis simulation, new lower energy
levels become achievable. As Cp approaches zero, the least energy configurations
will have a positive probability of occurring.
2.6.2 Combinatorial Optimization Problems
Bymaking an analogy between the annealing process and the optimization problem,
a large class of combinatorial optimization problems can be solved following the
same procedure of transition from an equilibrium state to another, reaching the
minimum energy level of the system. This analogy can be set as follows [20].
• Solutions in the combinatorial optimization problem are equivalent to states
(configurations) of the physical system.
• The cost of a solution is equivalent to the energy of a state.
• A control parameter Cp is introduced to play the role of the temperature in the
annealing process.
In applying the SAA to solve the combinatorial optimization problem, the basic
idea is to choose a feasible solution at random and then get a neighbor to this
solution. A move to this neighbor is performed if either it has a lower objective
function value or, in the case of a higher objective function value, if
exp( DE/Cp)U(0,1), where DE is the increase in the objective function value
if we moved to the neighbor. The effect of decreasing Cp is that the probability of
accepting an increase in the objective function value is decreased during the search.
The most important part in using the SAA is to have good rules for finding a
diversified and intensified neighborhood so that a large amount of the solution space
is explored. Another important issue is how to select the initial value of Cp and how
it should be decreased during the search.
2.6.3 A General Simulated Annealing Algorithm [16–26]
A general SAA can be described as follows.
Step (0): Initialize the iteration count k ¼ 0 and select the temperature Cp ¼ Cpo to
be sufficiently high such that the probability of accepting any solution is
close to 1.
Step (1): Set an initial feasible solution ¼ current solution Xi with corresponding
objective function value Ei.
Step (2): If the equilibrium condition is satisfied, go to Step (5); else execute Steps
(3) and (4).
50 2 Mathematical Optimization Techniques
Step (3): Generate a trial solutionXj, as a neighbor toXi. Let Ej be the
corresponding objective function value.
Step (4): Acceptance test: If Ej Ei: accept the trial solution, set Xi ¼ Xj, and go
to Step (2). Otherwise: if exp[(EiEj)/Cp]U(0,1)set Xi ¼ Xj and go to
Step (2); else go to Step (2).
Step (5): If the stopping criterion is satisfied then stop; else decrease the tempera-
ture Cpkand go to Step (2).
2.6.4 Cooling Schedules
A finite-time implementation of the SAA can be realized by generating homogeneous
Markov chains of a finite length for a finite sequence of descending values of the
control parameter Cp. To achieve this, one must specify a set of parameters that
governs the convergence of the algorithm. These parameters form a cooling schedule.
The parameters of the cooling schedules are as follows.
• An initial value of the control parameter.
• A decrement function for decreasing the control parameter.
• A final value of the control parameter specified by the stopping criterion.
• A finite length of each homogeneous Markov chain.
The search for adequate cooling schedules has been the subject of study in many
papers [16, 23–26].
In this chapter, two cooling schedules are implemented, namely the polynomial-
time and Kirk’s cooling schedules. The description of these cooling schedules is
presented in the following sections.
2.6.5 Polynomial-Time Cooling Schedule
This cooling schedule leads to a polynomial-time execution of the SAA, but it does
not guarantee the convergence of the final cost, as obtained by the algorithm, to the
optimal value. The different parameters of the cooling schedule are determined
based on the statistics calculated during the search. In the following we describe
these parameters [16, 23, 24].
2.6.5.1 Initial Value of the Control Parameter
The initial value of Cp, is obtained from the requirement that virtually all proposed
trial solutions should be accepted. Assume that a sequence of m trials is generated at
a certain value of Cp. Let m1 denote the number of trials for which the objective
function value does not exceed the respective current solution. Thus, m2 ¼ m m1
is the number of trials that result in an increasing cost.
It can be shown that the acceptance ratio X can be approximated by [16]:
2.6 Simulated Annealing Algorithm (SAA) 51
X  ðm1 þ m2: expðDf
ðþÞ
=CpÞÞ=ðm1 þ m2Þ (2.37)
where, Df
ðþÞ
is the average difference in cost over the m2 cost-increasing trials. From
which the new temperature Cp is
Cp ¼ Df
ðþÞ
=lnðm2=ðm2:Xm1ð1 XÞ (2.38)
2.6.5.2 Decrement of the Control Parameter
The next value of the control parameter,Cpkþ1, is related to the current value Cpk by
the function [16]:
Cpkþ1 ¼ Cpk=ð1þ ðCpk:lnð1þ dÞ=3sCpk (2.39)
where s is calculated during the search. Small values of d lead to small decrements
in Cp. Typical values of d are between 0.1 and 0.5.
2.6.5.3 Final Value of the Control Parameter
Termination in the polynomial-time cooling schedule is based on an extrapolation
of the expected average cost at the final value of the control parameter. Hence, the
algorithm is terminated if for some value of k we have [16, 23, 24]
Cpk
h f i1
:
@h f iCp
@Cp

Cp¼Cpk
<e (2.40)
where
h f i1  h f iCpo is the average cost at initial value of control parameter Cpo.
h f iCp is the average cost at the kth Markov chain.
@h f iCp
@Cp

Cp¼Cpk
is the rate of change in the average cost at Cpk.
e is some small positive number. In our implementation e ¼ 0:00001.
2.6.5.4 The Length of Markov Chains
In [16] it is concluded that the decrement function of the control parameter, as given in
Eq. 2.39, requires only a “small” number of trial solutions to rapidly approach the
stationary distribution for a givennext valueof the control parameter.Theword “small”
can be specified as the number of transitions for which the algorithm has a sufficiently
large probability of visiting at least amajor part of the neighborhood of a given solution.
52 2 Mathematical Optimization Techniques
In general, a chain length of more than 100 transitions is reasonable [16]. In our
implementation good results have been reached at a chain length of 150.
2.6.6 Kirk’s Cooling Schedule
This cooling schedule was originally proposed by Kirkpatrick, Gelatt, and Vecchi
[17]. It has been used in many applications of the SAA and is based on a number of
conceptually simple empirical rules. The parameters of this cooling schedule are
described in the following subsections [16, 18].
2.6.6.1 Initial Value of the Control Parameter
It is recommended to start with an arbitrary control parameter Cp [16]. If the
percentage of the accepted trials solutions is close to 1, then this temperature is a
satisfactory starting Cp. On the other hand, if this acceptance ratio is not close to 1,
then Cp has to be increased iteratively until the required acceptance ratio is reached.
This can be achieved by starting off at a small positive value of Cp and
multiplying it with a constant factor, larger than 1, until the corresponding value
of the acceptance ratio, calculated from the generated transitions, is close to 1. In
the physical system analogy, this corresponds to heating up the solid until all
particles are randomly arranged in the liquid phase.
In our implementation, this procedure is accelerated by multiplying Cp by the
reciprocal of the acceptance ratio.
2.6.6.2 Decrement of the Control Parameter
It is important to make “small” decrements in the values of the control parameter, to
allow for a very slow cooling and consequently reaching an equilibrium at each
value of the control parameter Cp. A frequently used decrement function is given by
Cpkþ1 ¼ a:Cpk; k ¼ 1; 2; (2.41)
where a is a constant smaller than but close to 1. Typical values lie among 0.8 and 0.99.
2.6.6.3 Final Value of the Control Parameter
Execution of the algorithm is terminated if the value of the cost function of the solution
obtained in the last trial of the Markov chain remains unchanged for a number of
consecutive chains (Lm). In our implementation, Lm is taken as 500 chains.
2.6 Simulated Annealing Algorithm (SAA) 53
2.6.6.4 Length of the Markov Chain
The length of Markov chains Lk is based on the requirement that equilibrium is to be
restored at each value ofCp. This is achieved after the acceptance of at least somefixed
number of transitions. However, because the transitions are accepted with decreasing
probability, one would obtain Lk ! 1 as Cpk ! 0. Consequently, Lk is bounded by
some constant Lmax to avoid extremely longMarkov chains for small values of Cp
k. In
this work, the chain length is guided by the changes of the best solution that has been
obtained thus far. The chain length is assumed equal to 150 unless the best solution
changes. If so, the chain length is extended by another 150 iterations. In the next
section, two algorithms based on tabu search methods are described.
2.7 Tabu Search Algorithm
Tabu search is a powerful optimization procedure that has been successfully
applied to a number of combinatorial optimization problems [22–46]. It has the
ability to avoid entrapment in local minima. TS employs a flexible memory system
(in contrast to “memoryless” systems, such as SA and GAs, and rigid memory
systems as in branch-and-bound). Specific attention is given to the short-term
memory (STM) component of TS, which has provided solutions superior to the
best obtained by other methods for a variety of problems [30]. Advanced TS
procedures are also used for sophisticated problems. These procedures include, in
addition to the STM, intermediate-term memory (ITM), long-term memory (LTM),
and strategic oscillations (SO). In this section, two algorithms based on the TS
method are discussed. The first algorithm uses the STM procedure, and the second
algorithm is based on advanced TS procedures.
In general terms, TS is an iterative improvement procedure that starts from some
initial feasible solution and attempts to determine a better solution in the manner of a
greatest descent algorithm. However, TS is characterized by an ability to escape local
optima (which usually cause simple descent algorithms to terminate) by using a short-
term memory of recent solutions. Moreover, TS permits backtracking to previous
solutions, which may ultimately lead, via a different direction, to better solutions [31].
The main two components of a TSA are the TL restrictions and the aspiration
level (AV) of the solution associated with these restrictions. Discussion of these
terms is presented in the following sections.
2.7.1 Tabu List Restrictions
TS may be viewed as a “metaheuristic” superimposed on another heuristic.
The approach undertakes to surpass local optimality by a strategy of forbidding
(or, more broadly, penalizing) certain moves. The purpose of classifying certain
moves as forbidden – that is, “tabu” – is basically to prevent cycling. Moves that
54 2 Mathematical Optimization Techniques
hold tabu status are generally a small fraction of those available, and a move loses
its tabu status to become once again accessible after a relatively short time.
The choice of appropriate types of the tabu restrictions “list” depends on the
problem under study. The elements of the TL are determined by a function that
utilizes historical information from the search process, extending up to Z iterations
in the past, where Z (TL size) can be fixed or variable depending on the application
or the stage of the search.
The TL restrictions could be stated directly as a given change of variables
(moves) or indirectly as a set of logical relationships or linear inequalities. Usage
of these two approaches depends on the size of the TL for the problem under study.
A TL is managed by recording moves in the order in which they are made.
Each time a new element is added to the “bottom” of a list, the oldest element on the
list is dropped from the “top.” The TL is designed to ensure the elimination of
cycles of length equal to the TL size. Empirically [30], TL sizes that provide good
results often grow with the size of the problem and stronger restrictions are
generally coupled with smaller lists.
The way to identify a good TL size for a given problem class and choice of tabu
restrictions is simply to watch for the occurrence of cycling when the size is too
small and the deterioration in solution quality when the size is too large (caused by
forbidding too many moves). The best sizes lie in an intermediate range between
these extremes. In some applications a simple choice of Z in a range centered
around 7 seems to be quite effective [28].
2.7.2 Aspiration Criteria
Another key issue of TS arises when the move under consideration has been found to
be tabu. Associated with each entry in the TL there is a certain value for the evaluation
function called the aspiration level. If the appropriate aspiration criteria are satisfied,
themovewill still be considered admissible in spite of the tabu classification. Roughly
speaking, AV criteria are designed to override tabu status if a move is “good enough”
with the compatibility of the goal of preventing the solution process from cycling [28].
Different forms of aspiration criteria are available. The one we use in this study is to
override the tabu status if the tabu moves yield a solution that has a better evaluation
function than the one obtained earlier for the same move.
2.7.3 Stopping Criteria
There may be several possible stopping conditions for the search. In our implemen-
tation we stop the search if either of the following two conditions is satisfied.
• The number of iterations performed since the best solution last changed is
greater than a prespecified maximum number of iterations.
• The maximum allowable number of iterations is reached.
2.7 Tabu Search Algorithm 55
2.7.4 General Tabu Search Algorithm
In applying the TSA to solve a combinatorial optimization problem, the basic idea
is to choose a feasible solution at random and then get a neighbor to this solution.
A move to this neighbor is performed if either it does not belong to the TL or, in the
case of being in the TL, it passes the AV test. During these search procedures
the best solution is always updated and stored aside until the stopping criteria
are satisfied.
A general TSA, based on the STM, for combinatorial optimization problems
is described below, with this notation used in the algorithm:
X: The set of feasible solutions for a given problem
x: Current solution, x 2 X
x00: Best solution reached
x0: Best solution among a sample of trial solutions
E(x): Evaluation function of solution x
N(x): Set of neighborhood of x 2 X (trial solutions)
S(x): Sample of neighborhood, of x, S (x) 2 N (x)
SS(x): Sorted sample in ascending order according to their evaluation functions, E (x)
Step (0): Set the TL as empty and the AV to be zero.
Step (1): Set iteration counter K ¼ 0. Select an initial solution x 2 X, and
set x00 ¼ x.
Step (2): Generate randomly a set of trial solutions S(x) 2 N(x) (neighbor to the
current solution x) and sort them in an ascending order, to obtain SS(x).
Let x0 be the best trial solution in the sorted set SS(x) (the first in the
sorted set).
Step (3): If E(x0) > E (x00), go to Step (4); else set the best solution x00 ¼ x0 and go
to Step (4).
Step (4): Perform the tabu test. If x0 is not in the TL, then accept it as a current
solution, set x ¼ x0, update the TL and AV, and go to Step (6); else go to
Step (5).
Step (5): Perform the AV test. If satisfied, then override the tabu state, set x ¼ x0,
update the AV, and go to Step (7); else go to Step (6).
Step (6): If the end of the SS(x) is reached, go to Step (7); otherwise, let x0 be the
next solution in the SS(x) and go to Step (3).
Step (7): Perform the termination test. If the stopping criterion is satisfied then
stop; else set K ¼ K + 1 and go to Step (2).
The main steps of the TSA are also shown in the flowchart of Fig. 2.1.
In the following section we describe the details of the general TSA.
56 2 Mathematical Optimization Techniques
2.8 The Genetic Algorithm (GA)
GAs are general-purpose search techniques based on principles inspired by the
genetic and evolution mechanisms observed in natural systems and populations
of living beings. Their basic principle is the maintenance of a population of
solutions to a problem (genotypes) in the form of encoded individual information
Start
Initialize tabu search parameters (TL & AV)
Find randomly an initial feasible solution
Set the current and best solutions equal to the initial solution
Find a set of neighbors to the current solution
Is the
best neighbor
TABU ? 
Accept this solution. Update the current solution and 
the best solution(if required)by the accepted solution
Is
Stopping criteria
satisfied ?
Calculate the objective function of each neighbor
in the set, and find the best among them
Stop
No Yes
Yes
Is  AV satisfied ?
No
Fig. 2.1 Flowchart of a general Tabu search algorithm
2.8 The Genetic Algorithm (GA) 57
that evolves in time. A GA for a particular problem must have the following
five components [39, 40, 47].
• A genetic representation for a potential solution to the problem.
• A way to create an initial population of potential solutions.
• An evaluation function that plays the role of the environment, rating solutions in
terms of their “fitness.”
• Genetic operators that alter the composition of children.
• Values for various parameters that the GA uses (population size, probabilities of
applying genetic operators, etc.)
A genetic search starts with a randomly generated initial population within
which each individual is evaluated by means of a fitness function. Individuals in
this and subsequent generations are duplicated or eliminated according to their
fitness values. Further generations are created by applying GA operators. This
eventually leads to a generation of high-performing individuals [44].
2.8.1 Solution Coding
GAs require the natural parameter set of the optimization problem to be coded as a
finite-length string over some finite alphabet. Coding is the most important point in
applying the GA to solve any optimization problem. Coding could be in a real or
binary form. Coded strings of solutions are called “chromosomes.” A group of these
solutions (chromosomes) is called a population.
2.8.2 Fitness Function
The fitness function is the second important issue in solving optimization problems
using GAs. It is often necessary to map the underlying natural objective function to
a fitness function through one or more mappings. The first mapping is done to
transform the objective function into a maximization problem rather than minimi-
zation to suit the GA concepts of selecting the fittest chromosome that has the
highest objective function.
A second important mapping is the scaling of the fitness function values. Scaling
is an important step during the search procedures of the GA. This is done to keep
appropriate levels of competition throughout a simulation. Without scaling, there is
a tendency early on for a few superindividuals to dominate the selection process.
Later, when the population has largely converged, competition among population
members is weaker and simulation tends to wander. Thus, scaling is a useful
process to prevent both the premature convergence of the algorithm and the random
improvement that may occur in the late iterations of the algorithm. There are many
methods for scaling such as linear, sigma truncation, and power law scaling [42].
Linear scaling is the most commonly used. In the sigma truncation method,
58 2 Mathematical Optimization Techniques
population variance information to preprocess raw fitness values prior to scaling is
used. It is called sigma (s) truncation because of the use of population standard
deviation information; a constant is subtracted from raw fitness values as follows:
f
0 ¼ f  ðf 0  c:sÞ (2.41a)
In Eq. 2.41a the constant c is chosen as a reasonable multiple of the population
standard deviation and negative results (f
0
<0) are arbitrarily set to 0. Following
sigma truncation, fitness scaling can proceed as described without the danger of
negative results.
2.8.3 Genetic Algorithms Operators
There are usually three operators in a typical GA [44]. The first is the production
operator which makes one or more copies of any individual that possesses a high
fitness value; otherwise, the individual is eliminated from the solution pool.
The second operator is the recombination (also known as the “crossover”)
operator. This operator selects two individuals within the generation and a cross-
over site and performs a swapping operation of the string bits to the right-hand side
of the crossover site of both individuals. The crossover operator serves two com-
plementary search functions. First, it provides new points for further testing within
the hyperplanes already represented in the population. Second, crossover introduces
representatives of new hyperplanes into the population, which are not represented
by either parent structure. Thus, the probability of a better performing offspring is
greatly enhanced.
The third operator is the “mutation” operator. This operator acts as a background
operator and is used to explore some of the unvisited points in the search space by
randomly flipping a “bit” in a population of strings. Frequent application of this
operator would lead to a completely random search, therefore a very low probabil-
ity is usually assigned to its activation.
2.8.4 Constraint Handling (Repair Mechanism)
Constraint-handling techniques for the GAs can be grouped into a few categories
[40]. One way is to generate a solution without considering the constraints but to
include them with penalty factors in the fitness function. This method has been used
previously [48–52].
Another category is based on the application of a special repair algorithm to
correct any infeasible solution so generated.
2.8 The Genetic Algorithm (GA) 59
The third approach concentrates on the use of special representation mappings
(decoders) that guarantee (or at least increase the probability of) the generation of a
feasible solution or the use of problem-specific operators that preserve feasibility of
the solutions.
In our implementation, we are always generating solutions that satisfy the
minimum up/down constraints. However, due to applying the crossover and muta-
tion operations the load demand and/or the reserve constraints might be violated. A
mechanism to restore feasibility is applied by randomly committing more units at
the violated time periods and keeping the feasibility of the minimum up/down time
constraints.
2.8.5 A General Genetic Algorithm
In applying the GAs to optimization problems, certain steps for simulating evolution
must be performed. These are described as follows [39]:
Step (1): Initialize a population of chromosomes.
Step (2): Evaluate each chromosome in the population.
Step (3): Create new chromosomes by mating current chromosomes; apply mutation
and recombination as the parent chromosomes mate.
Step (4): Delete members of the population to make room for the new
chromosomes.
Step (5): Evaluate the new chromosomes and insert them into the population.
Step (6): If the termination criterion is satisfied, stop and return the best chromosomes;
otherwise, go to Step (3).
2.9 Fuzzy Systems [78]
Human beingsmake tools for their use and also think to control the tools as they desire
[53–60]. A feedback concept is very important to achieve control of the tools.
As modern plants with many inputs and outputs become more and more complex,
the description of a modern control system requires a large number of equations.
Since about 1960 modern control theory has been developed to cope with the
increased complexity of modern plants. The most recent developments may be said
to be in the direction of optimal control of both deterministic and stochastic systems as
well as the adaptive and learning control of time-variant complex systems. These
developments have been accelerated by the digital computer.
Modern plants are designed for efficient analysis and production by human
beings. We are now confronted by control of living cells, which are nonlinear,
complex, time-variant, and “mysterious.” They cannot easily be mastered by
classical or control theory and even modern artificial intelligence (AI) employing
60 2 Mathematical Optimization Techniques
a powerful digital computer. Thus our problems are seen in terms of decision,
management, and predictions. Solutions are seen in terms of faster access to more
information and of increased aid in analyzing, understanding, and utilizing that
information to discern its usefulness. These two elements, a large amount of
information coupled with a large amount of uncertainty, taken together constitute
the ground of many of our problems today: complexity. How do we manage to cope
with complexity as well as we do and how could we manage to cope better? These
are the reasons for introducing fuzzy notations, because the fuzzy sets method is
very useful for handling uncertainties and essential for a human expert’s knowledge
acquisitions. First we have to know the meaning of fuzzy, which is vague or
imprecise information.
Everyday language is one example of the ways in which vagueness is used and
propagated such as driving a car or describing the weather and classifying a
person’s age, and so on. Therefore fuzzy is one method engineers use to describe
the operation of a system by means of fuzzy variables and terms. To solve any
control problem you might have a variable; this variable is a crisp set in the
conventional control method (i.e., it has a definite value and a certain boundary).
We define two groups as follows.
1. Members: Those that certainly belong in the set inside the boundary.
2. Nonmembers: Those that certainly don’t.
But sometimes we have collections and categories with boundaries that seem
vague and the transition from member to nonmember appears gradual rather than
abrupt. These are what we call fuzzy sets. Thus fuzzy sets are a generalization of
conventional set theory. Every fuzzy set can be represented by a membership
function, and there is no unique membership. A membership function for any
fuzzy set exhibits a continuous curve changing from 0 to 1 or vice versa, and this
transition region represents a fuzzy boundary of the term.
In computer language we define fuzzy logic as a method of easily representing
analog processes with continuous phenomena that are not easily broken down into
discrete segments; the concepts involved are often difficult to model. In conclusion,
we can use fuzzy when:
1. One or more of the control variables is continuous.
2. When a mathematical model of the process does not exist, or exists but is too
difficult to encode.
3. When a mathematical model is too complex to be evaluated fast enough for
real-time operation.
4. When a mathematical model involves too much memory on the designated chip
architecture.
5. When an expert is available who can specify the rules underlying the system
behavior and the fuzzy sets that represent the characteristics of each variable.
6. When a system has uncertainties in either the input or definition.
On the other hand, for systems where conventional control equations and
methods are already optimal or entirely equal we should avoid using fuzzy logic.
2.9 Fuzzy Systems 61
One of the advantages of fuzzy logic is that we can implement systems too
complex, too nonlinear, or with too much uncertainty to implement using tradi-
tional techniques. We can also implement and modify systems more quickly and
squeeze additional capability from existing designs. Finally it is simple to describe
and verify. Before we introduce fuzzy models we need some definitions.
• Singletons:
A deterministic term or value, for example: male and female, dead and alive,
80	C, 30 Kg. These deterministic words and numerical values have neither
flexibility nor intervals. So a numerical value to be substituted into a mathemati-
cal equation representing a scientific law is a singleton.
• Fuzzy number:
A fuzzy linguistic term that includes an imprecise numerical value, for example,
around 80	C, bigger than 25.
• Fuzzy set:
A fuzzy linguistic term that can be regarded as a set of singletons where the
grades are not only [1] but also range from [0 to 1]. It can also be a set that allows
partial membership states. Ordinary or crisp sets have only two membership
states: inclusion and exclusion (member or nonmember). Fuzzy sets allow
degrees of membership as well. Fuzzy sets are defined by labels and membership
functions, and every fuzzy set has an infinite number of membership functions
(mFs) that may represent it.
• Fuzzy linguistic terms:
Elements of which are ordered, are fuzzy intervals, and the membership function
is a bandwidth of this fuzzy linguistic term. Elements of fuzzy linguistic terms
such as “robust gentleman” or “beautiful lady” are discrete and also disordered.
This type of term cannot be defined by a continuous membership function, but
defined by vectors.
• A characteristic function of:
Singletons, an interval and a fuzzy linguistic term are given by:
(a) Singleton.
(b) An interval.
(c) Fuzzy linguistic term.
• Control variable:
A variable that appears in the premise of a rule and controls the state of the
solution variables.
• Defuzzification:
The process of converting an output fuzzy set for a solution variable into a single
value that can be used as an output.
• Overlap:
The degree to which the domain of one fuzzy set overlaps that of another.
• Solution fuzzy set:
A temporary fuzzy set created by the fuzzy model to resolve the value of a
corresponding solution variable. When all the rules have been fired the solution
fuzzy set is defuzzified into the actual solution variable.
62 2 Mathematical Optimization Techniques
• Solution variable:
The variable whose value the fuzzy logic system is meant to find.
• Fuzzy model:
The components of conventional and fuzzy systems are quite alike, differing
mainly in that fuzzy systems contain “fuzzifers” which convert inputs into their
fuzzy representations and “defuzzifiers” which convert the output of the fuzzy
process logic into “crisp” (numerically precise) solution variables.
In a fuzzy system, the values of a fuzzified input execute all the values in the
knowledge repository that have the fuzzified input as part of their premise. This
process generates a new fuzzy set representing each output or solution variable.
Defuzzification creates a value for the output variable from that new fuzzy set. For
physical systems, the output value is often used to adjust the setting of an actuator
that in turn adjusts the states of the physical systems. The change is picked up by the
sensors, and the entire process starts again. Finally we can say that there are four
steps to follow to design a fuzzy model.
1. First step: “Define the model function and operational characteristics”
The goal is to establish the architectural characteristics of the system and also to
define the specific operating properties of the proposed fuzzy system. The fuzzy
system designer’s task lies in defining what information (datapoint) flows into
the system, what basic information is performed on the data, and what data
elements are output from the system. Even if the designer lacks a mathematical
model of the system process, it is essential that she have a deep understanding of
these three phenomena. This step is also the time to define exactly where the
fuzzy subsystem fits into the total system architecture, which provides a clear
picture of how inputs and outputs flow to and from the subsystem. The designer
can then estimate the number and ranges of input and output that will be
required. It also reinforces the input-process-output design step.
2. The second step: “Define the control surfaces”
Each control and solution variable in the fuzzy model is decomposed into a set of
a fuzzy regions. These regions are given a unique name, called labels, within the
domain of the variable. Finally a fuzzy set that semantically represents the
concept associated with the label is created. Some rules of thumb help in
defining fuzzy sets.
(a) First, the number of labels associated with a variable should generally be an
odd number from [56–58].
(b) Second, each label should overlap somewhat with its neighbors. To get a
smooth stable surface fuzzy controller, the overlap should be between 10%
and 50% of the neighboring space. And the sum of vertical points of the
overlap should always be less than one.
(c) Third, the density of the fuzzy sets should be the highest around the optimal
control point of the system, and this should be out as the distance from that
point increases.
2.9 Fuzzy Systems 63
3. The third step: “Define the behavior of the control surfaces”
This step involves writing the rules that tie the input values to the output model
properties. These rules are expressed in natural language with syntax such as
IF<fuzzy proposition>, then<fuzzy proposition>
that is, IF, THEN rule, where fuzzy proposition are “x is y” or “x is not y”
x is a scalar variable, and y is a fuzzy set associated with that variable. Generally
the number of rules a system requires is simply related to the number of control
variables.
4. The fourth step: “Select a method of defuzzification”
It is a way to convert an output fuzzy set into a crisp solution variable. The two
most common ways are:
• The composite maximum.
• Calculation of the concentration.
Once the fuzzy model has been constructed, the process of solution and
protocycling begins. The model is compared against known test cases to validate
the results. When the results are not as desired, changes are made either to the
fuzzy set descriptions or to the mappings encoded in the rules.
5. Fuzzy Sets and Membership
Fuzzy set theory was developed to improve the oversimplified model, thereby
developing a more robust and flexible model in order solve real-world complex
systems involving human aspects. Furthermore, it helps the decision maker not only
toconsider theexistingalternativesundergivenconstraints (optimizeagivensystem),
but also to develop new alternatives (design a system). Fuzzy set theory has been
applied in many fields, such as operations research, management science, control
theory, artificial intelligence/expert systems, and human behavior, among others.
6. Membership Functions
A classical (crisp or hard) set is a collection of distinct objects, defined in such a
manner as to separate the elements of a given universe of discourse into two
groups: those that belong (members), and those that do not belong
(nonmembers). The transition of an element between membership and nonmem-
bership in a given set in the universe is abrupt and well defined. The crisp set can
be defined by the so-called characteristic function, for example, let U be a
universe of discourse, the characteristic function of a crisp set.
2.9.1 Basic Terminology and Definition
Let X be a classical set of objects, called the universe, whose generic elements are
denoted by x. The membership in a crisp subset of X is often viewed as the
characteristic function mA from X to {0, 1} such that:
mAðxÞ ¼ 1 if and only if x 2 A
¼ 0 otherwise (2.42)
where {0, 1} is called a valuation set.
64 2 Mathematical Optimization Techniques
If the valuation set is allowed to be the real interval [0, 1], ~A is called a fuzzy set
as proposed by Zadeh. mAðxÞ is the degree of membership of x in A. The closer the
value of mAðxÞ is to 1, the more x belongs to A. Therefore, ~A is completely
characterized by the set of ordered pairs:
~A ¼ x; mAðxÞð Þjx 2 Xf g (2.43)
It is worth noting that the characteristic function can be either a membership
function or a possibility distribution. In this study, if the membership function is
preferred, then the characteristic function is denoted asmAðxÞ. On the other hand, if
the possibility distribution is preferred, the characteristic function is specified as
pðxÞ. When X is a finite set x1; x2; :::::; xnf g, a fuzzy set A is then expressed as
~A ¼ mAðx1Þ=x1 þ :::::þ mAðxnÞ=xn ¼
X
i
mAðxiÞ=xi (2.44)
When X is not a finite set, A then can be written as
A ¼
ð
X
mAðxÞ=x (2.45)
Sometimes, we might only need objects of a fuzzy set (but not its characteristic
function), in order to transfer a fuzzy set. To do so, we need two concepts: support
and a-level cut.
2.9.2 Support of Fuzzy Set
The support of a fuzzy set A is the crisp set of all x 2 Usuch that (x) > 0. That is,
suppðAÞ ¼ x 2 UjmA>0f g (2.46)
• a-Level Set (a-Cut)
The a-level set (a-cut) of a fuzzy set A is a crisp subset of X and is shown in
Fig. 2.2. An a-cut of a fuzzy set ~A is a crisp set A which contains all the elements
of the universe [ that have a membership grade in ~A greater than or equal to a.
That is,
Aa ¼ xjmAðxÞ a and x 2 Xf g (2.47)
2.9 Fuzzy Systems 65
If Aa ¼ xjmAðxÞ>af g, then Aa is called a strong a-cut of a given fuzzy set A is
called a level set of A. That is,Y
A
¼ ajmAðxÞ ¼ a; for some x 2 [f g (2.48)
2.9.3 Normality
A fuzzy set A is normal if and only if Supx mAðxÞ ¼ 1; that is, the supreme of
mAðxÞover X is unity. A fuzzy set is subnormal if it is not normal. A nonempty
subnormal fuzzy set can be normalized by dividing each mAðxÞ by the factor
SupxmAðxÞ. (A fuzzy set is empty if and only if mAðxÞ ¼ 0 for8x 2 X)8x 2 X.
2.9.4 Convexity and Concavity
A fuzzy set A in X is convex if and only if for every pair of point x1 and x2 in X, the
membership function of A satisfies the inequality:
mAð@x1 þ ð1 @Þx2Þ minðmAðx1Þ; mAðx2ÞÞ (2.49)
where @ 2 ½0; 1(see Fig. 2.3). Alternatively, a fuzzy set is convex if all a-level sets
are convex.
Dually, A is concave if its complement Ac is convex. It is easy to show that if A
and B are convex, so is A \ B. Dually, if A and B are concave, so is A [ B.
2.9.5 Basic Operations [53]
This section is a summary of some basic set-theoretic operations useful in fuzzy
mathematical programming and fuzzy multiple objective decision making. These
operations are based on the definitions from Bellman and Zadeh.
0 
α
1 
A (x)μ
X 
A   = {x |   A (x) ≥    and x ∈X}α μ α
Fig. 2.2 Membership and a-cut
66 2 Mathematical Optimization Techniques
2.9.5.1 Inclusion
Let A and B be two fuzzy subsets of X; then A is included in B if and only if:
mAðxÞ mBðxÞ for 8x 2 X (2.50)
2.9.5.2 Equality
A and B are called equal if and only if:
mAðxÞ ¼ mBðxÞ for 8x 2 X (2.51)
2.9.5.3 Complementation
A and B are complementary if and only if:
mAðxÞ ¼ 1 mBðxÞ for 8x 2 X (2.52)
2.9.5.4 Intersection
The intersection of A and B may be denoted by A \ B which is the largest fuzzy
subset contained in both fuzzy subsets A and B. When the min operator is used to
express the logic “and,” its corresponding membership is then characterized by
mA\BðxÞ ¼ minðmAðxÞ; mBðxÞÞ for 8x 2 X
¼ mAðxÞ ^ mBðxÞ (2.53)
where ^ is a conjunction.
X1 X2
X 
0 
1 
A (∂x1+(1−∂)x2)μ
A (x1)μ
A (x2)μ
A (x)μ
Fig. 2.3 A convex fuzzy set
2.9 Fuzzy Systems 67
2.9.5.5 Union
The union (A [ B) of A and B is dual to the notion of intersection. Thus, the union
of A and B is defined as the smallest fuzzy set containing both A and B.
The membership function of A [ B is given by
mA[BðxÞ ¼ maxðmAðxÞ; mBðxÞÞ for 8x 2 X
¼ mAðxÞ _ mBðxÞ (2.54)
2.9.5.6 Algebraic Product
The algebraic product AB of A and B is characterized by the following membership
function,
mABðxÞ ¼ mAðxÞmBðxÞ for 8x 2 X (2.55)
2.9.5.7 Algebraic Sum
The algebraic sum A  B of A and B is characterized by the following membership
function,
mABðxÞ ¼ mAðxÞ þ mBðxÞ  mAðxÞmBðxÞ (2.56)
2.9.5.8 Difference
The difference A – B of A and B is characterized by
mA\BcðxÞ ¼ minðmAðxÞ; mBcðxÞÞ (2.57)
2.9.5.9 Fuzzy Arithmetic
(a) Addition of Fuzzy Number
The addition of X and Y can be calculated by using the a-level cut and max–min
convolution.
• a-level cut. Using the concept of confidence intervals, the a-level sets of X
and Y are Xa ¼ ½XaL;XaU and Ya ¼ ½YaL; YaU where the result Z of the
addition is:
Za ¼ XaðþÞYa ¼ ½XaL þ YaL;XaU þ YaU (2.58)
68 2 Mathematical Optimization Techniques
for every a 2 ½0; 1.
• Max–Min Convolution. The addition of the fuzzy number X and Y is
represented as
ZðzÞ ¼ max
z¼xþy ½min½mXðxÞ; mYðyÞ (2.59)
(b) Subtraction of Fuzzy Numbers
• a-level cut. The subtraction of the fuzzy numbers X and Y in the a-level cut
representation is:
Za ¼ XaðÞYa ¼ XaL  YaU;XaU  YaL
 
for every a 2 ½0; 1: (2.60)
• Max–Min Convolution. The subtraction of the fuzzy number X and Y is
represented as
mZðZÞ ¼ max
z¼xy ½mxðxÞ;mYðyÞf g
max
z¼xþy ½mxðxÞ; mYðyÞf g
max
z¼xþy ½mxðxÞ; mYðyÞf g (2.61)
(c) Multiplication of Fuzzy Numbers
• a-level cut. The multiplication of the fuzzy numbers X and Y in the a-level
cut representation is
Za ¼ Xað:ÞYa ¼ ½½XaLyaL; XaUYaU (2.62)
• for every a 2 ½0; 1.
• Max–Min Convolution. The multiplication of the fuzzy number X and Y is
represented by Kaufmann and Gupta in the following procedure as
1. First, find Z1 (the peak of the fuzzy number Z) such that mZðz1Þ ¼ 1; then
we calculate the left and right legs.
2. The left leg of mZðzÞ is defined as
mzðzÞ ¼ max
xy z
min½mxðxÞ; mYðyÞf g (2.63)
3. The right leg of mZðzÞ is defined as
mzðzÞ ¼ max
xy z
min½mxðxÞ; mYðyÞf g (2.64)
2.9 Fuzzy Systems 69
(d) Division of Fuzzy Numbers
a level cut: Za ¼ Xað:ÞYa ¼ ½½xaL=yaU; xaU= yaL (2.65)
• Max–Min Convolution. As defined earlier we must find the peak, then the
left and right legs.
1. The peak Z ¼ X (:) Y is used.
2. The left leg is presented as
mzðzÞ ¼ max
x=y z
min½mxðxÞ; mYðyÞf g
max
xy z
min½mxðxÞ; mYð1=yÞf g
max
xy z
min½mxðxÞ; m1=YðyÞ
n o
(2.66)
3. The right leg is presented as
mzðzÞ ¼ max
x=y z
min½mxðxÞ; mYðyÞf g
max
xy z
min½mxðxÞ; mYð1=yÞf g
max
xy z
min½mxðxÞ; m1=YðyÞ
n o
(2.67)
2.9.5.10 LR-Type Fuzzy Number
A fuzzy number is defined to be of the LR type if there are reference functions L and
R and positive scalars as shown in Fig. 2.4: a(left spread), b(right spread), and m
(mean) such that [53]:
mMðxÞ ¼
L
m x
a

 
for xm
R
x m
b
 	
for xm
8><
>>:
9>=
>>; (2.68)
As the spread increases,M becomes fuzzier and fuzzier. Symbolically we write:
M ¼ ðm; a; bÞLR (2.69)
70 2 Mathematical Optimization Techniques
2.9.5.11 Interval Arithmetic
Interval arithmetic is normally used with uncertain data obtained from different
instruments if we enclose those values obtained in a closed interval on the real line
R; that is, this uncertain value is inside an interval of confidence R,x 2 ½a1; a2,
where a1  a2.
2.9.5.12 Triangular and Trapezoidal Fuzzy Numbers
The triangular and trapezoidal fuzzy number is considered one of the most impor-
tant and useful tools in solving possibility mathematical programming problems.
Tables 2.1 and 2.2 show all the formulae used in the L–R representation of the fuzzy
number and interval arithmetic methods.
2.10 Particle Swarm Optimization (PSO) Algorithm
One of the most difficult parts encountered in practical engineering design optimi-
zation is handling constraints [61–76]. Real-world limitations frequently introduce
multiple nonlinear and nontrivial constraints in engineering design problems [77].
Constraints often limit the feasible solutions to a small subset of the design space.
A general engineering optimization problem can be defined as
Minimize f (X), X ¼ {x1, x2, . . ., xn} ∈ R
Subject to gi (X)  0, i ¼ 1, 2, . . .., p
hiðXÞ ¼ 0; i ¼ 1; 2; . . . :;m
Where
x
ðLÞ
i  xi  xðUÞi ; i ¼ 1; 2; . . . :; n
(x)μ
    1 
m -α m + m β
X 
Fig. 2.4 Triangular membership
2.10 Particle Swarm Optimization (PSO) Algorithm 71
Due to the complexity and unpredictability of constraints, a general deterministic
solution is difficult to find. In recent years, several evolutionary algorithms have
been proposed for constrained engineering optimization problems and many
methods have been proposed for handling constraints, the key point of the optimiza-
tion process. Recently a new evolutionary computational technique, called particle
swarm optimization (PSO) has been proposed and introduced [61–64].
Table 2.2 Fuzzy interval arithmetic on triangular fuzzy
numbers X ¼ xm; xp; xoð Þ & Y ¼ ym; yp; yoð Þ
Image of Y:  Y ¼ ym;yo;ypð Þ
Inverse of Y: Y1 ¼ 1 ym= ; 1 yo= ; 1 yp=ð Þ
Addition: XðþÞY ¼ xm þ ym; xp þ yp; xo þ yoð Þ
Subtraction: XðÞY ¼ XðþÞ  Y ¼ xm  ym; xp  yo; xo  ypð Þ
Multiplication:
X>0;Y>0 : XðÞY ¼ xmym; xpyp; xoyoð Þ
X<0;Y>0 : XðÞY ¼ xmym; xpyo; xoypð Þ
X<0;Y<0 : XðÞY ¼ xmym; xoyo; xpypð Þ
Scalar multiplication:
a>0; a 2 R : aðÞX ¼ axm; axp; axoð Þ
a<0; a 2 R : aðÞX ¼ axm; axo; axpð Þ
Division:
X>0;Y>0 : Xð:ÞY ¼ xm ym= ; xp yo= ; xo yp=ð Þ
X<0;Y>0 : Xð:ÞY ¼ xm ym= ; xo yo= ; xp yp=ð Þ
X<0;Y<0 : Xð:ÞY ¼ xm ym= ; xo yp= ; xp yo=ð Þ
Table 2.1 Fuzzy arithmetic on triangular L–R representation
of fuzzy numbers X ¼ x; a;bð Þ& Y ¼ y; r; dð Þ
Image of Y:  Y ¼ y; d; rð Þ  Y ¼ y; d; rð Þ
Inverse of Y: Y1 ¼ ðy1; dy2; ry2Þ
Addition: XðþÞY ¼ ðxþ y; aþ r;bþ dÞ
Subtraction: XðÞY ¼ XðþÞ  Y ¼ ðx y; aþ d; bþ rÞ
Multiplication:
X>0;Y>0 : XðÞY ¼ xy; xr þ ya; xdþ ybð Þ
X<0;Y>0 : XðÞY ¼ xy; ya xd; yb xrð Þ
X<0;Y<0 : XðÞY ¼ xy;xd yb;xr  yað Þ
Scalar multiplication:
a>0; a 2 R : aðÞX ¼ ax; aa; abð Þ
a<0; a 2 R : aðÞX ¼ ax;ab;aað Þ
Division:
X>0;Y>0 : Xð:ÞY ¼ x y= ; xdþ yað Þ y2 ; xr þ ybð Þ y2 
X<0;Y>0 : Xð:ÞY ¼ x y= ; ya xrð Þ y2 ; yb xdð Þ y2 
X<0;Y<0 : Xð:ÞY ¼ x y= ; xr  ybð Þ y2 ; xd yað Þ y2 
72 2 Mathematical Optimization Techniques
Particle swarm optimization is a population-based stochastic optimization
technique developed in [65], inspired by the social behavior of flocks of birds or
schools of fish [65]. PSO shares many similarities with evolutionary computation
techniques such as genetic algorithms. The system is initialized with a population of
random feasible solutions and searches for optima by updating generations. However,
unlike GA, PSO has no evolution operators such as crossover and mutation. The PSO
algorithm has also been demonstrated to perform well on genetic algorithm test
functions [66].
In PSO, the potential solutions, called particles, fly through the problem space by
following the current optimum particles [67]. The particles change their positions
by flying around in a multidimensional search space until a relatively unchanged
position has been encountered, or until computational limitations are exceeded [68].
In a social science context, a PSO system combines a social-only model and a
cognition-only model. The social-only component suggests that individuals ignore
their own experience and fine-tune their behavior according to the successful
beliefs of the individual in the neighborhood. On the other hand, the cognition-
only component treats individuals as isolated beings. A particle changes its position
using these models.
Each particle keeps track of its co-ordinates in the problem space, which is
associated with the best solution, fitness, it has achieved so far. The fitness value is
also stored. This value is called pbest. Another best value that is tracked by the
particle swarm optimizer is the best value obtained thus far by any particle in the
neighbors of the particle. This location is called lbest. When a particle takes the
whole population as its topological neighbors, the best value is a global best and is
called gbest.
The concept of the PSO consists of, at each timestep, changing the velocity of
(accelerating) each particle toward its pbest and lbest locations (local version of
PSO). Acceleration is weighted by a random term, with separate random numbers
being generated for acceleration toward pbest and lbest locations. In the past few
years, PSO has been successfully applied in many research and application areas.
It has been demonstrated that PSO gets better results in a faster and cheaper way
compared with other methods. As shown in the literature, the PSO algorithm has
been successfully applied to various problems [68–75].
Another reason that PSO is attractive is that there are few parameters to adjust.
One version, with slight variations, works well in a wide variety of applications.
Particle swarm optimization has been used for approaches that can be used across a
wide range of applications, as well as for specific applications focused on a specific
requirement. Many advantages of PSO over other traditional optimization
techniques can be summarized as follows [68].
(a) PSO is a population-based search algorithm (i.e., PSO has implicit parallelism).
This property ensures that PSO is less susceptible to being trapped on local
minima.
(b) PSO uses payoff (performance index or objective function) information to
guide the search in the problem space. Therefore, PSO can easily deal with
2.10 Particle Swarm Optimization (PSO) Algorithm 73
nondifferentiable objective functions. In addition, this property relieves PSO
of assumptions and approximations, which are often required by traditional
optimization models.
(c) PSO uses probabilistic transition rules and not deterministic rules. Hence, PSO
is a kind of stochastic optimization algorithm that can search a complicated and
uncertain area. This makes PSO more flexible and robust than conventional
methods.
(d) Unlike the genetic and other heuristic algorithms, PSO has the flexibility to
control the balance between global and local exploration of the search space.
This unique feature of a PSO overcomes the premature convergence problem
and enhances search capability.
(e) Unlike traditional methods, the solution quality of the proposed approach does
not depend on the initial population. Starting anywhere in the search space, the
algorithm ensures convergence to the optimal solution.
2.11 Basic Fundamentals of PSO Algorithm
The basic fundamentals of the PSO technique are stated and defined as follows [68].
1. Particle X(i): A candidate solution represented by a k-dimensional real-valued
vector, where k is the number of optimized parameters; at iteration i, the jth
particle X (i, j) can be described as
XjðiÞ ¼ ½xj;1ðiÞ; xj;2ðiÞ; . . . ; xj;kðiÞ; . . . . . . :; xj;dðiÞ (2.70)
Where: xs are the optimized parameters
xk (i,j) is the kth optimized parameter in the jth candidate solution
d represents the number of control variables
2. Population: This is a set of n particles at iteration i.
pop ðiÞ ¼ ½X1ðiÞ;X2ðiÞ; . . . . . . . . . :XnðiÞT (2.71)
where n represents the number of candidate solutions.
3. Swarm: This is an apparently disorganized population of moving particles that
tend to cluster together and each particle seems to be moving in a random
direction.
4. Particle velocity V(i): The velocity of the moving particles represented by a
d-dimensional real-valued vector; at iteration i, the jth particle Vj (i) can be
described as
VjðiÞ ¼ ½vj;1ðiÞ; vj;2ðiÞ; . . . ; vj;kðiÞ; . . . . . . :;vj;dðiÞ (2.72)
74 2 Mathematical Optimization Techniques
where: v j,k (i) is the velocity component of the jth particle with respect to the kth
dimension.
5. Inertia weight w(i): This is a control parameter, used to control the impact of the
previous velocity on the current velocity. Hence, it influences the tradeoff
between the global and local exploration abilities of the particles. For initial
stages of the search process, a large inertia weight to enhance global exploration
is recommended whereas it should be reduced at the last stages for better local
exploration. Therefore, the inertia factor decreases linearly from about 0.9 to 0.4
during a run. In general, this factor is set according to Eq. (2.73):
W ¼ Wmax  Wmax Wminð Þ
itermax
 iter (2.73)
where itermax is the maximum number of iterations and iter is the current number
of iterations.
6. Individual best X* (i): During the movement of a particle through the search
space, it compares its fitness value at the current position to the best fitness value
it has ever reached at any iteration up to the current iteration. The best position
that is associated with the best fitness encountered thus far is called the individual
best X* (i). For each particle in the swarm, X* (i) can be determined and updated
during the search. For the jth particle, individual best can be expressed as
Xj
ðiÞ ¼ ½xj1ðiÞ; xj;2ðiÞ; . . . ; xj;dðiÞT (2.74)
In aminimization problemwith only one objective function f, the individual best of
the jth particle Xj ðiÞ is updated whenever f ðXj ðiÞÞ<f ðXj i 1ð ÞÞ. Otherwise, the
individual best solution of the jth particle will be kept as in the previous iteration.
7. Global best X** (t): This is the best position among all of the individual best
positions achieved thus far.
8. Stopping criteria: The search process will be terminated whenever one of the
following criteria is satisfied.
• The number of iterations since the last change of the best solution is greater
than a prespecified number.
• The number of iterations reaches the maximum allowable number.
The particle velocity in the kth dimension is limited by some maximum value,
vmaxk vk
max. This limit enhances local exploration of the problem space and it
realistically simulates the incremental changes of human learning. The maximum
velocity in the kth dimension is characterized by the range of the kth optimized
parameter and given by
Vk
max ¼ xk
max  xkmaxð Þ
N
(2.75)
where N is a chosen number of intervals in the kth dimension.
2.11 Basic Fundamentals of PSO Algorithm 75
2.11.1 General PSO Algorithm
In a PSO algorithm, the population has n particles that represent candidate
solutions. Each particle is a k-dimensional real-valued vector, where k is the
number of the optimized parameters [69]. Therefore, each optimized parameter
represents a dimension of the problem space. The PSO technique steps can be
described as follows.
Step 1: Initialization: Set i ¼ 0 and generate random n particles {Xj (0), j ¼ 1,
2, . . ., n}. Each particle is considered to be a solution for the problem and it
can be described as Xj(0) ¼ [xi,1(0); xi,2(0); . . ., xi,k(0)]. Each control
variable has a range [xmin, xmax]. Each particle in the initial population is
evaluated using the objective function f. If the candidate solution is a
feasible solution (i.e., all problem constraints have been met), then go to
Step 2; else repeat this step.
Step 2: Counter updating: Update the counter i ¼ i + 1.
Step 3: Compute the objective function.
Step 4: Velocity updating: Using the global best and individual best, the jth
particle velocity in the kth dimension in this study (integer problem) is
updated according to the following equation.
Vðk; j; iþ 1Þ ¼ wVðk; j; iÞ þ C1rand pbestxðj; kÞ  xðk; j; iÞð Þ
þ C2rand gbestxðkÞ  xðk; j; iÞð Þ (2.76)
Where i is the iteration number
j is the particle number
k is the kth control variable
w is the inertia weighting factor
c1, c2 are acceleration constants
rand () is a uniform random value in the range of [0,1]
V(k,j,i) is the velocity of particle j at iteration i
x(k,j,i) is the current position of particle j at iteration j
Then, check the velocity limits. If the velocity violated its limit, set it at its
proper limit. The second term of the above equation represents the cognitive
part of the PSO where the particle changes its velocity based on its own
thinking and memory. The third term represents the social part of PSO
where the particle changes its velocity based on the social–psychological
adaptation of knowledge.
Step 5: Position updating: Based on the updated velocity, each particle changes its
position according to Eq. 2.77 (Fig. 2.5).
xðk; j; iþ 1Þ ¼ xðk; j 1; iÞ þ vðk; j; iÞ (2.77)
76 2 Mathematical Optimization Techniques
Calculate
Objective
Function 
Position Update 
Stopping
Criteria 
Optimal Control
Variables Setting 
Feasible Random 
Initialization 
Velocity Update 
Update Counter 
Individual Best
Update if 
needed
Global Best
Update if 
needed 
Yes 
No 
Fig. 2.5 Particle swarm optimization algorithm
2.11 Basic Fundamentals of PSO Algorithm 77
Step 6: Individual best updating: Each particle is evaluated and updated according
to the update position.
Step 7: Search for the minimum value in the individual best where its solution has
ever been reached in every iteration and considered it as the minimum.
Step 8: Stopping criteria: If one of the stopping criteria is satisfied, then stop;
otherwise go to Step 2.
References
1. El-Hawary, M.E., Christensen, G.S.: Optimal Economic Operation of Electric Power Systems.
Academic, New York (1979)
2. Horst, R., Pardalos, P.M. (eds.): Handbook of Global Optimization. Kluwer, Netherlands
(1995)
3. Kuo, B.C.: Automatic Control Systems, 4th edn. Prentice-Hall, Englewood Cliffs (1982)
4. Nemhauser, G.L., Rinnooy Kan, A.H.G., Todd, M.J. (eds.): Optimization. Elsevier Science,
Netherlands (1989)
5. Wolfe, M.A.: Numerical Methods for Unconstrained Optimization: An Introduction. Van
Nostrand Reinhold, New York (1978)
6. Zill, D.G., Cullen, M.R.: Advanced Engineering Mathematics. PWS, Boston (1992)
7. Porter, W.A.: Modern Foundations of Systems Engineering. Macmillan, New York (1966)
8. Luenberger, D.G.: Optimization by Vector Space Methods. Wiley, New York (1969)
9. Sage, A.: Optimum System Controls. Prentice-Hall, Englewood Cliffs (1968)
10. Sage, A.P., White, C.C.: Optimum Systems Control. Prentice-Hall, Englewood Cliffs (1977)
11. Bryson, A.E., Ho, Y.C.: Applied Optimal Control. Wiley, New York (1975)
12. Rao, S.S.: Optimization Theory and Applications. Wiley Eastern, New Delhi (1979)
13. Leitmann, G.: The Calculus of Variations and Optimal Control. Plenum Press, New York
(1981)
14. Kirk, D.E.: Optimal Control Theory: An Introduction. Prentice-Hall, Englewood Cliffs (1970)
15. Narici, B.: Functional Analysis. Academic, New York (1966)
16. Aarts, E., Korst, J.: Simulated Annealing and Boltzman Machines: A Stochastic Approach to
Combinatorial Optimization and Neural Computing. Wiley, New York (1989)
17. Kirkpatrick, S., Gelatt, C.D., Vecchi, M.P.: Optimization by simulated annealing. Science 220,
671–680 (1983)
18. Cerny, V.: Thermodynamical approach to the traveling salesman problem: an efficient simu-
lation algorithm. J. Optim. Theor. Appl. 45(1), 41–51 (1985)
19. Selim, S.Z., Alsultan, K.: A simulated annealing algorithm for the clustering problem. Pattern
Recogn. 24(10), 1003–1008 (1991)
20. Metropolis, N., Rosenbluth, A., Rosenbluth, M., Teller, A., Teller, E.: Equations of state
calculations by fast computing machines. J. Chem. Phys. 21, 1087–1092 (1953)
21. Tado, M., Kubo, R., Saito, N.: Statistical Physics. Springer, Berlin (1983)
22. Aarts, E.H.L., van Laarhoven, P.J.M.: Statistical cooling: a general approach to combinatorial
optimization problems. Philips J. Res. 40, 193–226 (1985)
23. Aarts, E.H.L., van Laarhoven, P.J.M.: A new polynomial time cooling schedule. In:
Proceedings of the IEEE International Conference on Computer-Aided Design, pp. 206–208.
Santa Clara (1985)
24. Aarts, E.H.L., van Laarhoven, P.J.M.: Simulated annealing: a pedestrian review of the theory
and some applications. In: Devijver, P.A., Kittler, J. (eds.) Pattern Recognition Theory and
Applications. NASI Series on Computer and Systems Sciences 30, pp. 179–192. Springer,
Berlin (1987)
78 2 Mathematical Optimization Techniques
25. Glover, F., Greenberg, H.J.: New approach for heuristic search: a bilateral linkage with
artificial intelligence. Eur. J. Oper. Res. 39, 119–130 (1989)
26. Glover, F.: Future paths for integer programming and links to artificial intelligence. Comput.
Oper. Res. 13(5), 533–549 (1986)
27. Glover, F.: Tabu search-part I. Orsa J. Comput. 1(3), 190–206 (1989). Summer
28. Glover, F.: Artificial intelligence, heuristic frameworks and tabu search. Manage. Decis. Econ.
11, 365–375 (1990)
29. Glover, F.: Tabu search-part II. Orsa J. Comput. 2(1), 4–32 (1990). Winter
30. Bland, J.A., Dawson, G.P.: Tabu search and design optimization. Comput. Aided Des. 23(3),
195–201 (1991). April
31. Glover, F.: A user’s guide to tabu search. Ann. Oper. Res. 41, 3–28 (1993)
32. Laguna, M., Glover, F.: Integrating target analysis and tabu search for improved scheduling
systems. Expert Syst. Appl. 6, 287–297 (1993)
33. Kelly, J.P., Olden, B.L., Assad, A.A.: Large-scale controlled rounding using tabu search with
strategic oscillation. Ann. Oper. Res. 41, 69–84 (1993)
34. Barnes, J.W., Laguna, M.: A tabu search experience in production scheduling. Ann. Oper. Res.
41, 141–156 (1993)
35. Charest, M., Ferland, J.A.: Preventive maintenance scheduling of power generating units. Ann.
Oper. Res. 41, 185–206 (1993)
36. Daniels, R.L., Mazzola, J.B.: A tabu search heuristic for the flexible-resource flow shop
scheduling problem. Ann. Oper. Res. 41, 207–230 (1993)
37. Amico, M.D., Trubian, M.: Applying tabu search to the jop-shop scheduling problem. Ann.
Oper. Res. 41, 231–252 (1993)
38. Mooney, E.L., Rardin, R.L.: Tabu search for a class of scheduling problems. Ann. Oper. Res.
41, 253–278 (1993)
39. Davis, L. (ed.): Handbook of Genetic Algorithms. Van Nostrand, New York (1991)
40. Michalewicz, Z.: Genetic Algorithms + Data Structures ¼ Evolution Programs. Springer,
Berlin/Heidelberg/New York (1992)
41. Grefenstette, J.J.: Optimization of control parameters for genetic algorithms. IEEE Trans. Syst.
Man Cybern. 16(1), 122–128 (1986)
42. Grefenstette, J.J., Baker, J.E.: How genetic algorithm work: a critical look at implicit parallel-
ism. In: The Proceedings of the Third International Conference on Genetic Algorithms.
Morgan Kaufmann, San Mateo (1989)
43. Buckles, B.P., Petry, F.E., Kuester, R.L.: Schema survival rates and heuristic search in genetic
algorithms. In: Proceedings of Tools for AI, pp. 322–327. Washington, DC (1990)
44. Awadh, B., Sepehri, N., Hawaleshka, O.: A computer-aided process planning model based on
genetic algorithms. Comput. Oper. Res. 22(8), 841–856 (1995)
45. Goldberg, D.E., Deb, K., Clark, J.H.: Genetic algorithms, noise, and the sizing of populations.
Complex Syst. 6, 333–362 (1992)
46. Homaifar, A., Guan, S., Liepins, G.E.: Schema analysis of the traveling salesman problem
using genetic algorithms. Complex Syst. 6, 533–552 (1992)
47. Goldberg, D.E.: Genetic Algorithms in Search, Optimization and Machine Learning. Addison
Wesely, Reading Mass (1989)
48. Mantawy, H., Abdel-Magid, Y.L., Selim, S.Z.: A simulated annealing algorithm for unit
commitment. IEEE Trans. Power Syst. 13(1), 197–204 (1998)
49. Dasgupta, D., Mcgregor, D.R.: Thermal unit commitment using genetic algorithms. IEE Proc.
Gener. Transm. Distrib. 141(5), 459–465 (1994). September
50. Ma, X., El-Keib, A.A., Smith, R.E., Ma, H.: A genetic algorithm based approach to thermal
unit commitment of electric power systems. Electr. Power Syst. Res. 34, 29–36 (1995)
51. Kazarilis, S.A., Bakirtzis, A.G., Petridis, V.: A genetic algorithm solution to the unit commit-
ment problem. IEEE Trans. Power Syst. 11(1), 83–91 (1996). February
References 79
52. Yang, P.-C., Yang, H.-T., Huang, C.-L.: Solving the unit commitment problem with a genetic
algorithm through a constraint satisfaction technique. Electr. Power Syst. Res. 37, 55–65
(1996)
53. Ross, T.J.: Fuzzy Logic with Engineering Applications. McGraw-Hill, New York (1995)
54. Nazarka, J., Zalewski, W.: An application of the fuzzy regression analysis to the electrical load
estimation. Electrotechnical Conference: MELECON’96, Bari, Italy, vol. 3, pp. 1563–1566.
IEEE Catalog #96CH35884, 13–16 May 1996
55. Tanaka, H., Uejima, S., Asai, K.: Linear regression analysis with fuzzy model. IEEE Trans.
Syst. Man Cybern. 12(6), 903–907 (1983)
56. Chang, P.T., Lee, E.S.: Fuzzy least absolute deviations regression based on the ranking of
fuzzy numbers. IEEE World Congress on Fuzzy Systems, Orlando, FL, USA, IEEE Proceed-
ing, vol. 2, pp. 1365–1369 (1994)
57. Watada, J., Yabuchi, Y.: Fuzzy robust regression analysis. In: IEEEWorld Congress on Fuzzy
Systems, Orlando, FL, USA, IEEE Proceeding, vol. 2, pp. 1370–1376 (1994)
58. Alex, R., Wang, P.Z.: A new resolution of fuzzy regression analysis. In: IEEE International
Conference on Systems, Man, and Cybernetics, San Diego, California, USA, vol. 2,
pp. 2019–2021. (1998)
59. Ishibuchi, H., Nii, M.: Fuzzy regression analysis by neural networks with non-symmetric fuzzy
number weights. In: Proceedings of IEEE International Conference on Neural Networks,
Washington, DC, USA, vol. 2, pp. 1191–1196 (1996)
60. Ghoshray, S.: Fuzzy linear regression analysis by symmetric triangular fuzzy number
coefficients. In: Proceedings of IEEE International Conference on Intelligent Engineering
Systems, Budapest, Hungary, pp. 307–313 (1997)
61. Hu, X., Eberhart, R.C., Shi, Y.: Engineering optimization with particle swarm. In: IEEE
International Conference on Evolutionary Computation, pp. 53–57 (2003)
62. Kennedy, J.: The particle swarm: social adaptation of knowledge. In: Proceedings of 1997
IEEE International Conference on Evolutionary Computation (ICEC ’97), pp. 303–8.
Indianapolis (1997)
63. Angeline, P.: Evolutionary optimization versus particle swarm optimization: philosophy and
performance differences. In: Proceedings of the 7th Annual Conference on Evolutionary
Programming, San Diego, California, USA, pp. 601–10 (1998)
64. Shi, Y., Eberhart, R.: Parameter selection in particle swarm optimization. In: Proceedings of
the 7th Annual Conference on Evolutionary Programming, San Diego, California, USA,
pp. 591–600 (1998)
65. Stott, B., Hobson, E.: Power system security control calculation using linear programming.
IEEE Transactions on Power Apparatus and Systems, vol. PAS-97, pp. 1713–1731 (1978)
66. Ozcan, E., Mohan, C.: Analysis of a simple particle swarm optimization system. Intell. Eng.
Syst. Artif. Neural Networks 8, 253–258 (1998)
67. Kennedy, J., Eberhart, R.: Particle swarm optimization. In: IEEE International Conference on
Evolutionary Computation, Perth, WA, Australia, pp. 1942–1948 (1995)
68. Eberhart, R.C., Shi, Y.: Comparing inertia weights and constriction factors in particle swarm
optimization. In: IEEE International Conference on Evolutionary Computation, San Antonio,
TX, USA, pp. 84–88 (2000)
69. Abido, M.A.: Optimal design of power-system stabilizers using particle swarm optimization.
IEEE Trans. Energy Convers. 17(3), 406–413 (2002). September
70. Gaing, Z.L.: Particle swarm optimization to solving the economic dispatch considering the
generator constraints. IEEE Trans. Power Syst. 18(3), 11871–195 (2003). August
71. Hirotaka, Y., Kawata, K., Fukuyama, Y.: A particle swarm optimization for reactive power and
voltage control considering voltage security assessment. IEEE Trans. Power Syst. 15(4),
1232–1239 (2000). November
72. Miranda, V., Fonseca, N.: EPSO-evolutionary particle swarm optimization, a new algorithm
with applications in power systems. In: IEEE Trans. Power Syst. pp. 745–750 (2000)
80 2 Mathematical Optimization Techniques
73. Shi, Y., Eberhart, R.C.: A modified particle swarm optimizer. Proceedings of IEEE Interna-
tional Conference on Evolutionary Computation, pp. 69–73. Anchorage (1998)
74. Zhenya, H., et al.: Extracting rules from fuzzy neural network by particle swarm optimization.
Proceedings of IEEE International Conference on Evolutionary Computation, pp. 74–77.
Anchorage (1998)
75. Kennedy, J., Spears, W.: Matching algorithm to problems: an expermental test of the particle
swarm optimization and some genetic algorithms on the multimodal problem generator.
In: Proceedings of IEEE International Conference on Evolutionary Computation, pp. 78–83.
Anchorage (1998)
76. Angeline, P.: Using selection to improve particle swarm optimization. In: Proceedings of IEEE
International Conference on Evolutionary Computation, pp. 84–89. Anchorage (1998)
77. Talaq, J.H., El-Hawary, F., El-Hawary, M.E.: A summary of environmental/economic dis-
patch algorithms. IEEE Trans. Power Syst. 9, 1508–1516 (1994). August
78. Soliman, S.A., Al-Kandari, M.A.: Electrical Load Forecasting; Modeling and Model Construc-
tion. Elsevier, New York (2010)
79. Mantawy, H., Abdel-Magid, Y.L., Selim, S.Z., Salah, M.A.: An improved simulated annealing
algorithm for unit commitment-application to Sceco-East. In: 3rd International Conference on
Intelligent Applications in Communications and Power Systems, IACPS’97, pp. 133–139.
UAE (1997)
References 81
http://www.springer.com/978-1-4614-1751-4

