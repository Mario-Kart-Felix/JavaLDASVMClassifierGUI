Enhancing Sparsity by Reweighted ℓ1 Minimization
Emmanuel J. Candès† Michael B. Wakin♯
Stephen P. Boyd§
† Applied and Computational Mathematics, Caltech, Pasadena, CA 91125
♯ Electrical Engineering & Computer Science, University of Michigan, Ann Arbor, MI 48109
§ Department of Electrical Engineering, Stanford University, Stanford, CA 94305
October 2007; Revised July 2008
Abstract
It is now well understood that (1) it is possible to reconstruct sparse signals exactly from
what appear to be highly incomplete sets of linear measurements and (2) that this can be
done by constrained ℓ1 minimization. In this paper, we study a novel method for sparse signal
recovery that in many situations outperforms ℓ1 minimization in the sense that substantially
fewer measurements are needed for exact recovery. The algorithm consists of solving a sequence
of weighted ℓ1-minimization problems where the weights used for the next iteration are computed
from the value of the current solution. We present a series of experiments demonstrating the
remarkable performance and broad applicability of this algorithm in the areas of sparse signal
recovery, statistical estimation, error correction and image processing. Interestingly, superior
gains are also achieved when our method is applied to recover signals with assumed near-sparsity
in overcomplete representations—not by reweighting the ℓ1 norm of the coefficient sequence as is
common, but by reweighting the ℓ1 norm of the transformed object. An immediate consequence
is the possibility of highly efficient data acquisition protocols by improving on a technique known
as Compressive Sensing.
Keywords. ℓ1-minimization, iterative reweighting, underdetermined systems of linear equa-
tions, Compressive Sensing, the Dantzig selector, sparsity, FOCUSS.
1 Introduction
What makes some scientific or engineering problems at once interesting and challenging is that
often, one has fewer equations than unknowns. When the equations are linear, one would like to
determine an object x0 ∈ Rn from data y = Φx0, where Φ is an m×n matrix with fewer rows than
columns; i.e., m < n. The problem is of course that a system with fewer equations than unknowns
usually has infinitely many solutions and thus, it is apparently impossible to identify which of these
candidate solutions is indeed the “correct” one without some additional information.
In many instances, however, the object we wish to recover is known to be structured in the
sense that it is sparse or compressible. This means that the unknown object depends upon a
smaller number of unknown parameters. In a biological experiment, one could measure changes of
1
expression in 30,000 genes and expect at most a couple hundred genes with a different expression
level. In signal processing, one could sample or sense signals which are known to be sparse (or
approximately so) when expressed in the correct basis. This premise radically changes the problem,
making the search for solutions feasible since the simplest solution now tends to be the right one.
Mathematically speaking and under sparsity assumptions, one would want to recover a sig-
nal x0 ∈ Rn, e.g., the coefficient sequence of the signal in the appropriate basis, by solving the
combinatorial optimization problem
(P0) min
x∈Rn
‖x‖ℓ0 subject to y = Φx, (1)
where ‖x‖ℓ0 = |{i : xi 6= 0}|. This is a common sense approach which simply seeks the simplest
explanation fitting the data. In fact, this method can recover sparse solutions even in situations in
which m ≪ n. Suppose for example that all sets of m columns of Φ are in general position. Then
the program (P0) perfectly recovers all sparse signals x0 obeying ‖x0‖ℓ0 ≤ m/2. This is of little
practical use, however, since the optimization problem (1) is nonconvex and generally impossible
to solve as its solution usually requires an intractable combinatorial search.
A common alternative is to consider the convex problem
(P1) min
x∈Rn
‖x‖ℓ1 subject to y = Φx, (2)
where ‖x‖ℓ1 =
∑n
i=1 |xi|. Unlike (P0), this problem is convex—it can actually be recast as a linear
program—and is solved efficiently [1]. The programs (P0) and (P1) differ only in the choice of
objective function, with the latter using an ℓ1 norm as a proxy for the literal ℓ0 sparsity count. As
summarized below, a recent body of work has shown that perhaps surprisingly, there are conditions
guaranteeing a formal equivalence between the combinatorial problem (P0) and its relaxation (P1).
The use of the ℓ1 norm as a sparsity-promoting functional traces back several decades. A lead-
ing early application was reflection seismology, in which a sparse reflection function (indicating
meaningful changes between subsurface layers) was sought from bandlimited data. In 1979, Taylor,
Banks and McCoy [2] proposed the use of ℓ1 to deconvolve seismic traces by improving on earlier
ideas of Claerbout and Muir [3]. Over the next decade this idea was refined to better handle obser-
vation noise [4], and the sparsity-promoting nature of ℓ1 minimization was empirically confirmed.
Rigorous results began to appear in the late-1980’s, with Donoho and Stark [5] and Donoho and
Logan [6] quantifying the ability to recover sparse reflectivity functions. The application areas for
ℓ1 minimization began to broaden in the mid-1990’s, as the LASSO algorithm [7] was proposed
as a method in statistics for sparse model selection, Basis Pursuit [8] was proposed in compu-
tational harmonic analysis for extracting a sparse signal representation from highly overcomplete
dictionaries, and a related technique known as total variation minimization was proposed in image
processing [9, 10].
Some examples of ℓ1 type methods for sparse design in engineering include Vandenberghe et
al. [11, 12] for designing sparse interconnect wiring, and Hassibi et al. [13] for designing sparse
control system feedback gains. In [14], Dahleh and Diaz-Bobillo solve controller synthesis problems
with an ℓ1 criterion, and observe that the optimal closed-loop responses are sparse. Lobo et
al. used ℓ1 techniques to find sparse trades in portfolio optimization with fixed transaction costs
in [15]. In [16], Ghosh and Boyd used ℓ1 methods to design well connected sparse graphs; in [17],
Sun et al. observe that optimizing the rates of a Markov process on a graph leads to sparsity.
In [1, §6.5.4, §11.4.1], Boyd and Vandenberghe describe several problems involving ℓ1 methods for
2
sparse solutions, including finding small subsets of mutually infeasible inequalities, and points that
violate few constraints. In a recent paper, Koh et al. used these ideas to carry out piecewise-linear
trend analysis [18].
Over the last decade, the applications and understanding of ℓ1 minimization have continued to
increase dramatically. Donoho and Huo [19] provided a more rigorous analysis of Basis Pursuit, and
this work was extended and refined in subsequent years, see [20–22]. Much of the recent focus on
ℓ1 minimization, however, has come in the emerging field of Compressive Sensing [23–25]. This is a
setting where one wishes to recover a signal x0 from a small number of compressive measurements
y = Φx0. It has been shown that ℓ1 minimization allows recovery of sparse signals from remarkably
few measurements [26,27]: supposing Φ is chosen randomly from a suitable distribution, then with
very high probability, all sparse signals x0 for which ‖x0‖ℓ0 ≤ m/α with α = O(log(n/m)) can be
perfectly recovered by using (P1). Moreover, it has been established [27] that Compressive Sensing
is robust in the sense that ℓ1 minimization can deal very effectively (a) with only approximately
sparse signals and (b) with measurement noise. The implications of these facts are quite far-
reaching, with potential applications in data compression [24,28], digital photography [29], medical
imaging [23,30], error correction [31,32], analog-to-digital conversion [33], sensor networks [34,35],
and so on. (We will touch on some more concrete examples in Section 3.)
The use of ℓ1 regularization has become so widespread that it could arguably be considered the
“modern least squares”. This raises the question of whether we can improve upon ℓ1 minimization?
It is natural to ask, for example, whether a different (but perhaps again convex) alternative to ℓ0
minimization might also find the correct solution, but with a lower measurement requirement than
ℓ1 minimization.
In this paper, we consider one such alternative, which aims to help rectify a key difference
between the ℓ1 and ℓ0 norms, namely, the dependence on magnitude: larger coefficients are penalized
more heavily in the ℓ1 norm than smaller coefficients, unlike the more democratic penalization of the
ℓ0 norm. To address this imbalance, we propose a weighted formulation of ℓ1 minimization designed
to more democratically penalize nonzero coefficients. In Section 2, we discuss an iterative algorithm
for constructing the appropriate weights, in which each iteration of the algorithm solves a convex
optimization problem, whereas the overall algorithm does not. Instead, this iterative algorithm
attempts to find a local minimum of a concave penalty function that more closely resembles the
ℓ0 norm. Finally, we would like to draw attention to the fact that each iteration of this algorithm
simply requires solving one ℓ1 minimization problem, and so the method can be implemented readily
using existing software.
In Section 3, we present a series of experiments demonstrating the superior performance and
broad applicability of this algorithm, not only for recovery of sparse signals, but also pertaining
to compressible signals, noisy measurements, error correction, and image processing. This section
doubles as a brief tour of the applications of Compressive Sensing. In Section 4, we demonstrate
the promise of this method for efficient data acquisition. Finally, we conclude in Section 5 with a
final discussion of related work and future directions.
3
2 An iterative algorithm for reweighted ℓ1 minimization
2.1 Weighted ℓ1 minimization
Consider the “weighted” ℓ1 minimization problem
(WP1) min
x∈Rn
∑
i=1
wi|xi| subject to y = Φx, (3)
where w1, w2, . . . , wn are positive weights. Just like its “unweighted” counterpart (P1), this convex
problem can be recast as a linear program. In the sequel, it will be convenient to denote the
objective functional by ‖Wx‖ℓ1 where W is the diagonal matrix with w1, . . . , wn on the diagonal
and zeros elsewhere.
The weighted ℓ1 minimization (WP1) can be viewed as a relaxation of a weighted ℓ0 minimization
problem
(WP0) min
x∈Rn
‖Wx‖ℓ0 subject to y = Φx. (4)
Whenever the solution to (P0) is unique, it is also the unique solution to (WP0) provided that
the weights do not vanish. However, the corresponding ℓ1 relaxations (P1) and (WP1) will have
different solutions in general. Hence, one may think of the weights (wi) as free parameters in the
convex relaxation, whose values—if set wisely—could improve the signal reconstruction.
This raises the immediate question: what values for the weights will improve signal reconstruc-
tion? One possible use for the weights could be to counteract the influence of the signal magnitude
on the ℓ1 penalty function. Suppose, for example, that the weights were inversely proportional to
the true signal magnitude, i.e., that
wi =
{
1
|x0,i|
, x0,i 6= 0,
∞, x0,i = 0.
(5)
If the true signal x0 is k-sparse, i.e., obeys ‖x0‖ℓ0 ≤ k, then (WP1) is guaranteed to find the correct
solution with this choice of weights, assuming only that m ≥ k and that just as before, the columns
of Φ are in general position. The large (actually infinite) entries in wi force the solution x to
concentrate on the indices where wi is small (actually finite), and by construction these correspond
precisely to the indices where x0 is nonzero. It is of course impossible to construct the precise
weights (5) without knowing the signal x0 itself, but this suggests more generally that large weights
could be used to discourage nonzero entries in the recovered signal, while small weights could be
used to encourage nonzero entries.
For the sake of illustration, consider the simple 3-D example in Figure 1, where x0 = [0 1 0]
T
and
Φ =
[
2 1 1
1 1 2
]
.
We wish to recover x0 from y = Φx0 = [1 1]
T . Figure 1(a) shows the original signal x0, the set
of points x ∈ R3 obeying Φx = Φx0 = y, and the ℓ1 ball of radius 1 centered at the origin. The
interior of the ℓ1 ball intersects the feasible set Φx = y, and thus (P1) finds an incorrect solution,
namely, x⋆ = [1/3 0 1/3]T 6= x0 (see Figure 1(b)).
Consider now a hypothetical weighting matrix W = diag([3 1 3]T ). Figure 1(c) shows the
“weighted ℓ1 ball” of radius ‖Wx‖ℓ1 = 1 centered at the origin. Compared to the unweighted ℓ1
4
(a) (b) (c)
Figure 1: Weighting ℓ1 minimization to improve sparse signal recovery. (a) Sparse signal
x0, feasible set Φx = y, and ℓ1 ball of radius ‖x0‖ℓ1 . (b) There exists an x 6= x0 for which
‖x‖ℓ1 < ‖x0‖ℓ1 . (c) Weighted ℓ1 ball. There exists no x 6= x0 for which ‖Wx‖ℓ1 ≤ ‖Wx0‖ℓ1 .
ball (Figure 1(a)), this ball has been sharply pinched at x0. As a result, the interior of the weighted
ℓ1 ball does not intersect the feasible set, and consequently, (WP1) will find the correct solution
x⋆ = x0. Indeed, it is not difficult to show that the same statements would hold true for any
positive weighting matrix for which w2 < (w1 + w3)/3. Hence there is a range of valid weights for
which (WP1) will find the correct solution. As a rough rule of thumb, the weights should relate
inversely to the true signal magnitudes.
2.2 An iterative algorithm
The question remains of how a valid set of weights may be obtained without first knowing x0. As
Figure 1 shows, there may exist a range of favorable weighting matrices W for each fixed x0, which
suggests the possibility of constructing a favorable set of weights based solely on an approximation
x to x0 or on other side information about the vector magnitudes.
We propose a simple iterative algorithm that alternates between estimating x0 and redefining
the weights. The algorithm is as follows:
1. Set the iteration count ℓ to zero and w
(0)
i = 1, i = 1, . . . , n.
2. Solve the weighted ℓ1 minimization problem
x(ℓ) = arg min ‖W (ℓ)x‖ℓ1 subject to y = Φx. (6)
3. Update the weights: for each i = 1, . . . , n,
w
(ℓ+1)
i =
1
|x(ℓ)i | + ǫ
. (7)
4. Terminate on convergence or when ℓ attains a specified maximum number of iterations ℓmax.
Otherwise, increment ℓ and go to step 2.
5
We introduce the parameter ǫ > 0 in step 3 in order to provide stability and to ensure that a
zero-valued component in x(ℓ) does not strictly prohibit a nonzero estimate at the next step. As
empirically demonstrated in Section 3, ǫ should be set slightly smaller than the expected nonzero
magnitudes of x0. In general, the recovery process tends to be reasonably robust to the choice of ǫ.
Using an iterative algorithm to construct the weights (wi) tends to allow for successively better
estimation of the nonzero coefficient locations. Even though the early iterations may find inaccurate
signal estimates, the largest signal coefficients are most likely to be identified as nonzero. Once
these locations are identified, their influence is downweighted in order to allow more sensitivity for
identifying the remaining small but nonzero signal coefficients.
Figure 2 illustrates this dynamic by means of an example in sparse signal recovery. Figure 2(a)
shows the original signal of length n = 512, which contains 130 nonzero spikes. We collect m = 256
measurements where the matrix Φ has independent standard normal entries. We set ǫ = 0.1
and ℓmax = 2. Figures 2(b)-(d) show scatter plots, coefficient-by-coefficient, of the original signal
coefficient x0 versus its reconstruction x
(ℓ). In the unweighted iteration (Figure 2(b)), we see
that all large coefficients in x0 are properly identified as nonzero (with the correct sign), and that
‖x0 − x(0)‖ℓ∞ = 0.4857. In this first iteration, ‖x(0)‖ℓ0 = 256 = m, with 15 nonzero spikes in
x0 reconstructed as zeros and 141 zeros in x0 reconstructed as nonzeros. These numbers improve
after one reweighted iteration (Figure 2(c)) with now ‖x − x(1)‖ℓ∞ = 0.2407, ‖x(1)‖ℓ0 = 256 =
m, 6 nonzero spikes in x0 reconstructed as zeros and 132 zeros in x0 reconstructed as nonzeros.
This improved signal estimate is then sufficient to allow perfect recovery in the second reweighted
iteration (Figure 2(d)).
2.3 Analytical justification
The iterative reweighted algorithm falls in the general class of Majorization-Minimization (MM)
algorithms, see [36] and references therein. In a nutshell, MM algorithms are more general than
EM algorithms, and work by iteratively minimizing a simple surrogate function majorizing a given
objective function. To establish this connection, consider the problem
min
x∈Rn
n
∑
i=1
log(|xi| + ǫ) subject to y = Φx, (8)
which is equivalent to
min
x,u∈Rn
n
∑
i=1
log(ui + ǫ) subject to
y = Φx,
|xi| ≤ ui, i = 1, . . . , n. (9)
The equivalence means that if x⋆ is a solution to (8), then (x⋆, |x⋆|) is a solution to (9). And
conversely, if (x⋆, u⋆) is a solution to (9), then x⋆ is a solution to (8).
Problem (9) is of the general form
min
v
g(v) subject to v ∈ C,
where C is a convex set. In (9), the function g is concave and, therefore, below its tangent. Thus,
one can improve on a guess v at the solution by minimizing a linearization of g around v. This
simple observation yields the following MM algorithm: starting with v(0) ∈ C, inductively define
v(ℓ+1) = arg min g(v(ℓ)) + ∇g(v(ℓ)) · (v − v(ℓ)) subject to v ∈ C.
6
0 100 200 300 400 500
−2
−1
0
1
2
i
x 0
,i
−2 −1 0 1 2
−2
−1
0
1
2
x
0
x(
0)
(a) (b)
−2 −1 0 1 2
−2
−1
0
1
2
x
0
x(
1)
−2 −1 0 1 2
−2
−1
0
1
2
x
0
x(
2)
(c) (d)
Figure 2: Sparse signal recovery through reweighted ℓ1 iterations. (a) Original length n =
512 signal x0 with 130 spikes. (b) Scatter plot, coefficient-by-coefficient, of x0 versus its
reconstruction x(0) using unweighted ℓ1 minimization. (c) Reconstruction x
(1) after the first
reweighted iteration. (d) Reconstruction x(2) after the second reweighted iteration.
7
Each iterate is now the solution to a convex optimization problem. In the case (9) of interest, this
gives
(x(ℓ+1), u(ℓ+1)) = arg min
n
∑
i=1
ui
u
(ℓ)
i + ǫ
subject to
y = Φx,
|xi| ≤ ui, i = 1, . . . , n,
which is of course equivalent to
x(ℓ+1) = arg min
n
∑
i=1
|xi|
|x(ℓ)i | + ǫ
subject to y = Φx.
One now recognizes our iterative algorithm.
In a Ph.D. thesis [37] and two subsequent papers [38,39], Fazel et al. have considered the same
reweighted ℓ1 minimization algorithm as in Section 2.2, first as a heuristic algorithm for applications
in portfolio optimization [38], and second as a special case of an iterative algorithm for minimizing
the rank of a matrix subject to convex constraints [39]. Using general theory, they argue that
∑n
i=1 log(|x
(ℓ)
i | + ǫ) converges to a local minimum of g(x) =
∑n
i=1 log(|xi| + ǫ) (note that this not
saying that the sequence (x(ℓ)) converges). Because the log-sum penalty function is concave, one
cannot expect this algorithm to always find a global minimum. As a result, it is important to
choose a suitable starting point for the algorithm. Like [39], we have suggested initializing with the
solution to (P1), the unweighted ℓ1 minimization. In practice we have found this to be an effective
strategy. Further connections between our work and FOCUSS strategies are discussed at the end
of the paper.
The connection with the log-sum penalty function provides a basis for understanding why
reweighted ℓ1 minimization can improve the recovery of sparse signals. In particular, the log-
sum penalty function has the potential to be much more sparsity-encouraging than the ℓ1 norm.
Consider, for example, three potential penalty functions for scalar magnitudes t:
f0(t) = 1{t6=0}, f1(t) = |t|, and flog,ǫ(t) ∝ log(1 + |t|/ǫ),
where the constant of proportionality is set such that flog,ǫ(1) = 1 = f0(1) = f1(1), see Figure 3.
The first (ℓ0-like) penalty function f0 has infinite slope at t = 0, while its convex (ℓ1-like) relaxation
f1 has unit slope at the origin. The concave penalty function flog,ǫ, however, has slope at the origin
that grows roughly as 1/ǫ when ǫ → 0. Like the ℓ0 norm, this allows a relatively large penalty to
be placed on small nonzero coefficients and more strongly encourages them to be set to zero. In
fact, flog,ǫ(t) tends to f0(t) as ǫ→ 0. Following this argument, it would appear that ǫ should be set
arbitrarily small, to most closely make the log-sum penalty resemble the ℓ0 norm. Unfortunately,
as ǫ → 0, it becomes more likely that the iterative reweighted ℓ1 algorithm will get stuck in an
undesirable local minimum. As shown in Section 3, a cautious choice of ǫ (slightly smaller than
the expected nonzero magnitudes of x) provides the stability necessary to correct for inaccurate
coefficient estimates while still improving upon the unweighted ℓ1 algorithm for sparse recovery.
2.4 Variations
One could imagine a variety of possible reweighting functions in place of (7). We have experimented
with alternatives, including a binary (large/small) setting of wi depending on the current guess.
Though such alternatives occasionally provide superior reconstruction of sparse signals, we have
found the rule (7) to perform well in a variety of experiments and applications.
8
−1 0 1
0
0.5
1
1.5 f
1
(t)
f
log,ε(t)
f
0
(t)
t
pe
na
lty
Figure 3: At the origin, the canonical ℓ0 sparsity count f0(t) is better approximated by the
log-sum penalty function flog,ǫ(t) than by the traditional convex ℓ1 relaxation f1(t).
Alternatively, one can attempt to minimize a concave function other than the log-sum penalty.
For instance, we may consider
g(x) =
n
∑
i=1
atan(|xi|/ǫ)
in lieu of
∑n
i=1 log(1 + |xi|/ǫ). The function atan is bounded above and ℓ0-like. If x is the current
guess, this proposal updates the sequence of weights as wi = 1/(x
2
i + ǫ
2). There are of course many
possibilities of this nature and they tend to work well (sometimes better than the log-sum penalty).
As one example, Figueiredo et al. [40, 41] have proposed an MM algorithm for solving penalized
likelihood signal restoration problems of the form
min
x∈Rn
‖y − Φx‖22 + λ‖x‖pp, 0 < p < 1.
Using an ℓ1 penalty to majorize the nonconvex ℓp penalty, the resulting algorithm can be interpreted
as a sequence of weighted ℓ1 minimization problems, with each set of weights depending on the
previous iteration. As a second example, Wipf and Nagarajan [42] have proposed an iterative
reweighted ℓ1 minimization algorithm for a feature selection problem known as automatic relevance
determination (ARD). In this case, it is also shown that ARD is equivalent to solving a MAP
estimation problem of the form
min
x∈Rn
‖y − Φx‖22 + g(x),
where g(x) is a concave, non-decreasing function that is generally not factorable into individual
components xi. Zou [43] has also proposed an iterative reweighted version of the LASSO algorithm,
while Zou and Li [44] have examined connections with a penalty similar to the log-sum. Because
of space limitations, however, we will limit ourselves to empirical studies of the performance of the
log-sum penalty.
2.5 Historical progression
The development of the reweighted ℓ1 algorithm has an interesting historical parallel with the use
of Iteratively Reweighted Least Squares (IRLS) for robust statistical estimation [45–47]. Consider
a regression problem Ax = b where the observation matrix A is overdetermined. It was noticed that
standard least squares regression, in which one minimizes ‖r‖2 where r = Ax − b is the residual
9
vector, lacked robustness vis a vis outliers. To defend against this, IRLS was proposed as an
iterative method to minimize instead the objective
min
x
∑
i
ρ(ri(x)),
where ρ(·) is a penalty function such as the ℓ1 norm [45,48]. This minimization can be accomplished
by solving a sequence of weighted least-squares problems where the weights {wi} depend on the
previous residual wi = ρ
′(ri)/ri. For typical choices of ρ this dependence is in fact inversely
proportional—large residuals will be penalized less in the subsequent iteration and vice versa—
as is the case with our reweighted ℓ1 algorithm. Interestingly, just as IRLS involved iteratively
reweighting the ℓ2-norm in order to better approximate an ℓ1-like criterion, our algorithm involves
iteratively reweighting the ℓ1-norm in order to better approximate an ℓ0-like criterion.
3 Numerical experiments
We present a series of experiments demonstrating the benefits of reweighting the ℓ1 penalty. We
will see that the requisite number of measurements to recover or approximate a signal is typi-
cally reduced, in some cases by a substantial amount. We also demonstrate that the reweighting
approach is robust and broadly applicable, providing examples of sparse and compressible signal
recovery, noise-aware recovery, model selection, error correction, and 2-dimensional total-variation
minimization. Meanwhile, we address important issues such as how one can choose ǫ wisely and
how robust is the algorithm to this choice, and how many reweighting iterations are needed for
convergence.
Throughout Sections 3 and 4, to implement Step 2 of each reweighted algorithm, we use the
existing solver in the ℓ1-MAGIC software package (available at www.l1-magic.org) or make straight-
forward modifications therein. For example, the optimization problem (6) can be posed equivalently
as
z(ℓ) = arg min ‖z‖ℓ1 subject to y = Φ(W (ℓ))−1z,
which can be fed directly into ℓ1-MAGIC; one must then let the signal estimate x
(ℓ) = (W (ℓ))−1z(ℓ).
The algorithms in ℓ1-MAGIC are based on standard primal-dual and log-barrier methods [1] for
solving linear programs (LPs) and second-order cone programs (SOCPs), respectively. To give
the reader a sense of the added computational complexity over an unweighted implementation,
we indicate the number ℓmax of reweighting iterations below—that is, the total number of calls to
Step 2 of the reweighted algorithm. The computational complexity of any individual call to Step 2
depends on the complexity of solving a single LP or SOCP, and for the type of problems common
in Compressive Sensing, the structure of the operator Φ often facilitates fast solutions using on the
order of 1000n log n operations. Other fast solvers abound that could also be adapted to reweighting
(e.g., [49]); in general, the development and theory of fast algorithms for ℓ1-minimization remains
a topic of active research.
3.1 Sparse signal recovery
The purpose of this first experiment is to demonstrate (1) that reweighting reduces the necessary
sampling rate for sparse signals (2) that this recovery is robust with respect to the choice of ǫ
and (3) that few reweighting iterations are typically needed in practice. The setup for each trial
10
10 20 30 40 50 60
0
0.2
0.4
0.6
0.8
1
Sparsity k
P
r(
re
co
ve
ry
)
4 Reweighting Iterations
 
 
Unwght. L1
ε = 0.001
ε = 0.01
ε = 0.1
ε = 1
ε = 10
10 20 30 40 50 60
0
0.2
0.4
0.6
0.8
1
Sparsity k
P
r(
re
co
ve
ry
)
Reweighting, ε = 0.1
 
 
Unwght. L1
1 iterations
2 iterations
4 iterations
8 iterations
(a) (b)
Figure 4: Sparse signal recovery from m = 100 random measurements of a length n = 256
signal. The probability of successful recovery depends on the sparsity level k. The dashed
curves represent a reweighted ℓ1 algorithm that outperforms the traditional unweighted ℓ1
approach (solid curve). (a) Performance after 4 reweighting iterations as a function of ǫ. (b)
Performance with fixed ǫ = 0.1 as a function of the number of reweighting iterations.
is as follows. We select a sparse signal x0 of length n = 256 with ‖x0‖ℓ0 = k. The k nonzero
spike positions are chosen randomly, and the nonzero values are chosen randomly from a zero-mean
unit-variance Gaussian distribution. We set m = 100 and sample a random m× n matrix Φ with
i.i.d. Gaussian entries, giving the data y = Φx0. To recover the signal, we run several reweighting
iterations with equality constraints (see Section 2.2). The parameter ǫ remains fixed during these
iterations. Finally, we run 500 trials for various fixed combinations of k and ǫ.
Figure 4(a) compares the performance of unweighted ℓ1 to reweighted ℓ1 for various values of
the parameter ǫ. The solid line plots the probability of perfect signal recovery (declared when
‖x0 − x‖ℓ∞ ≤ 10−3) for the unweighted ℓ1 algorithm as a function of the sparsity level k. The
dashed curves represent the performance after 4 reweighted iterations for several different values of
the parameter ǫ. We see a marked improvement over the unweighted ℓ1 algorithm; with the proper
choice of ǫ, the requisite oversampling factor m/k for perfect signal recovery has dropped from
approximately 100/25 = 4 to approximately 100/33 ≈ 3. This improvement is also fairly robust
with respect to the choice of ǫ, with a suitable rule being about 10% of the standard deviation of
the nonzero signal coefficients.
Figure 4(b) shows the performance, with a fixed value of ǫ = 0.1, of the reweighting algorithm
for various numbers of reweighted iterations. We see that much of the benefit comes from the first
few reweighting iterations, and so the added computational cost for improved signal recovery is
quite moderate.
3.2 Sparse and compressible signal recovery with adaptive choice of ǫ
We would like to confirm the benefits of reweighted ℓ1 minimization for compressible signal recovery
and consider the situation when the parameter ǫ is not provided in advance and must be estimated
during reconstruction. We propose an experiment in which each trial is designed as follows. We
11
sample a signal of length n = 256 from one of three types of distribution: (1) k-sparse with
i.i.d. Gaussian entries, (2) k-sparse with i.i.d. symmetric Bernoulli ±1 entries, or (3) compressible,
constructed by randomly permuting the sequence {i−1/p}ni=1 for a fixed p, applying random sign
flips, and normalizing so that ‖x0‖ℓ∞ = 1; that is, we construct the ordered sequence {i−1/p}ni=1,
multiply each entry by a random sign and then apply a random permutation to the signed sequence.
The output is x0. We set m = 128 and sample a random m × n matrix Φ with i.i.d. Gaussian
entries. To recover the signal, we again solve a reweighted ℓ1 minimization with equality constraints
y = Φx0 = Φx. In this case, however, we adapt ǫ at each iteration as a function of the current
guess x(ℓ); step 3 of the algorithm is modified as follows:
3. Let (|x|(i)) denote a reordering of (|xi|) in decreasing order of magnitude. Set
ǫ = max
{
|x(ℓ)|(i0), 10−3
}
,
where i0 = m/[4 log(n/m)]. Define w
(ℓ+1) as in (7).
Our motivation for choosing this value for ǫ is based on the anticipated accuracy of ℓ1 minimization
for arbitrary signal recovery. In general, the reconstruction quality afforded by ℓ1 minimization is
comparable (approximately) to the best i0-term approximation to x0, and so we expect approxi-
mately this many signal components to be approximately correct. Put differently, we cannot really
expect to recover the components of the signal whose absolute value is below |x(ℓ)|(i0). This moti-
vates a choice of ǫ on the order of |x(ℓ)|(i0). Suppose, however, that the recovered signal is sparser
than this and has fewer than i0 nonzero terms. Then ǫ would be zero and some of the weights
would be infinite. To prevent this from occurring, we put a lower cap on ǫ and thus an upper limit
on the value of the weights. The choice ǫ ≥ 10−3 may appear a little arbitrary but works well in
practice.
We run 100 trials of the above experiment for each signal type. The results for the k-sparse
experiments are shown in Figure 5(a). The solid black line indicates the performance of unweighted
ℓ1 recovery (success is declared when ‖x0 − x‖ℓ∞ ≤ 10−3). This curve is the same for both the
Gaussian and Bernoulli coefficients, as the success or failure of unweighted ℓ1 minimization depends
only on the support and sign pattern of the original sparse signal. The dashed curves indicate the
performance of reweighted ℓ1 minimization for Gaussian coefficients (blue curve) and Bernoulli
coefficients (red curve) with ℓmax = 4. We see a substantial improvement for recovering sparse
signals with Gaussian coefficients, yet we see only very slight improvement for recovering sparse
signals with Bernoulli coefficients. This discrepancy likely occurs because the decay in the sparse
Gaussian coefficients allows large coefficients to be easily identified and significantly downweighted
early in the reweighting algorithm. With Bernoulli coefficients there is no such “low-hanging fruit”.
The results for compressible signals are shown in Figure 5(b),(c). Each plot represents a his-
togram, over 100 trials, of the ℓ2 reconstruction error improvement afforded by reweighting, namely,
‖x0−x(4)‖ℓ2/‖x0−x(0)‖ℓ2 . We see the greatest improvements for smaller p corresponding to sparser
signals, with reductions in ℓ2 reconstruction error up to 50% or more. As p→ 1, the improvements
diminish.
3.3 Recovery from noisy measurements
Reweighting can be applied to a noise-aware version of ℓ1 minimization, further improving the
recovery of signals from noisy data. We observe y = Φx0 +z, where z is a noise term which is either
12
20 40 60 80 100
0
0.2
0.4
0.6
0.8
1
Sparsity k
P
r(
re
co
ve
ry
)
Sparse signal recovery
 
 
Unw. L1
Gaus. RW
Bern. RW
0 0.5 1 1.5
Compressible signal, p=0.4
0.8 1 1.2 1.4
Compressible signal, p=0.7
(a) (b) (c)
Figure 5: (a) Improvements in sparse signal recovery from reweighted ℓ1 minimization when
compared to unweighted ℓ1 minimization (solid black curve). The dashed blue curve corre-
sponds to sparse signals with Gaussian coefficients; the dashed red curve corresponds to sparse
signals with Bernoulli coefficients. (b),(c) Improvements in compressible signal recovery from
reweighted ℓ1 minimization when compared to unweighted ℓ1 minimization; signal coefficients
decay as i−1/p with (b) p = 0.4 and (c) p = 0.7. Histograms indicate the ℓ2 reconstruction
error improvements afforded by the reweighted algorithm.
stochastic or deterministic. To recover x0, we adapt quadratically-constrained ℓ1 minimization [7,
27], and modify step 2 of the reweighted ℓ1 algorithm with equality constraints (see Section 2.2) as
x(ℓ) = arg min ‖W (ℓ)x‖ℓ1 subject to ‖y − Φx‖ℓ2 ≤ δ. (10)
The parameter δ is adjusted so that the true vector x0 be feasible (resp. feasible with high proba-
bility) for (10) in the case where z is deterministic (resp. stochastic).
To demonstrate how this proposal improves on plain ℓ1 minimization, we sample a vector of
length n = 256 from one of three types of distribution: (1) k-sparse with k = 38 and i.i.d. Gaussian
entries, (2) k-sparse with k = 38 and i.i.d. symmetric Bernoulli ±1 entries, or (3) compressible,
constructed by randomly permuting the sequence {i−1/p}ni=1 for a fixed p, applying random sign
flips, and normalizing so that ‖x0‖ℓ∞ = 1. The matrix Φ is 128 × 256 with i.i.d. Gaussian entries
whose columns are subsequently normalized, and the noise vector z is drawn from an i.i.d. Gaussian
zero-mean distribution properly rescaled so that ‖z‖ℓ2 = β‖Φx‖ℓ2 with β = 0.2; i.e., z = σz0 where
z0 is standard white noise and σ = β‖Φx‖ℓ2/‖z0‖ℓ2 . The parameter δ is set to δ2 = σ2(m+ 2
√
2m)
as this provides a likely upper bound on ‖z‖ℓ2 . In details, the probability that ‖z‖2ℓ2 exceeds δ2 is the
probability that a chi square with m degrees of freedom exceeds its mean by at least two standard
deviations. This quantity is about 2.5% when m is not too small thanks to the approximation given
by the central limit theorem. We set ǫ to be the empirical maximum value of ‖Φ∗ξ‖ℓ∞ over several
realizations of a random vector ξ ∼ N (0, σ2Im); for the values m = 128 and β = 0.2 we have ǫ ≈ 1.
(This gives a rough estimate for the noise amplitude in the signal domain, and hence, a baseline
above which significant signal components could be identified.)
We run 100 trials for each signal type. Figure 6 shows histograms of the ℓ2 reconstruction error
improvement afforded by 9 iterations, i.e., each histogram documents ‖x0 − x(9)‖ℓ2/‖x0 − x(0)‖ℓ2
over 100 trials. We see in these experiments that the reweighted quadratically-constrained ℓ1
minimization typically offers improvements ‖x0 −x(9)‖ℓ2/‖x0 −x(0)‖ℓ2 in the range 0.5− 1 in many
examples. The results for sparse Gaussian spikes are slightly better than for sparse Bernoulli spikes,
13
0.4 0.6 0.8 1
Gaussian coeffs, k = 38
0 0.5 1 1.5
Bernoulli coeffs, k = 38
0.6 0.8 1
Compressible signal, p=0.7
(a) (b) (c)
Figure 6: Sparse and compressible signal reconstruction from noisy measurements. His-
tograms indicate the ℓ2 reconstruction error improvements afforded by the reweighted
quadratically-constrained ℓ1 minimization for various signal types.
though both are generally favorable. Similar behavior holds for compressible signals, and we have
observed that smaller values of p (sparser signals) allow the most improvement.
3.4 Statistical estimation
Reweighting also enhances statistical estimation as well. Suppose we observe y = Φx0 + z, where
Φ is m × n with m ≤ n, and z is a noise vector z ∼ N (0, σ2Im) drawn from an i.i.d. Gaussian
zero-mean distribution, say. To estimate x0, we adapt the Dantzig selector [50] and modify step 2
of the reweighted ℓ1 algorithm as
x(ℓ) = arg min ‖W (ℓ)x‖ℓ1 subject to ‖Φ∗(y − Φx)‖ℓ∞ ≤ δ. (11)
Again δ is a parameter making sure that the true unknown vector is feasible with high probability.
To judge this proposal, we consider a sequence of experiments in which x0 is of length n = 256
with k = 8 nonzero entries in random positions. The nonzero entries of x0 have i.i.d. entries ac-
cording to the model xi = si(1+ |ai|) where the sign si = ±1 with probability 1/2 and ai ∼ N (0, 1).
The matrix Φ is 72 × 256 with i.i.d. Gaussian entries whose columns are subsequently normalized
just as before. The noise vector (zi) has i.i.d. N (0, σ2) components with σ = 1/3
√
k/m ≈ 0.11.
The parameter δ is set to be the empirical maximum value of ‖Φ∗z‖ℓ∞ over several realizations of
a random vector z ∼ N (0, σ2Im). We set ǫ = 0.1.
After each iteration of the reweighted Dantzig selector, we also refine our estimate x(ℓ) using
the Gauss-Dantzig technique to correct for a systematic bias [50]. Let I = {i : |x(ℓ)i | > α · σ} with
α = 1/4. Then one substitutes x(ℓ) with the least squares estimate which solves
min
x∈Rn
‖y − Φx‖ℓ2 subject to xi = 0, i /∈ I;
that is, by regressing y onto the subset of columns indexed by I.
We first report on one trial with ℓmax = 4. Figure 7(a) shows the original signal x0 along with the
recovery x(0) using the first (unweighted) Dantzig selector iteration; the error is ‖x0−x(0)‖ℓ2 = 1.46.
Figure 7(b) shows the Dantzig selector recovery after 4 iterations; the error has decreased to
‖x0 − x(4)‖ℓ2 = 1.25. Figure 7(c) shows the Gauss-Dantzig estimate x(0) obtained from the first
14
Unweighted Reweighted
Gauss-Dantzig Gauss-Dantzig
Median error ratio ρ2 2.43 1.21
Mean error ratio ρ2 6.12 5.63
Avg. false positives 3.25 0.50
Avg. correct detections 7.86 7.80
Table 1: Model selection results for unweighted and reweighted versions of the Gauss-Dantzig
estimator. In each of 5000 trials the true sparse model contains k = 8 nonzero entries.
(unweighted) Dantzig selector iteration; this decreases the error to ‖x0 − x(0)‖ℓ2 = 0.57. The
estimator correctly includes all 8 positions at which x0 is nonzero, but also incorrectly includes 4
positions at which x0 should be zero. In Figure 7(d) we see, however, that all of these mistakes
are rectified in the Gauss-Dantzig estimate x(4) obtained from the reweighted Dantzig selector; the
total error also decreases to ‖x0 − x(4)‖ℓ2 = 0.29.
We repeat the above experiment across 5000 trials. Figure 8 shows a histogram of the ratio ρ2
between the squared error loss of some estimate x and the ideal squared error
ρ2 :=
∑n
i=1(xi − x0,i)2
∑n
i=1 min(x
2
0,i, σ
2)
for both the unweighted and reweighted Gauss-Dantzig estimators. (The results are also summa-
rized in Table 1.) For an interpretation of the denominator, the ideal squared error
∑
min(x20,i, σ
2)
is roughly the mean-squared error one could achieve if one had available an oracle supplying perfect
information about which coordinates of x0 are nonzero, and which are actually worth estimating.
We see again a significant reduction in reconstruction error; the median value of ρ2 decreases from
2.43 to 1.21. As pointed out, a primary reason for this improvement comes from a more accurate
identification of significant coefficients: on average the unweighted Gauss-Dantzig estimator in-
cludes 3.2 “false positives,” while the reweighted Gauss-Dantzig estimator includes only 0.5. Both
algorithms correctly include all 8 nonzero positions in a large majority of trials.
15
0 100 200 300
−3
−2
−1
0
1
2
3
Unweighted Dantzig Selector
 
 
true value
estimate
0 100 200 300
−3
−2
−1
0
1
2
3
Reweighted Dantzig Selector
 
 
true value
estimate
(a) (b)
0 100 200 300
−3
−2
−1
0
1
2
3
Unweighted Gauss−Dantzig
 
 
true value
estimate
0 100 200 300
−3
−2
−1
0
1
2
3
Reweighted Gauss−Dantzig
 
 
true value
estimate
(c) (d)
Figure 7: Reweighting the Dantzig selector. Blue asterisks indicate the original signal x0;
red circles indicate the recovered estimate. (a) Unweighted Dantzig selector. (b) Reweighted
Dantzig selector. (c) Unweighted Gauss-Dantzig estimate. (d) Reweighted Gauss-Dantzig
estimate.
16
0 10 20 30
0
200
400
600
800
1000
0 10 20 30
0
200
400
600
800
1000
(a) (b)
Figure 8: Histogram of the ratio ρ2 between the squared error loss and the ideal squared
error for (a) unweighted Gauss-Dantzig estimator and (b) reweighted Gauss-Dantzig estimator.
Approximately 5% of the tail of each histogram has been truncated for display; across 5000
trials the maximum value observed was ρ2 ≈ 165.
3.5 Error correction
Suppose we wish to transmit a real-valued signal x0 ∈ Rn, a block of n pieces of information, to
a remote receiver. The vector x0 is arbitrary and in particular, nonsparse. The difficulty is that
errors occur upon transmission so that a fraction of the transmitted codeword may be corrupted
in a completely arbitrary and unknown fashion. In this setup, the authors in [31] showed that
one could transmit n pieces of information reliably by encoding the information as Φx0 where
Φ ∈ Rm×n, m ≥ n, is a suitable coding matrix, and by solving
min
x∈Rn
‖y − Φx‖ℓ1 (12)
upon receiving the corrupted codeword y = Φx0 + e; here, e is the unknown but sparse corruption
pattern. The conclusion of [31] is then that the solution to this program recovers x0 exactly provided
that the fraction of errors is not too large. Continuing on our theme, one can also enhance the
performance of this error-correction strategy, further increasing the number of corrupted entries
that can be overcome.
Select a vector of length n = 128 with elements drawn from a zero-mean unit-variance Gaussian
distribution, and sample anm×n coding matrix Φ with i.i.d. Gaussian entries yielding the codeword
Φx. For this experiment, m = 4n = 512, and k random entries of the codeword are corrupted with
a sign flip. For the recovery, we simply use a reweighted version of (12). Our algorithm is as follows:
1. Set ℓ = 0 and w
(0)
i = 1 for i = 1, 2, . . . ,m.
2. Solve the weighted ℓ1 minimization problem
x(ℓ) = arg min ‖W (ℓ)(y − Φx)‖ℓ1 . (13)
17
0.25 0.3 0.35 0.4 0.45
0
0.2
0.4
0.6
0.8
1
Error proportion k/m
P
r(
re
co
ve
ry
)
 
 
Unwt. L1
β = 0.01
β = 0.1
β = 1
β = 10
Figure 9: Unweighted (solid curve) and reweighted (dashed curve) ℓ1 signal recovery from
corrupted measurements y = Φx0 + e. The signal x0 has length n = 128, the codeword y has
size m = 4n = 512, and the number of corrupted entries ‖e‖ℓ0 = k.
3. Update the weights; let r(ℓ) = y − Φx(ℓ) and for each i = 1, . . . ,m, define
w
(ℓ+1)
i =
1
|r(ℓ)i | + ǫ
. (14)
4. Terminate on convergence or when ℓ attains a specified maximum number of iterations ℓmax.
Otherwise, increment ℓ and go to step 2.
We set ǫ to be some factor β times the standard deviation of the corrupted codeword y. We run
100 trials for several values of β and of the size k of the corruption pattern.
Figure 9 shows the probability of perfect signal recovery (declared when ‖x0 − x‖ℓ∞ ≤ 10−3)
for both the unweighted ℓ1 decoding algorithm and the reweighted versions for various values of β
(with ℓmax = 4). Across a wide range of values β (and hence ǫ), we see that reweighting increases
the number of corrupted entries (as a percentage of the codeword size m) that can be overcome,
from approximately 28% to 35%.
3.6 Total variation minimization for sparse image gradients
In a different direction, reweighting can also boost the performance of total-variation (TV) min-
imization for recovering images with sparse gradients. Recall the total-variation norm of a 2-
dimensional array (xi,j), 1 ≤ i, j ≤ n, defined as the ℓ1 norm of the magnitudes of the discrete
gradient,
‖x‖TV =
∑
1≤i,j≤n
‖(Dx)i,j‖,
where (Dx)i,j is the 2-dimensional vector of forward differences (Dx)i,j = (xi+1,j−xi,j, xi,j+1−xi,j)
when 1 ≤ i, j ≤ n − 1 while at the boundary, (Dx)n,j = (0, xn,j+1 − xn,j) for 1 ≤ j ≤ n − 1,
(Dx)i,n = (xi+1,n − xi,n, 0) for 1 ≤ i ≤ n − 1, and (Dx)n,n = (0, 0). Because many natural images
18
have a sparse or nearly sparse gradient, it makes sense to search for the reconstruction with minimal
TV norm, i.e.,
min ‖x‖TV subject to y = Φx; (15)
see [9, 10], for example. It turns out that this problem can be recast as a second-order cone
program [51], and thus solved efficiently. The insight here is that the total variation of x is equal
to the optimal value of the optimization problem
min
∑
1≤i,j≤n
ui,j subject to ‖(Dx)i,j‖ ≤ ui,j,
with optimization variables {ui,j}1≤i,j≤n. When searching for an array x minimizing the total
variation under linear equality constraints, we introduce the slack variables ui,j and minimize
∑
i,j ui,j under the constraints ‖(Dx)i,j‖ ≤ ui,j and the linear equalities for x; the constraints
‖(Dx)i,j‖ ≤ ui,j are second-order cone constraints.
We adapt (15) by minimizing a sequence of weighted TV norms as follows:
1. Set ℓ = 0 and w
(0)
i,j = 1, 1 ≤ i, j ≤ n.
2. Solve the weighted TV minimization problem
x(ℓ) = arg min
∑
1≤i,j≤n
w
(ℓ)
i,j ‖(Dx)i,j‖ subject to y = Φx.
3. Update the weights; for each (i, j), 1 ≤ i, j ≤ n,
w
(ℓ+1)
i,j =
1
‖(Dx(ℓ))i,j‖ + ǫ
. (16)
4. Terminate on convergence or when ℓ attains a specified maximum number of iterations ℓmax.
Otherwise, increment ℓ and go to step 2.
Naturally, this iterative algorithm corresponds to minimizing a sequence of linearizations of the
log-sum function
∑
1≤i,j≤n log(‖(Dx)i,j‖ + ǫ) around the previous signal estimate.
To show how this can enhance the performance of the recovery, consider the following exper-
iment. Our test image is the Shepp-Logan phantom of size n = 256 × 256 (see Figure 10(a)).
The pixels take values between 0 and 1, and the image has a nonzero gradient at 2184 pixels. We
measure y by sampling the discrete Fourier transform of the phantom along 10 pseudo-radial lines
(see Figure 10(b)). That is, y = Φx0, where Φ represents a subset of the Fourier coefficients of x0.
In total, we take m = 2521 real-valued measurements.
Figure 10(c) shows the result of the classical TV minimization, which gives a relative error
equal to ‖x0 − x(0)‖ℓ2/‖x0‖ℓ2 ≈ 0.43. As shown in Figure 10(d), however, we see a substantial
improvement after 6 iterations of reweighted TV minimization (we used 0.1 for the value of ǫ). The
recovery is near-perfect, with a relative error obeying ‖x0 − x(6)‖ℓ2/‖x0‖ℓ2 ≈ 2 × 10−3.
For point of comparison it takes approximately 17 radial lines (m = 4257 real-valued measure-
ments) to perfectly recover the phantom using unweighted TV minimization. Hence, with respect to
the sparsity of the image gradient, we have reduced the requisite oversampling factor significantly,
from 42572184 ≈ 1.95 down to 25212184 ≈ 1.15. It is worth noting that comparable reconstruction perfor-
mance on the phantom image has also been recently achieved by directly minimizing a nonconvex
ℓp norm, p < 1, of the image gradient [52]; we discuss this approach further in Section 5.1.
19
(a) (b) (c) (d)
Figure 10: Image recovery from reweighted TV minimization. (a) Original 256×256 phantom
image. (b) Fourier-domain sampling pattern. (c) Minimum-TV reconstruction; total variation
= 1336. (d) Reweighted TV reconstruction; total variation (unweighted) = 1464.
4 Reweighted ℓ1 analysis
In many problems, a signal may assume sparsity in a possibly overcomplete representation. To
make things concrete, suppose we are given a dictionary Ψ of waveforms (ψj)j∈J (the columns
of Ψ) which allows representing any signal as x = Ψα. The representation α is deemed sparse
when the vector of coefficients α has comparably few significant terms. In some applications, it
may be natural to choose Ψ as an orthonormal basis but in others, a sparse representation of the
signal x may only become possible when Ψ is a redundant dictionary; that is, it has more columns
than rows. A good example is provided by an audio signal which often is sparsely represented as
a superposition of waveforms of the general shape σ−1/2g((t − t0)/σ)eiωt, where t0, ω, and σ are
discrete shift, modulation and scale parameters.
In this setting, the common approach for sparsity-based recovery from linear measurements
goes by the name of Basis Pursuit [8] and is of the form
min ‖α‖ℓ1 subject to y = ΦΨα; (17)
that is, we seek a sparse set of coefficients α that synthesize the signal x = Ψα. We call this
synthesis-based ℓ1 recovery. A far less common approach, however, seeks a signal x whose coefficients
α = Ψ∗x (when x is analyzed in the dictionary Ψ) are sparse
min ‖Ψ∗x‖ℓ1 subject to y = Φx. (18)
We call this analysis-based ℓ1 recovery. When Ψ is an orthonormal basis, these two programs are
identical, but in general they find different solutions. When Ψ is redundant, (18) involves fewer
unknowns than (17) and may be computationally simpler to solve [53]. Moreover, in some cases
the analysis-based reconstruction may in fact be superior, a phenomenon which is not very well
understood; see [54] for some insights.
Both programs are amenable to reweighting but what is interesting is the combination of
analysis-based ℓ1 recovery and iterative reweighting which seems especially powerful. This section
provides two typical examples. For completeness, the iterative reweighted ℓ1-analysis algorithm is
as follows:
1. Set ℓ = 0 and w
(ℓ)
j = 1, j ∈ J (J indexes the dictionary).
20
2. Solve the weighted ℓ1 minimization problem
x(ℓ) = arg min ‖W (ℓ)Ψ∗x‖ℓ1 subject to y = Φx.
3. Put α(ℓ) = Ψ∗x(ℓ) and define
w
(ℓ+1)
j =
1
|α(ℓ)j | + ǫ
, j ∈ J.
4. Terminate on convergence or when ℓ attains a specified maximum number of iterations ℓmax.
Otherwise, increment ℓ and go to step 2.
Unless specified otherwise, we will use this algorithm in the remainder of this section.
4.1 Incoherent sampling of radar pulses
Our first example is motivated by our own research focused on advancing devices for analog-
to-digital conversion of high-bandwidth signals. To cut a long story short, standard analog-to-
digital converter (ADC) technology implements the usual quantized Shannon representation; that
is, the signal is uniformly sampled at or above the Nyquist rate. The hardware brick wall is
that conventional analog-to-digital conversion technology is currently limited to sample rates on
the order of 1GHz, and hardware implementations of high precision Shannon-based conversion
at substantially higher rates seem out of sight for decades to come. This is where the theory of
Compressive Sensing becomes relevant.
Whereas it may not be possible to digitize an analog signal at a very high rate, it may be
quite possible to change its polarity at a high rate. The idea is then to multiply the signal by a
pseudo-random sequence of plus and minus ones, integrate the product over time windows, and
digitize the integral at the end of each time interval. This is a parallel architecture and one has
several of these random multiplier-integrator pairs running in parallel using distinct or event nearly
independent pseudo-random sign sequences.
To show the promise of this approach, we take x0 to be a 1-D signal of length n = 512 which
is a superposition of two modulated pulses (see Figure 11(a)). From this signal, we collect m = 30
measurements using an m × n matrix Φ populated with i.i.d. Bernoulli ±1 entries. This is an
unreasonably small amount of data corresponding to an undersampling factor exceeding 17. For
reconstruction we consider a time-frequency Gabor dictionary that consists of a variety of sine
waves modulated by Gaussian windows, with different locations and scales. For each location and
scale, the corresponding set of Gabor coefficients may be computed simply by multiplying the signal
by the appropriate Gaussian window and then applying a zero-padded FFT. (The transpose of this
operation simply requires an inverse FFT, truncation, and multiplication by the same windowing
function.) Overall the dictionary is approximately 43× overcomplete and does not contain the two
pulses that comprise x0.
Figure 11(b) shows the result of minimizing ℓ1 synthesis (17) in this redundant dictionary.
The reconstruction shows pronounced artifacts and ‖x0 − x‖ℓ2/‖x‖ℓ2 ≈ 0.67. These artifacts are
somewhat reduced by analysis-based ℓ1 recovery (18), as demonstrated in Figure 11(c); here, see
‖x0 − x‖ℓ2/‖x‖ℓ2 ≈ 0.46. However, reweighting the ℓ1 analysis problem offers a very substantial
improvement. Figure 11(d) shows the result after four iterations; ‖x0 − x(4)‖ℓ2/‖x‖ℓ2 is now about
0.022. Further, Table 2 shows the relative reconstruction error ‖x0 − x(ℓ)‖ℓ2/‖x‖ℓ2 as a function of
the iteration count ℓ. Massive gains are achieved after just 4 iterations.
21
0 100 200 300 400 500
−1
−0.5
0
0.5
1
0 100 200 300 400 500
−1
−0.5
0
0.5
1
(a) (b)
0 100 200 300 400 500
−1
−0.5
0
0.5
1
0 100 200 300 400 500
−1
−0.5
0
0.5
1
(c) (d)
Figure 11: (a) Original two-pulse signal (blue) and reconstructions (red) via (b) ℓ1 synthesis,
(c) ℓ1 analysis, (d) reweighted ℓ1 analysis.
Iteration count ℓ 0 1 2 3 4 5 6 7
Error ‖x0 − x(ℓ)‖ℓ2/‖x‖ℓ2 0.460 0.101 0.038 0.024 0.022 0.022 0.022 0.022
Table 2: Relative ℓ2 reconstruction error as a function of reweighting iteration for two-pulse
signal reconstruction.
22
4.2 Frequency sampling of biomedical images
Compressive Sensing can help reduce the scan time in Magnetic Resonance Imaging (MRI) and
offer sharper images of living tissues. This is especially important because time consuming MRI
scans have traditionally limited the use of this sensing modality in important applications. Simply
put, faster imaging here means novel applications. In MR, one collects information about an object
by measuring its Fourier coefficients and faster acquisition here means fewer measurements.
We mimic an MR experiment by taking our unknown image x0 to be the n = 256×256 = 65536
pixel MR angiogram image shown in Figure 12(a). We sample the image along 80 lines in the Fourier
domain (see Figure 12(b)), effectively taking m = 18737 real-valued measurements y = Φx0. In
plain terms, we undersample by a factor of about 3.
Figure 12(c) shows the minimum energy reconstruction which solves
min ‖x‖ℓ2 subject to y = Φx. (19)
Figure 12(d) shows the result of TV minimization. The minimum ℓ1-analysis (18) solution where
Ψ is a three-scale redundant D4 wavelet dictionary that is 10 times overcomplete, is shown on
Figure 12(e). Figure 12(f) shows the result of reweighting the ℓ1 analysis with ℓmax = 4 and ǫ
set to 100. For a point of comparison, the maximum wavelet coefficient has amplitude 4020, and
approximately 108000 coefficients (out of 655360) have amplitude greater than 100.
We can reinterpret these results by comparing the reconstruction quality to the best k-term
approximation to the image x0 in a nonredundant wavelet dictionary. For example, an ℓ2 re-
construction error equivalent to the ℓ2 reconstruction of Figure 12(c) would require keeping the
k = 1905 ≈ m/9.84 largest wavelet coefficients from the orthogonal wavelet transform of our test
image. In this sense, the requisite oversampling factor can be thought of as being 9.84. Of course
this can be substantially improved by encouraging sparsity, and the factor is reduced to 3.33 using
TV minimization, to 3.25 using ℓ1 analysis, and to 3.01 using reweighted ℓ1 analysis.
We would like to be clear about what this means. Consider the image in Figure 12(a) and
its best k-term wavelet approximation with k = 6225; that is, the approximation obtained by
computing all the D4 wavelet coefficients and retaining the k largest in the expansion of the object
(and throwing out the others). Then we have shown that the image obtained by measuring 3k
real-valued Fourier measurements and solving the iterative reweighted ℓ1 analysis has just about
the same accuracy. That is, the oversampling factor needed to obtain an image of the same quality
as if one knew ahead of time the locations of the k most significant pieces of information and their
value, is just 3.
5 Discussion
In summary, reweighted ℓ1 minimization outperforms plain ℓ1 minimization in a variety of setups.
Therefore, this technique might be of interest to researchers in the field of Compressive Sensing
and/or statistical estimation as it might help to improve the quality of reconstructions and/or
estimations. Further, this technique is easy to deploy as (1) it can be built on top of existing ℓ1
solvers and (2) the number of iterations is typically very low so that the additional computational
cost is not prohibitive. We conclude this paper by discussing related work and possible future
directions.
23
(a) (b)
(c) (d)
(e) (f)
Figure 12: (a) Original MR angiogram. (b) Fourier sampling pattern. (c) Backprojection,
PSNR = 29.00dB. (d) Minimum TV reconstruction, PSNR = 34.23dB. (e) ℓ1 analysis recon-
struction, PSNR = 34.37dB. (f) Reweighted ℓ1 analysis reconstruction, PSNR = 34.78dB.
24
5.1 Related work
Whereas we have focused on modifying the ℓ1 norm, a number of algorithms been have proposed that
involve successively reweighting alternative penalty functions. In addition to IRLS (see Section 2.5),
several such algorithms deserve mention.
Gorodnitsky and Rao [55] propose FOCUSS as an iterative method for finding sparse solutions
to underdetermined systems. At each iteration, FOCUSS solves a reweighted ℓ2 minimization with
weights
w
(ℓ)
i =
1
x
(ℓ−1)
i
(20)
for i = 1, 2, . . . , n. For nonzero signal coefficients, it is shown that each step of FOCUSS is equivalent
to a step of the modified Newton’s method for minimizing the function
∑
i:xi 6=0
log |xi|
subject to y = Φx. As the iterations proceed, it is suggested to identify those coefficients apparently
converging to zero, remove them from subsequent iterations, and constrain them instead to be
identically zero.
In a small series of experiments, we have observed that reweighted ℓ1 minimization recovers
sparse signals with lower error (or from fewer measurements) than the FOCUSS algorithm. We
attribute this fact, for one, to the natural tendency of unweighted ℓ1 minimization to encourage
sparsity (while unweighted ℓ2 minimization does not). We have also experimented with an ǫ-
regularization to the reweighting function (20) that is analogous to (7). However we have found
that this formulation fails to encourage strictly sparse solutions. It must be noted, however, that
since the initial submission of our manuscript, we have learned of ongoing work in developing
reweighting strategies for FOCUSS as well [56, 57]; in some situations the performance can be
competitive with reweighted ℓ1 minimization, and a more comprehensive study is warranted.
Harikumar and Bresler [58] propose an iterative algorithm that can be viewed as a generalization
of FOCUSS. At each stage, the algorithm solves a convex optimization problem with a reweighted
ℓ2 cost function that encourages sparse solutions. The algorithm allows for different reweighting
rules; for a given choice of reweighting rule, the algorithm converges to a local minimum of some
concave objective function (analogous to the log-sum penalty function in (8)). These methods build
upon ℓ2 minimization rather than ℓ1 minimization.
Delaney and Bresler [59] also propose a general algorithm for minimizing functionals having
concave regularization penalties, again by solving a sequence of reweighted convex optimization
problems (though not necessarily ℓ2 problems) with weights that decrease as a function of the prior
estimate. With the particular choice of a log-sum regularization penalty, the algorithm resembles
the noise-aware reweighted ℓ1 minimization discussed in Section 3.3.
Finally, in a slightly different vein, Chartrand [52] has recently proposed an iterative algorithm
to minimize the concave objective ‖x‖ℓp with p < 1. (The algorithm alternates between gradient
descent and projection onto the constraint set y = Φx.) While a global optimum cannot be
guaranteed, experiments suggests that a local minimum may be found—when initializing with the
minimum ℓ2 solution—that is often quite sparse. This algorithm seems to outperform (P1) in
a number of instances and offers further support for the utility of nonconvex penalties in sparse
signal recovery. There is also some theory showing that just like for ℓ0 or ℓ1 minimization, the ℓp
25
minimizer for p < 1 enjoys nice theoretical guarantees, perhaps a bit better than those available for
the ℓ1 minimizer [52,60] (the latter reference is posterior to the present paper and has been included
in the revised version). We anticipate that similar theoretical guarantees would be available for
the minimizer of the log-sum penalty as well. The problem with these results is that unlike ℓ1
minimization, there are no known polynomial-time algorithms producing the ℓp minimizer or the
log-sum minimizer. To reiterate, a major advantage of reweighted ℓ1 minimization in this thrust is
that (1) it can be implemented in a variety of settings (see Sections 3 and 4) on top of existing and
mature linear programming solvers and (2) it typically converges in very few steps. The log-sum
penalty is also more ℓ0-like and as we discuss in Section 2.4, additional concave penalty functions
can be considered simply by adapting the reweighting rule.
5.2 Future directions
In light of the promise of reweighted ℓ1 minimization, it seems desirable to further investigate the
properties of this algorithm.
• Under what conditions does the algorithm converge? That is, when do the successive iterates
x(ℓ) have a limit x(∞)?
• As shown in Section 2, when there is a sparse solution and the reweighted algorithm finds
it, convergence may occur in just very few steps. It would be of interest to understand this
phenomenon more precisely.
• What are smart and robust rules for selecting the parameter ǫ? That is, rules that would
automatically adapt to the dynamic range and the sparsity of the object under study as to
ensure reliable performance across a broad array of signals. Of interest are ways of updating
ǫ as the algorithm progresses towards a solution. Of course, ǫ does not need to be uniform
across all coordinates. As demonstrated in [61], some possible guidance in these directions
may come from studying connections in robust statistics.
• We mentioned the use of other functionals and reweighting rules. How do they compare?
• Finally, any result quantifying the improvement of the reweighted algorithm for special classes
of sparse or nearly sparse signals would be significant.
Acknowledgments
E. C. was partially supported by a National Science Foundation grant CCF-515362, by the 2006
Waterman Award (NSF) and by a grant from DARPA. This work was performed while M. W. was an
NSF Postdoctoral Fellow (NSF DMS-0603606) in the Department of Applied and Computational
Mathematics at Caltech. S. B. was partially supported by NSF award 0529426, NASA award
NNX07AEIIA, and AFOSR awards FA9550-06-1-0514 and FA9550-06-1-0312. We would like to
thank Nathaniel Braun and Peter Stobbe for fruitful discussions about this project. Parts of this
work were presented at the Fourth IEEE International Symposium on Biomedical Imaging (ISBI
‘07) held April 12–15, 2007 and at the Von Neumann Symposium on Sparse Representation and
High-Dimensional Geometry held July 8–12, 2007. Related work was first developed as lecture notes
for the course EE364b: Convex Optimization II, given at Stanford Winter quarter 2006-07 [62].
26
References
[1] S. Boyd and L. Vandenberghe, Convex Optimization, Cambridge University Press, 2004.
[2] H. L. Taylor, S. C. Banks, and J. F. McCoy, “Deconvolution with the ℓ1 norm,” Geophysics, vol. 44,
no. 1, pp. 39–52, Jan. 1979.
[3] J. F. Claerbout and F. Muir, “Robust modeling with erratic data,” Geophysics, vol. 38, no. 5, pp.
826–844, Oct. 1973.
[4] F. Santosa and W. W. Symes, “Linear inversion of band-limited reflection seismograms,” SIAM J. Sci.
Stat. Comput., vol. 7, no. 4, pp. 1307–1330, 1986.
[5] D. L. Donoho and P. B. Stark, “Uncertainty principles and signal recovery,” SIAM J. Appl. Math., vol.
49, no. 3, pp. 906–931, June 1989.
[6] D. L. Donoho and B. F. Logan, “Signal recovery and the large sieve,” SIAM J. Appl. Math., vol. 52,
no. 2, pp. 577–591, Apr. 1992.
[7] R. Tibshirani, “Regression shrinkage and selection via the lasso,” J. Royal. Statist. Soc B., vol. 58, no.
1, pp. 267–288, 1996.
[8] S. Chen, D. Donoho, and M. Saunders, “Atomic decomposition by basis pursuit,” SIAM J. on Sci.
Comp., vol. 20, no. 1, pp. 33–61, 1998.
[9] L. I. Rudin, S. Osher, and E. Fatemi, “Nonlinear total variation based noise removal algorithms,” Phys.
D, vol. 60, no. 1-4, pp. 259–268, 1992.
[10] P. Blomgren and T. F. Chan, “Color TV: total variation methods for restoration of vector-valued
images,” IEEE Trans. Image Processing, vol. 7, pp. 304–309, March 1998.
[11] L. Vandenberghe, S. Boyd, and A. El Gamal, “Optimal wire and transistor sizing for circuits with non-
tree topology,” in Proceedings of the 1997 IEEE/ACM International Conference on Computer Aided
Design, 1997, pp. 252–259.
[12] L. Vandenberghe, S. Boyd, and A. El Gamal, “Optimizing dominant time constant in RC circuits,”
IEEE Transactions on Computer-Aided Design, vol. 2, no. 2, pp. 110–125, Feb. 1998.
[13] A. Hassibi, J. How, and S. Boyd, “Low-authority controller design via convex optimization,” AIAA
Journal of Guidance, Control, and Dynamics, vol. 22, no. 6, pp. 862–872, November-December 1999.
[14] M. Dahleh and I. Diaz-Bobillo, Control of Uncertain Systems: A Linear Programming Approach,
Prentice-Hall, 1995.
[15] M. Lobo, M. Fazel, and S. Boyd, “Portfolio optimization with linear and fixed transaction costs,”
Annals of Operations Research, vol. 152, no. 1, pp. 341–365, 2006.
[16] A. Ghosh and S. Boyd, “Growing well-connected graphs,” in Proceedings of the 45th IEEE Conference
on Decision and Control, December 2006, pp. 6605–6611.
[17] J. Sun, S. Boyd, L. Xiao, and P. Diaconis, “The fastest mixing Markov process on a graph and a
connection to a maximum variance unfolding problem,” SIAM Review, vol. 48, no. 4, pp. 681–699,
2006.
[18] S.-J. Kim, K. Koh S. Boyd, and D. Gorinevsky, “ℓ1 trend filtering,” 2007, Available at
www.stanford.edu/~boyd/l1_trend_filter.html.
[19] D. L. Donoho and X. Huo, “Uncertainty principles and ideal atomic decomposition,” IEEE Trans.
Inform. Theory, vol. 47, no. 7, pp. 2845–2862, Nov. 2001.
[20] M. Elad and A. M. Bruckstein, “A generalized uncertainty principle and sparse representation in pairs
of bases,” IEEE Trans. Inform. Theory, vol. 48, no. 9, pp. 2558–2567, 2002.
27
[21] R. Gribonval and M. Nielsen, “Sparse representations in unions of bases,” IEEE Trans. Inform. Theory,
vol. 49, no. 12, pp. 3320–3325, 2003.
[22] J. A. Tropp, “Just relax: convex programming methods for identifying sparse signals in noise,” IEEE
Trans. Inform. Theory, vol. 52, pp. 1030–1051, 2006.
[23] E. J. Candès, J. Romberg, and T. Tao, “Robust uncertainty principles: Exact signal reconstruction from
highly incomplete frequency information,” IEEE Trans. Inform. Theory, vol. 52, no. 2, pp. 489–509,
Feb. 2006.
[24] E. J. Candès and T. Tao, “Near optimal signal recovery from random projections: Universal encoding
strategies?,” IEEE Trans. Inform. Theory, vol. 52, no. 12, pp. 5406–5425, Dec. 2006.
[25] D. Donoho, “Compressed sensing,” IEEE Trans. Inform. Theory, vol. 52, no. 4, Apr. 2006.
[26] D. L. Donoho and J. Tanner, “Counting faces of randomly-projected polytopes when the projection
radically lowers dimension,” Journal of the American Mathematical Society, 2006, to appear.
[27] E. J. Candès, J. Romberg, and T. Tao, “Stable signal recovery from incomplete and inaccurate mea-
surements,” Comm. Pure Appl. Math., vol. 59, no. 8, pp. 1207–1223, Aug. 2006.
[28] D. Donoho and Y. Tsaig, “Extensions of compressed sensing,” Signal Processing, vol. 86, no. 3, pp.
533–548, Mar. 2006.
[29] D. Takhar, V. Bansal, M. Wakin, M. Duarte, D. Baron, K. F. Kelly, and R. G. Baraniuk, “A compressed
sensing camera: New theory and an implementation using digital micromirrors,” in Proc. Comp. Imaging
IV at SPIE Electronic Imaging, San Jose, California, January 2006.
[30] M. Lustig, D. Donoho, and J. M. Pauly, “Sparse MRI: The application of compressed sensing for rapid
MR imaging,” 2007, Preprint.
[31] E. J. Candès and T. Tao, “Decoding by linear programming,” IEEE Trans. Inform. Theory, vol. 51,
no. 12, Dec. 2005.
[32] E. J. Candès and P. A. Randall, “Highly robust error correction by convex programming,” Available
on the ArXiV preprint server (cs/0612124), 2006.
[33] D. L. Healy (Program Manager), “Analog-to-Information (A-to-I),” DARPA/MTO Broad Agency
Announcement BAA 05-35, July 2005.
[34] W. Bajwa, J. Haupt, A. Sayeed, and R. Nowak, “Compressive wireless sensing,” in Proc. Fifth Int.
Conf. on Information processing in sensor networks, 2006, pp. 134–142.
[35] D. Baron, M. B. Wakin, M. F. Duarte, S. Sarvotham, and R. G. Baraniuk, “Distributed compressed
sensing,” 2005, Preprint.
[36] K. Lange, Optimization, Springer Texts in Statistics. Springer-Verlag, New York, 2004.
[37] M. Fazel, Matrix Rank Minimization with Applications, Ph.D. thesis, Electrical Engineering Depart-
ment, Stanford University, 2002.
[38] M. S. Lobo, M. Fazel, and S. Boyd, “Portfolio optimization with linear and fixed transaction costs,”
Ann. Oper. Res., vol. 152, no. 1, pp. 341–365, July 2007.
[39] M. Fazel, H. Hindi, and S. Boyd, “Log-det heuristic for matrix rank minimization with applications to
Hankel and Euclidean distance matrices,” in Proc. Am. Control Conf., June 2003.
[40] M. A. T. Figueiredo and R. D. Nowak, “A Bound Optimization Approach Towavelet-Based Image
Deconvolution,” Proc. IEEE Int. Conf. Image Processing (ICIP), vol. 2, 2005.
[41] M. Figueiredo, J. M. Bioucas-Dias, and R. D. Nowak, “Majorization–Minimization Algorithms for
Wavelet-Based Image Restoration,” IEEE Trans. Image Processing, vol. 16, no. 12, pp. 2980–2991,
2007.
28
[42] D. P. Wipf and S. Nagarajan, “A new view of automatic relevance determination,” in Proc. Neural
Information Processing Systems (NIPS), 2008, vol. 20.
[43] H. Zou, “The Adaptive Lasso and Its Oracle Properties,” J. American Statistical Association, vol. 101,
no. 476, pp. 1418–1429, 2006.
[44] H. Zou and R. Li, “One-step sparse estimates in nonconcave penalized likelihood models,” Annals of
Statistics. To appear, 2007.
[45] E. J. Schlossmacher, “An iterative technique for absolute deviations curve fitting,” J. Amer. Statist.
Assoc., vol. 68, no. 344, pp. 857–859, Dec. 1973.
[46] P. Holland and R. Welsch, “Robust regression using iteratively reweighted least-squares,” Commun.
Stat. Theoret. Meth., vol. A6, 1977.
[47] P. J. Huber, Robust Statistics, Wiley-Interscience, 1981.
[48] R. Yarlagadda, J. B. Bednar, and T. L. Watt, “Fast algorithms for ℓp deconvolution,” IEEE Trans.
Acoust., Speech, Signal Processing, vol. 33, no. 1, pp. 174–182, Feb. 1985.
[49] W. Yin, S. Osher, D. Goldfarb, and J. Darbon, “Bregman iterative algorithms for ℓ1-minimization with
applications to compressed sensing,” SIAM J. Imaging Sciences, vol. 1, no. 1, pp. 143–168, 2008.
[50] E. J. Candès and T. Tao, “The Dantzig selector: Statistical estimation when p is much larger than n,”
Ann. Statist., 2006, To appear.
[51] D. Goldfarb and W. Yin, “Second-order cone programming methods for total variation-based image
restoration,” SIAM J. Scientific Comput., vol. 27, no. 2, pp. 622–645, 2005.
[52] R. Chartrand, “Exact reconstruction of sparse signals via nonconvex minimization,” Signal Process.
Lett., vol. 14, no. 10, pp. 707–710, 2007.
[53] J.-L. Starck, M. Elad, and D. L. Donoho, “Redundant multiscale transforms and their application for
morphological component analysis,” Adv. Imaging and Electron Phys., vol. 132, 2004.
[54] M. Elad, P. Milanfar, and R. Rubinstein, “Analysis versus synthesis in signal priors,” Inverse Problems,
vol. 23, no. 3, pp. 947–968, 2007.
[55] I. F. Gorodnitsky and B. D. Rao, “Sparse signal reconstruction from limited data using FOCUSS: A
re-weighted minimum norm algorithm,” IEEE Trans. Signal Processing, vol. 45, no. 3, pp. 600–616,
Mar. 1997.
[56] R. Chartrand and W. Yin, “Iteratively reweighted algorithms for compressive sensing,” Proc. Int. Conf.
Acoustics, Speech, Signal Processing (ICASSP), pp. 3869–3872, 2008.
[57] D. P. Wipf, Personal communication, Jan., 2008.
[58] G. Harikumar and Y. Bresler, “A new algorithm for computing sparse solutions to linear inverse
problems,” in Proc. Int. Conf. Acoustics, Speech, Signal Processing (ICASSP). May 1996, IEEE.
[59] A. H. Delaney and Y. Bresler, “Globally convergent edge-preserving regularized reconstruction: An
application to limited-angle tomography,” IEEE Trans. Image Processing, vol. 7, no. 2, pp. 204–221,
Feb. 1998.
[60] R. Saab, R. Chartrand, and O. Yilmaz, “Stable sparse approximations via nonconvex optimization,”
in 33rd International Conference on Acoustics, Speech, and Signal Processing (ICASSP), 2008.
[61] M. J. Black, G. Sapiro, D. H. Marimont, and D. Heeger, “Robust anisotropic diffusion,” IEEE Trans.
Image Processing, vol. 7, no. 3, pp. 421–432, 1998.
[62] S. Boyd, “Lecture notes for EE364B: Convex Optimization II,” 2007, Available at
www.stanford.edu/class/ee364b/.
29

