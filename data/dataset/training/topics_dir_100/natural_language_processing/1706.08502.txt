Natural Language Does Not Emerge ‘Naturally’ in Multi-Agent Dialog
Satwik Kottur2 and José M.F. Moura2 and Stefan Lee3 and Dhruv Batra1
1Georgia Institute of Technology, 2Carnegie Mellon University, 3Virginia Tech
Abstract
A number of recent works have pro-
posed techniques for end-to-end learning
of communication protocols among coop-
erative multi-agent populations, and have
simultaneously found the emergence of
grounded human-interpretable language
in the protocols developed by the agents,
all learned without any human supervi-
sion!
In this paper, using a Task and Tell ref-
erence game between two agents as a
testbed, we present a sequence of ‘nega-
tive’ results culminating in a ‘positive’ one
– showing that while most agent-invented
languages are effective (i.e. achieve near-
perfect task rewards), they are decidedly
not interpretable or compositional. In
essence, we find that natural language
does not emerge ‘naturally’, despite the
semblance of ease of natural-language-
emergence that one may gather from re-
cent literature. We discuss how it is pos-
sible to coax the invented languages to
become more and more human-like and
compositional by increasing restrictions
on how two agents may communicate.
1 Introduction
One fundamental goal of artificial intelligence
(AI) is the development of goal-driven dialog
agents – specifically, agents that can perceive their
environment (through vision, audition, or other
sensors), and communicate with humans or other
agents in natural language towards some goal.
While historically such agents have been based
on slot filling (Lemon et al., 2006), the domi-
nant paradigm today is neural dialog models (Bor-
des and Weston, 2016; Weston, 2016; Serban
et al., 2016a,b) trained on large quantities of data.
Perhaps somewhat counterintuitively, this current
paradigm treats dialog as a static supervised learn-
ing problem, rather than as the interactive agent
learning problem that it naturally is. Specifically,
a typical pipeline is to collect a large dataset
of human-human dialog (Lowe et al., 2015; Das
et al., 2017a; de Vries et al., 2017; Mostafazadeh
et al., 2017), inject a machine in the middle of a di-
alog from the dataset, and supervise it to mimic the
human response. While this teaches the agent cor-
relations between symbols, it does not convey the
functional meaning of language, grounding (map-
ping words to physical concepts), compositional-
ity (combining knowledge of simpler concepts to
describe richer concepts), or aspects of planning
(understanding the goal of the conversation).
An alternative paradigm that has a long history
(Winograd, 1971) and is witnessing a recent resur-
gence (Wang et al., 2016; Foerster et al., 2016;
Sukhbaatar et al., 2016; Jorge et al., 2016; Lazari-
dou et al., 2017; Havrylov and Titov, 2017; Mor-
datch and Abbeel, 2017; Das et al., 2017b) –
is situated language learning. A number of re-
cent works have proposed reinforcement learning
techniques for learning the communication proto-
cols of agents situated in virtual environments in
a completely end-to-end manner – from percep-
tual input (e.g. pixels) to communication (discrete
symbols without any pre-specified meanings) to
action (e.g. signaling in reference games or nav-
igating in an environment) – and have simultane-
ously found the emergence of grounded human-
interpretable (often compositional) language in
the communication protocols developed by the
agents, without any human supervision or pre-
training, simply to succeed at the task.
ar
X
iv
:1
70
6.
08
50
2v
1 
 [
cs
.C
L
] 
 2
6 
Ju
n 
20
17
In this paper, we study the following question –
what are the conditions that lead to the emergence
of human-interpretable or compositional grounded
language? Our key finding is that natural language
does not emerge ‘naturally’ in multi-agent dialog,
despite the semblance of ease of natural-language-
emergence in multi-agent games that one may
gather from recent literature.
Specifically, in a sequence of ‘negative’ results
culminating in a ‘positive’ one, we find that while
agents always successfully invent communication
protocols and languages to achieve their goals
with near-perfect accuracies, the invented lan-
guages are decidedly not compositional, inter-
pretable, or ‘natural’; and that it is possible to coax
the invented languages to become more and more
human-like and compositional by increasing re-
strictions on how two agents may communicate.
Related work and novelty. The starting point
for our investigation is the recent work of Das
et al. (2017b), who proposed a cooperative refer-
ence game between two agents, where communi-
cation is necessary to accomplish the goal due to
an information asymmetry. Our key contribution
over Das et al. (2017b) is an exhaustive study of
the conditions that must be present before com-
positional grounded language emerges, and subtle
but important differences in execution – tabular Q-
Learning (which does not scale) vs. REINFORCE
(which does), and generalization to novel environ-
ments (not studied in prior work). We hope our
findings shed more light into the interpretability
of languages invented in cooperative multi-agent
settings, place recent work in appropriate context,
and inform fruitful directions for future work.
2 The Task & Talk Game
Our testbed is a cooperative reference game (Task
& Talk) between two agents, Q-BOT and A-BOT.
The game is grounded in a synthetic world of ob-
jects comprised of three attributes – color, style,
and shape – each with four possible values for a
total of 4× 4× 4 = 64 objects. Fig. 1a shows all
the possible attribute values.
Task & Talk plays out over multiple rounds of di-
alog. At the start, A-BOT is given an object un-
seen by Q-BOT, e.g. (green, dotted, square). On
the other side, Q-BOT is assigned a task G (un-
known to A-BOT) consisting of two attributes, e.g.
(color, style) and the goal is for Q-BOT to discover
Figure 1: (a) Task & Talk: The testbed for our study is coop-
erative 2-player game, Task & Talk, grounded in a synthetic
world of objects with 4 shapes × 4 colors × 4 styles. (b)
Q-BOT is assigned a task – to inquire about the state of an
ordered pair of attributes. (c) An example gameplay between
the two agents - Q-BOT asks questions depending on the task
which are answered by A-BOT conditioned on the hidden in-
stance visible to only itself. At the end, Q-BOT makes a pre-
diction of pair of attributes (purple, square).
these two attributes of the hidden object, through
dialog with A-BOT. Specifically, Q-BOT and A-
BOT exchange utterances from finite vocabularies
VQ and VA over two rounds, with Q-BOT speak-
ing first. The game culminates in Q-BOT guessing
a pair of attribute values, e.g. (green, dotted), and
both agents are rewarded identically based on the
accuracy of Q-BOT ‘s prediction.
Note that the Task & Talk game setting involves an
informational asymmetry between the agents – A-
BOT sees the object while Q-BOT does not; sim-
ilarly Q-BOT knows the task while A-BOT does
not. Thus, a two-way communication is neces-
sary for success. Without this asymmetry, A-BOT
could simply convey the target attributes from the
task without Q-BOT having to speak. Such a set-
ting has been widely studies in economics and
game theory as the classic Lewis Signaling (LS)
game (Lewis, 2008). By necessitating dialog be-
tween agents, we are able ground both VA and VQ
in our final setting (Sec. 4.3).
3 Modeling Q-BOT and A-BOT
We formalize Q-BOT and A-BOT as agents oper-
ating in a partially observable world and optimize
their policies using deep reinforcement learning.
States and Actions. Each agent observes its
own input (task G for Q-BOT and object in-
stance I for A-BOT) and the output of the
other agent as a stochastic environment. At
the beginning of round t, Q-BOT observes state
stQ=[G, q1, a1, . . . , qt−1, at−1] and acts by utter-
ing some token qt from its vocabulary VQ. Simi-
Figure 2: Policy networks for Q-BOT and A-BOT. At each round t of dialog, (1) Q-BOT generates a question qt from its speaker
network conditioned on its state encoding SQt−1, (2) A-BOT encodes qt conditioned on instance y encoded via instance encoder,
updates its state encoding SAt , and generates an answer at, (3) Q-BOT encodes (qt, at) pair, while A-BOT encodes the answer
it sampled, (4) Q-BOT updates its state to SQt , predicts an attribute pair via prediction LSTM at round T , and receives a reward.
larly, A-BOT observes the history and this new ut-
terance as state stA=[I, q1, a1, . . . , qt−1, at−1, qt]
and emits a response at from VA. At the last round,
Q-BOT takes a final action by predicting a pair of
attribute values ŵG = (ŵG1 , ŵ
G
2 ) to solve the task.
Cooperative Reward. Both Q-BOT and A-BOT
are rewarded identically based on the accuracy of
Q-BOT’s prediction ŵG, receiving a positive re-
ward of R=1 if the prediction matches ground
truth wG and a negative reward of R=−10 other-
wise. We arrive at these values empirically based
on the speed of convergence in our experiments.
Policy Networks. We model Q-BOT and
A-BOT as operating under stochastic policies
πQ(qt|sQt ; θQ) and πA(at|sAt ; θA) respectively,
which we instantiate as LSTM-based models. We
use lower case characters (e.g. sQt ) to denote the
strings (e.g. Q-BOT’s token at round t), and up-
per case SQt to denote the corresponding vector as
encoded by the model.
As show in Fig. 2, Q-BOT is modeled with three
modules – speaking, listening, and prediction. The
task G is received as a 6-dimensional one-hot en-
coding over the space of possible tasks and em-
bedded via the listener LSTM. At each round t, the
speaker network models the probability of output
utterances qt ∈ VQ based on the state SQt−1. This is
modeled as a fully-connected layer followed by a
softmax that transforms SQt−1 to a distribution over
VQ. After receiving the reply at from A-BOT, the
listener LSTM updates the state by processing both
tokens of the dialog exchange. In the final round,
the prediction LSTM is unrolled twice to produce
Q-BOT’s prediction based on the final state SQT and
the task G. As before, task G is fed in as a one-
hot encoding to the prediction LSTM for two time
steps, resulting in a pair of outputs used as the pre-
diction ŵG.
Analogously, A-BOT is modeled as a combination
of a speaker network, a listener LSTM, and an in-
stance encoder. Like in Q-BOT, the speaker net-
work models the probability of utterances at ∈ VA
given the state SAt and the listener LSTM updates
the state SAt based on dialog exchanges. The in-
stance encoder embeds each one-hot attribute vec-
tor via a linear layer and concatenates all three en-
codings to obtain a unified instance representation.
Learning Policies with REINFORCE. To train
these agents, we update policy parameters θQ and
θA using the popular REINFORCE (Williams,
1992) policy gradient algorithm. Note that while
the game is fully-cooperative, we do not assume
full observability of one agent by another, opting
instead to treat each agent as part of the stochas-
tic environment when updating the other. We will
now derive the parameter gradients for our setup.
Recall that our agents take actions – utterances (qt
and at) and attribute prediction (ŵG) – and our ob-
jective is to maximize the expected reward under
the agents’ policies:
max
θA,θQ
J(θA, θQ) where, (1a)
J(θA, θQ) = E
πQ,πA
[
R
(
ŵG, wG
)]
(1b)
Though the agents receive the reward at the end
of gameplay, all intermediate actions are assigned
the same reward R. Following the REINFORCE
algorithm, we write the gradient of this expecta-
tion as an expectation of policy gradients. For θQ,
we derive this explicitly at a time step t:
∇θQJ = ∇θQ
[
E
πQ,πA
[
R
(
ŵG, wG
)]]
= ∇θQ
[∑
qt,at
πQ
(
qt|sQt−1
)
πA
(
at|sAt
)
R(.)
]
=
∑
qt,at
πQ
(
qt|sQt−1
)
∇θQ log πQ
(
qt|sQt−1
)
πA
(
at|sAt
)
R(.)
= E
πQ,πA
[
R(.)∇θQ log πQ
(
qt|sQt−1
)]
(2)
Similarly, gradient w.r.t. θA, i.e., ∇θAJ will be:
∇θAJ = E
πQ,πA
[
R(.)∇θA log πA
(
at|sAt
)]
(3)
As is standard practice, we estimate these expec-
tations with sample averages – sampling an en-
vironment (object instance and task), sampling a
dialog between Q-BOT and A-BOT, culminating
in a prediction from Q-BOT and the received re-
ward. The REINFORCE update rule above has
an intuitive interpretation – an informative dialog
(qt, at) that leads to positive reward will be made
more probable (positive gradient), while a poor ex-
change leading to negative reward will be pushed
down (negative gradient).
Implementation Details. All our models are
implemented using the Pytorch1 deep learning
framework. To represent instances, we learn a
20 dimensional embedding for every possible at-
tribute values and concatenate the three instance
attributes to obtain a final instance representation
of size 60. Tokens from VQ and VA are encoded as
one-hot vectors and then embedded into 20 dimen-
sion vectors. Both A-BOT and Q-BOT learn their
own token embeddings without sharing. The lis-
tener networks in both agents are implemented as
LSTMs with a hidden layer size of 50 dimensions.
All modules within an agent are initialized using
the Xavier method (Glorot and Bengio, 2010).
We use 1000 episodes of two-round dialogs to
compute policy gradients, and perform updates
according to Adam optimizer (Kingma and Ba,
2015), with a learning rate of 0.01. Furthermore,
gradients are clipped at [−5.0, 5.0]. For faster con-
vergence, 80% of train episodes for the next itera-
tion are from instances misclassified by the current
network, while randomly sampling the remaining
from all instances. Our code is publicly available2.
4 The Road to Compositionality
This section details our key observation – that
while the agents always successfully invent a lan-
1github.com/pytorch/pytorch
2github.com/batra-mlp-lab/lang-emerge
guage to solve the game with near-perfect accu-
racies, the invented languages are decidedly not
compositional, interpretable, or ‘natural’ (e.g. A-
BOT ignoring Q-BOT’s utterances and simply en-
coding every object with a unique symbol if the
vocabulary is sufficiently large).
Through this section, we present a series of set-
tings that get progressively more restrictive to
coax the agents towards adopting a compositional
language, providing analysis of the learned lan-
guages and ‘cheating’ strategies developed along
the way. Tab. 2 summarizes results for all set-
tings. In all experiments, optimal policies (achiev-
ing near-perfect training rewards) were found. For
each setting, we provide qualitative analysis of
the learned languages and report their ability to
generalize to unseen instances. We use 80% of
the object-instances for training and the remaining
20% for evaluation.
4.1 Overcomplete Vocabularies
We begin with the simplest setting where both A-
BOT and Q-BOT are given arbitrarily large vocab-
ularies. We find that when |VA| is greater than
the number of instances (64), the learned policy
mostly ignores what Q-BOT asks and instead has
A-BOT convey the instance using pairs of symbols
across rounds unique to an instance, e.g., both to-
ken pairs (a1, a2)=(14, 31), (40, 1) convey (red,
triangle, filled), as shown in Fig. 3. Notice, this
means no ‘dialog’ is necessary and amounts to
each agent having a codebook that maps symbols
to object instances. In essence, this setting has
collapsed to an analog of Lewis Signaling (LS)
game with A-BOT signaling its complete world
state and Q-BOT simply reporting the target at-
tributes. More examples to illustrate this behavior
for this setting are shown in Fig. 3.
Perhaps as expected, the generalization of this lan-
guage to unseen instances is quite poor (success
rate: 25.6%). The adopted strategy of mapping in-
stances to token pairs fails for test instances con-
taining novel combinations of attributes for which
the agents lack an agreed-upon code from training.
It seems clear that like in human communication
(Nowak et al., 2000), a limited vocabulary that
cannot possibly encode the richness of the world
seems to be necessary for non-trivial dialog to
emerge. We explore such a setting next.
Figure 3: Overcomplete vocabularies setting (|VQ| = |VA| =
64, Sec. 4.1). Owing to a large vocabulary, we denote the to-
kens using numbers, as opposed to English alphabet charac-
ters shown in other figures. A-BOT mostly ignores what Q-
BOT asks and instead conveys the instance using pairs of sym-
bols across rounds unique to an instance, leading to a highly
non-human intuitive and non-compositional language.
4.2 Attribute-Value Vocabulary
Since our world has 3 attributes (shape/color/
style) and 4+4+4 = 12 possible settings of their
states, one may believe that the intuitive choice of
|VQ| = 3 and |VA| = 12 will be enough to circum-
vent the ‘cheating’ enumeration strategy from the
previous experiment. Surprisingly, we find that the
new language learned in this setting is not only de-
cidedly non-compositional but also very difficult
to interpret! Some observations follow from Fig. 4
that shows sample dialogs for this setting.
We observe that Q-BOT uses only the first round to
convey the task to A-BOT by encoding tasks in an
order-agnostic fashion, as: (style, shape),(shape,
style) → X, (color, shape),(shape, color) → Y,
and (color, style),(style, color) → Z. Thus, mul-
tiple rounds of utterance from Q-BOT are ren-
dered unnecessary and we find the second round
is inconsistent across instances even for the same
task. For example, symmetric tasks (color, shape)
and (shape, color) from first row of Fig. 4 induce
q1=Y as the first token from Q-BOT.
Given the task from Q-BOT in the first round, A-
BOT only needs to identify one of the 4×4=16 at-
tribute pairs for a given task. Rather than ground
its symbols into individual states, A-BOT follows
a ‘set partitioning’ strategy, i.e. A-BOT identifies
Figure 4: Attribute and Value vocabulary setting (|VQ| =
3, |VA| = 12, Sec. 4.2). We show symmetric tasks for each
instance on either side to illustrate the similarities in the lan-
guage between the agents. As seen here, Q-BOT maps sym-
metric tasks in an order-agnostic fashion, and uses only the
first token to convey task information to A-BOT.
a pair of attributes with a unique combinations of
round 1 and 2 utterances (i.e. the round 2 utter-
ance has no meaning independent from round 1).
Thus, symbols are reused across tasks to describe
different attributes (i.e. symbols do not have in-
dividual consistent groundings). This ‘set parti-
tioning’ strategy is consistent with known results
from game theory on Nash equilibria in ‘cheap
talk’ games (Crawford and Sobel, 1982).
This strategy has improved generalization to un-
seen instances because it is able to communicate
the task; however, it fails on unseen attribute value
combinations because it is not compositional.
4.3 Memoryless A-BOT, Minimal Vocabulary
The key problem with the previous setting is that
A-BOT’s utterances mean different things based
on the round of dialog (a1 = 1 is different from
a2 = 1). Essentially, the communication protocol
is over-parameterized and we must limit it further.
First, we limit A-BOT’s vocabulary to |VA|=4 to
reduce the number of ‘synonyms’ the agents learn.
Second, we eliminate A-BOT’s capability to iden-
tify different rounds of interaction by removing A-
BOT’s memory. In other words, we reset the state
vector SA at each time step so that A-BOT can no
longer distinguish rounds from one another. By
doing so, we hypothesize that Q-BOT must now
ground its own and A-BOT’s tokens consistently
Figure 5: Example dialogs for memoryless A-BOT, minimal
vocabulary setting (|VQ| = 3, |VA| = 4, Sec. 4.3). Learnt
language is consistent and grounded, denoted below each to-
ken. Incorrect predictions on unseen instances (right, bottom)
are also shown. Notice that the incorrectly predicted attribute
is still from the right category (a color attribute for color).
across rounds to be able to communicate with a
memoryless A-BOT.
These restrictions result in a learned language
that grounds individual symbols into attributes and
their states. For example, Q-BOT learns that Y →
shape, X → color, and Z → style. Q-BOT does
not however learn to always utter these symbols in
the same order as the task, e.g. asking for shape
first for both (color, shape) and (shape, color).
Notice that this is perfectly valid as Q-BOT can
later re-arrange the attributes in the task desired or-
der. Similarly, A-BOT learns mappings to attribute
values for each attribute query that remain consis-
tent regardless of round (i.e. when asked for color,
1 always means blue).
This is similar to learned languages reported in re-
cent works and is most closely related to Das et al.
(2017b), who solve this problem by taking away
Q-BOT’s state rather than A-BOT’s memory. Their
approach of taking away task G from Q-BOT’s
state can be interpreted as Q-BOT ‘forgetting’ the
task after interacting with A-BOT. However, this
behavior of Q-BOT to remember the task only dur-
ing dialog but not while predicting is somewhat
unnatural compared to our setting.
Tab. 1 enumerates the learnt groundings for both
the agents. Given this mapping, we can predict a
plausible dialog between the agents for any unseen
instance and task combination. Notice that this is
Attributes
color shape style
VA X Y Z
1 blue triangle dotted
2 purple square filled
3 green circle dashed
4 red start solid
(a) A-BOT
Task q1, q2
(color, shape)
Y, X
(shape, color)
(shape, style)
Y, Z
(style, shape)
(color, style) Z, X
(style, color) X, Z
(b) Q-BOT
Table 1: Emergence of compositional grounding for language
learnt by the agents. A-BOT (Tab. 1a) learns consistent map-
ping across rounds, depending on the query attribute. Token
grounding for Q-BOT (Tab. 1b) depends on the task at hand.
Though compositional, Q-BOT does not necessarily query at-
tribute in the order of task, but instead re-arranges accord-
ingly at prediction time as it contains memory.
possible only due to the compositionality in the
emergent language between the two agents. For
example, consider solving the task (shape, color)
for an instance (red, square, filled) from Fig. 7(b).
Q-BOT queries Y (shape) and X (color) across two
rounds, and receives 2 (square) and 4 (red) as an-
swers. More examples along with grounded mean-
ing of each tokens are shown in Fig. 5.
Intuitively, this consistently grounded and compo-
sitional language has the greatest ability to gen-
eralize among the settings we have explored, cor-
rectly answering 74.4% of the held out instances.
We note that errors in this setting seem to largely
be due to A-BOT giving an incorrect answers de-
spite Q-BOT asking the correct questions to ac-
complish the task. A plausible reason could be
the model approximation error stemming from the
instance encoder as test instances are unseen and
have novel attribute combinations.
5 Evolution of Language
As demonstrated by the previous sections, even
though compositional language is one of the opti-
mal policies, the agents tend to learn other equally
useful forms of communication. Thus, composi-
tional language does not naturally emerge without
an explicit need for it. Even in situations where
compositionality does emerge, perhaps it is more
interesting to analyze the process of emergence
than the learnt language itself. Therefore, we
present such a study that explicitly identifies when
each symbol has been grounded by the agents
in the training timeline, along with implications
thereof on the performance on Task & Talk game.
Setting
Vocab. Memory Seen (%) Unseen (%)
Characteristics
VQ VA A Q Both One Both One
Overcomplete
(§4.1)
64 64 3 3 100 100 25.6 79.5
• Non-compositional language
• Q-BOT insignificant
• Inconsistent A-BOT grounding across rounds
• Poor generalization to unseen instances
Attr-Value
(§4.2)
3 12 3 3 100 100 38.5 88.4
• Non-compositional language
• Q-BOT uses one round to convey task
• Inconsistent A-BOT grounding across rounds
• Poor generalization to unseen instances
NoMem-Min
(§4.3)
3 4 7 3 100 100 74.4 94.9
• Compositional language
• Q-BOT uses both rounds to convey task
• Consistent A-BOT grounding across rounds
• Good generalization to unseen instances
Table 2: Overview of settings we explore to analyze the language learnt by two agents in a cooperative game, Task & Talk. Last
two columns measure generalization in terms of prediction accuracy of both or at least one of the attribute pair, on a held-out
test set containing unseen instances.
5.1 Dialog Trees
When two agents–Q-BOT and A-BOT–converse
with each other, they can be seen as traversing
through a dialog tree, a subtree of which is de-
picted in Fig. 6. Simply put, a dialog tree is an
enumeration of all possible dialogs represented in
the form of tree, with levels of the tree correspond-
ing to the round of interaction. To elaborate, con-
sider a partial dialog tree for (shape, color) task
shown in Fig. 6 for the setting in Sec. 4.3. For Q-
BOT’s first token q1 = Y , A-BOT has |VA| = 4
plausible replies shown as a 4-way branch off. In
general, the dialog tree for Task & Talk contains a
total of |VQ|2|VA|2 leaves and is 4 levels deep. We
use the dialog between the agents to descend and
land in one of these leaves.
Dialog trees offer an interesting alternate view of
our learning problem. The goal of learning com-
munication between the two agents can be equiv-
alently seen as mapping (instance, task) pairs to
one of the dialog tree leaves. Each leaf is la-
beled with an attribute pair used to accomplish the
prediction task. For example, if solving (shape,
color) for (blue, triangle, solid) results in the di-
alog Y→1→X→1, we descend the dialog tree
along the corresponding path and assign the tuple
(blue, triangle, solid, shape, color) to the resulting
leaf. In case of a compositional, grounded dia-
log, all tuples of the form (blue, triangle, ∗, shape,
color) would get mapped to the same leaf, which
can then be labeled as (triangle, blue) to success-
fully solve the task. Note the wildcard style at-
tribute in the tuple above, as it is irrelevant for this
Figure 6: Dialog tree for memoryless A-BOT and minimal
vocabulary setting (Sec.4.3), shown only for one task (shape,
color). Every dialog between the agents results in a tree
traversal beginning from the root, e.g., Y→1→X→1 lands
us in the top-right leaf. See text for more details.
particular task.
In the following section, we use dialog trees to ex-
plore the evolution of language as learnt by the two
agents in the memoryless A-bot, minimal vocabu-
lary setting in Sec. 4.3.
5.2 Evolution Timeline
To gain further insight into the languages learned,
we create a language evolution plot shown in
Fig. 7. Specifically, at regular intervals during pol-
icy learning, we construct dialog trees. At some
point in the learning, the nodes in the tree be-
come and stay ‘pure’ (all (instance, task) at the
Figure 7: Evolution of Language: timeline shows groundings learned by the agents during training, overlaid on the accuracy.
Note that Q-BOT learns encodings for all tasks early (around epoch 20) except (style, color). Improvement in accuracy is
strongly correlated with groundings learnt.
node are identical), at which point we can say that
the agents have learned this dialog subsequence.
Fig. 7 depicts a timeline of concepts learned at var-
ious nodes of the trees during training. We next
describe the procedure to identify when a particu-
lar ‘concept’ has been grounded by the agents in
their language.
Construction. After constructing dialog trees at
regular intervals, we identify ‘concepts’ at each
node/leaf using the dialog tree of the completely
trained model, which achieves a perfect accuracy
on train set. A concept is simply the common
trend among all the (instance, task) tuples either
assigned to a leaf or contained within the sub-
tree with a node as root. To illustrate, the con-
cept of the top right leaf in Fig. 6 is (blue, trian-
gle, ∗, shape, color), i.e., all instances assigned
to that leaf for (shape, color) task are blue trian-
gles. Next, given a resultant concept for each of
the node/leaf, we backtrack in time and check for
the first occurrence when only tuples which satisfy
the corresponding concept are assigned to that par-
ticular node/leaf. In other words, we compute the
earliest time when a node/leaf is ‘pure’ with re-
spect to its final learned concept. Finally, we plot
these leaves/nodes and the associated concept with
their backtracked time to get Fig. 7.
Observations. We highlight the key observations
from Fig. 7 below:
(a) The agents ground most of the tasks initially
at around epoch 20. Specifically, Q-BOT as-
signs Y to both (shape, style), (style, shape),
(shape,color) and (color, shape), while (color,
style) is mapped to Z. Hence, Q-BOT learns its
first token very early into the training proce-
dure at around 20 epochs.
(b) The only other task (style, color) is grounded
towards the end (around epoch 170) using X,
leading to an immediate convergence.
(c) We see a strong correlation between improve-
ment in performance and when agents learn a
language grounding. In particular, there is an
improvement from 40% to 80% within a span
of 25 epochs where most of the grounding is
achieved, as seen from Fig. 7.
6 Conclusion
In conclusion, we presented a sequence of ‘neg-
ative’ results culminating in a ‘positive’ one –
showing that while most invented languages are
effective (i.e. achieve near-perfect rewards), they
are decidedly not interpretable or compositional.
Our goal is simply to improve understanding and
interpretability of invented languages in multi-
agent dialog, place recent work in context, and in-
form fruitful directions for future work.
References
Antoine Bordes and Jason Weston. 2016. Learn-
ing End-to-End Goal-Oriented Dialog. arXiv preprint
arXiv:1605.07683 .
Vincent Crawford and Joel Sobel. 1982. Strategic in-
formation transmission. Econometrica 50(6):1431–51.
Abhishek Das, Satwik Kottur, Khushi Gupta, Avi
Singh, Deshraj Yadav, José M.F. Moura, Devi Parikh,
and Dhruv Batra. 2017a. Visual Dialog. In CVPR.
Abhishek Das, Satwik Kottur, José M.F. Moura, Ste-
fan Lee, and Dhruv Batra. 2017b. Learning Cooper-
ative Visual Dialog Agents with Deep Reinforcement
Learning. arXiv preprint arXiv:1703.06585 .
Harm de Vries, Florian Strub, Sarath Chandar, Olivier
Pietquin, Hugo Larochelle, and Aaron C. Courville.
2017. Guesswhat?! visual object discovery through
multi-modal dialogue. In CVPR.
Jakob Foerster, Yannis M Assael, Nando de Freitas,
and Shimon Whiteson. 2016. Learning to communi-
cate with deep multi-agent reinforcement learning. In
NIPS.
Xavier Glorot and Yoshua Bengio. 2010. Understand-
ing the difficulty of training deep feedforward neural
networks. In AISTATS.
Serhii Havrylov and Ivan Titov. 2017. Emergence of
language with multi-agent games: Learning to commu-
nicate with sequences of symbols. In ICLR Workshop.
Emilio Jorge, Mikael Kågebäck, and Emil Gustavsson.
2016. Learning to play guess who? and inventing a
grounded language as a consequence. In NIPS work-
shop on deep reinforcement learning.
Diederik Kingma and Jimmy Ba. 2015. Adam: A
Method for Stochastic Optimization. In ICLR.
Angeliki Lazaridou, Alexander Peysakhovich, and
Marco Baroni. 2017. Multi-agent cooperation and the
emergence of (natural) language. In ICLR.
Oliver Lemon, Kallirroi Georgila, James Henderson,
and Matthew Stuttle. 2006. An ISU dialogue sys-
tem exhibiting reinforcement learning of dialogue poli-
cies: generic slot-filling in the TALK in-car system. In
EACL.
David Lewis. 2008. Convention: A philosophical
study. John Wiley & Sons.
Ryan Lowe, Nissan Pow, Iulian Serban, and Joelle
Pineau. 2015. The Ubuntu Dialogue Corpus: A Large
Dataset for Research in Unstructured Multi-Turn Dia-
logue Systems. In SIGDIAL.
Igor Mordatch and Pieter Abbeel. 2017. Emergence of
grounded compositional language in multi-agent popu-
lations. arXiv preprint arXiv:1703.04908 .
Nasrin Mostafazadeh, Chris Brockett, Bill Dolan,
Michel Galley, Jianfeng Gao, Georgios P. Spithourakis,
and Lucy Vanderwende. 2017. Image-Grounded Con-
versations: Multimodal Context for Natural Ques-
tion and Response Generation. arXiv preprint
arXiv:1701.08251 .
Martin A. Nowak, Joshua B. Plotkin, and Vincent A. A.
Jansen. 2000. The evolution of syntactic communica-
tion. Nature 404(6777):495–498.
Iulian V. Serban, Alessandro Sordoni, Yoshua Bengio,
Aaron Courville, and Joelle Pineau. 2016a. Building
End-To-End Dialogue Systems Using Generative Hier-
archical Neural Network Models. In AAAI.
Iulian Vlad Serban, Alessandro Sordoni, Ryan Lowe,
Laurent Charlin, Joelle Pineau, Aaron Courville, and
Yoshua Bengio. 2016b. A Hierarchical Latent Variable
Encoder-Decoder Model for Generating Dialogues.
arXiv preprint arXiv:1605.06069 .
Sainbayar Sukhbaatar, Rob Fergus, et al. 2016. Learn-
ing multiagent communication with backpropagation.
In NIPS. pages 2244–2252.
Sida I Wang, Percy Liang, and Christopher D Manning.
2016. Learning language games through interaction.
Association for Computational Linguistics (ACL) .
Jason Weston. 2016. Dialog-based language learning.
arXiv preprint arXiv:1604.06045 .
Ronald J Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforcement
learning. Machine learning 8(3-4):229–256.
Terry Winograd. 1971. Procedures as a representation
for data in a computer program for understanding nat-
ural language. Technical report, DTIC Document.

