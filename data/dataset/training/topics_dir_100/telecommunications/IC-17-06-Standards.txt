Standards
Editor: Barry Leiba • barryleiba@computer.org
2  Published by the IEEE Computer Society 1089-7801/13/$31.00 © 2013 IEEE IEEE INTERNET COMPUTING
The “Moore’s law” effect has seen network hardware improve over the past several decades along almost all hardware-oriented 
dimensions, including port densities, speeds and 
feeds, and price per bit. At the same time, the net-
work control plane has evolved far more slowly. 
In fact, configuring and managing networks con-
tinues to be about network element operations, 
rather than network services. This mix of ever-
growing networks and ever-advancing configura-
tion requirements makes network agility, service 
velocity, operation, and debugging increasingly 
difficult and expensive. We can see this effect 
across all network types, including enterprise, 
data centers, and service provider networks.
Software-defined networks (SDNs) are widely 
seen as a promising solution for resolving these 
challenges. In particular, SDNs promise to pro-
vide a multilayer platform that encompasses 
programmability not only at the forwarding 
and control planes, but also at the transport lay-
ers below and orchestration and services layers 
above the data and control planes.
Early SDN models focused primarily on 
moving the control plane out of the network 
elements into “controllers” on the theory that 
the switching elements could remain simple, 
general-purpose, and cost-effective while let-
ting the control plane rapidly evolve. Several 
recent SDN models, on the other hand, include 
approaches in which control- and data-plane 
programmability works in concert with existing 
and future distributed control planes.
SDNRG Goals and Objectives
SDN aims to benefit all network types, including 
wireless, cellular, home, enterprise, data centers, 
and wide-area networks. The Software-Defined 
Networking Research Group (SDNRG) is part of the 
Internet Research Task Force. IRTF is the research 
arm of the IETF; it’s a parallel organization that 
focuses on research, whereas the IETF works on 
engineering solutions. The SDNRG investigates 
SDN from various perspectives with the goal of 
identifying both approaches that can be defined, 
deployed, and used in the near term, and future 
research challenges. Key areas of interest include 
solution scalability, abstractions, and programming 
languages and paradigms particularly useful in an 
SDN context. Moreover, the SDNRG explicitly aims 
to provide a forum for researchers to investigate 
key and interesting problems in the SDN field.
Finally, the SDNRG provides objective defi-
nitions, metrics, and background research that 
it can provide as input to protocol, network, and 
service design for standards developing organi-
zations (SDOs) and other standards-producing 
organizations.
Current Events
Although a wide variety of what people call 
SDN is familiar, it’s still a nascent idea. Many 
The Software-Defined-
Networking Research Group
 
David Meyer • Brocade Communications
Software-defined networking (SDN) promises to bring radical improvements 
in both cost and functionality to the networking field. At the same time, SDN 
poses many fundamental questions, including deep architectural issues such as 
whether control should be centralized or distributed, and whether control and 
data planes should be separated or share fate. The Software Defined Network-
ing Research Group has been formed to facilitate research into these and other 
foundational questions.
IC-17-06-Standards.indd   2 16/09/13   1:25 PM
The Software-Defined-Networking Research Group
NOVEMBER/DECEMBER 2013 3
of SDN’s underlying ideas — such 
as separating the control and data 
planes — have turned up in telecom-
munications in prior technologies, 
but what’s interesting is the design 
space it represents. For example, 
SDN models range from OpenFlow/
SDN (OF/SDN),1 which is character-
ized by complete separation of con-
trol and data planes and open access 
to the forwarding plane, to overlay 
models that are less concerned with 
existing control and data planes. 
Equally diverse are ideas about what 
kinds of APIs should exist and which 
abstractions they do or should imple-
ment. Many ideas have arisen about 
distributed controller design and 
implementation, several revolving 
around how to manage state. Finally, 
the number of SDN use cases is grow-
ing daily. Given this backdrop, the 
SDNRG currently operates as more 
of a workshop to allow the diverse 
SDN community to explore all these 
factors and their interactions.
Notwithstanding the vast diver-
sity of thought in the SDN commu-
nity, we agree on several topics that 
could use some directed consider-
ation, including
•	 classification of SDN models;
•	 definitions and taxonomies;
•	 SDN model scalability and 
applicability;
•	 multilayer programmability and 
feedback control systems;
•	 system complexity;
•	 network description languages, 
abstractions, interfaces, and compilers;
•	 methods and mechanisms for 
(online) verification of correct 
network/node operation; and
•	 security.
For example, in the case of SDN 
models, at least three architectural 
approaches are under discussion. 
Design points in this space rep-
resent key architectural features 
and include centralized versus dis-
tributed control, various degrees 
of separation of control and data 
planes, and different programmabil-
ity points (for instance, one model 
might make the control plane pro-
grammable and another might make 
the data plane programmable). We 
can view the different approaches as 
design points in a continuous, mul-
tidimensional design space, termed 
“the SDN Continuum” (see www. 
1-4-5.net/~dmm/talks/nanog58.pdf).
One point in the SDN Continuum 
is OF/SDN.1 Work on this model began 
at Stanford University as part of the 
Clean Slate project (http://cleanslate.
stanford.edu) and now takes place 
in the Open Networking Founda-
tion (ONF; www.opennetworking.
org). OF/SDN is characterized by the 
complete separation of the control 
and data planes, open interfaces to 
the forwarding plane (that is, Open-
Flow), and centralized control (note 
that “logically centralized” is the 
term currently used for this kind 
of centralization of control; logi-
cally centralized actually means 
“distributed”2).
A second interesting point in 
this space is Control Plane/SDN (CP/
SDN); here, designers seek to make 
the existing, distributed control plane 
programmable. Interface to the Rout-
ing System (I2RS; http://datatracker.
ietf.org/wg/i2rs/charter/) is a protocol 
designed to make the routing infor-
mation base (RIB) programmable and 
enable new kinds of network provi-
sioning and operation. The basic idea 
is that because the RIB is already an 
arbitration engine for various routing 
state sources, CP/SDN will provide 
mechanisms for using that arbitra-
tion engine to inject routing state 
into the system as well as read possi-
bly abstracted state from it. Examples 
of protocols in this class include the 
Border Gateway Protocol-Link State 
(BGP-LS) and Application-Layer Traf-
fic Optimization (ALTO).
Finally, Overlay/SDN (OL/SDN) 
represents a design point that encom-
passes those models in which a virtual 
network is overlaid on the network 
(which might be physical, virtual, 
or both). In this case, the designers 
overlay a new control plane on top of 
existing control and data planes, and 
(in theory) have minimal interaction 
with the “underlay” network. (Note 
that the degree to which an OL/SDN 
control or data plane requires knowl-
edge or control of network state in the 
underlay network is a topic of vigor-
ous debate.) The IETF’s Network Vir-
tualization Overlays (NVO3) working 
group is involved in standardizing 
OL/SDN models.
Of course, these are discrete 
points in the design space; we can 
mix and match the features they 
represent to yield interesting archi-
tectures. For example, in some use 
cases, it might make sense to direct 
traffic down traffic-engineered tun-
nels using OpenFlow at the network 
edges and the Path Computation Ele-
ment (PCE; http://datatracker.ietf.
org/wg/pce/charter/) to build the 
tunnels themselves. On the other 
hand, OL/SDN architectures are 
typically less concerned with the 
programmability of the “underlay” 
control or data planes; rather, scaling 
here is achieved by overlaying a new 
programmable control plane and, in 
some cases, a virtual data plane such 
as the Open Virtual Switch (OVS).
Editor’s Introduction
A couple of issues ago, we ran a Standards department about the Interface to the Routing System. I2RS is a piece of a very broad set of solutions called software-
defined networking. The Software Defined Networking Research Group is chartered 
to investigate approaches that can be deployed in the near term, and to look for 
future research challenges in the area. Here, David Meyer, a chair of the SDNRG, 
explains further. —Barry Leiba 
IC-17-06-Standards.indd   3 16/09/13   1:25 PM
Standards
4 www.computer.org/internet/ IEEE INTERNET COMPUTING
SDN and Standards
Given the myriad ideas on what SDN 
architecture might look like and what 
its components might be, it’s unsur-
prising that almost every SDO and 
many quasi-SDOs are involved in 
SDN standardization. These include 
the IETF, the European Telecommu-
nications Standards Institute (ETSI), 
the Alliance for Telecommunications 
Industry Solutions (ATIS), ITU-T, 
IEEE, the Open Networking Foun-
dation (ONF), the Metro Ethernet 
Forum (MEF), the Distributed Man-
agement Task Force (DMTF), and the 
Object Management Group (OMG). 
Moreover, several open source con-
sortia are producing software in the 
SDN space (www.opendaylight.org).
In the IETF’s case, we can consider 
Forwarding and Control Element Sep-
aration (ForCES; http://datatracker.
ietf.org/wg/forces/charter/), Network 
Configuration (NetConf; http://
datatracker.ietf.org/wg/netconf/, 
YANG (http://en.wikipedia.org/wiki/
YANG), I2RS, PCE, the Locator/ID 
Separation Protocol (LISP; https://
datatracker.ietf.org/wg/lisp/charter/), 
and many other technologies to be, 
at the very least, SDN-enabling. Even 
BGP3 is used in many SDN solu-
tions (see www.juniper.net/us/en/dm/
junos-v-contrail/).
Because it’s early in SDN’s evo-
lution, the SDNRG has an impor-
tant role to play in the standards 
process. In particular, research into 
many SDN technologies currently 
being standardized in the IETF, such 
as I2RS or PCE, is essential to not 
only guide the development of the 
standards themselves but also help 
inform deployment models. Hence, 
the SDNRG encourages research and 
provides a forum for discussion. It 
also seeks to understand the larger 
SDN context and where standardiza-
tion might be needed.
Finally, the SDNRG will pub-
lish documents that outline active 
research, development, and pre-
standardization areas in the SDN 
space. To this end, the SDNRG has 
active drafts dealing with terminol-
ogy for SDN (a surprisingly con-
tentious area), security, and formal 
methods for correctness.
Open Problems
Several open problems exist in the 
SDN space, ranging from architec-
tural questions that are fundamental 
to how networks scale and evolve4 to 
implementation issues such as how 
we might build distributed “logi-
cally centralized” control planes.2 
For example, how much program-
mability should an SDN system 
provide, and where? OF/SDN offers 
one solution (the forwarding plane 
should be directly programmable), 
whereas I2RS provides another (the 
RIB should be the locus of program-
mability). Other questions include 
how distributed state management 
systems (such as controllers) should 
implement state consistency — issues 
here generally revolve around the 
CAP theorem (www.infoq.com/
ar t icles/cap-twelve-years-later-
how-the-rules-have-changed) — 
and which APIs and corresponding 
abstractions should be standardized, 
if any.
The future, however, will most 
likely use a combination of these 
(and perhaps other) models, stan-
dards, and implementations. Models 
such as I2RS are likely to be used to 
provide network programmability in 
those heterogeneous environments 
in which scalability is the primary 
concern. The architectural models 
underlying I2RS envision layered, 
distributed control planes in which 
the control and data planes share 
fate. Note that breaking fate- sharing 
between the control and data planes 
induces a lower bound on con-
trol plane convergence — namely, 
W(convergence) ≈ RTT (controller, 
switch) + PPT(controller) + PPT(switch), 
where RTT is “round-trip time” and 
PPT is “packet-processing time.” On 
the other hand, in some environments 
(for example, data centers) overlay 
technologies can provide scale and 
adaptability.
What we do know from our 25 or 
so years of building networks is that 
systems that are scalable, resilient, 
and evolvable have certain, well-
defined architectural features. One 
such feature is a distributed con-
trol plane. Nevertheless, the degree 
to which a control plane is central-
ized versus distributed remains one 
of the many active debates in the 
SDN community. Other features 
conferring scalability and evolvabil-
ity include a high degree of layer-
ing, robust feedback control, and 
protocol-based architectures, among 
others.4 Debates notwithstanding, 
it’s clear that one key to building 
scalable and evolvable SDN systems 
will be to understand which pieces 
of the distributed control plane can 
be efficiently “peeled off” and run 
in a (logically) centralized fashion. 
For example, traffic engineering can 
clearly benefit from a global, net-
work-wide view. PCE is an example 
of a traffic engineering technology 
under consideration as a candidate 
for measured separation of control 
and data planes, with the goal of 
making the network (more) program-
mable and architecturally central-
ized. Note, however, that even in the 
PCE case, the underlying distributed 
control plane remains. In this way, 
PCE retains the resilience and scale 
of the underlying distributed control 
plane while still providing program-
mability and a global network view 
for use in traffic engineering.
It is early in SDN’s evolution and an exciting time to be involved in 
its development. In particular, active 
technical debates are under way on 
almost every architectural point. Ini-
tial SDN models challenged (and con-
tinue to challenge!) much of what we 
might think of as the “central dogma” 
of the Internet architecture — namely, 
IC-17-06-Standards.indd   4 16/09/13   1:25 PM
The Software-Defined-Networking Research Group
NOVEMBER/DECEMBER 2013 5
distributed control, layering, hop-by-
hop forwarding, and separation of 
control and data planes. Other, more 
recent models attempt to provide 
programmability while still retaining 
the Internet architecture’s core fea-
tures. Given the existing diversity of 
thought and approaches, the SDNRG 
is ideally situated as a forum for facil-
itating discussion and documenting 
these open and other questions. 
References
1. OpenFlow Switch Specification, Version 
1.3.2 (Wire Protocol 0x04), Open  Networking 
Foundation, 25 Apr. 2013; www.opennet-
working.org/images/stories/ downloads/
sdn-resources/onf-specifications/openflow/
openflow-spec-v1.3.2.pdf.
2. D. Levin et al, “Logically Centralized? 
State Distribution Trade-Offs in  Software 
Defined Networks,” Proc. 1st Workshop on 
Hot Topics in Software-Defined Networks 
(HotSDN 12), ACM, 2012, pp. 1–6; http://
conferences.sigcomm.org/sigcomm/2012/
paper/hotsdn/p1.pdf.
3. A Border Gateway Protocol 4 (BGP-4), 
IETF RFC 4271, Jan. 2006; http://tools.
ietf.org/html/rfc4271.
4. M.E. Csete and J.C. Doyle, “Reverse Engi-
neering of Biological Complexity,” Science, 
vol. 295, no. 5560, 2002, pp. 1664–1669; 
doi: 10.1126/science.1069981.
David Meyer is CTO and chief scientist at 
Brocade Communications as well as 
the Director of the Advanced Network 
Technology Center at the University of 
Oregon. His research interests include 
software-defined networking, systems 
biology, and complexity and control 
theory. Meyer has an MS in computer 
science from the University of Oregon 
Contact him at dmm@1-4-5.net.
Selected CS articles and columns 
are also available for free at http:// 
ComputingNow.computer.org.
Erratum
In the July/August 2013 installment of the Standards department, “Software-Defined 
Networks and the Interface to the Routing System (I2RS),” author Susan Hares was 
listed as the CTO of ADARA. Hares is the Vice President of Technology and Strat-
egy at ADARA. She can be contacted at shares@adaranetworks.com. 
IC-17-06-Standards.indd   5 16/09/13   1:25 PM

