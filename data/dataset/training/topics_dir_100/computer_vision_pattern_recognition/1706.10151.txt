ar
X
iv
:1
70
6.
10
15
1v
1 
 [
cs
.R
O
] 
 3
0 
Ju
n 
20
17
A ROS Multi-Ontology References Service:
OWL Reasoners and Application Prototyping Issues
Luca Buoncompagni1, Alessio Capitanelli and Fulvio Mastrogiovanni
Abstract— In this extended abstract, we introduce the AR-
MOR service, a general-purpose and scalable interface between
robot architectures and OWL2 reasoners. ARMOR addresses
synchronisation and communication issues among heteroge-
neous and distributed software components. As a guiding
scenario, we consider a prototyping approach for the use of
symbolic reasoning in human-robot interaction applications.
I. INTRODUCTION
The challenge of sharing and communicating information
is crucial in complex human-robot interaction (HRI) sce-
narios. Ontologies and symbolic reasoning are the state of
the art approach for a natural representation of knowledge,
especially within the Semantic Web domain. In such a
context, scripted paradigms have been adopted to achieve
high expressiveness [1]. Nevertheless, since symbolic rea-
soning is a high complexity problem, optimising its perfor-
mance requires a careful design of the knowledge resolution.
Specifically, a robot architecture requires the integration of
several components implementing different behaviors and
generating a series of beliefs. Most of the components are
expected to access, manipulate, and reason upon a run-time
generated semantic representation of knowledge grounding
robot behaviors and perceptions through formal axioms, with
soft real-time requirements.
The Robot Operating System (ROS) is a de facto standard
for robot software development, which allows for modular
and scalable robot architecture designs1. Currently, a number
of approaches exist to integrate a semantic representation in
ROS, such as the KnowRob2 support for Allen’s Algebra
[2] through a complete framework of useful ontologies,
or the native ROS support of MongoDB3, which can be
also used to provide a suitable representation for semantic
querying. Unfortunately, none of these support the study
of advanced reasoning paradigms, and they heavily rely
on ad hoc reasoning solutions, significantly limiting their
scope. We argue that this fact affects the study of different
approaches to semantics in Robotics. For instance, it limits
our capability to explore novel semantic representations of
perceptions, which offers similar but not equivalent beliefs.
We lack a standardized general framework to work with
ontologies, natively supporting symbolic logic and advanced
reasoning paradigms.
1All the authors are with the Department of Informatics, Bioengineering,
Robotics and Systems and Engineering, University of Genoa. Corresponding
author’s email: luca.buoncompagni@edu.unige.it.
1http://www.ros.org/
2http://www.knowrob.org/doc
3https://www.mongodb.com/
The Ontology Web Language (OWL) is a standard repre-
sentation supporting several reasoning interfaces, e.g., Pellet
[3], and logics approaches [4]. Thus, it can be a solid foun-
dation to a framework for symbolic reasoning in Robotics.
OWL is based on the separation between terminological
and assertional knowledge, referred to as different boxes.
Typically, in Robotics scenarios, we design a static semantics
for the beliefs to be represented in the TBox. Then, we
populate the ABox through individuals defined using types
and properties and, at run-time, we classify knowledge using
instance checking. We argue that, due to the high complexity
of HRI scenarios, the possibility of a dynamic semantics in
the TBox is desirable as well. For instance, it could be used
to learn new types for classification. This lead us to a study
requiring reasoning heuristics to be compared, components
to be shared and different semantics to be adapted.
For this purpose, we propose the ROS Multi Ontology
References4 (ARMOR in short). ARMOR is an open source
service which manipulates and queries OWL2 ontologies. It
provides a simple access to a set of dynamic ontologies,
handling also the synchronizations among different com-
ponents in the architecture. Last but not the least, it is a
convenient tool to directly assess semantics supported by
advanced reasoners.
II. SYSTEM’S ARCHITECTURE
A. Basic ARMOR Concepts
Figure 1 shows a schematic representation of ARMOR. It
interfaces the OWL API5 through the Java-based Multi On-
tology References library (AMOR). Then, ARMOR exposes
AMOR functionalities as a service to ROS-based architec-
tures, relying on the support for Java in ROS (ROSJava6).
ARMOR messages have been designed to accommodate all
OWL2 functionalities. Nevertheless, we have implemented
only an exhaustive subset of those features so far (i.e., only
common run-time operations). Indeed, ontology managers
are not distributed across satellite components of a ROS
architecture. Instead, dedicated components are in charge of
management, while others only provide knowledge axioms,
possibly at run-time. With ARMOR, it is possible to inject
in the service other symbolic procedures, extending the
semantics already provided by AMOR. Static descriptions
can be defined with dedicated software, e.g., Protégé7.
4https://github.com/EmaroLab/ARMOR
5http://owlapi.sourceforge.net/
6https://github.com/rosjava
7http://protege.stanford.edu/
Fig. 1.
The ARMOR
components
(white boxes),
interfaces
(external arrows)
and their
dependencies
(bidirectional
arrows) drawn
within their
respective
domains
(coloured boxes).
OWL API
AMOR
Enquirer
AMOR
Manipulator
AMOR
References
ROS
Java
Service
ROS
Injected
Semantic
ROS Parameters
ROS
ARMOR
Knowledge Base
B. AMOR
The core library, referred to as AMOR, contains a map of
instantiated ontologies, where the key is a unique name iden-
tifier used to access the corresponding ontology in a thread-
safe manner. AMOR provides several common operations,
such as those to create individuals, assign their properties,
make them disjointed and classify them, just to name a
few. Furthermore, AMOR ensures complete accessibility to
the OWL API features for compatibility and extendability
purposes. For example, AMOR allows for invoking reasoning
tasks by specifying its OWLReasoner factory, i.e., the
unique package of its Java implementation, which assures
compatibility with all OWL reasoners.
In the current implementation, we interface several prop-
erties that are useful to tune the AMOR behavior, e.g.,
the buffering of the manipulations or a continuous reasoner
update, using the standard ROS Parameter Server, as well
as parameters for debugging purposes such as toggling a
Graphical User Interface (GUI) for visualising ontology
states.
C. ARMOR
The ARMOR service is based on a ROS message structure
(i.e., a triple) for the use of the AMOR functionalities from
any node in the architecture, even when the development lan-
guage is different from Java (e.g., Python8 and C++ are the
most common languages in Robotics development). Such a
message is composed of: 1) the client name, which is used by
the service to identify different callers, 2) the reference name,
indicating the operation’s target reference, and 3) the com-
mand to execute, i.e., add, remove, replace, query,
load, mount, etc.9 Each of those commands may be
further refined by: a) the primary and secondary specifiers,
which augment command labels, e.g., add(individual,
class) or remove(individual, property), and
b) the arguments, a list of entities in the reference param-
eterizing the command, e.g., 〈add(class) "Sphere"〉,
or even 〈add(property,individual) "hasNorth"
"LivingRoom" "Corridor"〉. An ARMOR call is based
on one or more messages with the same structure. When
such a request is sent, the service manipulates or queries
8A simple set of OWL functions can be find at
https://github.com/EmaroLab/ARMOR_py_api.
9A complete list is available at https://github.com/EmaroLab/ARMOR/blob/master/commands.md.
the ontology with the given directives. Then, it returns
whether the ontology is consistent, eventual error codes with
their description, and the names of the queried entities, if
requested.
One advanced feature of ARMOR is the possibility of
flexibly synchronizing all operations. This follows a mount-
ing/unmounting paradigm, where one or more nodes iden-
tified by the same client name can prevent other nodes
from manipulating a given ontology, in order to ensure
manipulation consistency. On the contrary, queries are always
allowed. Calls to busy ontologies will report the issue. The
user can choose how to handle this situation.
III. APPLICATIONS
We are currently using ARMOR in different applications.
Here we mention only two of them.
The first is aimed at implementing a dynamic PDDL
problem generator. This approach uses descriptions of the
predicates and objects within a tabletop scenario to infer
unsatisfied norms and consequently generate goals [5]. The
system has been integrated with ROSPlan10 by substituing
the internal semantic data structure with ARMOR and a
suitable OWL ontology. Currently, we are investigating the
performance of semantic feedback for re-planning.
The second is a system to learn by experience the ar-
rangement of objects in the robot’s workspace by mapping
their properties into the TBox. In this case, we inject a
centralised service that scans semantic spatial relations and
shapes ontologies, populated by different components in the
architecture. Through them, such a service generates a new
semantic scene class that the reasoner interprets as soon
as it performs hierarchical classification. In this study, we
are currently comparing different multi-modal perception
modules to generate beliefs indicating relevant properties of
a scene as perceived by a robot.
IV. CONCLUSIONS
We introduced the ARMOR service to manipulate OWL
ontologies and fully query their reasoners within a ROS
architecture. ARMOR is based on a flexible set of messages
allowing for the direct access of several OWL features
from any component of the architecture. It ensures syn-
chronization between client calls, and flexibility through
procedure injection. It also provides an easy interface to
OWL2 representations.
REFERENCES
[1] M. Krötzsch, F. Simancik, and I. Horrocks, “A description logic primer,”
arXiv preprint arXiv:1201.4089, 2012.
[2] J. F. Allen, “Maintaining knowledge about temporal intervals,” Com-
munications of the ACM, vol. 26, no. 11, pp. 832–843, 1983.
[3] E. Sirin, B. Parsia, B. C. Grau, A. Kalyanpur, and Y. Katz, “Pellet: A
practical owl-dl reasoner,” Web Semantics: science, services and agents
on the World Wide Web, vol. 5, no. 2, pp. 51–53, 2007.
[4] (2004) Owl web ontology language guide. [Online]. Available:
https://www.w3.org/TR/owl-guide/
[5] A. Capitanelli and F. Mastrogiovanni, “An ontology-based hybrid
architecture for planning and robust execution in tabletop scenarios,”
pp. 31–35, 2016. [Online]. Available: http://ceur-ws.org/Vol-1834/
10https://github.com/KCL-Planning/ROSPlan

