Uncertainty Decomposition in Bayesian Neural
Networks with Latent Variables
Stefan Depeweg 1 2 JoseÃÅ Miguel HernaÃÅndez-Lobato 3 Finale Doshi-Velez 4 Steffen Udluft 1
Abstract
Bayesian neural networks (BNNs) with latent vari-
ables are probabilistic models which can automat-
ically identify complex stochastic patterns in the
data. We describe and study in these models a de-
composition of predictive uncertainty into its epis-
temic and aleatoric components. First, we show
how such a decomposition arises naturally in a
Bayesian active learning scenario by following an
information theoretic approach. Second, we use
a similar decomposition to develop a novel risk
sensitive objective for safe reinforcement learn-
ing (RL). This objective minimizes the effect of
model bias in environments whose stochastic dy-
namics are described by BNNs with latent vari-
ables. Our experiments illustrate the usefulness
of the resulting decomposition in active learning
and safe RL settings.
1. Introduction
Recently, there has been an increased interest in Bayesian
neural networks (BNNs) and their possible use in reinforce-
ment learning (RL) problems (Gal et al., 2016; Blundell
et al., 2015; Houthooft et al., 2016). In particular, recent
work has extended BNNs with a latent variable model to de-
scribe complex stochastic functions (Depeweg et al., 2016;
Moerland et al., 2017). The proposed approach enables the
automatic identification of arbitrary stochastic patterns such
as multimodality and heteroskedasticity, without having to
manually incorporate these into the model.
In model-based RL, the aforementioned BNNs with latent
variables can be used to describe complex stochastic dy-
namics. The BNNs encode a probability distribution over
stochastic functions, with each function serving as an es-
timate of the ground truth continuous Markov Decision
Process (MDP). Such probability distribution can then be
1Siemens AG 2Technical University of Munich 3University
of Cambridge 4Harvard University. Correspondence to: Stefan
Depeweg <stefan.depeweg@siemens.com>.
Copyright 2017 by the author(s).
used for policy search, by finding the optimal policy with
respect to state trajectories simulated from the model. The
BNNs with latent variables produce improved probabilistic
predictions and these result in better performing policies
(Depeweg et al., 2016; Moerland et al., 2017).
We can identify two distinct forms of uncertainties in the
class of models given by BNNs with latent variables. As
described by Kendall & Gal (2017), ‚ÄùAleatoric uncertainty
captures noise inherent in the observations. On the other
hand, epistemic uncertainty accounts for uncertainty in the
model.‚Äù In particular, epistemic uncertainty arises from our
lack of knowledge of the values of the synaptic weights in
the network, whereas aleatoric uncertainty originates from
our lack of knowledge of the value of the latent variables.
In the domain of model-based RL the epistemic uncertainty
is the source of model bias (or representational bias, see
e.g. Joseph et al. (2013)). When there is high discrepancy
between model and real-world dynamics, policy behavior
may deteriorate. In analogy to the principle that ‚Äùa chain
is only as strong as its weakest link‚Äù a drastic error in es-
timating the ground truth MDP at a single transition step
can render the complete policy useless (see e.g. Schneegass
et al. (2008)).
In this work we address the decomposition of the uncertainty
present in the predictions of BNNs with latent variables
into its epistemic and aleatoric components. We show the
usefulness of such decomposition in two different domains:
active learning and risk-sensitive RL.
First we consider an active learning scenario with stochastic
functions. We derive an information-theoretic objective that
decomposes the entropy of the predictive distribution of
BNNs with latent variables into its epistemic and aleatoric
components. By building on that decomposition, we then
investigate safe RL using a risk-sensitive criterion (Garcƒ±ÃÅa
& FernaÃÅndez, 2015) which focuses only on risk related to
model bias, that is, the risk of the policy performing at
test time significantly different from at training time. The
proposed criterion quantifies the amount of epistemic uncer-
tainty (model bias risk) in the model‚Äôs predictive distribution
and ignores any risk stemming from the aleatoric uncertainty.
Our experiments show that, by using this risk-sensitive crite-
rion, we are able to find policies that, when evaluated on the
ar
X
iv
:1
70
6.
08
49
5v
1 
 [
st
at
.M
L
] 
 2
6 
Ju
n 
20
17
Uncertainty Decomposition in Bayesian Neural Networks
ground truth MDP, are safe in the sense that on average they
do not deviate significantly from the performance predicted
by the model at training time.
We focus on the off-policy batch RL scenario, in which we
are given an initial batch of data from an already-running
system and are asked to find a better policy. Such scenarios
are common in real-world industry settings such as turbine
control, where exploration is restricted to avoid possible
damage to the system.
2. Bayesian Neural Networks with Latent
Variables
Given data D = {xn,yn}Nn=1, formed by feature
vectors xn ‚àà RD and targets yn ‚àà RK , we assume
that yn = f(xn, zn;W) + n, where f(¬∑, ¬∑;W) is the out-
put of a neural network with weightsW and K output units.
The network receives as input the feature vector xn and the
latent variable zn ‚àº N (0, Œ≥). The activation functions for
the hidden layers are rectifiers: œï(x) = max(x, 0). The
activation functions for the output layers are the identity
function: œï(x) = x. The network output is corrupted by
the additive noise variable n ‚àº N (0,Œ£) with diagonal
covariance matrix Œ£. The role of the latent variable zn is to
capture unobserved stochastic features that can affect the
network‚Äôs output in complex ways. Without zn, randomness
is only given by the additive Gaussian observation noise
n, which can only describe limited stochastic patterns.
The network has L layers, with Vl hidden units in layer l,
and W = {Wl}Ll=1 is the collection of Vl √ó (Vl‚àí1 + 1)
weight matrices. The +1 is introduced here to account
for the additional per-layer biases. We approximate the
exact posterior distribution p(W, z | D) with the factorized
Gaussian distribution
q(W, z) =
Ô£Æ
Ô£∞
L‚àè
l=1
Vl‚àè
i=1
Vl‚àí1+1‚àè
j=1
N (wij,l|mwij,l, vwij,l)
Ô£π
Ô£ª (1)
[
N‚àè
n=1
N (zn |mzn, vzn)
]
. (2)
The parameters mwij,l, v
w
ij,l and m
z
n, v
z
n are determined
by minimizing a divergence between p(W, z | D) and the
approximation q. For more detail the reader is referred
to the work of HernaÃÅndez-Lobato et al. (2016); Depeweg
et al. (2016). In all our experiments we use black-box
Œ±-divergence minimization with Œ± = 1.0, as it seems to
produce a better decomposition of uncertainty into its emp-
istemic and aleatoric components, although further studies
are needed to strengthen this claim.
The described BNNs with latent variables can describe com-
plex stochastic patterns while at the same time account for
model uncertainty. They achieve this by jointly learning
q(z), which captures the specific values of the latent vari-
ables in the training data, and q(W), which represents any
uncertainty about the model parameters. The result is a
principled Bayesian approach for inference of stochastic
functions.
3. Active Learning of Stochastic Functions
Active learning is the problem of choosing which data points
to incorporate next into the training data so that the resulting
gains in predictive performance are as high as possible. In
this section, we derive a Bayesian active learning procedure
for stochastic functions. This procedure illustrates how to
separate two sources of uncertainty, that is, aleatoric and
epistemic, in the predictive distribution of BNNs with latent
variables.
Within a Bayesian setting, active learning can be formulated
as choosing data based on the expected reduction in entropy
of the posterior distribution (MacKay, 1992). HernaÃÅndez-
Lobato & Adams (2015) apply this entropy-based approach
to scalable BNNs. In (Houthooft et al., 2016), the authors
use a similar approach as an exploration scheme in RL prob-
lems in which a BNN is used to represent current knowledge
about the transition dynamics. These previous works only
assume additive Gaussian noise and, unlike the BNNs with
latent variables from Section 2, they and cannot capture
complex stochastic patterns.
We start by deriving the expected reduction in entropy in
BNNs with latent variables. We assume a scenario in which
a BNN with latent variables has been fitted to a batch of
data D = {(x1,yi), ¬∑ ¬∑ ¬∑ , (xN ,yN )} to produce a poste-
rior approximation q(W, z). We now want to estimate the
expected reduction in posterior entropy forW when a par-
ticular data point x is incorporated in the training set. The
expected reduction in entropy is
H(W|D)‚àíEy|x,D
[
H(W|D ‚à™ {x, y})
]
(3)
= H(W)‚àí H(W|y) (4)
= I(W; y) (5)
= H(y)‚àí H(y|W) (6)
= H
[‚à´
W,z
p(y|W,x, z)p(z)p(W|D)dzdW
]
‚àíEW|D
[
H(
‚à´
z
p(y|W =Wi,x, z)p(z)dz)
] (7)
where H(¬∑) denotes the entropy of a random variable and
H(¬∑|¬∑) and I(¬∑; ¬∑) denote the conditional entropy and the
mutual information between two random variables. In (6)
and (7) we see that the active learning objective is given
by the difference of two terms. The first term is the en-
tropy of the predictive distribution, that is, H(y). The sec-
Uncertainty Decomposition in Bayesian Neural Networks
Figure 1. Information Diagram illustrating quantities of entropy
with three variables. The area surrounded by a dashed line indicates
reduction in entropy given by equation (7). The conditioning to x
is omitted for readability.
ond term, that is, H(y|W), is a conditional entropy. To
compute this term, we average acrossWi ‚àº q(W) the en-
tropy H
[‚à´
z
p(y|W =Wi,x, z)p(z)dz
]
. As shown in this
expression, the randomness in p(y|W =Wi,x) has its ori-
gin in the latent variable z (and the constant output noise
 ‚àº N (0,Œ£) which is not shown here). Therefore, this
second term can be interpreted as the ‚Äôaleatoric uncertainty‚Äô
present in the predictive distribution, that is, the average en-
tropy of y that originates from the latent variable z and not
from the uncertainty aboutW . We can refer to the whole
objective function in (7) as an estimate of the epistemic
uncertainty: the full predictive uncertainty about y given x
minus the corresponding aleatoric uncertainty.
The previous decomposition is also illustrated by the infor-
mation diagram from Figure 1. The entropy of the predictive
distribution is composed of the blue, cyan, grey and pink
areas. The blue area is constant: when bothW and z are
determined, the entropy of y is constant and given by the en-
tropy of the additive Gaussian noise  ‚àº N (0,Œì). H(y|W)
is given by the light and dark blue areas. The reduction in
entropy is therefore obtained by the grey and pink areas.
The quantity in equation (7) can be approximating using
standard entropy estimators, e.g. nearest-neighbor methods
(Kozachenko & Leonenko, 1987; Kraskov et al., 2004; Gao
et al., 2016). For that, we repeatedly sampleW and z and do
forward passes through the neural network to sample y. The
resulting samples of y can then be used to approximate the
respective entropies for each x using the nearest-neighbor
approach:
H(y|x,D)‚àíEW |D
[
H(
‚à´
z
p(y|W,x, z)p(z)dz)
]
‚âà HÃÇ(y1, . . . , yL)‚àí
1
M
M‚àë
i=1
[
HÃÇ(yWi1 , . . . , y
Wi
L )
]
. (8)
where HÃÇ(¬∑) computes the nearest-neighbor estimate of the
entropy given an empirical sample of points, y1, . . . , yL ‚àº
p(y|x,D), W1, . . . ,WM ‚àº q(W) and yWi1 , . . . , y
Wi
L ‚àº
p(y|x,D,W =Wi) for i = 1, . . . ,M .
3.1. Toy Problems
We now will illustrate the active learning procedure de-
scribed in the previous section on two toy examples. In
each problem we will first train a BNN with 2 layers and
20 units in each layer on the available data. Afterwards, we
approximate the information-theoretic measures as outlined
in the previous section
We first consider a toy problem given by a regression task
with heteroskedastic noise. For this, we define the stochastic
function y = 7 sin(x) + 3| cos(x/2)| with  ‚àº N (0, 1).
The data availability is limited to specific regions of x. In
particular, we sample 750 values of x from a mixture of three
Gaussians with mean parameters {¬µ1 = ‚àí4, ¬µ2 = 0, ¬µ3 =
4}, variance parameters {œÉ1 = 25 , œÉ2 = 0.9, œÉ3 =
2
5} and
with each Gaussian component having weight equal to 1/3
in the mixture. Figure 2a shows the raw data. We have lots
of points at both borders of the x axis and in the center, but
little data available in between.
Figure 2 visualizes the respective quantities. We see that the
BNN with latent variables does an accurate decomposition
of its predictive uncertainty between epistemic uncertainty
and aleatoric uncertainty: the reduction in entropy approx-
imation, as shown in Figure 2f, seems to be inversely pro-
portional to the density used to sample the data (shown in
Figure 2b). This makes sense, since in this toy problem the
most informative data points are expected to be located in
regions where data is scarce. Note that, in more complicated
settings, the most informative data points may not satisfy
this property.
Next we consider a toy problem given by a regression task
with bimodal data. We define x ‚àà [‚àí0.5, 2] and y =
10 sin(x) +  with probability 0.5 and y = 10 cos(x) + ,
otherwise, where  ‚àº N (0, 1) and  is independent of x.
The data availability is not uniform in x. In particular we
sample 750 values of x from an exponential distribution
with Œª = 0.5
Figure 3 visualizes the respective quantities. The predictive
distribution shown in Figure 3c suggests that the BNN has
learned the bimodal structure in the data. The predictive
distribution appears to get increasingly ‚Äôwashed out‚Äô as we
increase x. This increase in entropy as a function of x is
shown in Figure 3d. The conditional entropy H(y|W) of
the predictive distribution shown in Figure 3e appears to be
symmetric around x = 0.75. This suggest that the BNN has
correctly learned to separate the aleatoric component from
the full uncertainty for the problem at hand: the ground
truth function is symmetric around x = 0.75 at which point
it changes from a bimodal to a unimodal stochastic function.
Uncertainty Decomposition in Bayesian Neural Networks
(a) (b) (c)
(d) (e) (f)
Figure 2. Active learning example using heteroskedastic data. (a): Raw data. (b): Density of x in raw data. (c): Predicitive distribution:
p(y|x) of BNN. (d): Entropy estimate H(y|x) of predictive distribution for each x. (e): Conditional Entropy estimate EWH(y|x,W) of
predictive distribution for each x. (f): Estimate of reduction in entropy for each x.
Figure 3f shows the estimate of reduction in entropy for
each x. Here we can observe two effects: First, as expected,
the expected entropy reduction will increase with higher
x. Second, we see a slight decrease from x = ‚àí0.5 to
x = 0.75. We believe the reason for this is twofold: because
the data is limited to [‚àí0.5, 2] we expect a higher level of
uncertainty in the vicinity of both borders. Furthermore
we expect that learning a bimodal function requires more
data to reach the same level of confidence than a unimodal
function.
4. Risk-Sensitive Reinforcement Learning
In the previoius section we studied how BNNs with latent
variables can be used for active learning of stochastic func-
tions. The resulting algorithm is based on a decomposition
of predictive uncertainty into its aleatoric and epistemic
components. In this section we build up on this result to
derive a new risk-sensitive objective in model-based RL
with the aim to minimize the effect of model bias. Our
new risk criteron enforces that the learned policies, when
evaluated on the ground truth system, are safe in the sense
that on average they do not deviate significantly from the
performance prediced by the model at training time.
Similar to (Depeweg et al., 2016), we consider the domain
of batch reinforcement learning. In this setting we are given
a batch of state transitions D = {(st,at, st+1)} formed by
triples containing the current state st, the action applied at
and the next state st+1. For example, D may be formed
by measurements taken from an already-running system.
In addition to D, we are also given a cost function c. The
goal is to obtain from D a policy in parametric form that
minimizes c on average under the system dynamics.
The aforementioned problem can be solved using model-
based policy search methods. These methods include two
key parts (Deisenroth et al., 2013). The first part consists in
learning a dynamics model fromD. We assume that the true
dynamical system can be expressed by an unknown neural
network with stochastic inputs:
st = ftrue(st‚àí1,at‚àí1, zt;Wtrue) , zt ‚àº N (0, Œ≥) , (9)
where Wtrue denotes the synaptic weights of the network
and st‚àí1, at‚àí1 and zt are the inputs to the network. In the
second part of our model-based policy search algorithm,
we optimize a parametric policy given by a deterministic
neural network with synaptic weightsWœÄ. This paramet-
ric policy computes the action at as a function of st, that
is, at = œÄ(st;WœÄ). We optimize WœÄ to minimize the
expected cost C =
‚àëT
t=1 ct over a finite horizon T with
respect to our belief q(W), where ct = c(st). This expected
cost is obtained by averaging over multiple virtual roll-outs.
For each roll-out we choose s0 randomly from the states
in D, sampleWi ‚àº q and then simulate state trajectories
using the model st+1 = f(st,at, zt;Wi) + t+1 with pol-
icy at = œÄ(st;WœÄ), input noise zt ‚àº N (0, Œ≥) and additive
noise t+1 ‚àº N (0,Œ£). This procedure allows us to obtain
estimates of the policy‚Äôs expected cost for any particular
cost function. If model, policy and cost function are differ-
entiable, we are then able to tuneWœÄ by stochastic gradient
descent over the roll-out average.
Uncertainty Decomposition in Bayesian Neural Networks
(a) (b) (c)
(d) (e) (f)
Figure 3. Active learning example using bimodal data. (a): Raw data. (b): Density of x in raw data. (c): Predicitive distribution: p(y|x) of
BNN. (d): Entropy estimate H(y|x) of predictive distribution for each x. (e): Conditional Entropy estimate EWH(y|x,W) of predictive
distribution for each x. (f): Estimate of reduction in entropy for each x.
Given the cost function c, the objective to be optimized by
the policy search algorithm is
J(WœÄ) = Eq(W) [C] = Eq(W)
[‚àëT
t=1 ct
]
. (10)
In practice, s0 is sampled uniformly at random from the
training data D. Standard approaches in risk-sensitive RL
(Garcƒ±ÃÅa & FernaÃÅndez, 2015; Maddison et al., 2017; Mihatsch
& Neuneier, 2002) use the standard deviation of the cost C
as risk measure. High risk is associated to high variability
in the cost C. To penalize risk, the new objective to be
optimized is given by
J(WœÄ) = E [C] + Œ≤œÉ(C) , (11)
where œÉ(C) denotes the standard deviation of the cost
and the free parameter Œ≤ determines the amount of risk-
avoidance (Œ≤ ‚â• 0) or risk-seeking behavior (Œ≤ < 0). In
this standard setting, the variability of the cost œÉ(C) orig-
inates from two different sources. First, from the existing
uncertainty over the model parameters and secondly, from
the intrinsic stochasticity of the dynamics.
One of the main dangers of model-based RL is model bias:
the discrepancy of policy behavior under a) the assumed
model and b) the ground truth MDP. While we cannot avoid
the existence of such discrepancy when data is limited, we
wish to guide the policy search towards policies that stay in
state spaces where the risk for model-bias is low. For this,
we can define the model bias b as follows:
b(WœÄ) =
T‚àë
t=1
‚à£‚à£Etrue[ct]‚àíEq(W)[ct]
‚à£‚à£ , (12)
where Etrue[ct] is the expected cost obtained at time t when
starting at the initial state s0 and the ground truth dynamics
are evolved according to policy œÄ(st;WœÄ). Note that we
focus on having similar expectations of the individual state
costs ct instead of having similar expectations of the final
episode cost C. The former is a more strict criterion since
it may occur that model and ground truth diverge, but both
give roughly the same cost C on average.
As indicated in (9), we assume that the true dynamics are
determined by a neural network with latent variables and
weights given byWtrue. By using the approximate posterior
q(W), and assuming thatWtrue ‚àº q(W), we can obtain an
upper bound on the expected model bias as follows:
Eq(W)[b(WœÄ] = EWtrue‚àºq(W)
T‚àë
t=1
‚à£‚à£E[ct|Wtrue]‚àíEq(W)[ct]‚à£‚à£
=
T‚àë
t=1
EWtrue‚àºq(W)
‚àö
(E[ct|Wtrue]‚àíEq(W)[ct])2
‚â§
T‚àë
t=1
‚àö
EWtrue‚àºq(W)(E[ct|Wtrue]‚àíEq(W)[ct])2
=
T‚àë
t=1
‚àö
œÉ2Wtrue‚àºq(W)(E[ct|W])
=
T‚àë
t=1
œÉWtrue‚àºq(W)(E[ct|Wtrue]) . (13)
We note that E[ct|W] is the expected reward of a policyWœÄ
under the dynamics given byW . The expectation integrates
out the influence of the latent variables z1, . . . , zt and the
Uncertainty Decomposition in Bayesian Neural Networks
output noise 1, . . . , t. The last equation in (13) can thereby
be interpreted as the variability of the reward, that originates
from our uncertainty over the dynamics given by distribution
q(W).
In Section 3 we showed how (7) encodes decomposition of
the entropy of the predictive distribution into its aleatoric
and epistemic components. The resulting decomposition
naturally arises from an information-theoretic approach for
active learning. We can express œÉ2Wtrue‚àºq(W)(E[ct|Wtrue])
in a similar way using the law of total variance:
œÉ2Wtrue‚àºq(W)(E[ct|Wtrue]) = œÉ
2(ct)‚àíEW‚àºq(W)[œÉ2(ct|W])] .
We extend the policy search objective of (10) with a risk
component given by an approximation to the model bias.
Similar to Depeweg et al. (2016), we derive a Monte Carlo
approximation that enables optimization by gradient descent.
For this, we perform M √ó N roll-outs by first sampling
W ‚àº q(W) a total of M times and then, for each of these
samples ofW , performing N roll-outs in whichW is fixed
and we only sample the latent variables and the additive
Gaussian noise. In particular,
J(WœÄ) =
T‚àë
t=1
{
Eq(W) [ct] + Œ≤œÉWtrue‚àºq(W)(E[ct|Wtrue])
}
‚âà
T‚àë
t=1
{
1
MN
[
M‚àë
m=1
N‚àë
n=1
cm,n(t)
]
+ Œ≤œÉÃÇM
(
1
N
N‚àë
n=1
cm,n(t)
)}
,
(14)
where cm,n(t) = c(s
Wm,{zm,n1 ,...,z
m,n
t },{
m,n
1 ,...,
m,n
t },WœÄ
t )
is the cost that is obtained at time t in a roll-out generated
by using a policy with parameters WœÄ, a transition
function parameterized byWm and latent variable values
zm,n1 , . . . , z
m,n
t , with additive noise values 
m,n
1 , . . . , 
m,n
t .
œÉÃÇM is an empirical estimate of the standard deviation
calculated over M draws ofW .
The free parameter Œ≤ determines the importance of the risk
criterion. As described above, the proposed approximation
generates M √óN roll-out trajectories for each starting state
s0. For this, we sampleWm ‚àº q(W) for m = 1, . . . ,M
and for each m we then do N roll-outs with different draws
of the latent variables zm,nt and the additive Gaussian noise
m,nt . We average across the M √óN roll-outs to estimate
EW‚àºq(W)[ct]. Similarly, for each m, we average across the
corresponding N roll-outs to estimate E[ct|Wm]. Finally,
we compute the empirical standard deviation of the resulting
estimates to approximate œÉWtrue‚àºq(W)(E[ct|Wtrue]).
4.1. Application: Industrial Benchmark
We show now the effectiveness of the proposed method on a
stochastic dynamical system. For this we use the industrial
benchmark, a high-dimensional stochastic model inspired by
properties of real industrial systems. A detailed description
and example experiments can be found in (Hein et al., 2016;
Depeweg et al., 2016), with python source code available12.
In our experiments, we first define a behavior policy that
is used to collect data by interacting with the system. This
policy is used to perform three roll-outs of length 1000 for
each setpoint value in {0, 10, 20, . . . , 100}. The setpoint is
a hyper-parameter of the industrial benchmark that indicates
the complexity of its dynamics. The setpoint is included in
the state vector st as a non-controllable variable which is
constant throughout the roll-outs. Policies in the industrial
benchmark specify changes ‚àÜv , ‚àÜg and ‚àÜs in three steering
variables v (velocity), g (gain) and s (shift) as a function of
st. In the behavior policy these changes are stochastic and
sampled according to
‚àÜv ‚àº
Ô£±
Ô£≤
Ô£≥
N (0.5, 1‚àö
3
) , if v(t) < 40
N (‚àí0.5, 1‚àö
3
) , if v(t) > 60
U(‚àí1, 1) , otherwise
(15)
‚àÜg ‚àº
Ô£±
Ô£≤
Ô£≥
N (0.5, 1‚àö
3
) , if g(t) < 40
N (‚àí0.5, 1‚àö
3
) , if g(t) > 60
U(‚àí1, 1) , otherwise
(16)
‚àÜs ‚àº U(‚àí1, 1) . (17)
The velocity v(t) and gain g(t) can take values in [0, 100].
Therefore, the data collection policy will try to keep these
values only in the medium range given by the interval
[40, 60]. Because of this, large parts of the state space will
be unobserved. After collecting the data, the 30, 000 state
transitions are used to train a BNN with latent variables with
the same hyperparameters as in (Depeweg et al., 2016).
After this, we train different policies using the Monte Carlo
approximation described in equation (14). We consider
different choices of Œ≤ ‚àà [0, 5] and use a horizon of T = 100
steps, with M = 50 and N = 25 and a minibatch size of 1.
Performance is measured using two different objectives. The
first one is the expected cost obtained under the ground truth
dynamics of the system, that is
‚àëT
t=1 Etrue[ct]. The second
objective is the model bias as defined in equation (12). We
compare with two baselines. The first one ignores any risk
and, therefore, is obtained by just optimizing equation (10).
The second baseline uses the standard deviation œÉ(ct) as risk
criterion and, therefore, is similar to equation (11), which is
the standard approach in risk-sensitive RL.
In Figure 4 we show the results obtained by our method and
by the second baseline when performance is evaluated under
the model (Figure 4a) or under the ground truth (Figure
1https://github.com/siemens/
industrialbenchmark
2https://github.com/siemens/policy_
search_bb-alpha
Uncertainty Decomposition in Bayesian Neural Networks
6 8 10 12 14 16 18 20
1
T
‚àë
t œÉ(E[ct|W ])
160
165
170
175
180
1 T
‚àë
t
E
m
o
d
e
l[
c
t]
Model
Œ≤œÉ(E[ct|W ])
Œ≤œÉ(ct)
0
1
2
3
4
5
Œ≤
(a)
4 5 6 7 8 9
1
T
‚àë
t |(Etrue[ct]‚àí Emodel[ct]|
168
170
172
174
176
178
180
1 T
‚àë
t
E
tr
u
e
[c
t]
Test
Œ≤œÉ(E[ct|W ])
Œ≤œÉ(ct)
0
1
2
3
4
5
Œ≤
30 35 40
185
190
195
Œ≤ = 0
(b)
Figure 4. Results on Industrial Benchmark. Performances of policies trained using equation (14) (red curve) and baseline that minimizes
(11) (black curve) for different values of Œ≤. Figure (a) shows results under the model and Figure (a) shows results under the ground truth.
4b). Each plot shows empirical estimates of the model bias
vs. the expected cost, for various choices of Œ≤. We also
highlight the result obtained with Œ≤ = 0, the first baseline.
Our novel approach for risk-sensitive reinforcement learning
produces policies that attain at test time better trade-offs
between expected cost and model bias. As Œ≤ increases,
the policies gradually put more emphasis on the expected
model bias. This leads to higher costs but lower discrepancy
between model and real-world performance.
5. Conclusion
We have studied a decomposition of predictive uncertainty
into its epistemic and aleatoric components when working
with Bayesian neural networks with latent variables. This
decomposition naturally arises in an information-theoretic
active learning setting. The decomposition also inspired
us to derive a novel risk objective for safe reinforcement
learning that minimizes the effect of model bias in stochastic
dynamical systems.
References
Blundell, Charles, Cornebise, Julien, Kavukcuoglu, Koray,
and Wierstra, Daan. Weight uncertainty in neural net-
works. arXiv preprint arXiv:1505.05424, 2015.
Deisenroth, Marc Peter, Neumann, Gerhard, Peters, Jan,
et al. A survey on policy search for robotics. Foundations
and Trends R¬© in Robotics, 2(1‚Äì2):1‚Äì142, 2013.
Depeweg, Stefan, HernaÃÅndez-Lobato, JoseÃÅ Miguel, Doshi-
Velez, Finale, and Udluft, Steffen. Learning and policy
search in stochastic dynamical systems with bayesian
neural networks. arXiv preprint arXiv:1605.07127, 2016.
Gal, Yarin, McAllister, Rowan Thomas, and Rasmussen,
Carl Edward. Improving pilco with bayesian neural net-
work dynamics models. In Data-Efficient Machine Learn-
ing workshop, volume 951, pp. 2016, 2016.
Gao, Weihao, Oh, Sewoong, and Viswanath, Pramod. Break-
ing the bandwidth barrier: Geometrical adaptive entropy
estimation. In Advances in Neural Information Process-
ing Systems, pp. 2460‚Äì2468, 2016.
Garcƒ±ÃÅa, Javier and FernaÃÅndez, Fernando. A comprehensive
survey on safe reinforcement learning. The Journal of
Machine Learning Research, 16(1):1437‚Äì1480, 2015.
Hein, Daniel, Hentschel, Alexander, Sterzing, Volkmar, To-
kic, Michel, and Udluft, Steffen. Introduction to the‚Äù
industrial benchmark‚Äù. arXiv preprint arXiv:1610.03793,
2016.
HernaÃÅndez-Lobato, JoseÃÅ Miguel and Adams, Ryan P. Proba-
bilistic backpropagation for scalable learning of bayesian
neural networks. arXiv preprint arXiv:1502.05336, 2015.
HernaÃÅndez-Lobato, JoseÃÅ Miguel, Li, Yingzhen, Rowland,
Mark, HernaÃÅndez-Lobato, Daniel, Bui, Thang, and
Turner, Richard E. Black-box Œ±-divergence minimization.
In Proceedings of The 33rd International Conference on
Machine Learning (ICML), 2016.
Houthooft, Rein, Chen, Xi, Duan, Yan, Schulman, John,
De Turck, Filip, and Abbeel, Pieter. VIME: Variational
Uncertainty Decomposition in Bayesian Neural Networks
information maximizing exploration. In Advances in
Neural Information Processing Systems, pp. 1109‚Äì1117,
2016.
Joseph, Joshua, Geramifard, Alborz, Roberts, John W, How,
Jonathan P, and Roy, Nicholas. Reinforcement learning
with misspecified model classes. In Robotics and Automa-
tion (ICRA), 2013 IEEE International Conference on, pp.
939‚Äì946. IEEE, 2013.
Kendall, Alex and Gal, Yarin. What uncertainties do we
need in bayesian deep learning for computer vision?
arXiv preprint arXiv:1703.04977, 2017.
Kozachenko, LF and Leonenko, Nikolai N. Sample estimate
of the entropy of a random vector. Problemy Peredachi
Informatsii, 23(2):9‚Äì16, 1987.
Kraskov, Alexander, StoÃàgbauer, Harald, and Grassberger,
Peter. Estimating mutual information. Physical review E,
69(6):066138, 2004.
MacKay, David JC. Information-based objective functions
for active data selection. Neural computation, 4(4):590‚Äì
604, 1992.
Maddison, Chris J, Lawson, Dieterich, Tucker, George,
Heess, Nicolas, Doucet, Arnaud, Mnih, Andriy, and Teh,
Yee Whye. Particle value functions. arXiv preprint
arXiv:1703.05820, 2017.
Mihatsch, Oliver and Neuneier, Ralph. Risk-sensitive rein-
forcement learning. Machine learning, 49(2-3):267‚Äì290,
2002.
Moerland, Thomas M, Broekens, Joost, and Jonker,
Catholijn M. Learning multimodal transition dynamics
for model-based reinforcement learning. arXiv preprint
arXiv:1705.00470, 2017.
Schneegass, Daniel, Udluft, Steffen, and Martinetz, Thomas.
Uncertainty propagation for quality assurance in rein-
forcement learning. In Neural Networks, 2008. IJCNN
2008.(IEEE World Congress on Computational Intel-
ligence). IEEE International Joint Conference on, pp.
2588‚Äì2595. IEEE, 2008.

