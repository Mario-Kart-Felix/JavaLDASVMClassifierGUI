Nuclear penalized multinomial regression with an
application to predicting at bat outcomes in
baseball
Scott Powers, Trevor Hastie and Robert Tibshirani
July 3, 2017
Abstract
We propose the nuclear norm penalty as an alternative to the ridge
penalty for regularized multinomial regression. This convex relaxation
of reduced-rank multinomial regression has the advantage of leveraging
underlying structure among the response categories to make better pre-
dictions. We apply our method, nuclear penalized multinomial regression
(NPMR), to Major League Baseball play-by-play data to predict outcome
probabilities based on batter-pitcher matchups. The interpretation of the
results meshes well with subject-area expertise and also suggests a novel
understanding of what differentiates players.
1 Introduction
A baseball game comprises a sequence of matchups between one batter and
one pitcher. Each matchup, or plate appearance (PA), results in one of several
outcomes. Disregarding some obscure possibilities, we consider nine categories
for PA outcomes: flyout (F), groundout (G), strikeout (K), base on balls (BB),
hit by pitch (HBP), single (1B), double (2B), triple (3B) and home run (HR).
A problem which has received a prodigious amount of attention in saber-
metric (the study of baseball statistics) literature is determining the value of
each of the above outcomes, as it leads to scoring runs and winning games. But
that is only half the battle. Much less work in this field focuses on an equally
important problem: optimally estimating the probabilities with which each bat-
ter and pitcher will produce each PA outcome. Even for “advanced metrics”
this second task is usually done by taking simple empirical proportions, perhaps
shrinking them toward a population mean using a Bayesian prior.
In statistics literature, on the other hand, many have developed shrink-
age estimators for a set of probabilities with application to batting averages,
starting with Stein’s estimator (Efron and Morris, 1975). Since then, Bayesian
approaches to this problem have been popular. Morris (1983) and Brown (2008)
1
ar
X
iv
:1
70
6.
10
27
2v
1 
 [
st
at
.M
L
] 
 3
0 
Ju
n 
20
17
used empirical Bayes for estimating batting averages, which are binomial prob-
abilities. We are interested in estimating multinomial probabilities, like the
nested Dirichlet model of Null (2009) and the hierarchical Bayesian model of
Albert (2016). What all of the above works have in common is that they do not
account for the “strength of schedule” faced by each player: How skilled were
his opponents?
The state-of-the-art approach, Deserved Run Average (Judge and BP Stats
Team, 2015, DRA), is similar to the adjusted plus-minus model from basketball
and the Rasch model used in psychometrics. The latter models the probability
(on the logistic scale) that a student correctly answers an exam question as the
difference between the student’s skill and the difficulty of the question. DRA
models players’ skills as random effects and also includes fixed effects like the
identity of the ballpark where the PA took place. Each category of the response
has its own binomial regression model. Taking HR as an example, each batter B
has a propensity βHRB for hitting home runs, and each pitcher P has a propensity
γHRP for allowing home runs. Distilling the model to its elemental form, if Y
denotes the outcome of a PA between batter B and pitcher P ,
P(Y = HR|B,P ) = e
αHR+βHRB +γ
HR
P
1 + eα
HR+βHRB +γ
HR
P
.
(Actually, in detail DRA uses the probit rather than the logit link function.)
One bothersome aspect of DRA is that the probability estimates do not sum
to one; a natural solution is to use a single multinomial regression model instead
of several independent binomial regression models. Making this adjustment
would result in a model very similar to ridge multinomial regression (described
in Section 3.3), and we will compare the results of our model with the results
of ridge regression as a proxy for DRA. Ridge multinomial regression applied
to this problem has about 8,000 parameters to estimate (one for each outcome
for each player) on the basis of about 160,000 PAs in a season, bound together
only by the restriction that probability estimates sum to one. One may seek
to exploit the structure of the problem to obtain better estimates, as in ordinal
regression. The categories have an ordering, from least to most valuable to the
batting team:
K < G < F < BB < HBP < 1B < 2B < 3B < HR,
with the ordering of the first three categories depending on the game situation.
But the proportional odds model used for ordinal regression assumes that when
one outcome is more likely to occur, the outcomes close to it in the ordering are
also more likely to occur. That assumption is woefully off-base in this setting
because as we show below, players who hit a lot of home runs tend to strike
out often, and they tend not to hit many triples. The proportional odds model
is better suited for response variables on the Likert scale (Likert, 1932), for
example.
The actual relationships among the outcome categories are more similar to
the hierarchical structure illustrated by Figure 1. The outcomes fall into two
2
Figure 1: Illustration of the hierarchical structure among the PA outcome cate-
gories, adapted from Baumer and Zimbalist (2014). Blue terminal nodes corre-
spond to the nine outcome categories in the data. Orange internal nodes have
the following meaning: TTO, three true outcomes; BIP, balls in play; W, walks;
H, hits; O, outs. Outcomes close to each other (in terms of number of edges
separating them) are likely to co-occur.
BB HBP 3B 2B 1B G F
K W HR H O
TTO BIP
PA
categories: balls in play (BIP) and the “three true outcomes” (TTO). The
three true outcomes, as they have become traditionally known in sabermetric
literature, include home runs, strikeouts and walks (which itself includes BB and
HBP). The distinction between BIP and TTO is important because the former
category involves all eight position players in the field on defense whereas the
latter category involves only the batter and the pitcher. Figure 1 has been
designed (roughly) by baseball experts so that terminal nodes close to each
other (by the number of edges separating them) are likely to co-occur. Players
who hit a lot of home runs tend to strike out a lot, and the outcomes K and HR
are only two edges away from each other. Hence the graph reveals something of
the underlying structure in the outcome categories.
This structure is further evidenced by principal component analysis of the
player-outcome matrix, illustrated in Figures 2 and 3. For batters, the princi-
pal component (PC) which describes most of the variance in observed outcome
probabilities has negative loadings on all of the BIP outcomes and positive load-
ings on all of the TTO outcomes. For both batters and pitchers, the percentage
of variance explained after two PCs drops off precipitously.
Principal component analysis is useful for illustrating the relationships be-
tween the outcome categories. For example Figure 3(a) suggests that batters
who tend to hit singles (1B) more than average also tend to ground out (G) more
than average. So an estimator of a batter’s groundout rate could benefit from
taking into account the batter’s single rate, and vice versa. This is an example of
the type of structure in outcome categories that motivates our proposal, which
aims to leverage this structure to obtain better regression coefficient estimates
3
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
● ●
●
●●
●
●
● ●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●● ●
●
●
●
●● ●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
● ●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
First principal component
S
ec
on
d 
pr
in
ci
pa
l c
om
po
ne
nt
−0.2 −0.1 0.0 0.1 0.2
−
0.
15
−
0.
05
0.
05
0.
15
−1 −0.5 0 0.5 1
−
0.
75
−
0.
25
0
0.
25
0.
5
0.
75
1B
BB
F
G
HR
K
(a) Batters
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
● ●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
● ●
●
●
●
●
●
●
●
●
●
●
●
●
●
● ●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
First principal component
S
ec
on
d 
pr
in
ci
pa
l c
om
po
ne
nt
−0.2 −0.1 0.0 0.1 0.2
−
0.
2
−
0.
1
0.
0
0.
1
−1 −0.5 0 0.5 1
−
1
−
0.
5
0
0.
5
1B
F
G
K
(b) Pitchers
Figure 2: Biplots of the principal component analyses of player outcome ma-
trices, separate for batters and pitchers. The blue dots represent players, and
the black arrows (corresponding to the top and right axes) show the loadings for
the first two principal components on each of the outcomes. We exclude out-
comes for which the loadings of both of the first two principal components are
sufficiently small.
in multinomial regression.
In Section 2 we review reduced-rank multinomial regression, a first attempt
at leveraging this structure. We improve on this in Section 3 by proposing
nuclear penalized multinomial regression, a convex relaxation of the reduced
rank problem. We compare our method with ridge regression in a simulation
study in Section 4. In Section 5 we apply our method and intepret the results
on the baseball data, as well as another application. The manuscript concludes
with a discussion in Section 6.
2 Multinomial logistic regression and reduced
rank
Suppose that we observe data xi ∈ Rp and Yi ∈ {1, ...,K} for i = 1, ..., n. We
use X to denote the matrix with rows xi, specifically X = (x1, ...,xn)
T . The
multinomial logistic regression model assumes that the Yi are, conditional on
X, independent, and that for k = 1, ...,K :
P(Yi = k|xi) =
eαk+x
T
i βk∑K
`=1 e
α`+xTi β`
, (1)
were αk ∈ R and βk ∈ Rp are fixed, unknown parameters. The model (1) is
not identifiable because an equal increase in the same element of each of the βk
4
Principal
component 1 2 3 4 5 6 7 8 9
F -0.2 0.7 0.5 -0.1 0.3 0.0 -0.1 0.1 -0.3
G -0.5 -0.6 0.4 -0.3 0.1 -0.0 -0.1 0.1 -0.3
K 0.8 -0.3 0.3 0.2 0.2 0.1 -0.1 0.1 -0.3
BB 0.1 0.1 -0.6 -0.6 0.4 0.0 -0.1 0.1 -0.3
HBP 0.0 0.0 -0.0 0.0 -0.1 -0.1 0.9 0.1 -0.3
1B -0.3 -0.0 -0.4 0.7 0.3 -0.1 -0.1 0.1 -0.3
2B -0.0 0.1 -0.1 0.0 -0.5 0.7 -0.1 0.1 -0.3
3B -0.0 -0.0 -0.0 0.0 -0.0 0.0 0.0 -0.9 -0.3
HR 0.1 0.1 -0.0 -0.1 -0.6 -0.6 -0.3 0.1 -0.3
% Variance 51.1 29.0 8.7 7.2 2.2 1.0 0.6 0.2 0.0
explained
1
(a) Principal components of batter outcome matrix
Principal
component 1 2 3 4 5 6 7 8 9
F -0.3 -0.7 0.3 0.3 0.3 0.1 0.1 0.1 -0.3
G 0.7 0.2 0.4 0.3 0.1 0.1 0.1 0.1 -0.3
K -0.6 0.7 0.3 -0.0 0.1 0.1 0.1 0.1 -0.3
BB -0.0 0.1 -0.8 0.3 0.3 0.1 0.2 0.1 -0.3
HBP 0.0 0.0 -0.0 0.0 -0.0 -0.0 -0.9 0.1 -0.3
1B 0.2 -0.1 -0.0 -0.8 0.3 0.1 0.1 0.1 -0.3
2B 0.0 -0.1 -0.1 -0.1 -0.8 0.4 0.1 0.1 -0.3
3B 0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.9 -0.3
HR -0.0 -0.1 -0.0 0.0 -0.2 -0.9 0.2 0.1 -0.3
% Variance 52.9 32.7 6.7 4.9 1.5 0.6 0.3 0.2 0.0
explained
1
(b) Principal components of pitcher outcome matrix
Figure 3: Visualization of principal component analysis of player outcome ma-
trices, separate for batters and for pitchers. The player outcome matrix has a
row for each player giving the proportion of PAs which have resulted in each
of the nine outcomes in the dataset. The visualization shows the loadings for
each PC, along with a green bar plot corresponding to the percentage of variance
explained by each PC, which is also printed in the row below the matrix of PC
loadings.
(or in each of the αk) does not the change the estimated probabilities. That is,
for each choice of parameter values there is an infinite set of choices which have
the same likelihood as the original choice, for any observed data. This problem
may readily be resolved by adopting the restriction for some k0 ∈ {1, ...,K}
that αk0 = 0 and βk0 = ~0p. However, depending on the method used to fit the
model, this identifiability issue may not interfere with the existence of a unique
solution; in such a case, we do not adopt this restriction. See the appendix for
a detailed discussion.
In contrast with logistic regression, multinomial regression involves estimat-
ing not a vector but a matrix of regression coefficients: one for each independent
variable, for each class. We denote this matrix by B = (β1, ..., βK). Motivated
by the principal component analysis from Section 1, instead of learning a coef-
ficient vector for each class, we might do better by learning a coefficient vector
for each of a smaller number r of latent variables, each having a loading on
the classes. For r = 1, this is the stereotype model originally proposed by
Anderson (1984), who observed its applicability to multinomial regression prob-
lems with structure between the response categories, including ordinal structure.
Greenland (1994) argued for the stereotype model as an alternative in medical
applications to the standard techniques for ordinal categorical regression: the
5
cumulative-odds and continuation-ratio models.
Yee and Hastie (2003) generalized the model to reduced-rank vector gen-
eralized linear models. In detail, the reduced-rank multinomial logistic model
(RR-MLM) fits (1) by solving, for some r ∈ {1, ...,K − 1}, the optimization
problem:
minimize
α∈RK , B∈Rp×K
−
n∑
i=1
log
(
K∑
k=1
eαk+x
T
i βk∑K
`=1 e
α`+xTi β`
I{Yi=k}
)
subject to rank(B) ≤ r
α1 = 0, β1 = ~0p.
(2)
If rank(B) < r, then there exist A ∈ Rp×r, C ∈ RK×r such that B = ACT .
Under this factorization, the r columns of C can be interpreted as defining
latent outcome variables, each with a loading on each of the K outcome classes.
The r columns of A give regression coefficient vectors for these latent outcome
variables, rather than the outcome classes.
The optimization problem (2) is not convex because rank(·) is not a convex
function. Yee (2010) implemented an alternating algorithm to solve it in the
R (R Core Team, 2016) package VGAM. However this algorithm is too slow for
feasible application to datasets as large as the one motivating Section 1 (n =
176559, p = 796, K = 9).
3 Nuclear penalized multinomial regression
Because of the computational difficulty of solving (2), we propose replacing the
rank restriction with a restriction on the nuclear norm || · ||∗ (defined below)
of the regression coefficient matrix. For some ρ > 0, this convex optimization
problem is:
minimize
α∈RK , B∈Rp×K
−
n∑
i=1
log
(
K∑
k=1
eαk+x
T
i βk∑K
`=1 e
α`+xTi β`
I{Yi=k}
)
subject to ||B||∗ ≤ ρ
(3)
We prefer to frame the problem in its equivalent Lagrangian form: For some
λ > 0,
(α∗,B∗) = arg min
α∈RK , B∈Rp×K
−
n∑
i=1
log
(
K∑
k=1
eαk+x
T
i βk∑K
`=1 e
α`+xTi β`
I{Yi=k}
)
+ λ||B||∗
≡ arg min
α∈RK , B∈Rp×K
− `(α,B; X, Y ) + λ||B||∗
(4)
This optimization problem (4) is what we call nuclear penalized multinomial
regression (NPMR). We use `(α,B; X, Y ) to denote the log-likelihood of the
6
regression coefficients α and B given the data X and Y . The nuclear norm of
a matrix is defined as the sum of its singular values, that is, the `1-norm of its
vector of singular values. Explicitly, consider the singular value decomposition of
B given by UΣVT , with U ∈ Rp×p and V ∈ RK×K orthogonal and Σ ∈ Rp×K
having values σ1, ..., σmin{p,K} along the main diagonal and zeros elsewhere.
Then
||B||∗ =
min{p,K}∑
d=1
σd.
In the same way that the lasso induces sparsity of the estimated coefficients
in a regression, solving (4) drives some of the singular values to exactly zero.
Because the number of nonzero singular values is the rank of a matrix, the
result is that the estimated coefficient matrix B∗ tends to have less than full
rank. Thus (4) is a convex relaxation of the reduced-rank multiomial logistic
regression problem, in much the same way as the lasso is a convex relaxation of
best subset regression (Tibshirani, 1996). The convexity of (4) makes it easier
to solve than (2), and we discuss algorithms for solving it in Sections 3.1 and
3.2. In practice, we recommend using standard cross-validation techniques for
selecting the regularization parameter λ, which controls the rank of the solution.
Consider the singular value decomposition U∗Σ∗V∗T of the p×K estimated
coefficient matrix B∗. Each column of the K ×K orthogonal matrix V∗ rep-
resents a latent variable as a linear combination of the K outcome categories.
Meanwhile, each row of U∗Σ∗ specifies for each predictor variable a coefficient
for each latent variable, rather than for each outcome category. By estimating
some of the singular values of B∗ (the entries of the diagonal p×K matrix Σ∗)
to be zero, we reduce the number of coefficients to be estimated for each predic-
tor variable from (a) one for each of K outcome categories; to (b) one for each
of some smaller number of latent variables. These latent variables learned by
the model express relationships between the outcomes because two categories
for which a latent variable has both large positive coefficients are both likely to
occur for large values of that latent variable. Similarly, if a latent variable has
a large positive coefficient for one category and a large negative coefficient for
another, those two categories oppose each other diametrically with respect to
that latent variable.
3.1 Proximal gradient descent
NPMR relies on solving (4). The objective is convex but non-differentiable
where any singular values of B are zero, so we cannot use gradient descent.
Generally, when minimizing a function f : Rd → R of a vector x ∈ Rd, the
gradient descent update of step size s takes the form
x(t+1) = x(t) − s∇f(x(t)),
or equivalently,
7
x(t+1) = arg min
x∈Rd
{
f(x(t+1)) + 〈∇f(x(t)), x− x(t)〉+ 1
2s(t)
||x− x(t)||22
}
.
Still, if f is non-differentiable, as it is in (4), then ∇f is undefined. However,
if f is the sum of two convex functions g and h, with g differentiable, we can
instead apply the generalized gradient update step (Hastie et al., 2015):
x(t+1) = arg min
x∈Rd
{
g(x(t+1)) + 〈∇g(x(t)), x− x(t)〉+ 1
2s(t)
||x− x(t)||22 + h(x)
}
.
(5)
Repeatedly applying this update is known as proximal gradient descent
(PGD). In (4), we have x = α,B, g = −` and h = || · ||∗. So the PGD up-
date step is:
α(t+1), B(t+1) = arg min
α, B
{
−`(α(t), B(t); X,Y)
+〈XT (Y −P(t)),B−B(t)〉+ 〈1Tn (Y −P(t)), α− α(t)〉
+
1
2s
||B−B(t)||2F +
1
2s
||α− α(t)||22 + λ||B||∗
}
,
where Y ∈ {0, 1}n×K is the matrix containing the response variable and P ∈
(0, 1)n×K is the matrix containing the fitted values. That is, for i = 1, ..., n, and
k = 1, ...,K,
{Y}ik = I{Yi=k}, and {P}ik =
eαk+x
T
i βk∑K
`=1 e
α`+xTi β`
. (6)
The problem is separable in α and B:
α(t+1) = arg min
α
{
〈1Tn (Y −P(t)), α− α(t)〉+
1
2s
||α− α(t)||22
}
= α(t) + s1Tn (Y −P(t)), and
(7)
B(t+1) = arg min
B
{
〈XT (Y −P(t)),B−B(t)〉+ 1
2s
||B−B(t)||2F + λ||B||∗
}
= S∗sλ(B(t) + sXT (Y −P(t))),
(8)
where S∗sλ : Rp×K → Rp×K is the soft-thresholding operator on the singular
values of a matrix. Explicitly, if a matrix M ∈ Rp×K has singular value decom-
position UΣVT , then S∗sλ(M) = USsλ(Σ)VT , where
{Ssλ(Σ)}jk = sign(Σjk) max{|Σjk| − sλ, 0}.
8
S∗sλ is called the proximal operator of the nuclear norm, and in general solving (5)
involves the proximal operator of h, hence the name proximal gradient descent.
So to solve (4), initialize α and B, and iteratively apply the updates (7) and
(8). Due to Nesterov (2007), this procedure converges with step size s ∈ (0, 1/L)
if the log-likelihood ` is continuously differentiable and has Lipschitz gradient
with Lipschitz constant L. The appendix includes a proof that the gradient
of ` is Lipschitz with constant L =
√
K||X||2F , but in practice we recommend
starting with step size s = 0.1 and halving the step size if any proximal gradient
descent step would result in an increase of the objective function (4).
3.2 Accelerated PGD
In practice, we find that it helps to speed things up considerably to use an ac-
celerated PGD method, also due to Nesterov (2007). Specifically, we iteratively
apply the following updates:
1. α(t+1) = α(t) + s1Tn
(
Y −P(t)
)
2. A(t+1) = B(t) + tt+3 (B
(t) −B(t−1))
3. P(t+1) = P(α(t+1), A(t+1))
4. B(t+1) = S∗sλ
(
A(t+1) + sXT
(
Y −P(t+1)
))
The function P(·) in Step 3 returns the matrix of fitted probabilities based
on the regression coefficients as described in (6). Step 2 is the key to the
acceleration because it uses the “momentum” in B to push it further in the same
direction it is heading. We strongly recommend using this accelerated version
of PGD, and our implementation of NPMR is available on the Comprehensive
R Archive Network as the R package npmr.
3.3 Related work
The idea of using a nuclear norm penalty as a convex relaxation to reduced-rank
regression has previously been proposed in the Gaussian regression setting (Chen
et al., 2013), but we are not aware of any attempt to do so in the multinomial
setting.
The nearest competitor to NPMR that can feasibly be applied to the baseball
matchup dataset is multinomial ridge regression, which penalizes the squared
Frobenius norm (the sum of the squares of the entries) of the coefficient matrix,
instead of the nuclear norm. In detail, ridge regression estimates the regression
coefficients by solving the optimization problem
(α∗,B∗) = arg min
α∈RK , B∈Rp×K
− `(α(t),B(t); X, Y ) + λ||B||2F . (9)
This model is very similar to the state of the art in public sabermetric lit-
erature for evaluating pitchers on the basis of outcomes while simultaneously
9
controlling for sample size, opponent strength and ballpark effects (Judge and
BP Stats Team, 2015). Software is available to solve this problem very quickly
in the R package glmnet (Friedman et al., 2010). This is the standard approach
used for regularized multinomial regression problems, so we use it as the bench-
mark against which to compare the performance of NPMR in Sections 4 and
5.
4 Simulation study
In this section we present the results of two different simulations, one using a
full-rank coefficient matrix and the other using a low-rank coefficient matrix.
In both settings we vary the training sample size n from 600 to 2000, and we
fix the number of predictor variables to be 12 and the number of levels of the
response variable to be 8. Given design matrix X ∈ Rn×12 and coefficient matrix
B ∈ R12×8, we simulate the response according to the multinomial regression
model. Explicity, for i = 1, ..., n, and k = 1, ..., 8,
P(Yi = k) =
eXβk∑8
`=1 e
Xβ`
.
For both simulations the entries of X are i.i.d. standard normal:
xi
i.i.d.∼ Normal(~012, I12)
for i = 1, ..., n. However the simulations differ in the generation of the coefficient
matrix B. In the full rank setting, the entries of B follow an i.i.d. standard
normal distribution: For k = 1, ..., 8,
βk
i.i.d.∼ Normal(~012, I12). (10)
In the low rank setting we first simulate two intermediary matrices A ∈
R12×2 and C ∈ R8×2 with i.i.d. standard normal entries, and we then define
B ≡ ACT so that the rank of B is 2. In each simulation we fit ridge regression
and NPMR to the training sample of size n and estimate the out-of-sample
error by simulating 10,000 test observations, comparing the model’s predictions
on those test observations with the simulated response. The results of 3,500
simulations in each setting, for each training sample size n, are presented in
Figure 4.
In the full rank setting we expect ridge regression to out-perform NPMR be-
cause ridge regression shrinks all coefficient estimates toward zero, which is the
mean of the generating distribution for the coefficients in the simulation. If this
were a Gaussian regression problem instead of a multinomial regression problem,
then the ridge regression coefficient estimates would correspond (Hastie et al.,
2009) to the posterior mean estimate under a Bayesian prior of (10). In fact
ridge regression does beat NPMR in this simulation (for all training sample sizes
n), but NPMR’s performance is surprisingly close to that of ridge regression.
10
600 800 1000 1400 1800
0.
78
0.
80
0.
82
0.
84
0.
86
Full rank setting
Training sample size
M
ea
n 
te
st
 lo
ss
Ridge
NPMR
Bayes error
(a) Full-rank coefficient matrix
600 800 1000 1400 1800
0.
80
0.
82
0.
84
0.
86
Low rank setting
Training sample size
M
ea
n 
te
st
 lo
ss
Ridge
NPMR
Bayes error
(b) Low-rank coefficient matrix
Figure 4: Simulation results. We plot out-of-sample test error (using log-
likelihood loss) against training sample size. The Bayes error is a lower bound on
achievable test error. In (a), the full rank setting, ridge regression out-performs
NPMR in terms of test error by a slim margin. In (b), the low rank setting,
NPMR wins, especially for smaller sample sizes.
The low rank setting is one in which NPMR should lead to a lower test error
than does ridge regression. NPMR bets on sparsity in the singular values of the
coefficient matrix, and in this setting the bet pays off. The simulation results
verify that this intuition is correct. NPMR beats ridge regression for all training
sample sizes n but especially for smaller sample sizes. By betting (correctly in
this case) on the coefficient matrix having less than full rank, NPMR learns
more accurate estimates of the coefficient matrix. As the training sample size
increases, learning the coefficient matrix becomes easier, and the performance
gap between the two methods shrinks but remains evident.
In summary, this simulation demonstrates that each of NPMR and ridge
regression is superior in a simulation tailored to its strengths, confirming our
intuition. Furthermore, in a simulation constructed in favor of ridge regression,
NPMR performs nearly as well. Meanwhile NPMR leads to more significant
gains over ridge regression in the low rank setting.
5 Results
5.1 Implementation details
The 2015 MLB play-by-play dataset from Retrosheet includes an entry for every
plate appearance during the six-month regular season. For the purposes of
fitting NPMR to predict the outcomes of PAs, the following relevant variables
11
are recorded for the ith PA: the identity (Bi) of the batter; the identity (Pi)
of the pitcher; the identity (Si) of the stadium where the PA took place; an
indicator (Hi) of whether the batter’s team is the home team; and finally an
indicator (Oi) of whether the batter’s handedness (left or right) is opposite that
of the pitcher.
For each outcome k ∈ K ≡ {K, G, F, BB, HBP, 1B, 2B, 3B, HR}, the multi-
nomial model fit by both NPMR and ridge regression is specified by
P(Yi = k) =
eηik∑
`∈K e
ηi`
, where
ηik = αk + βBik + γPik + δSik + ζkHi + θkOi.
The parameters introduced have the following interpretation: αk is an intercept
corresponding to the league-wide frequency of outcome k; βBik corresponds
to the tendency of batter Bi to produce outcome k; γPik corresponds to the
tendency of pitcher Pi to produce outcome k; δSik corresponds to the tendency
of stadium Si to produce outcome k; ζk corresponds to the increase in likelihood
of outcome k due to home field advantage; and θk corresponds to the increase
in likelihood of outcome k due to the batter having the opposite handedness of
the pitcher’s.
NPMR and ridge regression fit the same multinomial regression model and
differ only in the regularizations used in their objective functions, yielding differ-
ent results. See Section 3 for details. However there is a minor tweak to NPMR
for application to these data. Instead of adding to the objective a penalty on the
nuclear norm of the whole coefficient matrix, we add penalties on the nuclear
norms of the three coefficient sub-matrices corresponding to batters, pitchers
and stadiums. The coefficients for home-field advantage and opposite hand-
edness remain unpenalized. The result is that NPMR learns different latent
variables for batters than it does for pitchers, instead of learning one set of
latent variables for both groups.
We process the PA data before applying NPMR and ridge regression. First,
we define a minimum PA threshold separately for batters and pitchers. For
batters the threshold is the 390th-largest number of PAs among all batters.
This corresponds roughly to the number of rostered batters at any given time
during the MLB regular season. Batters who fall below the PA threshold are
labelled “replacement level” and within each defensive position are grouped
together into a single identity. For example, “replacement-level catcher” is a
batter in the dataset just like Mike Trout is, and the former label includes all
PAs by a catcher who does not meet the PA threshold. Similarly we define
the PA threshold for pitchers to be the 360th-largest number of PAs among
all pitchers, and we group all pitchers who fall below that threshold under the
“replacement-level pitcher” label. Additionally, we discard all PAs in which a
pitcher is batting, and we discard PAs which result in a catcher’s interference
or an intentional walk. The result is a set of 176,559 PAs featuring 401 unique
batters and 362 unique pitchers in 30 unique stadiums.
12
5.2 Validation
We fit NPMR and ridge regression to the baseball data, using a training sample
that varied from 5% (roughly 9,000 PAs) to 75% (roughly 135,000 PAs) of
the data. In each case we used the remaining data to test the models, with
multinomial deviance (twice the negative log-likelihood) as the loss function.
For comparison we also include the null model, which predicts for each plate
appearance the league average probabilities of each outcome. Figure 5 gives the
results.
Number of training plate appearances (thousands)
M
ea
n 
te
st
 d
ev
ia
nc
e ●
●
●
●
●
9 27 54 90 135
3.
52
3.
54
3.
56
3.
58
3.
60
3.
62
●
Null
Ridge
NPMR
Figure 5: Out-of-sample test performance of NPMR, ridge and null estimators
on baseball plate appearance result prediction. Each estimator was trained on
a fraction of the 2015 regular season data (varying from 5 to 75 percent) and
tested on the remaining data. The error bars correspond to one standard error.
For each training sample size, NPMR outperforms ridge regression though
the difference is not statistically significant. At the smallest sample size NPMR,
unlike ridge regression, achieves a significanly lower error than the null estima-
tor. There is value in improved estimation of players’ skills in small sample
sizes because this can inform early-season decision-making. For all other sam-
ple sizes, both NPMR and ridge regression achieves errors which are statistically
significantly less than the null error. The primary benefit of NPMR relative to
ridge regression is the interpretation, as described in the next section.
5.3 Interpretation
We focus on the results of fitting NPMR on 5 percent of the training data
because there the difference between NPMR and ridge regression is greatest
13
(Figure 5). As the sample size increases, the need for a low-rank regression
coefficient matrix is reduced, and the NPMR solution becomes more similar to
the ridge solution. Figure 6 visualizes the singular value decomposition of the
fitted regression coefficient submatrices corresponding to batters and pitchers.
We observe that for both batters and pitchers, NPMR identifies three latent
variables which differentiate players from one another. By construction, these
latent variables are measuring separate aspects of players’ skills; across players,
expression in each latent skill is uncorrelated with expression in each other latent
skill. In that sense, we have identified three separate skills which characterize
hitters and three separate skills which characterize pitchers. In baseball scouting
parlance, these skills are called “tools”, but unlike the five traditional baseball
tools (hitting for power, hitting for contact, running, fielding and throwing), the
tools we identify are uncorrelated with one another.
Latent
variable 1 2 3 4 5 6 7 8 9
1B 0.38 -0.28 -0.68 0.42 -0.14 -0.07 0.34 -0.03 -0.03
2B 0.03 -0.02 -0.06 -0.46 0.03 -0.77 0.31 0.26 0.17
3B 0.01 -0.00 -0.00 -0.27 0.16 0.09 0.31 0.00 -0.89
BB -0.16 -0.10 -0.06 -0.45 -0.40 0.31 0.42 -0.52 0.24
F 0.14 0.87 0.09 0.25 -0.12 -0.07 0.35 -0.09 0.02
G 0.43 -0.36 0.72 0.22 -0.12 -0.02 0.33 0.02 0.03
HBP -0.01 -0.01 -0.03 -0.01 0.85 0.22 0.36 -0.09 0.31
HR -0.04 0.05 -0.06 -0.14 -0.19 0.47 0.23 0.80 0.14
K -0.79 -0.15 0.09 0.45 -0.07 -0.17 0.33 0.06 -0.06
Corresponding 3.66 2.20 1.23 0.00 0.00 0.00 0.00 0.00 0.00
diagonal
1
(a) Latent variables for batter regression coefficient matrix
Latent
variable 1 2 3 4 5 6 7 8 9
1B 0.16 0.24 -0.34 0.48 -0.46 -0.27 0.42 -0.34 0.05
2B 0.01 0.03 -0.01 0.57 0.71 0.23 0.27 0.00 -0.20
3B -0.00 -0.01 -0.05 -0.17 -0.12 0.38 -0.14 -0.61 -0.65
BB 0.07 -0.04 -0.69 -0.46 0.12 0.23 0.43 0.22 -0.01
F 0.37 -0.74 0.33 -0.01 -0.14 0.07 0.41 -0.04 0.00
G 0.26 0.62 0.51 -0.27 -0.03 0.19 0.42 0.07 -0.01
HBP -0.01 0.01 0.00 0.19 -0.31 -0.10 -0.00 0.65 -0.66
HR 0.01 -0.00 0.05 -0.30 0.35 -0.79 0.16 -0.19 -0.31
K -0.87 -0.09 0.18 -0.03 -0.13 0.05 0.42 -0.05 0.00
Corresponding 1.98 1.54 0.32 0.00 0.00 0.00 0.00 0.00 0.00
diagonal
1
(b) Latent variables for pitcher regression coefficient matrix
Figure 6: Visualization of fitted regression coefficient matrices from NPMR on
5% of the baseball data. The matrix displayed is V in the UΣVT decomposition
of B from (4), with columns corresponding to latent variables and rows corre-
sponding to outcomes. The bottom row gives the entry in the diagonal matrix
Σ corresponding to the latent variable.
The interpretation of Figure 6 is very attractive in the context of domain
knowledge. In reading the columns of V, note that they are unique only up
to a change in sign, so we can taken positive expression of each skill to mean
positive or negative values of the corresponding latent variable. We suggest the
following interpretation of the first three latent skills for batters:
• Skill 1: Patience. The loadings of the first latent variable discriminate
perfectly between the TTO outcomes and the BIP outcomes described in
Section 1. We label this skill as “patience” because when a batter swings
at fewer pitches, he is less likely to hit the ball in play.
14
• Skill 2: Trajectory. The second latent variable distinguishes primarily
between F and G, corresponding to the vertical launch angle of the ball
off the bat.
• Skill 3: Speed. The third latent variable distinguishes primarily between
1B and G. Examining the players with strong positive expression of this
skill, we find fast players who are more difficult to throw out at first base
on a ground ball.
From this interpretation we learn that the primary skill which distinguishes
betwen batters is how often they hit the ball into the field of play. One out-
come over which batters have relatively large control is how often they swing at
pitches. Among balls that are put into play, batters have less but still subtantial
control over whether those are ground balls or fly balls. It is the vertical angle
of the batter’s swing plane, along with whether he tends to contact the top half
or the bottom half of the ball, that determines his trajectory tendency. Finally,
given the trajectory of the ball off the bat, the batter has relatively little con-
trol over the outcome of the PA. But to the extent that he can influence this
outcome, fast runners tend to hit more singles and fewer groundouts.
Based on Figure 6, we interpret the pitchers’ skills as follows:
• Skill 1: Power. The first latent variable distinguishes primarily between
K and F (and G), thus identifying how the pitcher gets outs. Pitchers who
tend to get their outs via the strikeout are known in baseball as “power
pitchers”.
• Skill 2: Trajectory. As with batters, the second latent variable distin-
guishes primarily between F and G, corresponding to the trajectory of the
ball off the bat.
• Skill 3: Command. The third latent variable distinguishes primarily be-
tween positive outcomes for the pitcher (F, G and K) and negative out-
comes for the pitcher (BB and 1B), reflecting how well is able to control
the location of his pitches.
The interpretation of the first two skills for pitchers is very similar to the
interpretation of the first two skills for batters. Primarily, pitchers can influence
how often balls are hit into play against them, but they exhibit less control over
this than batters do. Secondarily, as with hitters, pitchers exhibit some control
over the vertical launch angle of the ball off the bat. This is based on the
location and movement of their pitches. The third skill, distinguishing between
positive and negative outcomes, has a relatively very small magnitude.
Table 1 lists the top five and bottom five players in each of the three latent
batting skills learned by NPMR. These results largely match intuition for the
players listed, and to the extent that they do not, it is worth a reminder that
they are based on roughly nine days’ worth of data from a six-month season.
The median number of PAs per batter in the training set is 21.
15
Table 1: Top 5 and bottom 5 batters in the three latent skills identified by NPMR.
Skill Patience Trajectory Speed
More K, BB More F More 1B
Peter Bourjos Ian Kinsler Yoenis Cespedes
Top Eddie Rosario Freddie Freeman Lorenzo Cain
5 Carlos Santana Omar Infante José Iglesias
George Springer Kolten Wong Kevin Kiermaier
Mike Napoli José Altuve Delino DeShields Jr
Josh Reddick Dee Gordon Evan Longoria
Bottom JT Realmuto Alex Rodriguez Ryan Howard
5 AJ Pollock Cameron Maybin Odubel Herrera
Kevin Pillar Shin-Soo Choo Seth Smith
Eric Aybar Francisco Cervelli Jake Lamb
More F, G, 1B More G, 1B More G
Table 2: Top 5 and bottom 5 pitchers in the three latent skills identified by
NPMR.
Tool Power Trajectory Command
More K More F More F, G, K
José Quintana Jesse Chavez Max Scherzer
Top Corey Kluber Justin Verlander Masahiro Tanaka
5 Madison Bumgarner Jake Peavy Jacob deGrom
Max Scherzer Johnny Cueto Rubby de la Rosa
Clayton Kershaw Chris Young Matt Harvey
John Danks Dallas Keuchel Mike Pelfrey
Bottom Dan Haren Garrett Richards Chris Tillman
5 Cole Hamels Sam Dyson Eddie Butler
Alfredo Simón Brett Anderson Gio Gonzalez
RA Dickey Michael Pineda Jeff Samardzija
More F, G More G More BB, 1B
The results in Table 2, listing the top and bottom players in each of the
three latent pitching skills, are more interesting. The top five power pitchers
are all among to top starting pitchers in the game. All the way on the other
side of the spectrum is knuckleball pitcher RA Dickey. The knuckleball is a
unique pitch in baseball thrown relatively softly with as little spin as possible
to create unpredictable movement. Its goal is not to overpower the opposing
batter but to induce weak contact. Another interesting pitcher low on power
is Cole Hamels. Two of the leading sabermetric websites, Baseball Prospectus
and FanGraphs, disagree greatly on Hamels’ value. The discrepancy stems
from Baseball Prospectus giving full weight to BIP outcomes while FanGraphs
ignores them. Because Hamels tends to get outs via fly balls and ground balls
rather than strikeouts, FanGraphs estimates a much lower value for Hamels
than Baseball Prospectus does.
5.4 Another application: Vowel data
Consider the problem of vowel classification from Robinson (1989). The data
set comprises 528 training samples and 462 test samples, each classified as one
of the 11 vowels listed in Table 3, with 10 features extracted from an audio
file. The data are grouped by speaker, with 8 subjects in the training set and 7
different subjects in the test set. Each audio clip is split into 6 frames during a
duration of steady audio, yielding 6 pseudo-replicates.
We fit NPMR and ridge regression to the training data over a wide range
of regularization parameters, with the training and test loss (negative log-
16
Table 3: Symbols and words for vowels studied by Robinson (1989).
Vowel Word Vowel Word Vowel Word Vowel Word
i heed A had O hod u: who’d
I hid a: hard C: hoard 3: heard
E head Y hud U hood
likelihood) reported in Figure 7. As the regularization parameter increases for
each method, the training loss increases. The test loss initially decreases and
then increases as the model is overfit. We observe that over the whole solution
path, for the same training error NPMR consistently yields a lower test error
than ridge regression.
Figure 7: Results of fitting NPMR and ridge regression on vowel data. Test error
is plotted against training error, using negative log-likelihood loss. Training error
serves as a surrogate for degrees of freedom in the model fit. The null prediction
assigns equal probability to all categories. Error bars represent one standard
error in estimation of the test loss.
1.0 1.5 2.0
1.
2
1.
4
1.
6
1.
8
2.
0
2.
2
2.
4
Mean training loss
M
ea
n 
te
st
 lo
ss
Null
Ridge
NPMR
Figure 8 reveals a possible explanation why NPMR outperforms ridge re-
gression on the vowel data. For example the results show that when the vowel
i is a likely label, the vowel I is also a likely label. The first two latent variables
explain a significant portion of the variance in the regression coefficients for the
vowels. The first latent variable distinguishes between two groups of vowels,
with C:, U and u: having the most negative values and E, A, a: and Y having
the most positive values. NPMR has beaten ridge regression here by leveraging
a hidden structure among response categories.
6 Discussion
The potential for reduced-rank multinomial regression to leverage the underlying
structure among response categories has been recognized in the past. But the
17
Figure 8: Visualization of fitted regression coefficient matrices from NPMR ap-
plied to the vowel data. The matrix displayed is V in the UΣVT decomposition
of the regression coefficient matrix B, with columns corresponding to latent vari-
ables and rows corresponding to outcomes. The bottom row gives the entry in
the diagonal matrix Σ corresponding to the latent variable.
Latent
variable 1 2 3 4 5 6 7 8 9 10
i (heed) -0.13 0.51 0.66 0.08 -0.41 -0.00 0.09 -0.05 -0.07 0.00
I (hid) -0.03 0.44 -0.30 -0.44 0.11 0.33 -0.18 0.18 0.17 -0.46
E (head) 0.35 0.32 -0.43 0.18 -0.16 -0.01 0.02 0.20 0.06 0.63
A (had) 0.52 -0.08 -0.14 0.41 -0.08 -0.11 0.22 -0.19 -0.22 -0.55
a: (hard) 0.23 -0.35 0.35 -0.13 0.20 -0.00 0.34 0.51 0.41 0.01
Y (hud) 0.22 -0.14 0.25 0.04 0.37 0.51 -0.32 -0.47 -0.00 0.24
O (hod) 0.02 -0.34 0.06 -0.17 -0.22 -0.17 -0.57 0.36 -0.49 0.00
C: (hoard) -0.30 -0.41 -0.23 -0.02 -0.58 0.14 0.03 -0.29 0.40 -0.02
U (hood) -0.34 -0.09 -0.15 -0.21 0.17 0.18 0.58 -0.04 -0.55 0.14
u: (who’d) -0.53 0.05 -0.07 0.62 0.37 -0.13 -0.18 0.18 0.13 -0.08
3: (heard) 0.01 0.08 -0.01 -0.36 0.24 -0.73 -0.03 -0.40 0.15 0.07
Corresponding 9.37 7.97 2.65 1.98 1.77 0.78 0.39 0.00 0.00 0.00
diagonal
1
computational cost for the state-of-the-art algorithm for fitting such a model is
so great as to make it infeasible to apply to a dataset as large as the baseball
play-by-play data in the present work. Using a convex relaxation of the problem,
by penalizing the nuclear norm of the coefficient matrix instead of its rank, leads
to better results.
The interpretation of the results on the baseball data is promising in how it
coalesces with modern baseball understanding. Specifically, the NPMR model
has quantitative implications on leveraging the structure in PA outcomes to
better jointly estimate outcome probabilities. Additional application to vowel
recognition in speech shows improved out-of-sample predictive performance, rel-
ative to ridge regression. This matches the intuition that NPMR is well-suited
to multinomial regression in the presence of a generic structure among the re-
sponse categories. We recommend the use of NPMR for any multinomial regres-
sion problem for which there is some nonordinal structure among the outcome
categories.
Acknowledgments
The authors would like to thank Hristo Paskov, Reza Takapoui and Lucas Jan-
son for helpful discussions, as well as Balasubramanian Narasimhan for compu-
tational assistance.
References
Albert, J. (2016). Improved component predictions of batting and pitching
measures. Journal of Quantitative Analysis in Sports, 12(2):73–85.
18
Anderson, J. A. (1984). Regression and ordered categorical variables. Journal
of the Royal Statistical Society B, 46(1):1–30.
Baumer, B. and Zimbalist, A. (2014). The Sabermetric Revolution. University
of Pennsylvania Press, Philadelphia.
Bhatia, R. (1997). Matix Analysis. Springer, New York.
Brown, L. D. (2008). In-season prediction of batting averages: A field test of
empirical Bayes and Bayes methodologies. The Annals of Applied Statistics,
2(1):113–152.
Chen, K., Dong, H., and Chan, K.-S. (2013). Reduced rank regression via
adaptive nuclear norm penalization. Biometrika, 100(4):901–920.
Efron, B. and Morris, C. N. (1975). Data Analysis Using Stein’s Estimator
and its Generalizations. Journal of the American Statistical Association,
70(350):311–319.
Friedman, J., Hastie, T. J., and Tibshirani, R. J. (2010). Regularization paths
for generalized linear models via coordinate descent. Journal of Statistical
Software, 33(1):1–22.
Grant, M., Boyd, S., and Ye, Y. (2008). CVX: A Language and Environment
fo Statistical Computing. CVX Research.
Greenland, S. (1994). Alternative models for ordinal logistic regression. Statis-
tics in Medicine, 13(16):1665–1677.
Hastie, T. J., Tibshirani, R., and Friedman, J. (2009). The Elements of Sta-
tistical Learning: Data mining, inference and prediction. Springer Series in
Statistics. Springer, 2nd edition.
Hastie, T. J., Tibshirani, R. J., and Wainwright, M. (2015). Statistical Learning
with Sparsity: The Lasso and its Generalizations. Monographs on Statistics
and Applied Probability. CRC Press, 1st edition.
Judge, J. and BP Stats Team (2015). DRA: An in-depth discussion.
http://www.baseballprospectus.com/article.php?articleid=26196.
Likert, R. (1932). A technique for the measurement of attitudes. Archives of
Psychology, 140(22):1–55.
Morris, C. N. (1983). Parametric Empirical Bayes Inference: Theory and Ap-
plications. Journal of the American Statistical Association, 78(381):47–55.
Nesterov, Y. (2007). Gradient methods for minimizing composite objective func-
tion. Technical Report 2007076, Université Catholique de Louvain, Center for
Operations Research and Econometrics (CORE).
19
Null, B. (2009). Modeling baseball player ability with a nested Dirichlet distri-
bution. Journal of Quantitative Analysis in Sports, 5(2).
R Core Team (2016). R: A Language and Environment fo Statistical Computing.
R Foundation for Statistical Computing, Vienna, Austria.
Robinson, A. J. (1989). Dynamic error propagation networks. PhD dissertation,
University of Cambridge.
Tibshirani, R. (1996). Regression shrinkage and selection via the lasso. Journal
of the Royal Statistical Society B, 58(1):267–288.
Yee, T. W. (2010). The VGAM package for categorical data analysis. Journal
of Statistical Software, 32(10):1–34.
Yee, T. W. and Hastie, T. J. (2003). Reduced-rank vector generalized linear
models. Statistical Modelling, 3(1):15–41.
20
A Appendix
Identifiability of multinomial logistic regression model
We observe in Section 2 that the model (1) is not identifiable: For any a ∈ R
and c ∈ Rp,
eαk−a+x
T
i (βk−c)∑K
`=1 e
α`−a+xTi (β`−c)
=
e−a−x
T
i ceαk+x
T
i βk
e−a−x
T
i c
∑K
`=1 e
α`+xTi β`
=
eαk+x
T
i βk∑K
`=1 e
α`+xTi β`
Hence (α,B) and (α − a1K ,B − c1TK) have the same likelihood. The ridge
penalty in (9) provides a natural resolution. Any solution to this problem must
satisfy
||B||2F = min
c∈Rp
||B− c1TK ||2F (11)
because otherwise B can be replaced by B − c1TK with a smaller norm but
the same likelihood and hence a lesser objective. Note that the optimization
problem on the right-hand side of (11) is separable in the entries of c and has
the unique solution c∗ = 1KB1K , meaning that the rows of B in the solution
must have mean zero. The unpenalized intercept α stil lacks identifiability, but
we may take it to have mean zero as well.
Similarly, the NPMR solution must satisfy
||B||∗ = min
c∈Rp
||B− c1TK ||∗. (12)
Whether this optimization problem always (for any B ∈ Rp×K) has a unique
solution is an open question. We speculate that it does and that the unique so-
lution is c∗ = 1KB1K . As evidence, each fit of NPMR in the present manuscript
has a solution with zero-mean rows. As further evidence, we have used the
MATLAB software CVX (Grant et al., 2008) to solve (12) for several randomly
generated matrices B, and each time the solution has been c∗ = 1KB1K .
Note that c∗ = 1KB1K must always be a solution to (12). To see this, note
that
B− c∗1TK = B−
1
K
B1K1
T
K = B
(
I− 1
K
1K1
T
K
)
= B(I−H),
where H = 1K(1
T
K1K)
−11TK is a projection matrix. Hence I −H is also a pro-
jection matrix and has spectral norm (maximum singular value) ||I−H||∞ = 1.
By Hölder’s inequality for Schatten p-norms (Bhatia, 1997),
||B(I−H)||∗ ≤ ||B||∗||I−H||∞ = ||B||∗,
so for any B ∈ Rp×K ,
||B− 1
K
B1K1
T
K ||∗ ≤ ||B||∗.
21
In order words, the nuclear norm can always be decreased, or at least not in-
creased, by centering the rows to have mean zero.
The problem with a lack of identifiability in the multimonial regression model
comes in the interpretation of the regression coefficients. When comparing co-
efficients across variables for the same outcome class, it is concerning that an
arbitrary increase in either coefficient can corresond to the same fitted probabil-
ities (if that same increase applys to all other coefficients for the same variable).
This does not apply to any of the interpretation in Section 5.3, but in the ab-
sence of certainty that there is a unique solution to (12), we take the NPMR
solution to be the one for which the mean of α and the row means of B are zero.
Proof of Lipschitz condition for multinomial log likelihood
We prove that the multinomial log-likelihood `(α,B; X, Y ) from (4) has Lips-
chitz gradient with constant L =
√
K||X||2F . Assume (without loss of generality)
that the covariate matrix X has a column of 1s encoding the intercept, so α = 0.
The gradient of `(B; X, Y ) with respect to B is given by XT (Y−P), where Y
and P are defined as in (6). What we must show is that, for any B,B′ ∈ Rp×K :
||XT (Y −P)−XT (Y −P′)||F ≤
√
K||X||2F ||B−B′||F . (13)
Recall that P is a function of B, so P′ corresponds to B′.
Consider a single entry Pik of P. Note that the gradient of Pik with respect
to B is given by xiw
T
ik, where wik ∈ Rp and
(wik)j =
{
−PikPij j 6= k
Pik(1−Pik) j = k
.
For any P ∈ (0, 1)n×K ,
||wik||2 ≤ ||wik||1 = Pik(1−Pik) + Pik
∑
j 6=k
Pjk = 2Pik(1−Pik) ≤
1
2
.
This implies that the norm of the gradient of Pik is bounded above by the
inequality ||xiwTik||F ≤ ||xi||2||wTik||F ≤ ||xi||2. So for any B,B′ ∈ Rp×K :
|Pik −P′ik| ≤ ||xi||2||B−B′||F . (14)
22
Now we are ready to prove (13).
||XT (Y −P)−XT (Y −P′)||F = ||XT (P−P′)||F
≤ ||X||F ||P−P′||F
= ||X||F
√√√√ n∑
i=1
K∑
k=1
(Pik −P′ik)2
≤ ||X||F
√√√√ n∑
i=1
K∑
k=1
||xi||22||B−B′||2F from (14)
= ||X||F
√√√√K||B−B′||2F n∑
i=1
||xi||22
= ||X||F
√
K||B−B′||2F ||X||2F
=
√
K||X||2F ||B−B′||F 
23

