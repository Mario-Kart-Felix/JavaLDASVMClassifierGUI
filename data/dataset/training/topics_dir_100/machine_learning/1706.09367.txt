Journal of Machine Learning Research x (201x) x-xx Submitted x/xx; Published xx/xx
autoBagging: Learning to Rank Bagging Workflows with
Metalearning
Fábio Pinto fhpinto@inesctec.pt
Vı́tor Cerqueira vmac@inesctec.pt
Carlos Soares csoares@fe.up.pt
João Mendes-Moreira jmoreira@fe.up.pt
INESC TEC
Faculty of Engineering, University of Porto
Rua Dr. Roberto Frias, s/n
Porto, Portugal 4200-465
Editor: Editor
Abstract
Machine Learning (ML) has been successfully applied to a wide range of domains and
applications. One of the techniques behind most of these successful applications is Ensemble
Learning (EL), the field of ML that gave birth to methods such as Random Forests or
Boosting. The complexity of applying these techniques together with the market scarcity
on ML experts, has created the need for systems that enable a fast and easy drop-in
replacement for ML libraries. Automated machine learning (autoML) is the field of ML that
attempts to answers these needs. Typically, these systems rely on optimization techniques
such as bayesian optimization to lead the search for the best model. Our approach differs
from these systems by making use of the most recent advances on metalearning and a
learning to rank approach to learn from metadata. We propose autoBagging, an autoML
system that automatically ranks 63 bagging workflows by exploiting past performance
and dataset characterization. Results on 140 classification datasets from the OpenML
platform show that autoBagging can yield better performance than the Average Rank
method and achieve results that are not statistically different from an ideal model that
systematically selects the best workflow for each dataset. For the purpose of reproducibility
and generalizability, autoBagging is publicly available as an R package on CRAN.
Keywords: automated machine learning, metalearning, bagging, classification
1. Introduction
Ensemble learning (EL) has proven itself as one of the most powerful techniques in Ma-
chine Learning (ML), leading to state-of-the-art results across several domains (Fernández-
Delgado et al., 2014). Methods such as bagging, boosting or Random Forests are considered
some of the favourite algorithms among data science practitioners. However, getting the
most out of these techniques still requires significant expertise and it is often a complex
and time consuming task. Furthermore, since the number of ML applications is growing
exponentially, there is a need for tools that boost the data scientist’s productivity (Husain,
2017).
c©201x author list.
ar
X
iv
:1
70
6.
09
36
7v
1 
 [
st
at
.M
L
] 
 2
8 
Ju
n 
20
17
Fábio Pinto, V́ıtor Cerqueira, Carlos Soares and João Mendes-Moreira
The resulting research field that aims to answers these needs is Automated Machine
Learning (autoML). It is a field that merges ideas and techniques from several ML and
optimization topics, such as Bayesian optimization, metalearning (MtL) and algorithm se-
lection. In the past few years it was possible to assess important innovations in the field,
which enable data science practitioners, including non-experts, to efficiently create fine-
tuned predictive models with minimum intervention.
In this paper we address the problem of how to automatically tune an EL algorithm,
covering all components within it: generation (how to generate the models and how many),
pruning (which technique should be used to prune the ensemble and how many models
should be discarded) and integration (which model(s) should be selected and combined for
each prediction). We focus specifically in the bagging algorithm (Breiman, 1996) and four
components of the algorithm: 1) the number of models that should be generated 2) the
pruning method 3) how much models should be pruned and 4) which dynamic integration
method should be used. For the remaining of this paper, we call to a set of these four
elements a bagging workflow.
Our proposal is autoBagging, a system that combines a learning to rank approach to-
gether with metalearning to tackle the problem of automatically generate bagging workflows.
Ranking is a common task in information retrieval. For instance, to answer the query of a
user, a search engine ranks a plethora of documents according to their relevance. In this
case, the query is replaced by new dataset and autoBagging acts as ranking engine.
Figure 1 shows an overall schema of the proposed system. We leverage the historical
predictive performance of each workflow in several datasets, where each dataset is char-
acterised by a set of metafeatures. This metadata is then used to generate a metamodel,
using a learning to rank approach. Given a new dataset, we able to collect metafeatures
from it and feed them to the metamodel. Finally, the metamodel outputs an ordered list of
the workflows, specifically tuned to the characteristics of the new dataset.
dd
d
dd
Estimates of 
Performance
Metafeatures 
Extraction
Metadata
Learning to Rank
New 
Dataset
Metamodel
Ranked 
Algorithms
Algorithm 
AAlgorithm 
AAlgorithm 
a
Figure 1: Learning to Rank with Metalearning. The red lines represent offline tasks and
the green ones represent online ones.
2
autoBagging: Learning to Rank Bagging Workflows with Metalearning
We tested the approach in 140 classification datasets from the OpenML platform for col-
laborative ML (Vanschoren et al., 2014) and 63 bagging workflows, that include two pruning
techniques and two dynamic selection techniques. We give details on these workflows in Sec-
tion 4. Results show that autoBagging has a better performance than two strong baselines,
Bagging with 100 trees and the average rank. Furthermore, testing the top 5 workflows
recommended by autoBagging guarantees an outcome that is not statistically different from
the Oracle, an idealistic method that for each dataset always selects the best workflow.
This paper is organized as follows. Section 2 describes the state-of-the-art regarding
autoML and metalearning, with particular emphasis for the approaches more similar to ours.
In Section 3 we introduce the concept of bagging workflows and describe the components
from each they are designed with. Section 4 presents AutoBagging from a more formal
perspective. Section 5 presents the experiments carried to evaluate our approach. Finally,
Section 6 concludes the paper and sets directions for future work.
For the purpose of reproducibility and generalizability, autoBagging is publicly available
as an R package. 1
2. Related Work
In this Section we provide a brief overview of systems designed with intent of generating
automatic recommendations or ranking of ML algorithms or workflows. After a careful
analysis of the state-of-the-art, we split it into three categories: 1) systems that use only
metalearning approach, without any kind of optimization component; 2) systems that make
use of optimization procedures, such as bayesian optimization and 3) systems that leverage
metalearning and optimization procedures.
Finally, in the last sub-section, we discuss how some autoML systems recommend en-
semble learning algorithms to the user and how our approach differs from previous ones
regarding this feature.
2.1 Metalearning based
The first automated framework proposed to support machine learning processes was the
Data Mining Advisor (DMA) (Giraud-Carrier, 2005). The system used an instance-based
learning approach to relate the performance of the learning algorithms with simple and
statistical metafeatures computed from the datasets (Brazdil et al., 2003).
This line of research was later on overpowered by the characterization of datasets through
landmarkers (Pfahringer et al., 2000), such as learning curves (Leite and Brazdil, 2005) or
pairwise meta-rules Sun and Pfahringer (2013).
2.2 Optimization based
Evaluating ML algorithms and/or ML workflows is typically very time consuming and com-
putationally expensive. In practice, it is not feasible to evaluate all learning algorithms with
10-fold cross validation for a given dataset (particularly if the dataset is of high dimension-
ality) and choose the one that minimizes the error measure. Therefore, researchers have
1. https://github.com/fhpinto/autoBagging
3
Fábio Pinto, V́ıtor Cerqueira, Carlos Soares and João Mendes-Moreira
been developing search procedures and optimization algorithms that can in fact do this in
reasonable time.
Bayesian optimization is the field within optimization that has had the most success
carrying out these type of tasks. One of the algorithms that is responsible for this success
is SMAC (Hutter et al., 2011), an approach that constructs explicit regression models to
describe the relationship between the target algorithm performance and the hyperparame-
ters. The ability of SMAC to deal both categorical and continuous hyperparameters is one
of the reasons behind its success.
The development of bayesian optimization algorithms for algorithm configuration has
led to the emergence of systems such as Auto-WEKA (Thornton et al., 2013), that makes
use of SMAC and the machine learning library WEKA to automatically generate workflows
for classification datasets.
More recently, the Hyperband (Li et al., 2016) method was proposed as an alternative
for bayesian optimization algorithms. The method uses a pure-exploration algorithm for
multi-armed bandits to exploit the iterative algorithms of machine learning. Essentially,
the authors approach the automatic model selection problem as an automatic model evalu-
ation problem. By exploring this perspective, they report better results than the bayesian
optimization methods.
2.3 Optimization plus Metalearning
Some autoML systems combine bayesian optimization with metalearning, particularly useful
to act as a warm start for the optimization procedure. An example of such system is auto-
sklearn (Feurer et al., 2015). Given a new dataset, the system starts by comparing the
characteristics of that dataset with past performance of ML workflows on similar datasets
(using a set of simple, statistical and information-theoretic metafeatures and k-NN). After
this warm start, the optimization procedure is carried out by SMAC. Finally, the system
also has the ability to form ensembles from models evaluated during the optimization.
2.4 Ensemble focused autoML
Some attempts have been made in creating autoML systems that are able to provide sug-
gestions of ensembles. Again, and probably the most notorious one, is auto-skelarn, as
described above. Another proposal on this matter is made on (Lacoste et al., 2014), where
the authors optimize ensembles based on bootstrapping the validation sets to simulate mul-
tiple independent hyperparameter optimization processes and combined the results with
the agnostic Bayesian combination method.
One of the problems with the two approaches described is that the generation of the
ensemble is rather ad hoc. That means, it does not take into account important proper-
ties that are known to affect the performance of ensembles. Specifically, complementarity
between among models and the overall diversity of the ensemble. We argue that ensemble
generation must take into account these concepts and we should avoid a simple averaging
of predictions from several models. For instance, in (Lévesque et al., 2016), the authors use
Bayesian optimization directly to estimate which prediction model is the best candidate
to be added to the ensemble. In this paper, we use as basis a well known and studied
4
autoBagging: Learning to Rank Bagging Workflows with Metalearning
ensemble learning algorithm (bagging) and we generate ensembles that make use of several
EL techniques proposed in the literature.
3. Bagging Workflows
The Ensemble Learning (EL) literature can be split into three main topics: ensemble gener-
ation, ensemble pruning and ensemble integration (Mendes-Moreira et al., 2012). It can also
be seen as a process of three phases: 1) generating an accurate and diverse set of models; 2)
prune the ensemble in order to decrease its size and attempt to improve its generalization
ability; and finally, 3) select a function to aggregate the predictions of each single model of
the ensemble. This can be achieved by a static (that does not take into account the char-
acteristics of the test instance, such as stacking) or dynamic method (that chooses different
subsets of models according to the characteristics of the test instance).
Bagging, one of the most popular EL algorithms, can also be decomposed at the light of
the structure that we described above (Breiman, 1996). Generically, given a training data
set, a sample with replacement (a bootstrap sample) of the training instances is generated.
The process is repeated k times and k samples of the training instances are obtained.
Then, from each sample, a model is generated by applying a learning algorithm. In terms
of aggregating the outputs of the base learners and building the ensemble, typically, bagging
uses two of the most common ones: voting for classification (the most voted label is the
final prediction) and averaging for regression (the predictions of all the base learners are
averaged to form the ensemble prediction).
In this paper, we introduce the concept of a bagging workflow, that can also be decom-
posed into three components: generation, pruning and integration. The following subsec-
tions describe some of the methods that can be used within each of these components.
3.1 Generation
As mentioned before, typically, bagging algorithms generate ensembles by applying a learn-
ing algorithm to bootstrap samples of the training data. However, there are some hyperpa-
rameters that can be taken into account to exploit the versatility of bagging, such as:
• the sampling strategy. Although bootstrap sampling is by far the most common
sampling strategy in bagging, there are also reports of interesting results using sub-
sampling without replacement and sampling of random subspaces (Ho, 1998).
• the learning algorithm used to generated the models. Decision trees and neural net-
works are among the favourite, given their unstable learning property (Breiman, 1996).
• how many models to generate. On the seminal paper in which bagging was intro-
duced (Breiman, 1996), the author claimed that 50 or 100 single models should be
enough to achieve good results. However, more recent studies showed that this prob-
lem is highly dataset dependent (Hernández-Lobato et al., 2013).
3.2 Pruning
Given the widely spread use among data science practitioners, bagging is also one the most
studied algorithms (Bauer and Kohavi, 1999). One of the discoveries made by researchers is
5
Fábio Pinto, V́ıtor Cerqueira, Carlos Soares and João Mendes-Moreira
that an efficient pruning of a bagging ensemble could to a smaller ensemble size and also to
generalization improvements (Zhou et al., 2002). This has led a stream of research focused
specifically on pruning techniques for bagging ensembles. Since a detailed overview of these
techniques would be out of scope of this paper, we refer the reader to some important papers
in the field (Mart́ınez-Muñoz et al., 2009; Qian et al., 2015). Essentially, these techniques
combine the concepts of accuracy and diversity in ensemble learning to search for a subset
of models that guarantees the same performance of the full ensemble or even improves it.
This search procedure is often led by some heuristic or an optimization algorithm.
Therefore, from the ensemble pruning phase of constructing bagging workflows, two
hyperparameters must be considered:
• the pruning method to be used.
• the percentage of models that should be pruned. Again, studies have shown that this
a highly dataset dependent hyperparameter (Hernández-Lobato et al., 2013).
3.3 Integration
As mentioned before, the method regarding ensemble integration are split into two groups:
static and dynamic. In the former, the weights assigned to each model in the ensemble are
a constant value; in the later, the weights vary according to the instance to be predicted.
In the dynamic group, we distinguish between methods for selection (when a single model
is selected) or combination of models (when more that one model can be selected).
Regarding static methods, the most well known is stacking (Wolpert, 1992). Regarding
dynamic methods, again, research has shown that this hyperparameter is highly problem
dependent (Britto et al., 2014). A large empirical comparison of these techniques can be
found in (Pinto et al., 2016a). A full description of these techniques is out of scope of this
paper so we refer the reader to the original papers.
4. autoBagging: Learning to Rank Bagging Workflows
In this Section we present autoBagging. Although for this paper we focused on provid-
ing ranking of bagging workflows, we believe that the approach is generic for the algo-
rithm/workflow ranking in ML. Therefore, we describe the method from a generic per-
spective and we provide more specific details on the application to bagging workflows in
Section 5.
We recall Figure 1 for a brief overview of the method. We start by describing the learning
approach and then how we collected the metadata, both metafeatures and metatarget, to
be able to learn at the meta-level.
4.1 Learning Approach
We approach the problem of algorithm selection as a learning to rank problem (Liu, 2009).
Lets take D as the dataset set and A as the algorithm set. Y = {1, 2, ..., l} is the label set,
where each value represents a relevance score, which represents the relative performance of
a given algorithm. Therefore, l ≺ l − 1 ≺ ... ≺ 1, where ≺ represents an order relationship.
6
autoBagging: Learning to Rank Bagging Workflows with Metalearning
Furthermore, Dm = {d1, d2, ..., dm} is the set of datasets for training and di is the i-th
dataset, Ai = {ai,1, ai,2, ..., ai,ni} is the set of algorithms associated with dataset di and
yi = {yi,1, yi,2, ..., yi,ni} is the set of labels associated with dataset di, where ni represents
the sizes of Ai and yi; ai,j represents the j-th algorithm in Ai; and yi,j ∈ Y represents
the j-th label in yi, representing the relevance score of ai,j with respect to di. Finally, the
meta-dataset is denoted as S = {(di, Ai),yi}mi=1.
We use metalearning to generate the metafeature vectors xi,j = φ(di, ai,j) for each
dataset-algorithm pair, where i = 1, 2, ...,m; j = 1, 2, ..., ni and φ represents the metafea-
tures extraction functions. These metafeatures can describe di, ai,j or even the relationship
between both. Therefore, taking xi = {xi,1, xi,2, ..., xi,ni} we can represent the meta-dataset
as S′ = {(xi,yi)}mi=1.
Our goal is to train a meta ranking model f(d, a) = f(x) that is able to assign a relevance
score to a given new dataset-algorithm pair d and a, given x.
4.2 Metafeatures
We approach the problem of generating metafeatures to characterize d and a with the aid of
a framework for systematic metafeatures generation (Pinto et al., 2016b). Essentially, this
framework regards a metafeature as a combination of three components: meta-function,
a set of input objects and a post-processing function. The framework establishes how to
systematically generate metafeatures from all possible combinations of object and post-
processing alternatives that are compatible with a given meta-function. Thus, the develop-
ment of metafeatures for a MtL approach simply consists of selecting a set of meta-functions
(e.g. entropy, mutual information and correlation) and the framework systematically gen-
erates the set of metafeatures that represent all the information that can be obtained with
those meta-functions from the data.
For this task in particular, we selected a set of meta-functions that are able to charac-
terize the datasets as completely as possible (measuring information regarding the target
variable, the categorical and numerical features, etc) the algorithms and the relationship
between the datasets and the algorithms (who can be seen as landmarkers (Pfahringer et al.,
2000)). Therefore, the set of meta-functions used is:
• Skewness
• Pearson’s correlation
• Maximal Information Coefficient (MIC (Reshef et al., 2011))
• Entropy
• Mutual Information
• Eta squared (from ANOVA test)
• R value of class overlap (Oh, 2011)
• Rank of each algorithm (Brazdil et al., 2008)
7
Fábio Pinto, V́ıtor Cerqueira, Carlos Soares and João Mendes-Moreira
Each meta-function is used to systematically measure information from all possible
combination of input objects available for this task. We defined the input objects available
as:
• discrete descriptive data of the datasets
• continuous descriptive data of the datasets
• discrete output data of the datasets
• five sets of predictions (discrete predicted data) for each dataset (naive bayes, decision
tree with depth 1, 2 and 3, and majority class)
For instance, if we take the example of using Entropy as meta-function, it is possible to
measure information in discrete descriptive data, discrete output data and discrete predicted
data (if the base-level problem is a classification task). After computing the entropy of all
these objects, it might be necessary to aggregate the information in order to keep the
tabular form of the data. Take for the example the aggregation required for the entropy
values computed for each discrete attribute. Therefore, we choose a palette of aggregation
functions to capture several dimensions of these values and minimize the loss of information
by aggregation. In that sense, the post-processing functions chosen were:
• average
• maximum
• minimum
• standard deviation
• variance
• histogram binning
Given these meta-functions, the available input objects and post-processing functions,
we are able to generate a set of 146 metafeatures. To this set we add eight metafeatures: the
number of examples of the dataset, the number of attributes and the number of classes of
the target variable; and five landmarkers (the ones already described above) estimated using
accuracy as error measure. Furthermore, we add four metafeatures to describe the compo-
nents of each workflow: the number of trees, the pruning method, the pruning cut point
and the dynamic selection method. In total, autoBagging uses a set of 158 metafeatures.
4.3 Metatarget
In order to be able to learn a ranking meta-model f(d, a), we need to compute a metatarget
that is able to assign a score z to each dataset-algorithm pair (d, a), so that:
F : (D,A)→ Z (1)
where F is the ranking meta-models set and Z is the metatarget set.
8
autoBagging: Learning to Rank Bagging Workflows with Metalearning
To compute z, we use a cross validation error estimation methodology (we use a 4
fold cross validation in the experiments reported in this paper, Section 5), in which we
estimate the performance of each bagging workflow for each dataset using Cohen’s kappa
score (Cohen, 1960). On top of the estimated kappa score, for each dataset, we rank the
bagging workflows. This ranking is the final form of the metatarget and it is then used for
learning the meta-model.
5. Experiments
In this Section we describe the experiments performed to understand and evaluate auto-
Bagging. We also provide a brief exploratory analysis of the metadata collected from the
experiments that are particularly interesting to understand some of the EL methods used.
5.1 Experimental Setup
Our experimental setup comprises 140 classification datasets extracted from the OpenML
platform for collaborative machine learning (Vanschoren et al., 2014). We limited the
datasets extracted to a maximum of 5000 instances, a minimum of 300 instances and a
maximum of 1000 attributes, in order to speed up the experiments and exclude datasets
that could be too small for some of bagging workflows that we wanted to test.
Regarding bagging workflows, taking into account all the hyperparameters described in
Section 3 would result in a computational cost too large for our resources. Therefore, we
limited the hyperparameters of the bagging workflows to four: number of models gener-
ated, pruning method, pruning cut point and dynamic selection method. Specifically, each
hyperparameter could take the following values:
• Number of models: 50, 100 or 200. Decision trees was chosen as learning algorithm.
• Pruning method: Margin Distance Minimization(MDSQ) (Mart́ınez-Muñoz et al.,
2009), Boosting-Based Pruning (BB) (Mart́ınez-Muñoz et al., 2009) or none.
• Pruning cut point: 25%, 50% or 75%.
• Dynamic integration method: Overall Local Accuracy (OLA), a dynamic selection
method (Woods et al., 1997); K-nearest-oracles-eliminate (KNORA-E) (Ko et al.,
2008), a dynamic combination method; and none.
All the values of the hyperparameters described above generated 63 valid combinations.
We tested these bagging workflows in the datasets extracted from OpenML with 4-fold cross
validation, using Cohen’s kappa as evaluation metric.
We used the XGBoost learning to rank implementation for gradient boosting of decision
trees (Chen and Guestrin, 2016) to learn the metamodel as described in Section 4. The
decision tree implementation from this library has a very elegant way of dealing with missing
values. Essentially, the tree splitting functionality assigns an instance with missing values
to a default direction and then learns from the data the optimal default direction. This is
particularly important for metalearning since the number of missing values is often quite
high in these dataset (e.g., attribute correlation cannot be measured in a dataset without
numeric attributes, which results in a missing value).
9
Fábio Pinto, V́ıtor Cerqueira, Carlos Soares and João Mendes-Moreira
As baselines, at the base-level, we use 1) bagging with 100 decision trees 2) the average
rank method, which basically is a model that always predicts the bagging workflow with
best average rank in the meta training set and the 3) oracle, an ideal model that always
selects the best bagging workflow for each dataset. As for the meta-level, we use as baseline
the average rank method.
As evaluation methodology, we use an approach similar to the leave-one-out methodol-
ogy. However, each test fold consists of all the algorithm-dataset pairs associated with the
test dataset. The remaining examples are used for training purposes. The evaluation metric
at the meta-level is the Mean Average Precision at 10 (MAP@10) and at the base-level, as
mentioned before, we use Cohen’s kappa. The methodology proposed by (Demšar, 2006)
was used for statistical validation of the results.
For the purpose of reproducibility and generalizability, autoBagging is publicly available
as an R package.
5.2 Exploratory Metadata Analysis
Given the rich metadata collected from the experiments that we carried out, we proceed to
draw some insights about the datasets and the workflows that we experimented with.
We can see by analysing Figure 2 that the range of kappa values for each dataset varies
a lot. This is expected given the No Free Lunch theorem, that states that there is no one
model that works best for every problem and ”two algorithms are equivalent when their
performance is averaged across all possible problems” (Wolpert, 1996). Even though all the
models that we experimented with belong to the same family (bagging of decision trees), the
pruning and dynamic integration components enable to generate very different predictive
models. This is indicative that ranking these bagging workflows for each dataset is not an
easy learning task.
Figure 3 shows the boxplots of the ranking scores collected for each dataset, ordered by
average ranking. We can take some insights about the bagging workflows performance from
this graph:
• on average, the bagging workflows that make use of BB pruning and KNORA-E as
dynamic integration method seem to achieve better results
• in terms of pruning cut point, it seems that BB pruning works better with a large
pruning cut point (e.g., 75%) than MDSQ
• the bagging workflows that do not make use of any kind of dynamic integration method
are worse on average than the ones that do
• both the top and the worst bagging workflows are outliers for some dataset in terms
of performance
5.3 Results
Figure 4 shows a loss curve, relating the average loss in terms of performance with the
number of workflows tested following the ranking suggested by each method. The loss is
calculated as the difference between the performance of the best algorithm ranked by the
10
autoBagging: Learning to Rank Bagging Workflows with Metalearning
0.00
0.25
0.50
0.75
1.00
dataset
ka
pp
a
Figure 2: Boxlplots of the kappa values collected for each dataset from evaluating the per-
formance of each bagging workflow.
method in comparison with the ground truth ranking. The loss for all datasets is then
averaged for aggregation purposes. We can see, as expected, that the average loss decreases
for both methods as the number of workflows tested increases.
In terms of comparison between autoBagging and the Average Rank method, it is pos-
sible to visualize that autoBagging shows a superior performance for all the values of the
x axis. Interestingly, this result is particularly noticeable in the first tests. For instance, if
we test only the top 1 workflow recommended by autoBagging, on average, the kappa loss
is half of the one we should expect from the suggestion made by the average rank method.
We evaluated this results to assess their statistical significance using Demšar’s method-
ology. Figures 5 and 6 show the Critical Difference (CD) diagrams for both the meta and
base-level.
At the meta-level, using MAP@10 as evaluation metric, autoBagging presents a clearly
superior performance in comparison with the Average Rank. The difference is statistically
significant, as one can see in the CD diagram. This result is in accordance with performance
that visualized in Figure 4 for both methods.
At the base-level, we compared autoBagging with three baselines, as mentioned before:
bagging with 100 decision trees, the Average Rank method and the oracle. We test three
versions of autoBagging, taking the top 1, 3 and 5 bagging workflows ranked by the meta-
model. For instance, in autoBagging@3, we test the top 3 bagging workflows ranked by the
meta-model and we choose the best.
11
Fábio Pinto, V́ıtor Cerqueira, Carlos Soares and João Mendes-Moreira
0
20
40
60
20
0b
b0
.7
5k
no
ra
-e
10
0b
b0
.7
5k
no
ra
-e
20
0b
b0
.2
5k
no
ra
-e
20
0b
b0
.5
kn
or
a-
e
10
0b
b0
.5
kn
or
a-
e
50
bb
0.
75
kn
or
a-
e
20
0m
ds
q0
.2
5k
no
ra
-e
20
0n
on
en
on
ek
no
ra
-e
10
0b
b0
.2
5k
no
ra
-e
20
0b
b0
.7
5o
la
10
0b
b0
.7
5o
la
20
0m
ds
q0
.5
kn
or
a-
e
20
0b
b0
.5
ol
a
20
0b
b0
.2
5o
la
10
0n
on
en
on
ek
no
ra
-e
10
0m
ds
q0
.2
5k
no
ra
-e
50
bb
0.
5k
no
ra
-e
10
0b
b0
.5
ol
a
50
bb
0.
75
ol
a
50
bb
0.
25
kn
or
a-
e
10
0b
b0
.2
5o
la
10
0m
ds
q0
.5
kn
or
a-
e
50
bb
0.
5o
la
20
0m
ds
q0
.7
5k
no
ra
-e
50
m
ds
q0
.2
5k
no
ra
-e
50
no
ne
no
ne
kn
or
a-
e
50
bb
0.
25
ol
a
10
0m
ds
q0
.7
5k
no
ra
-e
50
m
ds
q0
.5
kn
or
a-
e
50
m
ds
q0
.7
5k
no
ra
-e
20
0m
ds
q0
.7
5o
la
20
0m
ds
q0
.2
5o
la
50
m
ds
q0
.7
5o
la
20
0m
ds
q0
.5
ol
a
10
0m
ds
q0
.5
ol
a
50
m
ds
q0
.5
ol
a
10
0m
ds
q0
.2
5o
la
10
0m
ds
q0
.7
5o
la
50
m
ds
q0
.2
5o
la
20
0n
on
en
on
eo
la
10
0n
on
en
on
eo
la
50
no
ne
no
ne
ol
a
50
bb
0.
75
no
ne
10
0b
b0
.7
5n
on
e
50
bb
0.
5n
on
e
20
0b
b0
.7
5n
on
e
10
0b
b0
.5
no
ne
50
bb
0.
25
no
ne
50
m
ds
q0
.7
5n
on
e
20
0b
b0
.5
no
ne
10
0b
b0
.2
5n
on
e
50
m
ds
q0
.5
no
ne
50
m
ds
q0
.2
5n
on
e
50
no
ne
no
ne
no
ne
10
0m
ds
q0
.7
5n
on
e
20
0b
b0
.2
5n
on
e
10
0m
ds
q0
.5
no
ne
10
0m
ds
q0
.2
5n
on
e
10
0n
on
en
on
en
on
e
20
0m
ds
q0
.7
5n
on
e
20
0m
ds
q0
.5
no
ne
20
0m
ds
q0
.2
5n
on
e
20
0n
on
en
on
en
on
e
workflow
ra
nk
W
or
kf
lo
w
Figure 3: Boxlplots of the ranking scores collected for each bagging workflow. For in-
stance, 200bb0.75knora-e represents a bagging workflow with 200 trees, to which
boosting-based pruning is applied with a 75% cut point and KNORA-E is used
as dynamic integration technique.
Starting by the tail of the CD diagram, both the Average Rank method and autoBag-
ging@1 show a superior performance than Bagging with 100 decision trees. Furthermore,
autoBagging@1 also shows a superior performance than the Average Rank method. This
result confirms the indications that we visualized in Figure 4.
The CD diagram shows also autoBagging@3 and autoBagging@5 have a similar perfor-
mance. However, and we must highlight this results, autoBagging@5 shows a performance
that is not statistically different from the oracle. This is extremely promising since it shows
that the performance of autoBagging excels if the user is able to test the top 5 bagging
workflows ranked by the system.
5.4 Discussion
We decided to not include time in the experiments since autoBagging execution time only
depends on the computation of metafeatures. Given the nature of these metafeatures, such
as entropy or mutual information, the computation is extremely fast (no more than a couple
of minutes for the largest datasets used in the experiments).
Figure 7 shows the relative importance of the top 30 most important metafeatures. It
is clear that the most informative metafeatures are the ones generated using the rank of
each workflow in the meta-training set as meta-function. Given that these metafeatures do
12
autoBagging: Learning to Rank Bagging Workflows with Metalearning
0.00
0.02
0.04
0.06
0.08
0 20 40 60
Number of Tests
K
ap
pa
 L
os
s 
%
Method
Autobagging
Average Rank
Figure 4: Loss curve comparing autoBagging with the Average Rank baseline.
CD
AutoBagging Average Rank
1 2
Figure 5: Critical Difference diagram (with α = 0.05) of the experiments at the meta-level.
not vary that much from dataset to dataset, we can assume that they are very important
to characterize the bagging workflows. On the other hand, the remaining metafeatures are
critical for the ability of the meta-model to generalize for all datasets. Metafeatures such
as class.entropy, dstump.landmarker d1.entropy and r value.hist1 are also among the most
informative metafeatures.
6. Conclusion and Future Work
This paper presents autoBagging, an autoML system that makes use of a learning to rank ap-
proach and metalearning to automatically suggest a bagging ensemble specifically designed
for a given dataset. We tested the approach on 140 classification datasets and the results
show that autoBagging is clearly better than the baselines to which was compared. In fact,
if the top five workflows suggested by autoBagging are tested, results show that the system
13
Fábio Pinto, V́ıtor Cerqueira, Carlos Soares and João Mendes-Moreira
4 5 6
BaggingOracle
AutoBagging@1
CD
3
AverageRank
21
AutoBagging@5
AutoBagging@3
Figure 6: Critical Difference diagram (with α = 0.05) of the experiments at the base-level.
hist.attr.correlation.bin10
maxRankWorkflow
eta.sd
var.attr.entropy
n.examples
eta.min
avg.abs.skewness
eta.max
nb.landmarker.mutual.information
min.abs.skewness
nb.landmarker
r_value.hist10
dstump.landmarker_d2.entropy
minRankWorkflow
r_value.hist1
dstump.landmarker_d1.entropy
histRankWorkflow.bin5
histRankWorkflow.bin6
class.entropy
histRankWorkflow.bin7
histRankWorkflow.bin4
histRankWorkflow.bin1
histRankWorkflow.bin9
histRankWorkflow.bin3
histRankWorkflow.bin8
histRankWorkflow.bin10
varRankWorkflow
histRankWorkflow.bin2
sdRankWorkflow
avgRankWorkflow
Relative importance
0.0 0.2 0.4 0.6 0.8 1.0
Figure 7: Top 30 most important metafeatures for the XGboost meta-model measured using
Gain, which represents the relative contribution of the corresponding feature to
the model calculated by taking each feature’s contribution for each tree in the
model.
achieves a performance that is not statistically different from the oracle, a method that
systematically selects the best workflow for each dataset. For the purpose of reproducibility
and generalizability, autoBagging is publicly available as an R package.
As future work, we plan to further improve the experimental setup of autoBagging by
comparing it with state-of-the-art systems such as auto-sklearn and the hyperband method.
Furthermore, we plan to study how we can use bayesian optimization to further improve the
final ensemble, always taking into account concepts such as diversity and complementarity
between models to design the final ensemble.
14
autoBagging: Learning to Rank Bagging Workflows with Metalearning
References
Eric Bauer and Ron Kohavi. An empirical comparison of voting classification algorithms:
Bagging, boosting, and variants. Machine learning, 36(1):105–139, 1999.
Pavel Brazdil, Christophe Giraud Carrier, Carlos Soares, and Ricardo Vilalta. Metalearning:
Applications to data mining. Springer Science & Business Media, 2008.
Pavel B Brazdil, Carlos Soares, and Joaquim Pinto Da Costa. Ranking learning algorithms:
Using ibl and meta-learning on accuracy and time results. Machine Learning, 50(3):
251–277, 2003.
Leo Breiman. Bagging predictors. Machine learning, 24(2):123–140, 1996.
Alceu S Britto, Robert Sabourin, and Luiz ES Oliveira. Dynamic selection of classifiersa
comprehensive review. Pattern Recognition, 47(11):3665–3680, 2014.
Tianqi Chen and Carlos Guestrin. Xgboost: A scalable tree boosting system. In Proceedings
of the 22Nd ACM SIGKDD International Conference on Knowledge Discovery and Data
Mining, KDD ’16, pages 785–794. ACM, 2016. ISBN 978-1-4503-4232-2. doi: 10.1145/
2939672.2939785.
Jacob Cohen. A coefficient of agreement for nominal scales. Educational and psychological
measurement, 20(1):37–46, 1960.
Janez Demšar. Statistical comparisons of classifiers over multiple data sets. Journal of
Machine learning research, 7(Jan):1–30, 2006.
Manuel Fernández-Delgado, Eva Cernadas, Senén Barro, and Dinani Amorim. Do we need
hundreds of classifiers to solve real world classification problems? Journal of Machine
Learning Research, 15(1):3133–3181, 2014.
Matthias Feurer, Aaron Klein, Katharina Eggensperger, Jost Springenberg, Manuel Blum,
and Frank Hutter. Efficient and robust automated machine learning. In Advances in
Neural Information Processing Systems, pages 2962–2970, 2015.
Christophe Giraud-Carrier. The data mining advisor: meta-learning at the service of prac-
titioners. In Machine Learning and Applications, 2005. Proceedings. Fourth International
Conference on, pages 7–pp. IEEE, 2005.
Daniel Hernández-Lobato, Gonzalo Mart́ıNez-MuñOz, and Alberto Suárez. How large
should ensembles of classifiers be? Pattern Recognition, 46(5):1323–1336, 2013.
Tin Kam Ho. The random subspace method for constructing decision forests. IEEE trans-
actions on pattern analysis and machine intelligence, 20(8):832–844, 1998.
Hamel Husain. Automated machine learning:a paradigm shift that accelerates data
scientist productivity at airbnb. https://medium.com/airbnb-engineering/
automated-machine-learning-a-paradigm-shift-that-accelerates-data-scientist-productivity-airbnb-f1f8a10d61f8,
2017.
15
Fábio Pinto, V́ıtor Cerqueira, Carlos Soares and João Mendes-Moreira
Frank Hutter, Holger Hoos, and Kevin Leyton-Brown. Sequential model-based optimization
for general algorithm configuration. Learning and Intelligent Optimization, pages 507–
523, 2011.
Albert HR Ko, Robert Sabourin, and Alceu Souza Britto Jr. From dynamic classifier
selection to dynamic ensemble selection. Pattern Recognition, 41(5):1718–1731, 2008.
Alexandre Lacoste, Hugo Larochelle, Mario Marchand, and François Laviolette. Sequen-
tial model-based ensemble optimization. In Proceedings of the Thirtieth Conference on
Uncertainty in Artificial Intelligence, pages 440–448. AUAI Press, 2014.
Rui Leite and Pavel Brazdil. Predicting relative performance of classifiers from samples.
In Proceedings of the 22nd international conference on Machine learning, pages 497–503.
ACM, 2005.
Julien-Charles Lévesque, Christian Gagné, and Robert Sabourin. Bayesian hyperparameter
optimization for ensemble learning. arXiv preprint arXiv:1605.06394, 2016.
Lisha Li, Kevin Jamieson, Giulia DeSalvo, Afshin Rostamizadeh, and Ameet Talwalkar. Hy-
perband: A novel bandit-based approach to hyperparameter optimization. arXiv preprint
arXiv:1603.06560, 2016.
Tie-Yan Liu. Learning to rank for information retrieval. Foundations and Trends R© in
Information Retrieval, 3(3):225–331, 2009.
Gonzalo Mart́ınez-Muñoz, Daniel Hernández-Lobato, and Alberto Suárez. An analysis of
ensemble pruning techniques based on ordered aggregation. IEEE Transactions on Pat-
tern Analysis and Machine Intelligence, 31(2):245–259, 2009.
João Mendes-Moreira, Carlos Soares, Aĺıpio Mário Jorge, and Jorge Freire De Sousa. En-
semble approaches for regression: A survey. ACM Computing Surveys (CSUR), 45(1):10,
2012.
Sejong Oh. A new dataset evaluation method based on category overlap. Computers in
Biology and Medicine, 41(2):115–122, 2011.
Bernhard Pfahringer, Hilan Bensusan, and Christophe Giraud-Carrier. Tell me who can
learn you and i can tell you who you are: Landmarking various learning algorithms.
In Proceedings of the 17th international conference on machine learning, pages 743–750,
2000.
Fábio Pinto, Carlos Soares, and João Mendes-Moreira. Chade: Metalearning with classifier
chains for dynamic combination of classifiers. In Joint European Conference on Machine
Learning and Knowledge Discovery in Databases, pages 410–425. Springer, 2016a.
Fábio Pinto, Carlos Soares, and João Mendes-Moreira. Towards automatic generation of
metafeatures. In Pacific-Asia Conference on Knowledge Discovery and Data Mining,
pages 215–226. Springer, 2016b.
16
autoBagging: Learning to Rank Bagging Workflows with Metalearning
Chao Qian, Yang Yu, and Zhi-Hua Zhou. Pareto ensemble pruning. In Twenty-Ninth AAAI
Conference on Artificial Intelligence, 2015.
David N Reshef, Yakir A Reshef, Hilary K Finucane, Sharon R Grossman, Gilean McVean,
Peter J Turnbaugh, Eric S Lander, Michael Mitzenmacher, and Pardis C Sabeti. Detecting
novel associations in large data sets. science, 334(6062):1518–1524, 2011.
Quan Sun and Bernhard Pfahringer. Pairwise meta-rules for better meta-learning-based
algorithm ranking. Machine learning, 93(1):141–161, 2013.
Chris Thornton, Frank Hutter, Holger H Hoos, and Kevin Leyton-Brown. Auto-weka:
Combined selection and hyperparameter optimization of classification algorithms. In
Proceedings of the 19th ACM SIGKDD international conference on Knowledge discovery
and data mining, pages 847–855. ACM, 2013.
Joaquin Vanschoren, Jan N Van Rijn, Bernd Bischl, and Luis Torgo. Openml: networked
science in machine learning. ACM SIGKDD Explorations Newsletter, 15(2):49–60, 2014.
David H Wolpert. Stacked generalization. Neural networks, 5(2):241–259, 1992.
David H Wolpert. The lack of a priori distinctions between learning algorithms. Neural
computation, 8(7):1341–1390, 1996.
Kevin Woods, W Philip Kegelmeyer Jr, and Kevin Bowyer. Combination of multiple clas-
sifiers using local accuracy estimates. Transactions on Pattern Analysis and Machine
Intelligence, 19(4):405–410, 1997.
Zhi-Hua Zhou, Jianxin Wu, and Wei Tang. Ensembling neural networks: many could be
better than all. Artificial intelligence, 137(1-2):239–263, 2002.
17

