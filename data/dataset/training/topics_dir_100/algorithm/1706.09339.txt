Lossy Kernels for Connected Dominating Set on
Sparse Graphs
Eduard Eiben1, Mithilesh Kumar2, Amer E. Mouawad2, and Fahad
Panolan2
1 Algorithms and Complexity Group, TU Wien, Austria. eiben@ac.tuwien.ac.at
2 Department of Informatics, University of Bergen, Norway.
{mithilesh.kumar,a.mouawad,fahad.panolan}@ii.uib.no
Abstract
In standard kernelization algorithms, the usual goal is to reduce, in polynomial time, an instance
(I, k) of a parameterized problem to an equivalent instance (I ‚Ä≤, k‚Ä≤) of size bounded by a function
in k. One of the central problems in this area, whose investigation has led to the development of
many kernelization techniques, is the Dominating Set problem. Given a graph G and k ‚àà N,
Dominating Set asks for a subset D of k vertices such that every vertex in G is either in D or
has a neighbor in D. It is well known that Dominating Set is W[2]-hard when parameterized by
k. But it admits a linear kernel on graphs of bounded expansion and a polynomial kernel on Kd,d-
free graphs, for a fixed constant d. In contrast, the closely related Connected Dominating
Set problem (where G[D] is required to be connected) is known not to admit such kernels unless
NP ‚äÜ coNP/poly. We show that even though the kernelization complexity of Dominating Set
and Connected Dominating Set diverges on sparse graphs this divergence is not as extreme
as kernelization lower bounds suggest. To do so, we study the Connected Dominating Set
problem under the recently introduced framework of lossy kernelization. In this framework, for
Œ± > 1, an Œ±-approximate bikernel (kernel) is a polynomial-time algorithm that takes as input an
instance (I, k) and outputs an instance (I ‚Ä≤, k‚Ä≤) of a problem (the same problem) such that, for
every c > 1, a c-approximate solution for the new instance can be turned into a cŒ±-approximate
solution of the original instance in polynomial time. Moreover, the size of (I ‚Ä≤, k‚Ä≤) is bounded by
a function of k and Œ±. We show that Connected Dominating Set admits an Œ±-approximate
bikernel on graphs of bounded expansion and an Œ±-approximate kernel on Kd,d-free graphs, for
every Œ± > 1. ForKd,d-free graphs we obtain instances of size kO(
d2
Œ±‚àí1 ) while for bounded expansion
graphs we obtain instances of size O(f(Œ±)k) (i.e, linear in k), where f(Œ±) is a computable function
depending only on Œ±.
1998 ACM Subject Classification G.2.2 Graph Algorithms, I.1.2 Analysis of Algorithms
Keywords and phrases Kernelization, Lossy Kernels, Connected Dominating Set, Sparse Graph
Classes
Digital Object Identifier 10.4230/LIPIcs...
1 Introduction
Parameterized complexity and (lossy) kernelization As many real-world computational
problems are NP-hard, the first question an algorithm designer should answer when faced
with large instances of such problems is whether polynomial-time preprocessing can be
applied. Ideally, these preprocessing routines should run very fast (at least faster than the
algorithms for solving the problem) and little to no loss of information about solutions
should occur. In the past decade or so, progress in parameterized complexity [12] provided a
¬© Eduard Eiben, Mithilesh Kumar, Amer E. Mouawad, Fahad Panolan;
licensed under Creative Commons License CC-BY
Leibniz International Proceedings in Informatics
Schloss Dagstuhl ‚Äì Leibniz-Zentrum f√ºr Informatik, Dagstuhl Publishing, Germany
ar
X
iv
:1
70
6.
09
33
9v
1 
 [
cs
.D
S]
  2
8 
Ju
n 
20
17
XX:2 Lossy Kernels for Connected Dominating Set
robust mathematical framework to analyze the performance of preprocessing routines. In
parameterized complexity, we consider instances (I, k) of a parameterized problem Œ† ‚äÜ Œ£‚àó√óN,
where Œ£ is a finite alphabet. Typically, I is an instance of some computational problem, and
k denotes the parameter which reflects some structural property of the instance. The natural
parameter is a bound on the size of an optimal solution. A parameterized problem is said to
admit a kernel if there is a polynomial-time algorithm, called a kernelization algorithm, that
reduces the input instance down to an instance whose size is bounded by a function f(k) in
k, while preserving the answer. If f(k) is a linear, polynomial, or exponential function of
k, we say that this is a linear, polynomial, or exponential kernel respectively. Over the last
decade, kernelization has become a very active field of study, especially with the development
of complexity-theoretic tools to show that a problem is not likely to admit a polynomial
kernel [4, 14, 19], or a kernel of a specific size [9, 10, 25].
Unfortunately, going back to our real-world problem instances, it turns out that the notion
of polynomial kernels has a few limitations. In addition to the fact that many typical problems
have been shown not likely to admit polynomial kernels, the formal definition of kernelization
does not play well with approximation algorithms. Indeed, given anything but an optimal
solution to (I ‚Ä≤, k‚Ä≤), it is (for many problems) impossible to draw any conclusion about the
original instance. To address these issues, Lokshtanov et al. [29] developed the framework of
lossy kernelization. Intuitively, the framework combines notions from approximation and
kernelization algorithms to allow for approximation preserving kernels. In this framework,
for Œ± > 1, an Œ±-approximate kernel is a polynomial-time algorithm that takes as input
an instance (I, k) and outputs an instance (I ‚Ä≤, k‚Ä≤) of the same problem such that size of
(I ‚Ä≤, k‚Ä≤) is upper bounded by f(k), for a function f independent of |I|, and for every c > 1, a
c-approximate solution for the new instance can be turned into a cŒ±-approximate solution
of the original instance in polynomial time. In the case of an Œ±-approximate bikernel, the
reduced instance need not be an instance of the same problem. For formal definitions about
lossy kernelization see Section 2.2.
Domination, kernelization, and our results Both Dominating Set and Connected
Dominating Set are NP-hard even on very restricted graph classes, e.g. planar graphs of
bounded degree [21]. Naturally, the complexity of the problems has been extensively studied
under different algorithmic frameworks, notably approximation algorithms and parameterized
complexity. In parameterized complexity, Dominating Set and Connected Dominating
Set are standard examples of a W[2]-complete problem. This is widely believed to exclude
the possibility of having FPT algorithms, thereby no kernels whatsoever. Therefore, attempts
have been made to find graph classes on which the results are not so discouraging. This line
of research has led to very fruitful and insightful discoveries in parameterized complexity in
general and in kernelization in particular. For Dominating Set, it all started with the linear
kernel on planar graphs of Alber et al. [1]. Next, a polynomial kernel on H-topological-minor
free graphs was given by Alon and Gutner [2]. More recent efforts have led to linear kernels
on bounded genus graphs [5], apex-minor-free graphs [16], H-minor-free graphs [17], and
H-topological-minor-free graphs [18]. Philip et al. [33] obtained a kernel of size O(k(d+1)2)
on d-degenerate graphs, for constant d, and more generally a kernel of size O(kmax(i2,j2)) on
graphs excluding the complete bipartite graph Ki,j as a subgraph. Drange et al. [13] provided
a linear kernel for graphs of bounded expansion and an O(k1+Œ¥)-size kernel for nowhere-dense
graphs, for every constant Œ¥ > 0. On the lower bounds side, Cygan et al. [7] have shown that
the existence of an O(k(d‚àí1)(d‚àí3)‚àí) kernel,  > 0, for Dominating Set on d-degenerate
graphs would imply NP ‚äÜ coNP/poly. For the Connected Dominating Set problem,
E. Eiben, M. Kumar, A.E. Mouawad, F. Panolan XX:3
which admits an O(logn)-approximation algorithm [22], linear kernels are only known for
planar [27] and H-topological-minor-free graphs [18]. Polynomial kernels are excluded already
for graphs of bounded degeneracy [8] and for graphs of bounded expansion [13]. In this paper
we prove the following theorem.
I Theorem 1.1. For every  > 0, Connected Dominating Set, parameterized by solution
size, admits a (1 + )-approximate kernel with kO( d
2
 ) vertices on Kd,d-free graphs and a
(1 + )-approximate bikernel with O(f()k) vertices on graphs of bounded expansion, where
f() is a constant depending only on .
Unfortunately, there is a minor technical detail (which also can be found in [13] for the
case of r-Dominating Set) that prevents us from obtaining a reduced instance of the
same problem when dealing with graphs of bounded expansion. Instead, we kernelize to an
annotated version of the problem, where only a given subset of vertices of G needs to be
dominated by a connected set. Although the technical details for dealing with the two graph
classes are quite different, the high-level approach is identical. Both kernelization algorithms
follow the same two-step strategy. First, our goal is to compute a ‚Äúsmall‚Äù set of vertices
whose domination is sufficient, i.e. the set of dominatees or the so-called domination core.
The exact definition of a domination core will be different for the two graph classes but
intuitively it is simply a set of vertices whose domination guarantees the domination of the
whole graph. Having found a domination core of appropriate size, the next step is to reduce
the number of dominators, i.e. vertices whose role is to dominate other vertices, and the
number of connectors, i.e. vertices whose role is to connect the solution. When reducing the
number of vertices outside the domination core, we borrow approximation techniques that
are closely related to the Steiner Tree problem. In the Steiner Tree problem, we are
given as input a graph G and a set T ‚äÜ V (G) of terminals. The objective is to find a subtree
of G spanning T that minimizes the number of vertices. Intuitively, we find it easy to think
about our approach as follows. The first step borrows ideas from kernelization algorithms
for Dominating Set and the second step borrows ideas from approximation algorithms
for the Steiner Tree problem. By carefully combining the two and proving additional
combinatorial results, we obtain the claimed lossy kernels. Note that the size of our kernel
for graphs of bounded expansion matches the size of the best known kernel for Dominating
Set, while for Kd,d-free graphs we have an additional 1 multiplicative factor in the exponent.
This leads us to the following two interesting open questions. Is it possible to reduce the
size of our kernel on Kd,d-free graphs to f()kO(d
2) for some function f? And, in light of the
O(k(d‚àí1)(d‚àí3)‚àí) lower bound for Dominating Set, it is possible to obtain a lossy kernel
for Dominating Set on biclique-free graphs that beats this bound? Our hope is that such
a ‚Äúfine-grained‚Äù analysis of the kernelization complexity of domination problems will lead
to deeper insights and a better understanding of the boundary between ‚Äúhard‚Äù and ‚Äúeasy‚Äù
instances.
2 Preliminaries
2.1 Basics of graphs, sparse graphs, and notations
We use standard terminology from the book of Diestel [11] for those graph-related terms that
are not explicitly defined here. All graphs we consider are finite, simple, and undirected. For
a graph G, V (G) and E(G) denote the vertex and edge sets of the graph, respectively. We
let |G| = |V (G)| denote the number of vertices in G and ‚ÄñG‚Äñ = |E(G)| denote the number
of edges in G. The density of a graph G, density(G), is defined as density(G) = ‚ÄñG‚Äñ/|G|.
XX:4 Lossy Kernels for Connected Dominating Set
The radius of G, denoted radius(G), is the minimum integer r such that there exists a vertex
v ‚àà V (G), called the center, which is at distance at most r from all vertices in V (G), i.e. the
shortest path between v and any other vertex of G has at most r ‚àí 1 internal vertices. For a
vertex v ‚àà V (G), we let NG(v) = {u | uv ‚àà E(G)} denote the open neighborhood of v in G.
The closed neighborhood of v is denoted by NG[v] = NG(v) ‚à™ {v}. For a set X ‚äÜ V (G), we
let NG[X] =
‚ãÉ
v‚ààX NG[v] and NG(X) = NG[X] \X. When the graph is clear from context
we omit the subscript G. We sometimes use the notation NX(v) = NG(v) ‚à©X and refer to
it as the X-neighborhood of v. The degree of v, deg(v), is the number of neighbors of v, i.e.
deg(v) = |NG(v)|. For a positive integer r and a vertex v ‚àà V (G), we let NrG(v) denote a ball
of radius r around v, i.e. the set of all vertices in G that are at distance at most r from v.
For a vertex subset X ‚äÜ V (G), G[X] and G‚àíX are the graphs induced on X and V (G) \X,
respectively. A graph H is a subgraph of G if V (H) ‚äÜ V (G) and E(H) ‚äÜ E(G[V (H)]).
Given a graph G and two vertex subsets D,Z ‚äÜ V (G), we say that D is a Z-dominator
if D dominates Z in G, i.e. every vertex z ‚àà Z \D is at distance at most one from some
vertex in D. A vertex v dominates itself and all its neighbors. We denote by ds(G,Z)
(cds(G,Z)) the size of a smallest (connected) Z-dominator in G. By ds(G) (cds(G)) we
mean ds(G,V (G)) (cds(G,V (G))). For a set T ‚äÜ V (G), we denote by stG(T ) the size of,
i.e. the number of vertices in, the smallest Steiner tree connecting T in G (including vertices
in T ).
I Proposition 1 (?1). Let G be a graph, Z ‚äÜ V (G), such that G[Z] is connected, and let D
be a Z-dominator such that G[D] has at most p connected components. Then a set Q ‚äÜ Z
of size at most 2p such that G[D ‚à™Q] is connected, can be computed in polynomial time.
I Definition 2.1. Let D be a connected graph and t ‚àà N \ {0}. A (D, t)-covering family is a
family F(D, t) of connected subgraphs of D such that (i) for each T ‚àà F(D, t), |V (T )| ‚â§ 2t
and (ii)
‚ãÉ
T‚ààF(D,t) V (T ) = V (D).
I Proposition 2 (?). Let D be a connected graph and t ‚àà N \ {0}. Then there is a
(D, t)-covering family F(D, t) such that |F(D, t)| ‚â§ |V (D)|t + 1, and
‚àë
T‚ààF(D,t) |V (T )| ‚â§
(1 + 1t )|V (D)|+ 1.
A set S ‚äÜ V (G) is `-independent in G if for every pair of distinct vertices in S the
distance between them is at least `+ 1 in G. A useful observation which follows from this
definition is that if there exists a 2-independent set S of size k in G, then every dominating
set of G must have size at least k since every vertex of G can dominate at most one vertex
of S. A clique in a graph is a subset of pairwise adjacent vertices. An independent set is
a subset of pairwise non-adjacent vertices. We let Kc and Ic denote a clique on c vertices
and an independent set on c vertices, respectively. We let Ki,j denote a biclique (a complete
bipartite graph) with i vertices in one partition and j vertices in the other.
Sparse graphs We define the main classes we consider. We note here that many well-known
sparse graph classes such as planar graphs, graph classes with bounded genus, treewidth,
or degree as well as graph classes characterizable by finite set of forbidden minors have all
bounded expansion and bounded degeneracy. We refer the reader to [6, 32] for more details.
I Definition 2.2 (Shallow minors). A graph M is an r-shallow minor of G, for some integer
r, if there exists a family of disjoint subsets V1, . . . , V|M | of V (G) such that:
1 Proofs of results marked with a ? have been moved to the appendix
E. Eiben, M. Kumar, A.E. Mouawad, F. Panolan XX:5
each graph G[Vi] is connected and has radius at most r, and
there is a bijection œâ : V (M)‚Üí {V1, . . . , V|M |} such that for every edge uv ‚àà E(M) there
is an edge in G with one endpoint in œâ(u) and another in œâ(v).
The set of all r-shallow minors of a graph G is denoted by GOr. The set of all r-shallow
minors of all members of a graph class G is denoted by GOr =
‚ãÉ
G‚ààG(GOr).
I Definition 2.3 (Grad and bounded expansion [31]). For a graph G and an integer r ‚â• 0,
the greatest reduced average density (grad) at depth r is, ‚àár(G) = maxM‚ààGOrdensity(M) =
maxM‚ààGOr‚ÄñM‚Äñ/|M |. For a graph class G, ‚àár(G) = supG‚ààG‚àár(G). A graph class G has
bounded expansion if there is a function f : N‚Üí R such that for all r we have ‚àár(G) ‚â§ f(r).
For ease of presentation, and since we deal with several constants, we shall use the following
convention. We assume that a graph class of bounded expansion G is fixed, and hence so are
the values of ‚àái(G), for all non-negative integers i. This assumption is not strictly required
but it significantly simplifies the analysis.
Recall that a class of graphs G has bounded degeneracy if every induced subgraph of a
graph G ‚àà G has a vertex of degree at most d, for some constant d. Note that bounded
expansion implies bounded degeneracy, since the degeneracy of a graph G is at most 2‚àá0(G)
(as GO0 contains exactly the subgraphs of G). Moreover a d-degenerate graph cannot contain
Kd+1,d+1 as a subgraph, which brings us to the class of biclique-free graphs.
I Definition 2.4. A class of graphs G is said to be d-biclique-free, for some d > 0, if Kd,d is
not a subgraph of any G ‚àà G, it is said to be biclique-free if it is d-biclique-free for some d.
Again, we assume a fixed biclique-free graph class, hence a fixed value of d. All of our
arguments can be easily extended to Ki,j-free graphs, for non-negative integers i and j,
but we use Kd,d-freeness for simplicity. Next, we state some useful properties of graphs of
bounded expansion and biclique-free graphs that will be used later on.
I Lemma 2.5 ([13]). Let G be a graph and let G‚Ä≤ be the graph obtained by adding a universal
vertex to G, i.e. a vertex adjacent to all vertices in G. Then, for any non-negative integer r,
‚àár(G‚Ä≤) ‚â§ ‚àár(G) + 1.
Given two graphs G and H, the lexicographic product GH is defined as the graph on the
vertex set V (G)√óV (H) where vertices (u, a) and (v, b) are adjacent if uv ‚àà E(G) or if u = v
and ab ‚àà E(H).
I Lemma 2.6 ([23, 24]). For a graph G and non-negative integers t ‚â• 1 and r we have
‚àár(GKt) ‚â§ 5t2(r + 1)2 ¬∑ ‚àár(G).
Let G be a graph and X be a subset of its vertices. For u ‚àà V (G) \ X, we define the
r-projection of u onto X as follows: MGr (u,X) is the set of all vertices w ‚àà X for which
there exists a path in G that starts in u, ends in w, has length at most r, and whose internal
vertices do not belong to X. Note that MG1 (u,X) = NX(u). We omit the superscript when
the graph is clear from context.
I Lemma 2.7 ([13]). Let G be a class of graphs of bounded expansion. There exists a
polynomial-time algorithm that, given a graph G ‚àà G, X ‚äÜ V (G), and an integer r ‚â• 1,
computes the r-closure of X, denoted by clr(X), with the following properties: (i) X ‚äÜ
clr(X) ‚äÜ V (G), (ii) |clr(X)| ‚â§ Ccl1 ¬∑ |X|, and (iii) |MGr (u, clr(X))| ‚â§ Ccl2 for each u ‚àà
V (G) \ clr(X), where Ccl1 and Ccl2 are constants depending only on r and a fixed (finite)
number of grads of G.
XX:6 Lossy Kernels for Connected Dominating Set
I Lemma 2.8 ([13, 20, 26]). Let G be a class of graphs of bounded expansion and r ‚àà N.
Let G ‚àà G be a graph and let X ‚äÜ V (G). Then |{Y | Y = Mr(u,X) for u ‚àà V (G) \X}| ‚â§
Cex ¬∑ |X|, where Cex is a constant depending only on r and a fixed (finite) number of grads
of G.
I Lemma 2.9 ([13]). Let G be a bipartite graph with bipartition (X,Y ) that belongs to some
graph class G such that ‚àá1(G) ‚â• 1. Moreover, suppose that for every u ‚àà Y we have that
N(u) 6= ‚àÖ, and that for every distinct u1, u2 ‚àà Y we have N(u1) 6= N(u2), i.e. Y is twin-free.
Then there exists a mapping œÜ : Y ‚Üí X with the following properties: (i) uœÜ(u) ‚àà E(G) for
each u ‚àà Y and (ii) œÜ‚àí1(v) ‚â§ Cch for each v ‚àà X, where Cch is a constant depending only
on a fixed (finite) number of grads of G.
I Lemma 2.10 ([28]). Let G be a Kd,d-free bipartite graph with bipartition (A,B) such that
there are no two distinct vertices u, v ‚àà B with N(u) = N(v). Then, |B| ‚â§ 2d|A|d.
2.2 Lossy kernelization
Formally, we first require the notion of a parameterized optimization problem, which is the
parameterized analogue of an optimization problem in the theory of approximation algorithms.
Throughout this paper we talk about only minimization problems and we refer to [29] to see
the symmetric definitions related to maximization problems.
I Definition 2.11. A parameterized minimization problem Œ† is a computable function
Œ†: Œ£‚àó √ó N√ó Œ£‚àó ‚Üí R ‚à™ {‚àû}.
The instances of Œ† are the pairs (I, k) ‚àà Œ£‚àó √ó N and a solution to (I, k) is simply a string
S ‚àà Œ£‚àó such that |S| ‚â§ |I| + k. The value of a solution S is Œ†(I, k, S). The optimum
value of (I, k) is OPTŒ†(I, k) = minS‚ààŒ£‚àó,|S|‚â§|I|+kŒ†(I, k, S) and we remove the subscript Œ†
if it is clear from the context. An optimum solution for (I, k) is a solution S such that
Œ†(I, k, S) = OPTŒ†(I, k). Next we come to the notion of an Œ±-approximate polynomial-time
preprocessing algorithm for a parameterized minimization problem Œ†.
I Definition 2.12. For Œ± > 1, an Œ±-approximate polynomial-time preprocessing algorithm
A for a parameterized minimization problem Œ†, is defined as a pair of polynomial-time
algorithms, called the reduction algorithm RA and the solution lifting algorithm, that satisfy
the following properties:
1. Given an instance (I, k) of Œ†, RA computes an instance (I ‚Ä≤, k‚Ä≤) = RA((I, k)) of Œ†.
2. Given (I, k), (I ‚Ä≤, k‚Ä≤), and a solution S‚Ä≤ to (I ‚Ä≤, k‚Ä≤), the solution lifting algorithm produces
a solution S to (I, k) such that Œ†(I,k,S)OPT(I,k) ‚â§ Œ±
Œ†(I‚Ä≤,k‚Ä≤,S‚Ä≤)
OPT(I‚Ä≤,k‚Ä≤) .
The size of a polynomial time pre-processing algorithm A is defined as, sizeA(k) = sup{|I ‚Ä≤|+
k‚Ä≤ : (I ‚Ä≤, k‚Ä≤) = RA(I, k), I ‚àà Œ£‚àó}.
An Œ±-approximate kernel for Œ† is an Œ±-approximate polynomial-time preprocessing algorithm
A such that the size of A is upper bounded by a function in the input parameter k. In the
case of an Œ±-approximate bikernel, the reduction algorithm is allowed to output an instance
of any problem. However, the size of the instance still needs to be bounded by a function
of the input parameter k. A polynomial-size approximate kernelization scheme (PSAKS)
is a family of Œ±-approximate polynomial kernelization algorithms for each Œ± > 1, with size
of each bounded by a polynomial in the input parameter. The size of an output instance
of a PSAKS, when run on (I, k) with approximation parameter Œ±, must be upper bounded
by f(Œ±)kg(Œ±), for some functions f and g independent of |I| and k. We refer the reader to
E. Eiben, M. Kumar, A.E. Mouawad, F. Panolan XX:7
the work of Lokshtanov et al. [29] for more details and several examples. In this work, we
exhibit lossy kernels for Connected Dominating Set (CDS), which is defined as follows,
where G denotes the input graph, k ‚àà N and D is a subset of its vertices.
CDS(G, k,D) =
{
‚àû if D is not a connected dominating set in G
min{|D|, k + 1} otherwise
Notice that in standard kernelization or fixed parameter tractable algorithms, when
we parameterize by solution size k, for a decision version of a minimization problem, we
actually do not care about solutions of size more than k. However, we always aim for
efficient algorithms, where efficiency is measured in terms of k. Going by the same logic, we
set CDS(G, k,D) = k + 1, when |D| ‚â• k + 1, so that all connected dominating sets D of
cardinality more than k are ‚Äúequally bad‚Äù or indistinguishable. The symbol ‚àû is used to
distinguish between actual solutions and other strings which are not solutions. For detailed
discussion about capping the objective function at k + 1, we refer to [29, page 16]).
3 Biclique-free graphs
In this section we show that Connected Dominating Set, parameterized by solution
size, admits a PSAKS on Kd,d-free graphs. More precisely, we show that Connected
Dominating Set admits a (1 + )-approximate kernel on at most kO( d
2
 ) vertices.
Finding the domination core. We begin by formally introducing the notion of an k-
domination core. We restate that all of our results can be easily extended to Ki,j-free
graphs, for constant positive integers i and j.
I Definition 3.1 (k-domination core). Let G be a graph and Z ‚äÜ V (G). We say that Z is an
k-domination core if every set D of size at most k that dominates Z also dominates V (G).
Note that V (G) is a k-domination core. However, our objective is to obtain a k-domination
core Z whose size is polynomially bounded in k. To that end, we start with Z = V (G) and
repeatedly reduce the size of Z, maintaining a k-domination core throughout.
I Lemma 3.2 (?). There exists a polynomial-time algorithm that, given a Kd,d-free graph
G and a k-domination core Z ‚äÜ V (G) with |Z| > (2d+ 1)kd+1, either correctly concludes
that ds(G) > k (and hence cds(G) > k) or finds a vertex z ‚àà Z such that Z \ {z} is a
k-domination core.
Reducing connectors and dominators. Armed with a k-domination core Z of size at most
(2d + 1)kd+1, we partition the graph into two sets Z and R = V (G) \ Z. Next, we define
the equivalence relation ' on R as follows: ‚àÄu, v ‚àà R, u ' v if and only if NZ(u) = NZ(v).
That is, we partition vertices in R according to their neighborhoods in Z. Let R be the set
of equivalence classes defined by '. Our goal is to bound the size of R. To that end, we
construct a bipartite graph H with bipartition (A,B) from G as follows. We add a vertex
az ‚àà A for each vertex z ‚àà Z and we add a vertex bŒ∫ ‚àà B for each equivalence class Œ∫ of
relation '. We add an edge azbŒ∫ ‚àà E(H) whenever z is in NZ(w), for some w ‚àà Œ∫. Finally,
delete any isolated vertices in H. It is not hard to see that H is a subgraph of G and hence is
Kd,d-free. As a direct implication of Lemma 2.10, we can bound the size of B by O(kO(d
2)).
I Lemma 3.3. The equivalence relation ' has at most kO(d2) classes, i.e. |R| ‚àà kO(d2).
XX:8 Lossy Kernels for Connected Dominating Set
As Z is a k-domination core, to find a dominating set of size at most k it is enough to find
a set which dominates Z. Hence for the purpose of domination, it is redundant to pick more
than one vertex from an equivalence class in R. However, to get a connected dominating set,
we may need to choose more vertices from an equivalence class. The following lemma finds a
small set of relevant vertices which ‚Äúapproximately‚Äù preserves the connectivity requirements.
I Lemma 3.4 (?). Let (G, k) be an instance of Connected Dominating Set, where G is a
connected and Kd,d-free graph. For any fixed  > 0, there is a polynomial-time algorithm that
either correctly concludes that cds(G) > k or outputs a set Y ‚äÜ V (G) of cardinality kO( d
2
 )
such that (i) Y contains a k-domination core of G and (ii) OPT(G[Y ], k) ‚â§ (1+)OPT(G, k).
I Theorem 3.5. For every  > 0, Connected Dominating Set, parameterized by solution
size, admits a (1 + )-approximate kernel with kO( d
2
 ) vertices on Kd,d-free graphs.
Proof. Let (G, k) be the input instance, where G is a connected Kd,d-free graph and k is
a positive integer. We first describe the reduction algorithm RA. Using the algorithm of
Lemma 3.4, with inputs (G, k) and , in polynomial time, algorithm RA either concludes
that cds(G) > k and outputs (({v}, ‚àÖ), 0); or obtains a set Y ‚äÜ V (G) and outputs (G[Y ], k)
as the reduced instance. Let (G‚Ä≤, k‚Ä≤) be the reduced instance. When G‚Ä≤ = ({v}, ‚àÖ), the size
of the reduced instance is a constant. Otherwise, by Lemma 3.4, we know that |Y | = kO( d
2
 ),
which bounds the kernel size.
The solution lifting algorithm works as follows. Given a solution D‚Ä≤ to the instance
(G‚Ä≤, k‚Ä≤), if D‚Ä≤ is not a connected dominating set of G‚Ä≤, then the solution lifting algorithm
will output ‚àÖ. If D‚Ä≤ is a connected dominating set, then the algorithm returns D‚Ä≤ if |D‚Ä≤| ‚â§ k
and V (G) otherwise. Let D be the output of the solution lifting algorithm.
We prove that the above reduction algorithm together with the solution lifting algorithm
constitute a (1 + )-approximate kernel. Note that if D‚Ä≤ is not a valid solution of G‚Ä≤, then ‚àÖ is
not a valid solution for G and CDS(G‚Ä≤, k‚Ä≤, D‚Ä≤) = CDS(G, k,D) =‚àû. Hence we can restrict
ourselves to the case when D‚Ä≤ is a connected dominating set of G‚Ä≤. First, consider the case
where the algorithm of Lemma 3.4 outputs Y ‚äÜ V (G) and the reduced instance is hence
(G‚Ä≤, k‚Ä≤) = (G[Y ], k). From Lemma 3.4, we have that OPT (G[Y ], k) ‚â§ (1 + )OPT (G, k). We
show that in this case CDS(G, k,D) = CDS(G‚Ä≤, k‚Ä≤, D‚Ä≤). If |D‚Ä≤| > k, then CDS(G, k,D) =
CDS(G, k, V (G)) = k + 1 = CDS(G‚Ä≤, k‚Ä≤, D‚Ä≤). So assume that |D‚Ä≤| ‚â§ k, which implies
D = D‚Ä≤. Since D‚Ä≤ is a connected dominating set of G[Y ] and, by Lemma 3.4, Y contains a k-
domination core of G, it follows that D‚Ä≤ dominates G and CDS(G, k,D) = CDS(G‚Ä≤, k‚Ä≤, D‚Ä≤).
Combining CDS(G, k,D) = CDS(G‚Ä≤, k‚Ä≤, D‚Ä≤) and OPT (G[Y ], k) ‚â§ (1 + )OPT (G, k) we get
CDS(G,k,D)
OPT (G,k) ‚â§ (1 + )
CDS(G‚Ä≤,k‚Ä≤,D‚Ä≤)
OPT (G‚Ä≤,k‚Ä≤) . When (G
‚Ä≤, k‚Ä≤) = (({v}, ‚àÖ), 0), we can easily verify that
the above mentioned approximation guarantee holds. J
4 Graphs of bounded expansion
In this section we show that Connected Dominating Set, parameterized by solution size,
admits a (1 + )-approximate bikernel on at most O(f() ¬∑ k) vertices. The reduced instance
will be an instance of Subset Connected Dominating Set (SCDS), defined as follows:
SCDS((G,S), k,D) =
{
‚àû if D is not a connected S-dominator in G
min{|D|, k + 1} otherwise
The first phase of our algorithm, i.e. finding a domination core, closely follows the work
of Drange et al. [13] but requires subtle changes. We fix a graph class G that has bounded
E. Eiben, M. Kumar, A.E. Mouawad, F. Panolan XX:9
expansion and let (G, k) be the input instance of CDS, where G ‚àà G and G is connected. We
assume that ‚àá0(G) ‚â• 1, otherwise G is a forest and the problem can be solved in linear time.
4.1 Finding the domination core
We begin by formally introducing the notion of a c-exchange domination core, which is
different from the definition used in the previous section and from the one considered in [13].
Here, c is a fixed constant which we set later.
I Definition 4.1 (c-exchange domination core). Let G be a graph and Z be a subset of vertices
of G. We say that Z is a c-exchange domination core if for every set X that dominates Z
one of the following conditions holds: (1.) X dominates G, or (2.) there exist A ‚äÜ X and
B ‚äÜ V (G) such that |B| < |A| ‚â§ c and (X \ A) ‚à™ B is a set that dominates Z. Moreover
the number of connected components of (X \ A) ‚à™ B is at most the number of connected
components of X. In particular, if X is a connected set then (X \A) ‚à™B is also connected.
I Proposition 3 (?). Let G be a graph, c be a constant, and Z be a c-exchange domination
core of G, and X ‚äÜ V (G) be a Z-dominator. Then, there is a set Y such that (i) |Y | ‚â§ |X|,
(ii) Y dominates G, (iii) Y can be computed from X in polynomial time, and (iv) the
number of connected components of Y is at most the number of connected components of X.
Clearly, V (G) is a c-exchange domination core, for any c, but we look for a c-exchange
domination core that is linear in k. Hence, we start with Z = V (G) and gradually reduce
|Z| by removing one vertex at a time, while maintaining the invariant that Z is a c-exchange
domination core. To this end, we need to prove Lemma 4.2. Note that we only remove
vertices from Z at this stage (no vertex deletions), and hence the graph remains intact.
I Lemma 4.2. There exists a constant Ccore > 0 depending only on a fixed (finite) number
of grads of G and a polynomial-time algorithm that, given a graph G ‚àà G and a c-exchange
domination core Z ‚äÜ V (G) with |Z| > Ccore ¬∑ k, either correctly concludes that cds(G) > k
or finds a vertex z ‚àà Z such that Z \ {z} is still a c-exchange domination core.
The rest of the subsection is dedicated to proving Lemma 4.2. The algorithm of Lemma 4.2
consists of building a structural decomposition of the graph G. More precisely, we identify a
small set X that dominates G, so that if X was deleted from the graph, Z would contain a
large subset S, which is 2-independent in the remaining graph. Given such a structure, we
can argue that in any optimal Z-dominator, vertices of X serve as dominators for almost all
the vertices of S. This is because any vertex of V (G) \X can dominate at most one vertex
from S. Since S will be large compared to X, some vertices of S will be indistinguishable
from the point of view of domination via X, and these will be precisely the vertices that can
be removed from the domination core. The following lemma, which was proved by Drange et
al. [13] and builds on work by Dvorak [15], gives us such a decomposition.
I Lemma 4.3. There exists a constant C ‚Ä≤Z > 0 depending only on a fixed (finite) number
of grads of G and a polynomial-time algorithm that, given a graph G ‚àà G, an integer k, a
constant C ‚Ä≤S > 0, and a set Z ‚Ä≤ ‚äÜ V (G) with |Z ‚Ä≤| > C ‚Ä≤Z ¬∑ k, either correctly concludes that
ds(G) > k or finds a pair (X ‚Ä≤, S‚Ä≤) with the following properties: (1) |X ‚Ä≤| ‚â§ C ‚Ä≤X ¬∑ k, (2) X ‚Ä≤
is a Z ‚Ä≤-dominator in G, (3) for each u ‚àà V (G) \ X ‚Ä≤ we have |MG3 (u,X ‚Ä≤)| ‚â§ C ‚Ä≤M, and (4)
S‚Ä≤ ‚äÜ Z ‚Ä≤ \X ‚Ä≤ is 2-independent in G‚àíX ‚Ä≤, and |S‚Ä≤| ‚â• C ‚Ä≤S ¬∑ |X|, where C ‚Ä≤X and C ‚Ä≤M are constants
depending only on a fixed number of grads of G.
I Corollary 4.4. There exists a constant CZ > 0 depending only on a fixed (finite) number
of grads of G and a polynomial-time algorithm that, given a graph G ‚àà G, an integer k, a
XX:10 Lossy Kernels for Connected Dominating Set
constant CS > 0, and a c-exchange domination core Z ‚äÜ V (G) with |Z| > CZ ¬∑ k, either
correctly concludes that ds(G) > k or finds a pair (X,S) with the following properties: (1)
|X| ‚â§ CX ¬∑ k, (2) X dominates G, (3) for each u ‚àà V (G) \X we have |MG3 (u,X)| ‚â§ CM,
and (4) S ‚äÜ Z \X is 2-independent in G ‚àíX, and |S| ‚â• CS ¬∑ |X|, where CX and CM are
constants depending only on a fixed number of grads of G.
Proof. First we run the algorithm of Lemma 4.3 for G, k, Z ‚Ä≤ = Z, C ‚Ä≤Z = CZ, and constant
C ‚Ä≤S ‚â• CS, which we fix later in the proof. If the algorithm of Lemma 4.3 concludes that
ds(G) > k, we correctly conclude that ds(G) > k. Otherwise, let (X ‚Ä≤, S‚Ä≤) be the output
of the algorithm of Lemma 4.3. Since Z is a c-exchange domination core, we find using
Proposition 3, a set Y , such that |Y | ‚â§ |X ‚Ä≤| and Y dominates G. We let X = cl3(Y ‚à™X ‚Ä≤)
and S = S‚Ä≤ \ X. Since X is a superset of Y , X satisfies property (2). Note that by
Lemma 2.7, X can be computed in polynomial time and it satisfies property (3). Moreover,
|X| = cl3(Y ‚à™ X ‚Ä≤) ‚â§ Ccl1 ¬∑ |Y ‚à™ X ‚Ä≤| ‚â§ 2Ccl1 ¬∑ |X ‚Ä≤| ‚â§ 2Ccl1 ¬∑ C ‚Ä≤X ¬∑ k (Lemma 2.7) and
property (1) follows with CX = 2Ccl1 ¬∑C ‚Ä≤X. Hence |S| ‚â• |S‚Ä≤|‚àí |X| ‚â• C ‚Ä≤S ¬∑ |X ‚Ä≤|‚àí2Ccl1 ¬∑ |X ‚Ä≤| ‚â•
(C ‚Ä≤S‚àí2Ccl1) ¬∑ |X ‚Ä≤| ‚â•
(C‚Ä≤S‚àí2Ccl1)
2Ccl1 |X|. Therefore, if we set the constant C
‚Ä≤
S = 2Ccl1(CS +2Ccl1),
we satisfy all properties. J
Note that when ds(G) > k we can also conclude that cds(G) > k. Hence, in the rest
of the section we assume that we are given G, Z, and the constructed sets X and S.
We let R = V (G) \ X. Using this notation, S is 2-independent in the graph G[R]. De-
fine the following equivalence relation ' on S: for u, v ‚àà S, u ' v ‚áî Mi(u,X) =
Mi(v,X) for each 1 ‚â§ i ‚â§ 3. Recall that for any vertex u ‚àà R, we have |M3(u,X)| ‚â§ CM.
The following lemma follows directly from the proof of Lemma 3.8 by Drange et al. [13].
I Lemma 4.5 (?). There exists a constant Ceq > 0 depending only on a fixed (finite) number
of grads of G such that equivalence relation ' has at most Ceq ¬∑ 3Ceq ¬∑ |X| classes.
We can now set the constant CS that is required in Corollary 4.4 and the constant c of the
exchange domination core. We let CS = (4Ceq + 1) ¬∑Ceq ¬∑ 3Ceq and c = (4Ceq + 1). Since we
have that |S| > CS ¬∑ |X|, from Lemma 4.5 and the pigeonhole principle we infer that there is
a class Œ∫ of relation ' with |Œ∫| > 4Ceq + 1. We can find such class Œ∫ in polynomial time
by computing the classes of ' directly from the definition and examining their sizes. We
are ready to prove the final lemma of this section: any vertex of Œ∫ can be removed from the
c-exchange domination core Z (recall that S ‚äÜ Z), which concludes the proof of Lemma 4.2.
I Lemma 4.6. Let z ‚àà Œ∫. Then Z\{z} is a c-exchange domination core, where c = (4Ceq+1).
Proof. Let D ‚äÜ V (G) be a set that dominates Z ‚Ä≤ = Z \ {z} such that D does not satisfy
condition (2) of Definition 4.1 with respect to Z ‚Ä≤ (as otherwise we are done). In particular,
this implies that D cannot satisfy condition (2) with respect to Z either. In other words,
there exist no sets A ‚äÜ D and B ‚äÜ V (G) such that |B| < |A| ‚â§ c, (D \A)‚à™B has at most as
many connected components as D, and (D \A)‚à™B dominates Z. Therefore, if D dominates
all of Z, then D has to satisfy condition (1) and dominate G. Hence, z is not dominated by
D. We prove that this leads to a contradiction.
Every vertex s ‚àà Œ∫ \ {z} is dominated by D (since Œ∫ \ {z} ‚äÜ Z ‚Ä≤). For each such s, let v(s)
be an arbitrarily chosen vertex of D that dominates s. If v(s) ‚àà X, then v(s) also dominates
z, since M1(s,X) = M1(z,X). Consequently, v(s) 6‚àà X (because D does not dominate Z)
and the vertices v(s) are pairwise different for all s ‚àà Œ∫ \ {z}, as S (and Œ∫) is a 2-independent
set. Let W ‚Ä≤ = {v(s) : s ‚àà Œ∫ \ {z}}. Since |Œ∫| > 4Ceq + 1, we have |W ‚Ä≤| ‚â• c = 4Ceq + 1. Let
W be a set of arbitrarily chosen c vertices of W ‚Ä≤. Define D‚Ä≤ = (D \W ) ‚à™M3(z,X).
E. Eiben, M. Kumar, A.E. Mouawad, F. Panolan XX:11
We first show that D‚Ä≤ dominates Z ‚Ä≤. Towards that, it is enough to show that every
vertex in N [W ] is dominated by M3(z,X) ‚äÜ D‚Ä≤. By property (2) of Corollary 4.4, X is a
dominating set in G. Hence, every vertex in N [W ] = N(W ) ‚à™W either belongs to X or
has a neighbor in X. Let Y ‚äÜ X be the set of vertices in X dominating N [W ]. Since every
vertex in N [W ] is at distance at most two from some vertex in Œ∫ (because each vertex in W
is adjacent to a vertex in Œ∫), all vertices in Y are at distance at most three from some vertex
in Œ∫. This implies that Y ‚äÜM3(z,X) and therefore D‚Ä≤ dominates Z ‚Ä≤.
Note that |M3(z,X)| < |W | ‚â§ c and therefore D‚Ä≤, which still dominates Z ‚Ä≤, violates
condition (2) of Definition 4.1. However, the set D‚Ä≤ can have more connected components
than D has. Therefore, we add additional vertices to D‚Ä≤ to ensure connectivity and still
violate condition (2). For every vertex u ‚àà M3(z,X) there is a path Pu of length at most
three between u and z. Let P =
‚ãÉ
u‚ààM3(z,X) Pu and consider the set D
‚Ä≤‚Ä≤ = D‚Ä≤ ‚à™ P . Note
that |P | ‚â§ 3|M3(z,X)| ‚â§ 3Ceq.
It remains to show that D‚Ä≤‚Ä≤ has at most as many connected components as D. If a
component C in D contains a vertex from W , then each connected component C ‚Ä≤ of C \W
contains a vertex vC‚Ä≤ ‚àà N(W ) and as mentioned before, vC‚Ä≤ is adjacent to a vertex in
M3(z,X). But in D‚Ä≤‚Ä≤ all vertices of M3(z,X) are in one component due to the vertices of P .
Hence all such components of D contribute to only one component of D‚Ä≤‚Ä≤. On the other hand,
if C does not contain a vertex in W , then clearly all vertices of C are also in D‚Ä≤‚Ä≤ and hence C
is connected in D‚Ä≤‚Ä≤ as well. It follows that D‚Ä≤‚Ä≤ has at most as many connected components as
D, D‚Ä≤‚Ä≤ dominates Z ‚Ä≤, and |M3(z,X)‚à™P | ‚â§ Ceq + 3Ceq < |W | = c = 4Ceq + 1, contradicting
the fact that D did not satisfy condition (2) of Definition 4.1. J
4.2 Reducing connectors and dominators
Armed with a c-exchange domination core Z whose size is linear in k, our next goal is to
reduce the number of connectors and dominators (the number of vertices in V (G) \ Z). To
that end, we need the following lemma which is a generalized version of Lemma 2.11 in [13].
I Lemma 4.7 (Trees closure lemma ?). Let G be a class of bounded expansion and let q and
r be positive integers. Let G ‚àà G be a graph and X ‚äÜ V (G). Then a superset of vertices
X ‚Ä≤ ‚äá X can be computed in polynomial time, with the following properties: (1) For every
Y ‚äÜ X of size at most q, if stG(Y ) ‚â§ rq then stG[X‚Ä≤](Y ) = stG(Y ). (2) |X ‚Ä≤| ‚â§ Ctc ¬∑ |X|,
where Ctc is a constant depending only on r, q, and a finite number of grads of G.
Now let ZÃá be a superset of Z, which we will fix later in Lemma 4.10, such that |ZÃá| = O(k).
We compute Z ‚Ä≤ = cl1(ZÃá) using Lemma 2.7; then we have that |Z ‚Ä≤| = O(|ZÃá|) = O(k).
Partition V (G) \ Z ‚Ä≤ into equivalence classes with respect to the following relation ': For
u, v ‚àà V (G) \ Z ‚Ä≤, set: u ' v ‚áî M1(u, Z ‚Ä≤) = M1(v, Z ‚Ä≤). From Lemma 2.7 we know that
for each u ‚àà V (G) \ Z ‚Ä≤, it holds that |M1(u, Z ‚Ä≤)| = O(1). Moreover, Lemma 2.8 implies that
the number of possible different projections M1(u, Z ‚Ä≤) for u ‚àà V (G) \ Z ‚Ä≤ is at most O(|Z ‚Ä≤|).
Hence, using the same reasoning as in the proof of Lemma 4.5 we obtain the following.
I Lemma 4.8. The equivalence relation ' has at most O(|Z ‚Ä≤|) classes.
Construct a graph GÃà as follows. Start with G and, for each equivalence class Œ∫ of relation
', add a new vertex uŒ∫ which is connected to all vertices in Œ∫. Let U =
‚ãÉ
Œ∫‚àà'{uŒ∫}. Our
next step is to apply Lemma 4.7 to graph GÃà with X = Z ‚Ä≤ ‚à™ U , r = 2, and q = 2t (we fix the
value of t later). Before we do so, we need to show that GÃà still has bounded grads.
I Lemma 4.9 (?). There is a function f : N‚Üí R such that for all r we have ‚àár(GÃà) ‚â§ f(r).
XX:12 Lossy Kernels for Connected Dominating Set
I Lemma 4.10. Let G be a class of bounded expansion and (G, k) be an instance of Con-
nected Dominating Set, where G ‚àà G. Let CS = (4Ceq + 1) ¬∑Ceq ¬∑ 3Ceq and c = (4Ceq + 1).
Then, for any fixed  > 0, there is a polynomial-time algorithm that either concludes that
cds(G) > k or outputs a set Y ‚äÜ V (G) of cardinality O(f() ¬∑ k), for some function
f , and a set Z ‚äÜ Y , such that (i) Z is a c-exchange domination core in G and (ii)
OPTSCDS((G[Y ], Z), k) ‚â§ (1 + )OPTCDS(G, k).
Proof. We start by designing an algorithm A with the desired properties. Starting with
Lemma 4.2, Algorithm A either concludes that cds(G) > k or finds (in polynomial time) a
c-exchange domination core Z of size at most O(k). Since Z is a Z-dominator itself, using
Proposition 3, we find a set O, such that |O| ‚â§ |Z| and O dominates G. Moreover, by
Proposition 1, we find a connected superset OÃà of O, such that |OÃà| ‚â§ 3|O|. Next, we let
ZÃá = Z ‚à™ OÃà and compute Z ‚Ä≤ = cl1(ZÃá) using Lemma 2.7; then we have that |Z ‚Ä≤| = O(k). We
partition V (G) \Z ‚Ä≤ into equivalence classes with respect to ' (i.e. u ' v ‚áî M1(u, Z ‚Ä≤) =
M1(v, Z ‚Ä≤)). From Lemma 4.8, we know that the equivalence relation ' has at most O(k)
classes. Let X ‚Ä≤ be the set of size O(k) obtained by applying Lemma 4.7 to graph GÃà with
X = Z ‚Ä≤ ‚à™ U , r = 2, and q = 2t (we fix the value of t later and U is the set defined earlier).
Algorithm A outputs instance ((G‚Ä≤, Z), k) = ((G[Y ], Z), k) which asks to dominate Z,
where Y = Z ‚Ä≤ ‚à™ (X ‚Ä≤ \ U). Note that, since G[Y ] contains a connected dominating set OÃà of
G, it is connected as well. Moreover, the total number of vertices in G[Y ] is at most O(k).
We now show that OPTSCDS((G[Y ], Z), k) ‚â§ (1 + )OPTCDS(G, k). Consider the
graph D‚àó induced by an optimal connected dominating set of G. If |V (D‚àó)| > k, then
OPTSCDS((G[Y ], Z), k) ‚â§ (1+)OPTCDS(G, k) holds trivially. So we assume that |V (D‚àó)| ‚â§
k. We let F(D‚àó, t) = {T1, T2, ¬∑ ¬∑ ¬∑ , T`} denote a (D‚àó, t)-covering family. Proposition 2 implies
that ` ‚â§ |V (D
‚àó)|
t + 1 and
‚àë
T‚ààF(D‚àó,t) |V (T )| ‚â§ (1 +
1
t )|V (D
‚àó)|+ 1. Moreover, the size of each
subtree T is at most 2t. We define groups on V (G) as follows. Each vertex v ‚àà Z ‚Ä≤ belongs
to its own unique group qv and each vertex in V (G) \ Z ‚Ä≤ belongs to group qŒ∫, i.e. vertices in
the same equivalence class in ' belong to the same group.
I Claim 4.10.1 (?). For any T ‚àà F(D‚àó, t) there exists a tree T ‚Ä≤ in G‚Ä≤ of size at most |V (T )|
which contains at least one vertex from each group appearing in T .
We now construct a new family F ‚Ä≤ which consists of replacing each T ‚àà F(D‚àó, t) by a set T ‚Ä≤
in G‚Ä≤. Let D‚Ä≤‚Ä≤ =
‚ãÉ
T ‚Ä≤‚ààF ‚Ä≤ V (T ‚Ä≤). By the previous claim and the fact that
‚àë
T‚ààF(D‚àó,t) |V (T )| ‚â§
(1 + 1t )|V (D
‚àó)|+ 1, we know that |D‚Ä≤‚Ä≤| ‚â§ (1 + 1t )|V (D
‚àó)|+ 1 and D‚Ä≤‚Ä≤ dominates Z ‚Ä≤ (since we
never reduce the number of groups in D‚Ä≤‚Ä≤). Moreover, D‚Ä≤‚Ä≤ consists of at most |V (D
‚àó)|
t + 1
components. Note that OÃà is a connected Z-dominator and therefore the set OÃà ‚à™ Z is also
connected. Now, since Z ‚à™ OÃà ‚äÜ Z ‚Ä≤, D‚Ä≤‚Ä≤ dominates Z ‚à™ OÃà and applying Proposition 1, we
obtain a connected (Z ‚à™ OÃà)-dominator, and hence also Z-dominator, D‚Ä≤ of size at most
2|V (D‚àó)|
t + 2 + (1 +
1
t )|V (D
‚àó)|+ 1 = 2|V (D
‚àó)|
t + 3 + |V (D
‚àó)|+ |V (D
‚àó)|
t = (1 +
3
t )|V (D
‚àó)|+ 3.
Setting t = 6 implies that D
‚Ä≤ is a (1 + )-approximate solution, for OPTCDS(G, k) ‚â• 6 (note
that 3 ‚â§ 2 ¬∑OPTCDS(G, k)). We can assume OPTCDS(G, k) ‚â•
6
 without loss of generality,
as otherwise a simple brute-force algorithm runs in polynomial time. J
Using the same arguments as in the proof of Theorem 3.5 and replacing Lemma 3.4 by
Lemma 4.10, we obtain the following:
I Theorem 4.11. For every  > 0, CDS admits a (1+)-approximate bikernel with O(f() ¬∑k)
vertices on graphs of bounded expansion, where f is some computable function.
E. Eiben, M. Kumar, A.E. Mouawad, F. Panolan XX:13
References
1 Jochen Alber, Michael R. Fellows, and Rolf Niedermeier. Polynomial-time data reduction
for dominating set. J. ACM, 51(3):363‚Äì384, 2004.
2 Noga Alon and Shai Gutner. Kernels for the dominating set problem on graphs with an
excluded minor. Electronic Colloquium on Computational Complexity, 15(066), 2008.
3 Andreas Bj√∂rklund, Thore Husfeldt, Petteri Kaski, and Mikko Koivisto. Fourier meets
m√∂bius: Fast subset convolution. In Proceedings of the Thirty-ninth Annual ACM Sympo-
sium on Theory of Computing, pages 67‚Äì74, New York, NY, USA, 2007.
4 Hans L. Bodlaender, Rodney G. Downey, Michael R. Fellows, and Danny Hermelin. On
problems without polynomial kernels. J. Comput. Syst. Sci., 75(8):423‚Äì434, 2009.
5 Hans L. Bodlaender, Fedor V. Fomin, Daniel Lokshtanov, Eelko Penninkx, Saket Saurabh,
and Dimitrios M. Thilikos. (Meta) Kernelization. In 50th Annual IEEE Symposium on
Foundations of Computer Science, Atlanta, Georgia, USA, pages 629‚Äì638, 2009.
6 Andreas Brandst√§dt, Van Bang Le, and Jeremy P. Spinrad. Graph Classes: A Survey.
Society for Industrial and Applied Mathematics, Philadelphia, PA, USA, 1999.
7 Marek Cygan, Fabrizio Grandoni, and Danny Hermelin. Tight kernel bounds for problems
on graphs with small degeneracy - (extended abstract). In Algorithms - ESA 2013 - 21st
Annual European Symposium, Sophia Antipolis, France, September 2-4, 2013. Proceedings,
pages 361‚Äì372, 2013.
8 Marek Cygan, Marcin Pilipczuk, Michal Pilipczuk, and Jakub Onufry Wojtaszczyk. Ker-
nelization hardness of connectivity problems in d-degenerate graphs. Discrete Applied
Mathematics, 160(15):2131‚Äì2141, 2012.
9 Holger Dell and D√°niel Marx. Kernelization of packing problems. In Proceedings of the
Twenty-Third Annual ACM-SIAM Symposium on Discrete Algorithms, SODA 2012, Kyoto,
Japan, January 17-19, 2012, pages 68‚Äì81, 2012.
10 Holger Dell and Dieter van Melkebeek. Satisfiability allows no nontrivial sparsification
unless the polynomial-time hierarchy collapses. J. ACM, 61(4):23:1‚Äì23:27, 2014.
11 Reinhard Diestel. Graph Theory, 4th Edition, volume 173 of Graduate texts in mathematics.
Springer, 2012.
12 Rod G. Downey and Michael R. Fellows. Parameterized complexity. Springer-Verlag, 1997.
13 P√•l Gr√∏n√•s Drange, Markus Sortland Dregi, Fedor V. Fomin, Stephan Kreutzer, Daniel
Lokshtanov, Marcin Pilipczuk, Michal Pilipczuk, Felix Reidl, Fernando S√°nchez Villaamil,
Saket Saurabh, Sebastian Siebertz, and Somnath Sikdar. Kernelization and sparseness: the
case of dominating set. In 33rd Symposium on Theoretical Aspects of Computer Science,
STACS 2016, February 17-20, 2016, Orl√©ans, France, pages 31:1‚Äì31:14, 2016.
14 Andrew Drucker. New limits to classical and quantum instance compression. SIAM J.
Comput., 44(5):1443‚Äì1479, 2015.
15 Zdenek Dvorak. Constant-factor approximation of the domination number in sparse graphs.
Eur. J. Comb., 34(5):833‚Äì840, 2013.
16 Fedor V. Fomin, Daniel Lokshtanov, Saket Saurabh, and Dimitrios M. Thilikos. Bidimen-
sionality and kernels. In Proceedings of the Twenty-First Annual ACM-SIAM Symposium
on Discrete Algorithms, Austin, Texas, USA, pages 503‚Äì510, 2010.
17 Fedor V. Fomin, Daniel Lokshtanov, Saket Saurabh, and Dimitrios M. Thilikos. Linear
kernels for (connected) dominating set on H -minor-free graphs. In Proceedings of the
Twenty-Third Annual ACM-SIAM Symposium on Discrete Algorithms, SODA 2012, Kyoto,
Japan, January 17-19, 2012, pages 82‚Äì93, 2012.
18 Fedor V. Fomin, Daniel Lokshtanov, Saket Saurabh, and Dimitrios M. Thilikos. Linear
kernels for (connected) dominating set on graphs with excluded topological subgraphs. In
30th International Symposium on Theoretical Aspects of Computer Science, STACS 2013,
February 27 - March 2, 2013, Kiel, Germany, pages 92‚Äì103, 2013.
XX:14 Lossy Kernels for Connected Dominating Set
19 Lance Fortnow and Rahul Santhanam. Infeasibility of instance compression and succinct
PCPs for NP. J. Comput. Syst. Sci., 77(1):91‚Äì106, 2011.
20 Jakub Gajarsk√Ω, Petr Hlinen√Ω, Jan Obdrz√°lek, Sebastian Ordyniak, Felix Reidl, Peter Ross-
manith, Fernando S√°nchez Villaamil, and Somnath Sikdar. Kernelization using structural
parameters on sparse graph classes. J. Comput. Syst. Sci., 84:219‚Äì242, 2017.
21 Michael R. Garey and David S. Johnson. Computers and Intractability: A Guide to the
Theory of NP-Completeness. W. H. Freeman & Co., New York, NY, USA, 1979.
22 Sudipto Guha and Samir Khuller. Approximation algorithms for connected dominating
sets. Algorithmica, 20(4):374‚Äì387, 1998.
23 Sariel Har-Peled and Kent Quanrud. Approximation algorithms for polynomial-expansion
and low-density graphs. (CoRR/abs/1501.00721), 2015.
24 Sariel Har-Peled and Kent Quanrud. Approximation algorithms for polynomial-expansion
and low-density graphs. In Nikhil Bansal and Irene Finocchi, editors, Algorithms - ESA
2015 - 23rd Annual European Symposium, Patras, Greece, September 14-16, 2015, Proceed-
ings, volume 9294 of Lecture Notes in Computer Science, pages 717‚Äì728. Springer, 2015.
25 Danny Hermelin and Xi Wu. Weak compositions and their applications to polynomial
lower bounds for kernelization. In Proceedings of the Twenty-Third Annual ACM-SIAM
Symposium on Discrete Algorithms, SODA 2012, Kyoto, Japan, January 17-19, 2012, pages
104‚Äì113, 2012.
26 Eun Jung Kim, Alexander Langer, Christophe Paul, Felix Reidl, Peter Rossmanith, Ignasi
Sau, and Somnath Sikdar. Linear kernels and single-exponential algorithms via protrusion
decompositions. ACM Trans. Algorithms, 12(2):21:1‚Äì21:41, 2016.
27 Daniel Lokshtanov, Matthias Mnich, and Saket Saurabh. A linear kernel for a planar
connected dominating set. Theor. Comput. Sci., 412(23):2536‚Äì2543, 2011.
28 Daniel Lokshtanov, Amer E. Mouawad, Fahad Panolan, M. S. Ramanujan, and Saket
Saurabh. Reconfiguration on sparse graphs. In Algorithms and Data Structures - 14th In-
ternational Symposium, WADS 2015, Victoria, BC, Canada, August 5-7, 2015. Proceedings,
pages 506‚Äì517, 2015.
29 Daniel Lokshtanov, Fahad Panolan, M. S. Ramanujan, and Saket Saurabh. Lossy kernel-
ization. To appear in STOC 2017, (CoRR/abs/1604.04111), 2017.
30 Neeldhara Misra, Geevarghese Philip, Venkatesh Raman, Saket Saurabh, and Somnath
Sikdar. FPT algorithms for connected feedback vertex set. In WALCOM: Algorithms and
Computation, 4th International Workshop, WALCOM 2010, Dhaka, Bangladesh, February
10-12, 2010. Proceedings, pages 269‚Äì280, 2010.
31 Jaroslav Ne≈°et≈ôil and Patrice Ossona de Mendez. Grad and classes with bounded expansion
i. decompositions. European Journal of Combinatorics, 29(3):760 ‚Äì 776, 2008.
32 Jaroslav Nesetril and Patrice Ossona de Mendez. From sparse graphs to nowhere dense
structures: Decompositions, independence, dualities and limits, 2010. European Congress
of Mathematics.
33 Geevarghese Philip, Venkatesh Raman, and Somnath Sikdar. Polynomial kernels for domi-
nating set in graphs of bounded degeneracy and beyond. ACM Trans. Algorithms, 9(1):11,
2012.
E. Eiben, M. Kumar, A.E. Mouawad, F. Panolan XX:15
A Missing proofs from Section 2
Proof of Proposition 1
Proof. If D is connected, then we set Q = ‚àÖ and the proposition follows. Hence, assume
that G[D] contains at least 2 connected components. Now, the algorithm for finding Q does
the following:
(1) We start by setting Q = ‚àÖ.
(2) If G[D ‚à™Q] is connected, output Q.
(3) If there is a vertex z in Z \ (D‚à™Q) that is dominated from at least 2 different components
of G[D ‚à™Q], we add z into Q.
(4) If there is an edge uv with both end vertices in Z such that the number of components of
G[D ‚à™Q] that dominate at least one of {u, v} is at least 2, we add u and v into Q.
Note that in both steps (3) and (4) we increase the size of Q by at most two and decrease
the number of connected components in G[D ‚à™ Q] by at least one. Hence after at most
p‚àí 1 steps we end up with only one connected component. Now we show that if we cannot
apply step (3) nor step (4), then G[D ‚à™Q] is connected. Since, we cannot apply step (3),
each vertex of Z is dominated by exactly one connected component of D ‚à™ Q. Moreover,
since we cannot apply step (4), if uv is an edge in Z, then both u and v are dominated by
the same component of G[D ‚à™ Q]. Finally, since Z is connected, there is a path between
every pair of vertices of Z and all vertices on that path have to be dominated by the same
distinct component of G[D ‚à™Q], which implies that G[D ‚à™Q] consists of a single connected
component. J
Proof of Proposition 2
Proof. Let TD be a spanning tree of D. We create a (D, t)-covering family F(D, t) =
{T1, T2, . . . , T`}, which is a set of subtrees of TD constructed as follows. We root TD at an
arbitrary vertex r ‚àà V (TD). For any pair of vertices u, v ‚àà V (TD), u is called a child of
v if uv ‚àà E(TD) and v lies on the path from u to r. For each vertex v ‚àà V (TD), we let
weight(v) = 1 +
‚àë
u‚ààchild(v) weight(u), where child(v) denotes the set of children of v in TD.
In other words, weight(v) is the number of vertices in the subtree rooted at v. Leaves have
weight one. We use Tv to denote the subtree rooted at v. We construct F(D, t) = {T1, T2, . . .}
from TD as follows:
1. If TD is empty, terminate. Otherwise, compute the weights of all vertices in TD then sort
the vertices in increasing order of weight.
2. If there exists a vertex whose weight is between t and 2t (inclusive), pick the vertex with
the smallest such weight, add Tv to F(D, t), delete Tv from TD, then go back to step (1).
3. If there exists a vertex whose weight is strictly greater than 2t, pick the vertex with
the smallest such weight, greedily compute a subset S ‚äÜ child(v) such that t <‚àë
u‚ààS weight(u) < 2t, let R = child(v) \ S, add Tv ‚àí
‚ãÉ
w‚ààR V (Tw) to F(D, t), delete Tu
from TD, for every u ‚àà S, then go back to step (1). Note that by our choice of v, all
children of v must have weight at most t‚àí 1 as otherwise case (2) would apply.
4. Otherwise, every vertex in TD has weight strictly less than t and hence TD has at most t
vertices (by the definition of the weight function). In this case, simply add TD to F(D, t)
and terminate.
It is not hard to see that whenever we delete a subtree in the above procedure we never
disconnect the tree. Moreover, the procedure terminates only when the tree becomes empty
and hence
‚ãÉ
T‚ààF(D,t) V (T ) = V (TD). Whenever a tree is added to F(D, t) in either step (2)
XX:16 Lossy Kernels for Connected Dominating Set
or (3), the size of that tree is at least equal to t and at most equal to 2t. For step (4), the size
of the added tree is strictly less than t. Combining those two facts, we know that |F(D, t)|
is at most |V (D)|t + 1, as the size of the current tree TD is reduced by at least t for all but
one subtrees. To prove the last inequality, i.e.
‚àë
T‚ààF(D,t) |V (T )| ‚â§ (1 +
1
t )|V (D)|+ 1, we let
mult(v) denote the multiplicity of v minus one, i.e. the number of subtrees T ‚àà F(D, t) in
which v appears minus one. So if a vertex occurs only once, its multiplicity is zero. Observe
that
‚àë
T‚ààF(D,t) |V (T )| ‚â§ |V (D)|+
‚àë
v‚ààV (TD) mult(v). However, whenever the multiplicity
of a vertex increases by one, the size of the running subtree decreases by at least t (step (3))
or the procedure terminates (step (4)). Hence,
‚àë
v‚ààTD mult(v) ‚â§
|V (D)|
t + 1, and the bound
follows. J
B Missing proofs from Section 3
Proof of Lemma 3.2
Proof. We design such an algorithm as follows. If there is no vertex v ‚àà V (G) such
that the cardinality of the neighborhood of v in Z is at least d |Z|k e, then the algorithm
terminates and declares that ds(G) > k. Otherwise to find z ‚àà Z, the algorithm constructs
a sequence of sets Z = X0 ‚äá X1 ‚äá ¬∑ ¬∑ ¬∑ ‚äá X` and a set S = {v1, . . . , v`} ‚äÜ V (G) such
that Xi ‚äÜ N [vi]. We construct the sets Z = X0 ‚äá X1 ‚äá ¬∑ ¬∑ ¬∑ ‚äá X` and the set S using an
iterative procedure. Initially, we set S := ‚àÖ and X0 := Z. At step i, if there is a vertex
vi ‚àà V (G) \ S whose neighborhood in Xi‚àí1 has at least d |Xi‚àí1|k e vertices, then add vi to
S and set Xi := Xi‚àí1 ‚à©N [vi]. If no such vertex vi exists, then the algorithm outputs an
arbitrary vertex z ‚àà Xi‚àí1 \ S and stops.
The above procedure will construct a sequence Z = X0 ‚äá X1 ‚äá ¬∑ ¬∑ ¬∑ ‚äá X` and a set
S = {v1, . . . , v`}. We first claim that ` < d. Suppose ` ‚â• d. Then there is a complete
bipartite subgraph H of G with bipartition {v1, . . . , vd} and Xd \ {v1, . . . , vd}. Since |Xd| ‚â•
|Z|
kd
‚â• (2d+1)k
d+1
kd
‚â• 2d+ 1, H contains Kd,d as a subgraph, which is a contradiction to the
fact that G is Kd,d-free. Hence ` < d. Moreover, since |X`| ‚â• |Z|(k)` ‚â• (2d+ 1)k
2, there always
exists a vertex z ‚àà X` \ S that the algorithm can select to output.
Now we prove the correctness of the algorithm. Clearly, if there is no vertex v ‚àà V (G)
such that the cardinality of the neighborhood of v in Z is at least d |Z|k e, then ds(G) > k
and the algorithm declares it correctly. Otherwise let z ‚àà X` \ S be the output and let
Z ‚Ä≤ = Z \ {z}. We need to prove that Z ‚Ä≤ is still a k-domination core. Let D be a set of size
at most k that dominates Z ‚Ä≤. To prove that D is a dominating set in G, it is enough to
show that D dominates Z (because Z is a k-domination core). Since D already dominates
Z ‚Ä≤ = Z \{z}, it suffices to show that D dominates z. Notice that every vertex in S is adjacent
to z. Hence, to show that D also dominates Z, it is enough to show that D ‚à© S 6= ‚àÖ. We will
show that if D ‚à© S = ‚àÖ, then D cannot dominate all of X` \ {z} ‚äÜ Z ‚Ä≤. Since our algorithm
stops at step ` + 1, we know that every vertex outside S can dominate strictly less than
(2d + 1)kd‚àí` vertices from X`. As |X` \ {z}| ‚â• (2d + 1)kd+1‚àí`, |D| ‚â§ k and every vertex
outside S can dominate at most (2d+ 1)kd‚àí` ‚àí 1 vertices of X`, we have that D ‚à© S 6= ‚àÖ.
This completes the proof of the lemma. J
Proof of Lemma 3.4
Proof. Let t ‚â• 1 be a constant, which we fix later. We first define the Group Steiner
Tree problem. The input consists of an n-vertex graph H and sets Q1, Q2, . . . , Qt ‚äÜ V (H)
called groups. The task is to find a tree T of minimum size which contains at least one vertex
E. Eiben, M. Kumar, A.E. Mouawad, F. Panolan XX:17
from every group Qi. The Group Steiner Tree problem can be solved in O(2t ¬∑nO(1))-time
using polynomial space [30].
Now we design an algorithm A with the properties claimed in the lemma. Algorithm
A will apply Lemma 3.2 repeatedly starting from a k-domination core V (G) and either
conclude that cds(G) > k or find a k-domination core Z of size at most (2d + 1)kd+1 (in
polynomial time). Now, let Z be a family of groups {{z} | z ‚àà Z} and let R be the set
of equivalence classes defined by '. The set R‚à™ Z forms a family of groups of vertices in
V (G). For every subset Q = {Q1, . . . , Q`} ‚äÜ R ‚à™ Z of size at most 2t of groups in R ‚à™ Z,
construct a Group Steiner Tree instance on the graph G with groups Q1, . . . , Q`. Let
TQ be the corresponding solution. Note that since t is a constant each instance can be solved
in polynomial time. For every instance that we solve, if the size of TQ is at most 2t then we
mark the vertices of TQ in G. We denote the set of all marked vertices by
‚ãÉ
TQ. If
‚ãÉ
TQ is
not a dominating set in G, then algorithm A declares that cds(G) > k. Otherwise, since G
is assumed to be connected, algorithm A runs the polynomial-time algorithm mentioned in
Proposition 1 to obtain a set W ‚äÜ V (G) such that
‚ãÉ
TQ ‚à™W is a connected dominating set
in G and |
‚ãÉ
TQ ‚à™W | ‚â§ 3|
‚ãÉ
TQ|. Algorithm A outputs Y =
‚ãÉ
TQ ‚à™W as the required set,
where G[Y ] is a connected graph. Note that we also marked a solution of Group Steiner
Tree for Q = {Q} for every Q ‚àà R ‚à™ Z. Hence
‚ãÉ
TQ contains all of Z and a vertex from
each group in R.
We now prove the correctness of the algorithm. Suppose cds(G) ‚â§ k, then we claim that
algorithm A outputs a set Y. If cds(G) ‚â§ k, then by Lemma 3.2, algorithm A will, as the
first step, correctly find a k-domination core Z of size at most (2d+ 1)kd+1 and the set of
groups R‚à™Z. Let D be the graph induced by a connected dominating set of size at most k
in G (i.e. D is a tree). Let D‚Ä≤ be an arbitrary set of cardinality at most |V (D)| such that
for any w ‚àà V (D), there is a vertex w‚Ä≤ ‚àà D‚Ä≤ with the property that {w,w‚Ä≤} ‚äÜ Q ‚àà R ‚à™ Z
and w‚Ä≤ ‚àà
‚ãÉ
TQ. That is, if V (D) has a vertex from a group Q in R‚à™ Z, then D‚Ä≤ also has
a vertex from group Q which is, in addition, marked by algorithm A. Note that we can
construct the set D‚Ä≤ since
‚ãÉ
TQ contains at least one vertex from each group in R‚à™Z.
I Claim 2.0.1. D‚Ä≤ is a dominating set in G.
Proof of the Claim. Notice that Z ‚à© V (D) = Z ‚à©D‚Ä≤ and if any vertex in Z is adjacent to a
vertex in a group Q, then it is adjacent to all vertices in group Q. This implies that D‚Ä≤ also
dominates Z and since |D‚Ä≤| ‚â§ |V (D)| ‚â§ k, by the definition of a k-domination core, D‚Ä≤ is a
dominating set in G. J
Hence we can conclude that if cds(G) ‚â§ k, then
‚ãÉ
TQ always dominates G and algorithm
A outputs a set Y . Moreover, since Z ‚äÜ
‚ãÉ
TQ ‚äÜ Y , we have that Y contains a k-domination
core. This concludes the proof of property (i) of the lemma.
Now we prove that OPT(G[Y ], k) ‚â§ (1 + )OPT(G, k). Let D‚àó be the graph induced by
a connected dominating set for G of minimum cardinality (i.e. D‚àó is a tree). If |V (D‚àó)| > k,
then OPT(G[Y ], k) ‚â§ (1 + )OPT(G, k) holds trivially. So we assume that |V (D‚àó)| ‚â§ k.
We let F(D‚àó, t) = {T1, T2, ¬∑ ¬∑ ¬∑ , Tm} denote a (D‚àó, t)-covering family. Proposition 2 implies
that there exists such a family for which |F(D‚àó, t)| ‚â§ |V (D
‚àó)|
t + 1 and
‚àë
T‚ààF(D‚àó,t) |V (T )| ‚â§
(1 + 1t )|V (D
‚àó)| + 1. Moreover, the size of each connected subgraph T (in this case also
subtree) is at most 2t. We construct a new family F ‚Ä≤ from F(D‚àó, t) as follows. For each
T ‚àà F(D‚àó, t), we replace T by TQ, where Q is the set of groups from R ‚à™ Z such that
Q ‚àà Q if and only if V (T ) ‚à© Q 6= ‚àÖ and TQ is the set of marked vertices in an optimal
Steiner tree connecting vertices from the groups in Q. Note that the fact that T is of size
at most 2t guarantees the existence of TQ (by construction). Moreover, the size of TQ is
XX:18 Lossy Kernels for Connected Dominating Set
at most the size of T , since T is also a solution for Group Steiner Tree for Q. Let
DF ‚Ä≤ denote the union of all vertices in F ‚Ä≤. Let D‚Ä≤ be a subset of DF ‚Ä≤ , of cardinality at
most |V (D‚àó)|, such that for any w ‚àà V (D‚àó), there is a vertex w‚Ä≤ ‚àà D‚Ä≤ with the property
that {w,w‚Ä≤} ‚äÜ Q ‚àà R ‚à™ Z and w‚Ä≤ ‚àà DF ‚Ä≤ . That is, if V (D‚àó) has a vertex from a group
Q in R ‚à™ Z, then D‚Ä≤ also has a vertex from group Q. Using the same arguments as in
the proof of Claim 2.0.1, we know that D‚Ä≤ is a dominating set in G. This implies that
DF ‚Ä≤ ‚äá D‚Ä≤ is also a dominating set in G. Applying Proposition 1 in G[Y ] (with DF ‚Ä≤ as
dominator and since G[Y ] is connected), we obtain a connected dominating set of size at most
2|F(D‚àó, t)|+|DF ‚Ä≤ | ‚â§ 2|V (D
‚àó)|
t +2+(1+
1
t )|V (D
‚àó)|+1 = (1+ 3t )|V (D
‚àó)|+3. Now we can fix the
constant t appropriately (i.e. roughly 3 ) and we get that OPT(G[Y ], k) ‚â§ (1 + )OPT(G, k).
Now we show that |Y | = kO(d2). By Lemmata 3.2 and 3.3, we have that |R ‚à™ Z| =
O(kO(d2)). From the construction, it follows that |
‚ãÉ
TQ| = O(2t|R ‚à™ Z|O(t)) = O(2t ¬∑
kO(td
2)) = kO( d
2
 ). Notice that Y =
‚ãÉ
TQ‚à™W , whereW is obtained by applying Proposition 1
and hence we have that Y = |
‚ãÉ
TQ ‚à™W | ‚â§ 3|
‚ãÉ
TQ| = kO(
d2
 ). J
C Missing proofs from Section 4
Proof of Proposition 3
Proof. By Definition 4.1, if X dominates G then we are done. Otherwise, there exist A ‚äÜ X
and B ‚äÜ V (G) such that |B| < |A| ‚â§ c, X ‚Ä≤ = (X \ A) ‚à™ B is a set that dominates Z, and
the number of connected components of X ‚Ä≤ is at most the number of connected components
of X. Moreover, we can find such sets A and B by going through all possibilities in time
O(|V (G)|2c‚àí1) (i.e., in polynomial time for fixed c). By applying this argument iteratively
on X ‚Ä≤, we will eventually find a set Y which dominates G. Furthermore, by Definition 4.1,
|B| < |A|, and hence the size of the Z-dominator drops by one in each step. Therefore, the
required set Y can be found in time O(|V (G)|2c). J
Proof of Lemma 4.5
Proof. From Lemma 2.8, we know that the number of different 3-projections in X of vertices
of R is bounded by Cex ¬∑ |X|. Observe that for each u ‚àà S, we have M1(u,X) ‚äÜM2(u,X) ‚äÜ
M3(u,X) and the number of choices for M3(u,X) is again at most Cex ¬∑ |X| (since S ‚äÜ R).
Moreover, since u ‚àà R, we have that |M3(u,X)| ‚â§ CM (property (3) of Corollary 4.4). Hence,
to define sets Mi(u,X) for 1 ‚â§ i < 3 it suffices, for every w ‚àà M3(u,X), to choose the
smallest index j, 1 ‚â§ j ‚â§ 3, such that w ‚ààMj(u,X). The number of such choices is at most
3CM , and hence the claim follows by setting Ceq = Cex + CM. J
Proof of Lemma 4.7
Proof. First, using Lemma 2.7 we compute X0 = clrq(X). Then, |X0| ‚â§ Ccl1 ¬∑ |X| and for
each vertex u /‚àà X0 we have |MGrq(u,X0)| ‚â§ Ccl2. Now, for each set Y ‚äÜ X0 of at most q
vertices, compute an optimal Steiner tree TY whose edges do not belong to G[X0]; in case
there is no such tree, set TY = ‚àÖ. Note that TY can be computed in polynomial time for any
fixed q [3]. Define X ‚Ä≤ to be X0 plus the vertex sets of all trees TY that have size at most rq.
I Claim 3.0.1. |X ‚Ä≤| ‚â§ Ctc ¬∑ |X0|, where Ctc is a constant depending only on r, q, and a finite
number of grads of G.
E. Eiben, M. Kumar, A.E. Mouawad, F. Panolan XX:19
Proof of the Claim. Let H be a graph on vertex set X0, where uv ‚àà E(H) if and only if
there exists Y such that {u, v} ‚äÜ Y , TY 6= ‚àÖ and has size at most rq, and hence its vertex set
was added to X. Note that we do not add multiedges. For every such set Y , H[Y ] induces a
clique in H. Let œâ(H) denote the number of cliques in H. Clearly |X ‚Ä≤| ‚â§ |X0|+ rq ¬∑ œâ(H),
so it suffices to prove an upper bound on œâ(H).
Consider an edge uv ‚àà E(H). The existence of this edge implies that u and v appear
together in some tree TY of size at most rq. Since TY does not contain any edges from
G[X0] (by construction), there must exist a path Pu,v of length at most rq connecting u and
v. The internal vertices of Pu,v do not belong to X0. Take any w ‚àà X ‚Ä≤ \X0, and consider
for how many pairs {u, v} ‚äÜ X0 it can hold that w ‚àà Pu,v. If {u, v} is such a pair, then in
particular u, v ‚ààMGrq(w,X0). But we know that |MGrq(w,X0)| ‚â§ Ccl2, so the number of such
pairs is at most œÑ ‚â§ (Ccl2)2. Consequently, we observe that graph H is an (rq ‚àí 1)-shallow
minor of G  KœÑ : when each vertex w ‚àà X ‚Ä≤ \ X0 is replaced with œÑ copies, then we can
realize all the paths between u and v, in GKœÑ , so that they are internally vertex-disjoint.
From Lemma 2.6, we know that ‚àárq‚àí1(GKœÑ ) is bounded polynomially in ‚àárq‚àí1(G) and œÑ ,
which in turn is also bounded polynomially in ‚àárq‚àí1(G). Hence ‚àárq‚àí1(GKœÑ ) is bounded
polynomially in ‚àárq‚àí1(G). The number of cliques in graph of bounded expansion is linear
in the number of vertices [6]. Combining the fact that H has bounded expansion with
|X ‚Ä≤| ‚â§ |X0|+ rq ¬∑ œâ(H), the claim follows. J
I Claim 3.0.2. If Y ‚äÜ X0 has size at most q and stG(Y ) ‚â§ rq then stG[X‚Ä≤](Y ) = stG(Y ).
Proof of the Claim. Let TY be an optimal Steiner tree for Y in G, and let T1, T2, . . . , Tp be
the subtrees of size greater than one obtained after deleting all edges of TY for which both
endpoints are in X0. Note that deleting such edges can only create either singleton vertices
or subtrees of size greater than one. Moreover, let Yi, 1 ‚â§ i ‚â§ p, denote the set Y ‚à© V (Ti).
The existence of Ti certifies that some tree of size at most |Ti| was added when constructing
X ‚Ä≤ from X0, and hence stG[X‚Ä≤](Yi) ‚â§ |Ti|. Consequently, we infer that
stG[X‚Ä≤](Y ) ‚â§
p‚àë
i=1
stG[X‚Ä≤](Yi) + |Y \
p‚ãÉ
i=1
Yi| ‚â§
p‚àë
i=1
|Ti|+ |Y \
p‚ãÉ
i=1
Yi| ‚â§ |TY | = stG(Y ).
The opposite inequality stG[X‚Ä≤](Y ) ‚â• stG(Y ) follows directly from the fact that G[X ‚Ä≤] is an
induced subgraph of G. J
Claim 3.0.1 and the fact that |X0| ‚â§ Ccl1|X| prove property (2). Claim 3.0.2 and the fact
that X ‚äÜ X0 prove property (1). J
Proof of Lemma 4.9
Proof. We first construct a bipartite graph H with bipartition (A,B) as follows. We add
a vertex xz ‚àà A for each vertex z ‚àà Z ‚Ä≤ and we add one vertex yŒ∫ ‚àà B for each equivalence
class Œ∫ of relation '. We add an edge xzyŒ∫ ‚àà E(H) whenever z is in M1(w,Z ‚Ä≤), for some
w ‚àà Œ∫. Finally, delete any isolated vertices in H (applies if some equivalence class has no
neighbors in Z ‚Ä≤). It is not hard to see that H is a subgraph of G and, consequently, has
bounded expansion. We can therefore apply Lemma 2.9 to obtain a mapping œÜ : B ‚Üí A with
yœÜ(y) ‚àà E(H), for each y ‚àà B, and œÜ‚àí1(xz) ‚â§ Cch, for each xz ‚àà A.
We now consider the graph
...
G which is obtained by adding a universal vertex to GKCch .
From Lemma 2.6, we know that GKCch has bounded expansion. Applying Lemma 2.5 to
...
G,
we know that
...
G also has bounded expansion. Hence, it remains to show that GÃà is a subgraph
XX:20 Lossy Kernels for Connected Dominating Set
of
...
G. From the mapping œÜ, we can associate each (except at most one) equivalence class
with some vertex in Z ‚Ä≤. In addition, every vertex in Z ‚Ä≤ is associated with at most Cch classes.
In other words, when each vertex in Z ‚Ä≤ is replaced by Cch copies, each equivalence obtains a
distinct universal vertex. The extra universal vertex added to GKCch guarantees that the
equivalence class with no neighbors in Z ‚Ä≤ is also covered. This completes the proof. J
Proof of Claim 4.10.1
Proof. Recall that, when constructing the graph GÃà, we added one universal vertex for each
equivalence class in V (G) \ Z ‚Ä≤. Hence, after applying Lemma 4.7, we know that for any
Y ‚äÜ Z ‚Ä≤ ‚à™ U of size at most 2t (which is exactly a subset of the groups) if stG(Y ) ‚â§ 4t then
stGÃà(Y ) = stG(Y ). Every vertex in Z ‚Ä≤ belongs to a distinct group and every vertex uŒ∫ ‚àà U
is connected to all vertices in Œ∫. Hence, any tree of size greater than one containing a vertex
uŒ∫ must also contain a neighbor of uŒ∫ (from the same group). The existence of T implies
that there exists a tree of size at most 2t connecting all groups appearing in T . Hence, a
tree T ‚Ä≤ certifying this fact exists in G‚Ä≤. J

