ar
X
iv
:1
70
6.
09
35
6v
1 
 [
cs
.C
C
] 
 2
8 
Ju
n 
20
17
Discrete Mathematics and Theoretical Computer Science DMTCS vol. (subm.):1, by the authors, #rev
Tight Euler tours in uniform hypergraphs –
computational aspects
Zbigniew Lonc Paweł Naroski Paweł Rzążewski
1 Faculty of Mathematics and Information Science, Warsaw University of Technology, Poland
received , revised , accepted .
By a tight tour in a k-uniform hypergraph H we mean any sequence of its vertices (w0, w1, . . . , ws−1) such that for
all i = 0, . . . , s−1 the set ei = {wi, wi+1 . . . , wi+k−1} is an edge of H (where operations on indices are computed
modulo s) and the sets ei for i = 0, . . . , s − 1 are pairwise different. A tight tour in H is a tight Euler tour if it
contains all edges of H . We prove that the problem of deciding if a given 3-uniform hypergraph has a tight Euler tour
is NP-complete, and that it cannot be solved in time 2o(m) (where m is the number of edges in the input hypergraph),
unless the ETH fails. We also present an exact exponential algorithm for the problem, whose time complexity matches
this lower bound, and the space complexity is polynomial. In fact, this algorithm solves a more general problem of
computing the number of tight Euler tours in a given uniform hypergraph.
Keywords: tight Euler tour, Eulerian hypergraphs
Problems of existence and construction of Euler tours and Hamilton cycles in graphs are among the
most intensively studied problems in graph theory. Recently much attention has also been received by
Hamiltonian problems for uniform hypergraphs. They have been studied from both theoretical (see e.g.
Rödl et al. (2008, 2010), Kühn and Osthus (2006), Katona and Kierstead (1999), Hàn and Schacht
(2010), Kühn (2010)), and computational (see Dalhaus et al. (1993), Szymańska (2009), Karpiński et
al. (2010)) perspectives and led to such spectacular results as a Dirac-type theorem on tight Hamilton
cycles in 3-uniform hypergraphs (see Rödl et al. (2010)). By contrast, not much research has been done
on problems of existence and construction of Euler tours in uniform hypergraphs (see Lonc and Naroski
(2010, 2012) and Bahmanian and Šajna (2016)).
There are many possible generalizations of the graph-theoretic concepts of a cycle and a tour to uniform
hypergraphs. The results on Euler tours mentioned in the preceding paragraph concern so-called Berge
cycles and tours. In this paper we deal with tight tours.
It is worth to mention that the problem of existence of a tight Euler tour is nontrivial even for complete
k-uniform hypergraphs with k ≥ 3. An anticipated solution to this problem is a content of the following
conjecture originally formulated in slightly different terminology of so-called universal cycles.
Conjecture 1 (Chung et al. (1992)) For every k > 2 there exists n0(k) such that for every n > n0(k) the
complete k-uniform hypergraph on n vertices has a tight Euler tour if and only if
(
n−1
k−1
)
≡ 0 (mod k).
The conjecture obviously holds for k = 2. Jackson (1993, 1999) and Hurlbert (1994) proved it for
k = 3, 4, 5 and for k = 6 when n is relatively prime with 6. In the remaining cases the conjecture is open.
ISSN subm. to DMTCS c© by the authors by the author(s) Distributed under a Creative Commons Attribution 4.0 International License
2 Zbigniew Lonc, Paweł Naroski, Paweł Rzążewski
Here are some other problems that motivate studying computational aspects of Eulerian problems in
hypergraphs.
In computer graphics, 3-dimensional objects are usually represented by 3-dimensional, usually trian-
gular, meshes (see Peng et al. (2005)). Storing and processing such a representation as raw data might
be quite costly. Indeed, a trivial way of encoding is to store every triangle separately, i.e. the coordinates
of all three vertices are stored. It requires storing 3m vertices (where m is the number of triangles in the
considered triangulation). One of typical methods to deal with this problem is to partition the mesh into
long strips of triangles and then encode these strips. Observe that if we manage to arrange the vertices of
the mesh in a (cyclic) sequence in such a way that the vertices of every triangle appear exactly once as the
three consecutive terms of this sequence and every three consecutive terms of it constitute some triangle,
then we will have to store the coordinates of m vertices only. Obviously, it is not always possible (see
Arkin et al. (1996)).
Another motivation originates from database theory. Let V be a set of records of some database and
let E be a family of some k-element subsets of V , each of them is supposed to be an answer to some
query (e.g. it is a set of k records which satisfy some given conditions in “the best” way). We want to
minimize the time needed to answer all possible queries. One way of achieving this goal is to organize
the records of the data base as a cyclic list C in such a way that every element of E is represented in C
as k consecutive elements. The list C is optimal in this approach if every member of E is represented in
C exactly once and every k consecutive elements of C constitute some member of E (see Lonc et al.
(1983) for some more details).
In both problems described above we have some k-uniform hypergraph (in the former example k = 3)
and we want to find a tight Euler tour in this hypergraph.
In this paper we discuss computational complexity issues related to tight Euler tours. Our main result
(Theorem 1) says that the problem of deciding if a given 3-uniform hypergraph has a tight Euler tour is
NP-complete .
The construction in the proof of Theorem 1 gives also some insight into the complexity of algorithms
solving the problem. The complexity assumption that we use here is the Exponential Time Hypothesis
(usually referred to as the ETH) (Impagliazzo et al. (1999)). A consequence of this hypothesis, typically
used to give conditional lower bounds for the running time of algorithms, is the fact that 3-SAT with
t variables and p clauses cannot be solved in time 2o(t+p) (Impagliazzo et al. (2001)). We show that
the existence of a tight Euler tour in a 3-uniform hypergraph cannot be decided in time 2o(m) (where m
denotes the number of edges of the input hypergraph), unless the ETH fails. This lower bound is matched
with a simple exact algorithm with time complexity 2m · mO(1) and polynomial space complexity (see
Section 3). In fact, the algorithm solves a more general problem of counting the number of tight Euler
trails and tours in the input hypergraph.
1 Preliminaries
For a positive integer n, we define [n] := {1, 2, . . . , n}. By a k-uniform hypergraph we mean a pair
H = (V,E), where V is a non-empty finite set and E ⊆
(
V
k
)
:= {X ⊆ V : |X | = k}. For a hypergraph
H = (V,E), by E(H) we denote the set E. The elements of V are called vertices of H and the elements
of E its edges. The codegree of a pair of different vertices vu in a hypergraph is the number of edges in
E containing both v and u.
A tight walk in a k-uniform hypergraph H is a sequence w1w2 . . . ws of vertices of H such that for all
Tight Euler tours in hypergraphs 3
i = 1, . . . , s− k + 1 the set ei := {wi, wi+1, . . . , wi+k−1} is an edge of H .
For a tight walk C = w1w2 . . . ws, we say that an edge e is contained in C (or just that e is an edge of
C) if e = ei for some i = 1, . . . , s− k + 1. Note that a single edge may appear in a tight walk more than
once, i.e., it is possible that ei = ej for some i 6= j. Then, we say that an edge is contained in C several
times. If every edge is contained in C at most once, then we call C a tight trail.
By the length of a tight walk C = w1w2 . . . ws we mean the number s− k+1. Note that if C is a tight
trail, then the length of C is equal to the number of edges contained in C.
A tight trail C is a tight Euler trail in H if every edge of H is contained in C exactly once. Note that
the length of a tight Euler trail is equal to |E(H)|.
A tight tour in H is a closed tight trail, i.e., a tight trail C = w1w2 . . . wmw1w2 . . . wk−1. Such a tight
tour will be denoted by (w1, w2, . . . , wm). A tight Euler tour is a tight tour which is a tight Euler trail.
Note that the length m of a tight Euler tour in H is equal to |E(H)|.
Remark 1 Observe that if (w1, w2, . . . , wm) is a tight tour (respectively, tight Euler tour) in H , then the
reversed sequence (wm, . . . , w2, w1) and each sequence (wi, . . . , wm, w1, . . . , wi−1), for i = 1, . . . ,m,
are also tight tours (resp., tight Euler tours) in H . We shall identify all these tours with C. Thus, a tight
Euler tour corresponds to exactly 2|E(H)| closed tight Euler trails.
Now we turn to 3-uniform hypergraphs. Our aim is to prove that the problem of deciding if a given
3-uniform hypergraph has a tight Euler tour is NP-complete. To simplify the notation we shall write xyz
rather than {x, y, z} if {x, y, z} is an edge of a 3-uniform hypergraph. If e is an edge of some 3-uniform
hypergraph H and C is a tight tour in H which contains e, then the three vertices of e are some three
consecutive terms of C.
We shall construct now a hypergraph Hℓ (where ℓ > 4 is an integer) which will be used later to prove
our main result. Informally speaking, Hℓ is a 3-uniform hypergraph whose edges are the triangles in a
triangulation of the torus depicted in Figure 1. Here is a formal definition of Hℓ.
Definition 1 For each integer ℓ > 4 we define a hypergraph Hℓ = (V,E) such that
V = {0, . . . , ℓ+ 1} ∪
ℓ−1
⋃
i=1
{vai , v
b
i }
and
E =
ℓ
⋃
i=1
Ei,
where
E1 = {10ℓ, 1v
a
1ℓ, v
a
1ℓ(ℓ+ 1), v
a
1v
b
1(ℓ+ 1), v
b
1(ℓ+ 1)0, v
b
110},
Ei = {i(i− 1)v
a
i−1, iv
a
i v
a
i−1, v
a
i v
a
i−1v
b
i−1, v
a
i v
b
i v
b
i−1, v
b
i v
b
i−1(i− 1), v
b
i i(i− 1)}
for i = 2, . . . , ℓ− 1, and
Eℓ = {ℓ(ℓ− 1)v
a
ℓ−1, ℓ(ℓ+ 1)v
a
ℓ−1, (ℓ + 1)v
a
ℓ−1v
b
ℓ−1, (ℓ+ 1)0v
b
ℓ−1, 0v
b
ℓ−1(ℓ− 1), 0ℓ(ℓ− 1)}.
4 Zbigniew Lonc, Paweł Naroski, Paweł Rzążewski
b
0
b
1
b
2
b
3
b
ℓ− 3
b
ℓ− 2
b
ℓ − 1
b
ℓ
bℓ+ 1 b
vb1
b
vb2
b
vb3
b
vbℓ−3
b
vbℓ−2
b
vbℓ−1
b 0
bℓ b
va1
b
va2
b
va3
b
vaℓ−3
b
vaℓ−2
b
vaℓ−1
b ℓ+ 1
b
0
b
1
b
2
b
3
b
ℓ− 3
b
ℓ− 2
b
ℓ − 1
b
ℓ
Fig. 1: The hypergraph Hℓ. In this picture we identify vertices labelled with the same label.
Observe that the maximum codegree of a pair of vertices in H is 2. We shall study some properties of
tight tours in the hypergraph Hℓ now.
Let e = xyz be an arbitrary edge of a tight tour C = (w0, . . . , wm−1) in Hℓ. Then, the vertices of e are
some three consecutive terms wi, wi+1, wi+2 of C. Let us assume first that they appear in the ordering
xyz, i.e. wi = x, wi+1 = y, and wi+2 = z, where the operations on indices are computed modulo m.
By the definition of a tight tour, wi+1wi+2wi+3 = yzwi+3 is an edge of Hℓ different from e. However,
as a pair of distinct vertices of Hℓ is contained either in exactly two edges or in none of the edges, we
conclude that the vertex wi+3 is uniquely determined by the ordering xyz of the vertices of the edge e.
The same applies to all other edges contained in C, so the ordering of the vertices of some edge contained
in C determines the whole tour. Observe that the reversed ordering zyx of the vertices of e defines the
same tour C. Hence, each edge in Hℓ is contained in at most 3!/2 = 3 tours. From now on we shall
identify the mutually reversed orderings of vertices of the edges of Hℓ.
Let us describe the tight tours in Hℓ determined by the 3 orderings of the edge 01ℓ (it does not really
matter which edge we choose).
At the beginning let us consider the ordering 01ℓ. It determines the tour (0, 1, ℓ, va1 , ℓ+1, v
b
1). This tour
contains only 6 of the 6ℓ edges of the hypergraph Hℓ, so it is not a tight Euler tour. We call such tours in
Hℓ the tours of type N .
Now let us consider the ordering 0ℓ1 of our edge. It determines the tour
(0, ℓ, 1, va1 , 2, v
a
2 , . . . , ℓ− 1, v
a
ℓ−1, ℓ, ℓ+ 1, v
a
1 , v
b
1, . . . ,
vaℓ−1, v
b
ℓ−1, ℓ+ 1, 0, v
b
1, 1, . . . , v
b
ℓ−1, ℓ− 1),
which is a tight Euler tour in Hℓ. We call this tight Euler tour in Hℓ the tour of type T .
Finally, the ordering ℓ01 determines the tight tour beginning with
(ℓ, 0, 1, vb1, v
b
2, v
a
2 , v
a
3 , 3, 4, . . .).
It is routine to verify that this tour is an Euler tour in Hℓ if and only if ℓ 6≡ 1 (mod 3). We call this tight
Euler tour in Hℓ the tour of type F .
Tight Euler tours in hypergraphs 5
Figure 2 depicts the tight Euler tour of type F in the hypergraph H5.
b
0
b
1
II
b
2
XXIV
b
3
XVI
b
4
VIII
b
5
XXX
b6
XI
b
vb1 III
XII
b
vb2 XXV
IV
b
vb3 XVII
XXVI
b
vb4 IX
XVIII
b 0
X
b5
XXI
b
va1 XIII
XXII
b
va2 V
XIV
b
va3 XXVII
VI
b
va4 XIX
XXVIII
b 6
XX
b
0
I
b
1
XXIII
b
2
XV
b
3
VII
b
4
XXIX
b
5
Fig. 2: The tight tour (5, 0, 1, vb1, v
b
2, v
a
2 , v
a
3 , 3, 4, v
b
4, 0, 6, v
b
1, v
a
1 , v
a
2 , 2, 3, v
b
3, v
b
4, v
a
4 , 6, 5, v
a
1 , 1, 2, v
b
2, v
b
3, v
a
3 , v
a
4 , 4)
of type F in H5. The consecutive edges of this tour are enumerated with Roman numerals.
It is clear that there are no more tight Euler tours in Hℓ. From now on we consider only those values of
ℓ, for which the hypergraphHℓ has exactly two tight Euler tours.
For any edge e ∈ E, the vertices of e are ordered differently in each of the three types of tight tours in
Hℓ. Each of the two mutually reversed orderings of vertices of e in the tour of type N (resp. of type T , of
type F ) will be called an ordering of e of type N (resp. of type T , of type F ).
Let us observe that the type of an ordering of an edge e is determined by the pair of its vertices which
are not consecutive in the ordering. For example, for the edge 01ℓ, the pair 0ℓ determines an ordering of
type N , the pair 01 – an ordering of type T and the pair 1ℓ – an ordering of type F . In general, each pair
of vertices joined with a vertical (resp. horizontal, skew) line in Figure 1 determines orderings of type N
(resp. T , F ) of the edges containing the pair.
Let n > 2. By a cycle Cn we mean a 3-uniform hypergraph
({0, . . . , n− 1}, {i(i+ 1)(i+ 2) : i = 0, . . . , n− 1}),
where additions are computed modulo n. Note that the maximum codegree of a pair of vertices in Cn
is 2.
Clearly, the hypergraphCn has exactly one tight Euler tour. Abusing the definitions a little bit, we shall
identify sometimes cycles with their tight Euler tours.
2 Complexity results
In this section we prove NP-completeness of the problem of determining the existence of a tight Euler tour
in a 3-uniform hypergraph. To make the proof of this statement easier to follow we give a short outline of
6 Zbigniew Lonc, Paweł Naroski, Paweł Rzążewski
the main steps of the reasoning.
In the proof we apply a reduction from 3-SAT. To this end, for any 3-SAT formula, we build a 3-uniform
hypergraph H . For every variable xi appearing in this formula we define a copy of the hypergraph Hℓi
(for some ℓi). As we have seen, the hypergraph Hℓi (for suitable values of ℓi) has exactly two tight Euler
tours. One of them (of type T ) corresponds to setting xi as true. The other one (of type F ) corresponds
to setting xi as false. For every clause dj of the formula we define a copy of the cycle C6. Some vertices
of it are identified with some vertices of the copies of Hℓi corresponding to the variables appearing in
dj . These identifications are designed in such a way that a tour in H can get from the copy of C6 to Hℓi
forcing the tour of type T in Hℓi if and only if xi appears positively in dj and, analogously, such a tour
can get from C6 to Hℓi forcing the tour of type F in Hℓi if and only if xi appears negated in dj . The most
important property of the hypergraph H is that in every tight Euler tour in H the orderings of all edges
of each subhypergraph Hℓi are of the same type – either T or F . Therefore such an Euler tour defines a
truth assignment of the variables of the 3-SAT formula (and vice versa).
Theorem 1 The problem of deciding if a given 3-uniform hypergraph H has a tight Euler tour is NP-
complete, even if the maximum codegree of a pair of vertices in H is bounded by 4. Moreover, it cannot
be solved in time 2o(|E(H)|), unless the ETH fails.
Proof: Verifying if a sequence of vertices is a tight Euler tour in a hypergraph can obviously be done in
polynomial time, so our problem is in the class NP.
To prove it is complete in this class, we show a reduction from 3-SAT. Let c = d1∧ . . .∧dp be a 3-SAT
formula, where for all j = 1, . . . , p, each dj is a clause with exactly three literals. We can assume that no
clause contains both a variable and its negation because such a clause can be deleted from the formula c
without changing its satisfiability. Let X = {x1, . . . , xt} be the set of variables appearing in the formula
c. For a variable xi, let occ(xi) denote the number of occurrences of xi in c (either positive of negative).
Moreover, we keep these occurrences ordered. The ordering is implied by the ordering d1, d2, . . . , dp of
the clauses.
For the formula c we construct a 3-uniform hypergraphH . For every i = 1, . . . , t, let ℓi be the smallest
integer such that ℓi > 2 occ(xi) + 3 and ℓi 6≡ 1 (mod 3). Obviously, ℓi 6 2 occ(xi) + 4.
For each variable xi we define a copy of the hypergraph Hℓi , which we denote by H
i. Next, for each
clause dj we define a copy of a cycle C6, which we denote by C
j
6 . Finally, we define one copy of the
cycle Ct.
At the beginning we assume that the vertex sets of all hypergraphs H1, . . . , Ht, C16 , . . . , C
p
6 and Ct
are pairwise disjoint. However, we shall identify some vertices in the next steps of the construction of the
hypergraph H . In each identification step we will choose two vertices x, y, belonging to a common edge,
and two different vertices x′, y′, also belonging to some edge, and will identify x with x′ and y with y′.
All such pairs xy of identified vertices will be called the connectors.
Firstly, for every i = 1, . . . , t, we identify the vertices 2i− 2 and 2i− 1 of the hypergraph Ct with the
vertices vaℓi−1 and v
b
ℓi−1
, respectively, of the hypergraph Hi.
Let dj be a clause in the formula c and let xi, xk , and xs be the variables appearing in dj . Moreover,
for q ∈ {i, k, s}, let oq be the number, such that the occurrence of xq in dj is the oq-th occurrence of this
variable. If the variable xi is negated in dj , then we identify the vertices 0 and 1 of the hypergraphC
j
6 with
the vertices va2oi and v
a
2oi+1, respectively, of the hypergraphH
i. And if a variable xi is not negated in dj ,
then we identify the vertices 0 and 1 of the hypergraphCj6 with the vertices v
b
2oi and v
a
2oi+1, respectively,
Tight Euler tours in hypergraphs 7
of the hypergraphHi. Analogously we identify the vertices 2 and 3 of the hypergraphCj6 with the vertices
of Hk and the vertices 4 and 5 of Cj6 with the vertices of H
s.
These identifications complete the definition of the hypergraph H . Note that the hypergraph H can be
constructed in a polynomial time for any 3-SAT formula c.
Observe that in each identification step we identified a pair of vertices from some hypergraph Hi with
a pair of vertices from some cycle (either Ct or C
j
6). Thus the subhypergraphs of H induced by the edges
of the hypergraphs C16 , . . . , C
p
6 , and Ct are still vertex disjoint. The same is true for the subhypergraphs
induced by the edges of H1, . . . , Ht. Moreover, the maximum codegree of a pair of vertices in H is 4.
We shall prove now several claims concerning properties of the hypergraph H .
Claim 1 Let C be a tight Euler tour in H and let e and f be two edges of some subhypergraph Hi such
that they intersect on a 2-element set, which is not a connector. Then the orderings of e and f defined by
the tour C are of the same type in Hi.
Proof of Claim 1. Let e = xyz and f = xyu. If the ordering of the edge e in C is zxy or zyx (or the
reverse of one of them), then, as xy is not a connector, the edge f precedes or succeeds e in the tour C. On
the other hand, obviously, e and f are consecutive edges of some tour in Hi. Therefore, by the definition
of the type of an ordering of an edge, the orderings of e and f in C are of the same type.
Suppose now that the ordering of e in C is xzy (or its reverse). Then, the ordering of e is determined
by the pair xy and, obviously, f is neither the successor nor the predecessor of e in C. If the ordering of
f in C is not determined by xy, then x and y appear consecutively in the ordering of f in C. Moreover,
since xy is not a connector, similarly as in the previous case, we obtain that the edge e is the successor or
the predecessor of f in C, a contradiction. Thus, the ordering of f in C is determined by the pair xy and,
consequently, the orderings of e and f defined by C are of the same type in Hi. 
Claim 2 Let C be a tight Euler tour in H . For every i = 1, . . . , t, the orderings of all the edges of the
subhypergraph Hi defined by C are of the same type, either T or F .
Proof of Claim 2. By Claim 1, the orderings defined by C of every two edges in Hi that have two
common vertices which do not form a connector are of the same type in Hi. It is easy to observe that the
pairs of vertices which are connectors in Hi form the set of edges of an acyclic graph. Thus, the orderings
defined by the tour C of all edges in Hi are of the same type.
Suppose now the orderings of all edges of Hi are of type N . Then, however, the edges of the set E1 in
Hi form a tight tour of length 6. This tour cannot be a part of C because the edges in E1 do not contain
any connector. Hence, the orderings of all edges of Hi are of type T or all are of type F . 
Claim 3 Let C be a tight Euler tour in H and let wk−1wkwk+1wk+2 be some consecutive terms of C
such that f = wkwk+1wk+2 ∈ E(H
i), for some i = 1, . . . , t.
(i) If e = wk−1wkwk+1 ∈ E(Ct), then the ordering wkwk+1wk+2 ∈ E(H
i) of f defined by C is of
type T or F .
(ii) If e = wk−1wkwk+1 ∈ E(C
j
6), for some j = 1, . . . , p and the ordering wkwk+1wk+2 ∈ E(H
i)
of f defined by C is of type T (resp. of type F ), then the variable xi appears positively (resp.
negatively) in the clause dj .
8 Zbigniew Lonc, Paweł Naroski, Paweł Rzążewski
Proof of Claim 3.
(i) Clearly, in this case the pair of vertices wkwk+1 is the connector vaℓi−1v
b
ℓi−1
. Thus, the vertices
vaℓi−1, v
b
ℓi−1
appear consecutively in the ordering of f in C. On the other hand in the ordering of
type N of f they do not appear consecutively. Hence, the ordering of f defined by C is of type T or
F .
(ii) In this case the pair of vertices wkwk+1 is a connector equal to va2oiv
a
2oi+1 or v
b
2oiv
a
2oi+1. However,
if the ordering of f defined by C is of type T , then it is determined by a pair of vertices joined by a
horizontal line in Figure 1. Thus, the pair va2oiv
a
2oi+1 (which is joined by a horizontal line in Figure
1) cannot be this connector because the vertices of this pair appear consecutively in the ordering of
f defined by C. Consequently, the connector wkwk+1 is equal to vb2oiv
a
2oi+1. By the definition of
the hypergraph H , the variable xi appears in the clause dj positively.
The version of Claim 3(ii) concerning ordering of f of type F can be shown analogously.

We are ready to prove that the hypergraph H has a tight Euler tour if and only if the formula c is
satisfiable.
Let us assume first that H has a tight Euler tour C. By Claim 2, for every i = 1, . . . , t, the orderings
defined by C of all edges of Hi are of the same type – either T or F .
We define a truth assignment w : X → {true, false} by setting w(xi) = true if the orderings
of the edges of Hi in C are of type T and w(xi) = false otherwise. We shall prove that each clause
dj , for j = 1, . . . , p, is satisfied under w. As C is a tight Euler tour in H , there is a subsequence
wk−1wkwk+1wk+2 of C such that e = wk−1wkwk+1 ∈ E(C
j
6) and f = wkwk+1wk+2 ∈ E(H
i) for
some i. By Claim 3(ii), if the ordering of f defined by C is of type T (resp. of type F ), then the variable
xi appears in the clause dj positively (resp. negatively). In both cases the truth assignment w evaluates
the clause dj to true.
Let us assume now that the formula c is satisfiable and let w be a truth assignment for which c evaluates
to true. We shall construct a tight Euler tour in H .
Let (w0, w1, w2, . . . , wq) and (u0, u1, u2, . . . , ur) be two edge-disjoint tight tours, such that they have
two common vertices, say x and y, that appear consecutively in both tours, say x = w0 = u0 and y =
w1 = u1. Then the tight tours can be glued together to form a tight tour (x, y, w2 . . . , wq, x, y, u2 . . . , ur)
that contains all the edges of the two original tours.
We denote by Ci the tight Euler tour in Hi which is of type T if w(xi) = true or of type F if
w(xi) = false. Clearly, the tours C1, . . . , Ct, C16 , . . . , C
p
6 , Ct are edge-disjoint and contain all edges of
the hypergraph H . We shall construct a tight Euler tour in H by gluing together these tours.
For every clause dj there is a literal in this clause that evaluates to true in the truth assignment w. Let
xi be the variable in this literal. By the definition of the hypergraphH , if xi appears in dj positively (resp.
negatively), then some two consecutive vertices of Cj6 are identified with the vertices v
b
2oi and v
a
2oi+1
(resp. va2oi and v
a
2oi+1) of H
i. Observe that these two vertices appear consecutively in the tour Ci as well
because the tour is of type T (resp. of type F ). Thus, in both cases we can glue the tours Ci and Cj3
together.
We repeat this gluing operation for every tour Cj3 and create t edge-disjoint tight tours, say T1, . . . , Tt,
such that each tour Ti contains all the edges of the hypergraph Hi and the edges of every tour C
j
3 are
Tight Euler tours in hypergraphs 9
contained in some of the tours Ti. To complete the construction of a tight Euler tour in H we observe that
each tour Ti can be glued together with the tour Ct. Indeed, by the construction of the hypergraph H ,
some two consecutive vertices of Ct are identified with the vertices vaℓi−1 and v
b
ℓi−1
of Hi. Now, these
two vertices appear consecutively in the Euler tours in Hi of both types T and F . Thus, we can glue
the tours Ct and Ti together. We can repeat this gluing operation for every tour Ti which completes the
construction of a tight Euler tour in H .
Note that the size of the hypergraph H is linear in p+ t, as the following calculations show
|E(H)| =
t
∑
i=1
|E(Hi)|+ p|E(C6)|+ |E(Ct)|
=6
t
∑
i=1
ℓi + 6p+ 2t 6 6
t
∑
i=1
(2 occ(xi) + 4) + 6p+ 2t
=42p+ 26t.
Thus, any algorithm deciding the existence of a tight Euler tour in a 3-uniform hypergraph in time
2o(|E(H)|) could be easily transformed (in polynomial time) to an algorithm deciding the satisfiability of
an arbitrary 3-SAT instance in time 2o(p+t), which would in turn contradict the ETH. ✷
The construction presented above can be easily adapted to show the hardness of determining the exis-
tence of a tight Euler trail in a given 3-uniform hypergraph.
Theorem 2 The problem of determining if a given 3-uniform hypergraph H has a tight Euler trail is
NP-complete. Moreover, it cannot be solved in time 2o(|E(H)|), unless the ETH fails.
The proof of Theorem 2 is analogous to the proof of Theorem 1. The only difference is in connecting
the hypergraphs Hi, i = 1, . . . , t. In the proof of Theorem 1 we used the cycle Ct. Here we ought to use
rather a path hypergraph Pt which is defined by V (Pt) = {0, . . . , 2t − 1}, E(Pt) = {i(i + 1)(i + 2) :
i = 0, . . . , 2t− 3}.
3 Exact algorithm
In this section we describe an asymptotically tight exact algorithm for determining if a given k-uniform
hypergraph has a tight Euler trail or a tight Euler tour. In fact, we compute the number of all tight
Euler trails or tours in the input hypergraph. Our approach is based on a classical algorithm for counting
Hamiltonian cycles in graphs (Karp (1982)).
Let us start with introducing some notation. Let H = (V,E) be a k-uniform hypergraph. For a subset
E′ ⊆ E, by E′k−1 we denote the set of all (k − 1)-element sequences x̄ = x1x2 . . . xk−1 of distinct
vertices, such that there exists e ∈ E′ with {x1, x2, . . . , xk−1} ⊆ e. To simplify the notation, we will
often identify a sequence x̄ with the set of its elements, e.g., we will write x̄ ⊆ e. Also, for x0 ∈ V , by
x0x̄ we mean the sequence x0x1x2 . . . xk−1.
For ȳ, x̄ ∈ Ek−1, we say that a tight walk (respectively trail) is a tight ȳ-x̄-walk (resp., ȳ-x̄-trail) if
it starts with the prefix ȳ and ends with the suffix x̄ (note that the prefix and the suffix may overlap, in
particular, we treat x̄ as a tight x̄-x̄-walk of length 0). Clearly every tight Euler trail in H is a tight Euler
x̄-ȳ-trail for some x̄, ȳ ∈ Ek−1. Moreover, a tight Euler tour is a tight Euler x̄-x̄-trail for some x̄ ∈ Ek−1.
10 Zbigniew Lonc, Paweł Naroski, Paweł Rzążewski
The following version of the well-known inclusion-exclusion principle is the main tool that we use (see
e.g. (Fomin and Kratsch , 2010, Theorem 4.2)).
Theorem 3 (Inclusion-exclusion principle, intersection version) Let N be a finite set and let {Qi : i ∈
I} be a family of its subsets. Then
∣
∣
∣
∣
∣
⋂
i∈I
Qi
∣
∣
∣
∣
∣
=
∑
W⊆I
(−1)|W |
∣
∣
∣
∣
∣
N \
⋃
w∈W
Qw
∣
∣
∣
∣
∣
.
Now we are ready to state the main result of this section.
Theorem 4 For every fixed k > 3, the number of (a) tight Euler trails, (b) tight Euler tours in a k-uniform
hypergraph with m edges can be computed in time 2m ·mO(1), using polynomial space.
Proof: Fix ȳ = y1y2 . . . yk−1 ∈ Ek−1 and x̄ = x1x2 . . . xk−1 ∈ Ek−1. So, following the notation used
in Theorem 3, define N to be the set of all tight ȳ-x̄-walks of length m in a k-uniform hypergraphH with
m edges. Moreover, let I = E be the set of edges of H . For an edge e, let Qe denote the set of tight
walks in N , which contain the edge e. Note that for W ⊆ E, N \
⋃
w∈W Qw is the set of tight ȳ-x̄-walks
of length m in H ′ = (V,E \W ). Also, if W = E, then
⋂
e∈E Qe is the set of all tight Euler ȳ-x̄-trails in
H .
Suppose that for every W ⊆ E we can compute |N \
⋃
w∈W Qw| in time m
O(1). Then, by Theorem 3,
we can compute |
⋂
e∈E Qe| in time 2
m ·mO(1).
So, let us focus on computing |N \
⋃
w∈W Qw|. Let W be a fixed subset of E and let H
′ := (V,E′),
where E′ = E \W . For d ∈ {0, 1, . . . , |E′|} and x̄′ = x′1x
′
2 . . . x
′
k−1 ∈ E
′
k−1, by T [d, x̄
′] we denote the
number of tight x̄-x̄′-walks of length d in H ′. Note that if x̄ /∈ E′k−1, then T [d, x̄
′] = 0 for all d and x̄′.
It is straightforward to verify that T [d, x̄′] is given by the following recursion:
T [0, x̄′] =
{
1 if x̄′ = x̄ ∈ E′k−1,
0 otherwise,
T [d, x̄′] =
∑
x′
0
∈V,s.t.
x′
0
x̄′∈E′
T [d− 1, x′0x
′
1 . . . , x
′
k−2] for d > 1.
Applying this recursive formula, we can use dynamic programming to compute all values T [d, x̄′] for
d ∈ {0, 1, . . . , |E′|} and x̄′ ∈ E′k−1. The size of the dynamic programming table is O(m·m·k!) = O(m
2)
and computing each entry takes O(m · k) = O(m) time. So, all values of T [d, x̄′] can be computed in
time O(m3) and space O(m2). Thus, |
⋂
i∈[m]Qi| can be computed in time 2
m ·mO(1).
To compute the number of tight Euler trails in the input hypergraph H , we need to call the algorithm
described above for all ȳ, x̄ ∈ Ek−1, i.e., at most (m · k!)2 = O(m2) times, and then return the sum of
obtained numbers. It is clear that each tight Euler trail will be counted exactly once.
Recall that a tight Euler tour in H corresponds to exactly 2m closed tight Euler trails (i.e., x̄-x̄ tight
Euler trails for some x̄ ∈ Ek−1). Thus to compute the number of tight Euler tours, we need to call the
algorithm for each x̄ ∈ Ek−1 (at most m · k! = O(m) times), and return the sum of obtained numbers,
divided by 2m.
✷
Tight Euler tours in hypergraphs 11
4 Final remarks and open problems
In this paper we proved that the problem of deciding if a given 3-uniform hypergraph has a tight Euler
tour is NP-complete. We believe the same problem for k-uniform hypergraphs with k > 3 is NP-complete
too, however, we do not have a proof of this statement. Our proof for k = 3 does not seem to generalize
easily to larger values of k.
We think the codegree (defined as the number of edges containing a (k− 1)-tuple of vertices) is a more
natural parameter than the degree in problems concerning tight cycles or tours in k-uniform hypergraphs.
In fact this is the parameter that appears in the Dirac type theorem on existence of a tight Hamilton cycle in
a 3-uniform hypergraph (see Rödl et al. (2010)). We observed (Theorem 1) that the problem of deciding if
a 3-uniform hypergraph has a tight Euler tour is NP-complete even for hypergraphs of maximum codegree
bounded by 4. It is not hard to see that the problem becomes polynomial for 3-uniform hypergraphs with
maximum codegree bounded by 2. It follows from an observation that any tour in such hypergraphs is
uniquely determined by any two of its consecutive edges. It is an open problem what the complexity status
of our problem is for 3-uniform hypergraphs of maximum codegree bounded by 3.
References
E.M. Arkin, M. Held, J.S.B. Mitchell, S.S. Skiena, Hamiltonian triangulations for fast rendering, Visual
Computer 12, 1996, 429–444.
M.A. Bahmanian, M. Šajna, Eulerian properties of hypergraphs, arXiv:1608.01040.
F. Chung, P. Diaconis, R. Graham, Universal cycles for combinatorial structures, Discrete Mathematics
110, 1992, 43–59.
E. Dalhaus, P. Hajnal, M. Karpiński, On the parallel complexity of Hamiltonian cycle and matching
problem on dense graphs, Journal of Algorithms 15, 1993, 367–384.
F. Fomin, D. Kratsch. Exact Exponential Algorithms, Springer, 2010.
H. Hàn, M. Schacht, Dirac-type results for loose Hamilton cycles in uniform hypergraphs, Journal of
Combinatorial Theory Ser. B 100 (3), 2010, 332–346.
G. Hurlbert, On universal cycles for k-subsets of an n-set, SIAM Journal of Discrete Mathematics 7,
1994, 598–604.
R. Impagliazzo, R. Paturi, The Complexity of k-SAT, Proc. 14th IEEE Conf. on Computational Complex-
ity, 1999, 237–240.
R. Impagliazzo, R. Paturi, F. Zane, Which problems have strongly exponential complexity?, Journal of
Computer and System Sciences 63, 2001, 512–530.
B.W. Jackson, Universal cycles of k-subsets and k-permutations, Discrete Mathematics 117, 1993, 141–
150.
B.W. Jackson, Universal cycles of 4-subsets and 5-subsets, Unpublished, 1999.
12 Zbigniew Lonc, Paweł Naroski, Paweł Rzążewski
M. Karpiński, A. Ruciński, E. Szymańska, Computational Complexity of the Hamiltonian Cycle Problem
in Dense Hypergraphs, in LATIN 2010 (ed. A. López-Ortiz), Lecture Notes in Computer Science 6034,
2010, 663–674.
Gy.Y. Katona, H.A. Kierstead, Hamiltonian chains in hypergraphs, Journal of Graph Theory 30, 1999,
205–212.
R. M. Karp. Dynamic programming meets the principle of inclusion and exclusion, Operations Research
Letters 1, 1982, 49–51.
D. Kühn, R. Mycroft, D. Osthus, Hamilton l-cycles in k-graphs, Journal of Combinatorial Theory Ser. A
117, 2010, 910–927.
D. Kühn, D. Osthus, Loose Hamilton cycles in 3-uniform hypergraphs of large minimum degree, Journal
of Combinatorial Theory Ser. B 96, 2006, 767–821.
Z. Lonc, T. Traczyk Jr., M. Truszczyński, Optimal f -graphs for the family of all k-subsets of an n-set, in
Data Base Organization (ed. S.P. Ghosh, W. Lipski, Y. Kambayashi), Academic Press, 1983, 247–270.
Z. Lonc, P. Naroski, On tours that contain all edges of a hypergraph, Electronic Journal of Combinatorics
17, 2010, # R144.
Z. Lonc, P. Naroski, A linear time algorithm for finding an Euler walk in a strongly connected 3-uniform
hypergraph, Discrete Mathematics and Theoretical Computer Science 14(1), 2012, 147–158.
J. Peng, C.-S. Kim, C.-C. J. Kuo, Technologies for 3D mesh compression: A survey, Journal of Visual
Communication and Image Representation 16, 2005, 688–733.
V. Rödl, A. Ruciński, E. Szemerédi, An approximate Dirac-type theorem for k-uniform hypergraphs,
Combinatorica 28 (2), 2008, 229–260.
V. Rödl, A. Ruciński, E. Szemerédi, Dirac-type conditions for hamiltonian paths and cycles in 3-uniform
hypergraphs, Advances in Mathematics 227, 2011, 1225–1299.
E. Szymańska: The Complexity of Almost Perfect Matchings in Uniform Hyper- graphs with High Code-
gree, in IWOCA 2009 (ed. J. Fiala), Lecture Notes in Computer Science 5874, 2009, 438–449.

