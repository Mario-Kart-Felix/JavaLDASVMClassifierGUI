Steiner Point Removal with Distortion O(log k)
Arnold Filtser
Ben Gurion University of the Negev
Email: arnoldf@cs.bgu.ac.il
Abstract
In the Steiner point removal (SPR) problem, we are given a weighted graph G = (V,E) and
a set of terminals K ⊂ V of size k. The objective is to find a minor M of G with only the
terminals as its vertex set, such that the distance between the terminals will be preserved up
to a small multiplicative distortion. Kamma, Krauthgamer and Nguyen [KKN15] used a ball-
growing algorithm with exponential distributions to show that the distortion is at most O(log5 k).
Cheung [Che17] improved the analysis of the same algorithm, bounding the distortion by O(log2 k).
We improve the analysis of this ball-growing algorithm even further, bounding the distortion by
O(log k).
1 Introduction
In graph compression problems the input is usually a massive graph. The objective is to compress the
graph into a smaller graph, while preserving certain properties of the original graph such as distances
or cut values. Compression allows us to obtain faster algorithms, while reducing the storage space.
In the era of massive data, the benefits are obvious. Examples of such structures are graph spanners
[PS89], distance oracles [TZ05], cut sparsifiers [BK96], spectral sparsifiers [BSS12], vertex sparsifiers
[Moi09] and more.
In this paper we study the Steiner point removal (SPR) problem. Here we are given an undirected
graph G = (V,E) with positive weight function w : E → R+, and a subset of terminals K ⊆ V of
size k. The goal is to construct a new graph M = (K,E′) with positive weight function w′, with the
terminals as its vertex set, such that: (1) M is a graph minor of G, and (2) the distance between
every pair of terminals t, t′ is distorted by at most a multiplicative factor of α, formally
∀t, t′ ∈ K, dG(t, t′) ≤ dM (t, t′) ≤ α · dG(t, t′) .
Property (1) expresses preservation of the topological structure of the original graph. For example if
G was planar, so will M be. Whereas property (2) expresses preservation of the geometric structure
of the original graph, that is, distances between terminals. The question is: what is the minimal α
(which may depend on k) such that every graph with a terminal set of size k will have a solution to
the SPR problem with distortion α.
The first one to study a problem of this flavor was Gupta [Gup01], who showed that given a weighted
tree T with a subset of terminals K, there is a tree T ′ with K as its vertex set, that preserves all
the distances between terminals up to a multiplicative factor of 8. Chan, Xia, Konjevod, and Richa
[CXKR06], observed that the tree T ′ of Gupta is in fact a minor of the original tree T . They showed
that 8 is the best possible distortion, and formulated the problem for general graphs. This lower
1
ar
X
iv
:1
70
6.
08
11
5v
1 
 [
cs
.D
S]
  2
5 
Ju
n 
20
17
bound of 8 is achieved on the complete unweighted binary tree, and is the best known lower bound
for the general SPR problem.
Basu and Gupta [BG08] showed that on outerplanar graphs, the SPR problem can be solved with
distortion O(1).
Kamma, Krauthgamer and Nguyen were the first to bound the distortion for general graphs. They
suggested a natural ball growing algorithm. Their first analysis provide O(log6 k) distortion (con-
ference version [KKN14]), which they later improved to O(log5 k) (journal version [KKN15]). Very
recently, Cheung [Che17] improved the analysis of the same algorithm further, providing an O(log2 k)
upper bound on the distortion.
The main contribution of this paper is an even further improvement upon the analysis of the same
algorithm, providing an O(log k) upper bound for the SPR problem on general graphs. Closing the
gap between the lower bound of 8 to the upper bound of O(log k) remains an intriguing open question.
1.1 Related Work
Englert et. al. [EGK+14] showed that every graph G, admits a distribution D over terminal minors
with expected distortion O(log k). Formally, for all ti, tj ∈ K, it holds that 1 ≤ EM∼D[dM (ti,tj)]dG(ti,tj) ≤
O (log k). Thus, Theorem 1 can be seen as improvement upon [EGK+14], where we replace distribution
with a single minor. Englert et. al. showed better results for β-decomposable graphs, in particular
showing that graphs excluding a fixed minor, admitting a distribution with O(1) expected distortion.
Krauthgamer, Nguyen and Zondiner [KNZ14] showed that if we allowing the minor M to contain
at most
(
k
2
)2
Steiner vertices in addition to the terminals, then distortion 1 can be achieved. They
further showed that for graphs with constant treewidth, O(k2) Steiner points will suffice for distortion
1. Cheung, Gramoz and Henzinger [CGH16] showed that allowing O(k2+
2
t ) Steiner vertices, one can
achieve distortion 2t − 1 (in particular distortion O(log k) with O(k2) Steiners). For planar graphs,
Cheung et. al. achieved 1 +  distortion with Õ((k )
2) Steiner points.
There is a long line of work focusing on preserving the cut/flow structure among the terminals, by a
graph minor. See [Moi09, LM10, CLLM10, MM10, EGK+14, Chu12, KR13, AGK14, GHP17, KR17].
Finally, there were works studying metric embeddings and metric data structures concerning with
preserving distances among terminals, or from terminals to other vertices, out of the context of
minors. See [CE05, RTZ05, GNR10, KV13, EFN15a, EFN15b, BFN16].
1.2 Technical Ideas
We use the ball growing algorithm presented in [KKN15] (also used by [Che17]), with adjusted pa-
rameters. The algorithm work in rounds. In each round, by turn, each terminal tj increases the
radius Rj of its ball-cluster Vj in attempt to add more vertices to its cluster Vj . Once a vertex joins
some cluster, it will remain there. In round `, the radii are (independently) sampled according to
exponential distribution with mean D · r`, where r = 1 + O(1)ln k and D = r − 1. In each consecutive
round, the mean of the distribution is multiplied by r. This extremely slow phase increase in scales
allows us to control (w.h.p) the round in which each vertex will be covered (that is, join some cluster).
Specifically, for vertex v whose closest terminal is at distance D(v), w.h.p. v is covered somewhere
between round logr (Ω(D(V ))) to round logr (O(D(V )). In particular, v will be covered by terminal
2
t at distance at most O(D(v)) from v. Furthermore, every vertex v′ that is covered simultaneously
with v will be also at distance at most O(D(v)) from t.
In the end of the algorithm, when all the vertices are covered, we contract each cluster into a single
vertex to get a minor graph M on the terminals. The weight in M of the edge {ti, tj} (if exist) is
simply set to dG(ti, tj). In order to bound the distance in the minor graph between two terminals t, t
′,
we partition the shortest path Pt,t′ from t to t
′ into a set of intervals Q. The length |Q| of each interval
Q ∈ Q will be Θ(D(Q)ln k ), where D(Q) is the distance from Q to its closest terminal. In particular, Q
will have the property that if some vertex v ∈ Q is covered by t at round `, then with probability at
least 0.8, all of Q is covered by t (at round `).
We can show that the expected number of terminals covering the vertices of Q is constant. In fact,
Cheung [Che17] argued that w.h.p every interval Q is covered by at most O(log k) different terminals.
This is the reason he pays additional log k factor on the distortion. We will use a subtler argument
in order to spare this log k factor.
We will analyze the covering of all the intervals simultaneously. Consider round `, where terminal tj
grows its cluster. Note that tj might cover vertices from different intervals. Let Q
`
j be the interval
containing the closest vertex to tj , among the vertices of Pt,t′ that were covered by tj at round `. The
currently covered vertices will create a detour D`j , which will be charged upon Q`j . Note that in each
step at most one interval will be charged. All the covered vertices not in Q`j will be covered free of
charge.
We define a cost function f which will bound dM (ti, tj) (w.h.p.). f will be defined by a linear
combinations of all the charges upon all the intervals. We then use a concentration bound to show
that while some intervals might be charged for large number of detours, on average the cost function
will not exceed the expectation by much.
2 Preliminaries
Appendix A contains a summary of all the definitions and notations we use. The reader is encouraged
to refer to this key while reading.
We consider undirected graphs G = (V,E) with positive edge weights w : E → R≥0. Let dG denote the
shortest path metric in G. Let BG(v, r) = {u ∈ V | dG(v, u) ≤ r} be the ball around v in G with radius
r. For a subset of vertices A ⊆ V , let G[A] denote the induced graph on A. Fix K = {t1, . . . , tk} ⊆ V
to be a set of terminals. For a vertex v, D(v) = mint∈K dG(v, t) is the distance from v to the closest
terminal.
A graph H is a minor of a graph G if we can obtain H from G by edge deletions/contractions, and
vertex deletions. A partition {V1, . . . , Vk} of V is called a terminal partition (w.r.t K) if for every
1 ≤ i ≤ k, ti ∈ Vi, and the induced graph G[Vi] is connected. See Figure 1 for illustration. The induced
minor by terminal partition {V1, . . . , Vk}, is a minor M , where each set Vi is contracted into a single
vertex called (abusing notation) ti. Note that there is an edge in M from ti to tj iff there are vertices
vi ∈ Vi and vj ∈ Vj such that {vi, vj} ∈ E. We determine the weight of the edge {ti, tj} ∈ E(M) to be
dG(ti, tj). Note that by the triangle inequality, for every pair of (not necessarily neighboring) terminals
ti, tj , it holds that dM (ti, tj) ≥ dG(ti, tj). The distortion of the induced minor is maxi,j dM (ti,tj)dG(ti,tj) .
We will use the two following Chernoff/Hoefding type inequalities:
3
4
2
5
3
3
1
23
3
4
1111
3
2
2
1
3
5
1
t1t1
t2
t2
t3t3
t4
t4
6
5
6
7
V1
V2
V3
V4
Figure 1: The left side of the figure contains a weighted graph G = (V,E), with weights specified in red, and
four terminals {t1, t2, t3, t4}. The dashed black curves represent a terminal partition of the vertex set V into
the subsets V1, V2, V3, V4. The right side of the figure represent the minor M induced by the terminal partition.
The distortion is realized between t1 and t3, and is
dM (t1,t3)
dG(t1,t3)
= 124 = 3.
Fact 1. Let X1, . . . , Xn be i.i.d indicator variables each with probability p. Set X =
∑
iXi and
µ = E[X] = np. Then for every δ ≤ 2e− 1, Pr [X ≥ (1 + δ)] ≤ exp(−µδ2/4).
Fact 2. Let X1, . . . , Xn be independent variables where Xi ∈ [ai, bi]. Set X =
∑
iXi and µ = E[X].
Then Pr [|X − µ| ≥ η] ≤ 2 exp(− 2η
2∑
i(bi−ai)2
).
2.1 Exponential Distribution
Exp(λ) denotes the exponential distribution with mean λ and density function f(x) = 1λe
− x
λ for x ≥ 0.
X ∼ Exp(λ) denotes the the random variable X distributed according to Exp(λ). a+c ·Exp(λ) denotes
a distribution where we sample X ∼ Exp(λ), and return a + c ·X. A useful property of exponential
distribution is memoryless: let X ∼ Exp(λ), for every a, b ≥ 0, Pr[X ≥ a+ b | X ≥ a] = Pr[X ≥ b]. In
other words, given that X ≥ a, it holds that X ∼ a+ Exp(λ). Another useful property of exponential
distribution is closeness under scaling, that is c ·Exp(λ) is equal to Exp(cλ). We will use the following
concentration bound:
Lemma 1. Suppose X1, . . . , Xn’s are independent random variables, where each Xi is distributed
according to Exp(λi). Let X =
∑
iXi and λM = maxi λi. Set µ = E [X] =
∑
i λi. For any a ≥ 2µ, it
holds that Pr [X ≥ a] ≤ exp
(
− 12λM (a− 2µ)
)
.
Proof. Set t = 12λM . For each Xi, the moment generating function w.r.t t equals E [exp tXi] =
1
1−tλi .
Using the inequality 11−x ≤ 1 + 2x ≤ exp(2x) (for 0 ≤ x ≤
1
2) we have E [exp tXi] ≤ exp (2tλi).
4
Therefore,
Pr [X > a] = Pr [exp (tX) > exp (ta)]
≤ E [exp (tX)] / exp(ta)
= exp(−ta) ·ΠiE [exp tXi]
≤ exp(−ta) ·Πi exp (2tλi)
= exp(−ta+ 2tµ)
= exp
(
− 1
2λM
(a− 2µ)
)
,
where in the first inequality we use Markov inequality, and in the second equality we use the fact that
{Xi}i are independent.
Truncated exponential distribution Expα(λ) at α, is the distribution Exp(λ) where the tail of the
distribution collapses to α. Specifically, fix X ∼ Exp(λ), Y ∼ Expα(λ) and β ≤ α, Pr[Y ≥ β] =
Pr[X ≥ β], whereas for β > α, Pr[Y ≥ β] = 0. In particular, Pr[Y = α] = Pr[X ≥ α]. For the special
case where we truncate at the mean, that is α = λ (that is Y ∼ Expλ(λ)), the expectation is
E [Y ] = E [X]− Pr [X > λ] · E [X − λ | X > λ] = E [X]− e−
λ
λ · E [X] =
(
1− e−1
)
· λ . (1)
3 Algorithm
We will assume that minvD(v) = 1, as we can scale all the weights by a constant (and rescale
appropriately the output). In addition, we will assume that the number of terminals k is larger than
a big enough constant, as otherwise the algorithm of [KKN15] is asymptotically optimal.
Before executing our algorithm, we will make some preprocessing to the input graph G. Our first step
will be to use the algorithm of Krauthgamer, Nguyen and Zondiner [KNZ14] to obtain a minor of the
input graph such that all terminal distances are preserved exactly, while the minor contains at most(
k
2
)2
< k
4
2 steiner vertices. Let Pt,t′ be the shortest path from t to t
′. Our next preprocessing step will
be to ensure that every edge e on Pt,t′ has weight at most
cw
ln k · dG(t, t
′), where cw =
1
120 . This can
be achieved by subdividing larger edges by adding additional vertices of degree two in the middle of
large edges. This modification will require at most ln kcw vertices per path, an thus a total of
k2 ln k
cw
< k3
additional vertices. Thus, after this modification, the graph will contain at most k4 vertices. As we
added only Steiner vertices of degree 2, every induced minor by terminal partition of the new graph,
will be a minor of the original graph as well. From now on, we will abuse notation and let G be the
resulting graph (after both modifications) as if it were the original one.
After we finish with the preprocessing, we are ready to execute Algorithm 1, which is the same as
the algorithm used by [KKN15] (and [Che17]), with adjusted parameters. Each terminal tj , will be
associated with a radius Rj and cluster Vj ⊂ V . During the algorithm we will iteratively grow clusters
V1, . . . , Vk around the terminals. Once some vertex v joins some cluster Vj , it will stay there. When all
the vertices are clustered, the algorithm terminates. Initially the cluster Vj contains only the terminal
tj , while Rj equals 0. The algorithm will have rounds, where each round consist of k steps. In step j
of round `, we sample a number q`j according to distribution Exp(D · r`) (note that the mean of the
distribution grows by a factor of r in each round). The radius Rj grows by q
`
j . We consider the graph
induced by the unclustered vertices V⊥ union Vj . Every unclustered vertex of distance at most Rj
from tj in G[V⊥ ∪ Vj ] joins Vj .
5
Algorithm 1 M = Steiner-point-removal(G = (V,E), w,K = {t1, . . . , tk})
1: Set r ← 1 + δ/ ln k, where δ = 1/80.
2: Set D ← δln k .
3: For each j ∈ [k], set Vj ← {tj}, and set Rj ← 0.
4: Set V⊥ ← V \
(
∪kj=1Vj
)
.
5: Set ` ← 0.
6: while
(
∪kj=1Vj
)
6= V do
7: for j from 1 to k do
8: Choose independently at random q`j distributed according to Exp(D · r`).
9: Set Rj ← Rj + q`j .
10: Set Vj ← BG[V⊥∪Vj ](tj , Rj).
11: Set V⊥ ← V \
(
∪kj=1Vj
)
.
12: end for
13: ` ← `+ 1.
14: end while
15: return the terminal-centered minor M of G induced by V1, . . . , Vk.
Theorem 1. With probability 1−O
(
1
k
)
, in the minor graph M returned by Algorithm 1, it holds that
for every two terminals t, t′, dM (t, t
′) ≤ O (log k) · dG(t, t′).
4 Covering properties
We say that vertex v is covered if v ∈ ∪jVj . If v joins Vj at round `, we say that v was covered by tj
at round `. In this section we upper and lower bound the round in which each vertex is covered. This
will imply that every vertex v is covered by a terminal t at distance at most O(D(v)). Furthermore,
we will show that if vertices v and v′ were covered by terminal t at the same round, then dG(v, t) and
dG(v
′, t) are asymptotically equal.
We denote by ECUB (CUB for covering upper bound) the event that every vertex v was already covered
after the blogr (8D(v))c round.
Lemma 2. Pr [ECUB] ≥ 1− 2k .
Proof. Fix some vertex v. We will show that the probability that v remains uncovered after the
m = blogr (8D(v))c round is bounded by 2 · k−5. Since there are at most k4 vertices, the lemma will
follow by the union bound. Let tv be the closest terminal to v, and denote by Pv the shortest path
from tv to v in G (which has length D(v)). Denote by u∗ the currently covered vertex farthest away
from tv on Pv, by t∗ the terminal covering u∗, and by Rt∗ the radius currently associated with t∗. Set
d∗ = dG(tv, u∗) +
(
Rt∗ − dG[Vt∗ ](u∗, t∗)
)
.
d∗ is the effective covered part of Pv. Note that there might be no vertex at distance exactly Rt∗ from
t∗ to cover. However, if we could add additional vertex at distance d∗ from tv, it would be currently
covered by t∗. See Figure 2 for illustration. Consider round `, we argue that the increase of d∗ during
round ` is lower bounded by random variable distributed according to Exp(D · r`). Let u`−1∗ be u∗ by
the end of the ` − 1 round, t`−1∗ be the terminal covering u`−1∗ , and d`−1∗ be the value of d∗ by the
6
tv vu
`−1
∗
t`−1∗ tj′
u′
d`−1∗
d∗
u∗
Figure 2: At the end of the `− 1, the farthest covered vertex on Pv was u`−1∗ , who was covered by t`−1∗ . d`−1∗
is the length of the effective covered part of Pv, which is farther away from u
`−1
∗ by Rt`−1∗ − dG[Vt`−1∗ ]
(u`−1∗ , t
`−1
∗ )
along Pv. At round `, either t
`−1
∗ increase Rt`−1∗ (and therefore d∗) according to Exp(D ·r
`), or some new vertex
u′ is covered by terminal tj′ and then d∗ increase additionally according to distribution Exp(D · r`).
end of the ` − 1 round. Let j be such that tj = t`−1∗ . If by the j’s step of the `’s round, u`−1∗ is still
the farthest vertex covered on Pv (that is u∗ = u
`−1
∗ ), then d∗ is growing by q
`
j (exactly as Rj) which
is distributed according to Exp(D · r`). Otherwise, let u′ be the first vertex on Pv further than u`−1∗
to be covered by terminal tj′ . Note that dG(tv, u
′) > d`−1∗ , as otherwise u
′ would already by covered
by t`−1∗ . By the memoryless property of the exponential distribution, given that tj′ covered u
′, Rj′
and therefore d∗ will increase additively according to the distribution Exp(D · r`). Note that d∗ never
decreases. We conclude that until d∗ reaches D(v), the growth of d∗ in round ` is lower bounded by
a random variable distributed according to Exp(D · r`).
In order to use concentration bound, we will truncate the distributions. Let X0, X1, . . . , Xm be
independent random variables, where X` ∼ ExpD·r`(D · r`) distribution according to exponential
distribution truncated at its mean. Set X =
∑m
`=0X`. The probability that v is not covered after m
rounds is lower bounded by the probability that X < D(v). By Equation (1),
µ = E [X] =
m∑
`=0
E [X`] =
(
1− e−1
)
·D ·
m∑
`=0
r` =
(
1− e−1
)
·D · r
m+1 − 1
r − 1
≥ r
m+1 − 1
2
≥ r
m+1
4
.
The support of X` is of size D · r`. It holds that
∑m
`=0
(
D · r`
)2
= D2 · r2(m+1)−1
r2−1 ≤ D
2 · r2(m+1) · ln k2δ =
δ
2 ln k · r
2(m+1). Using Hoeffding bound (Fact 2),
Pr
[
|X − µ| ≥ µ
2
]
≤ 2 exp
(
− 2 (µ/2)
2∑m
`=0 (D · r`)
2
)
≤ 2 exp
− 2 ·
(
rm+1
8
)2
δ
2·ln k · r2(m+1)
 = 2 exp(− ln k
16δ
)
.
As m = blogr (8D(v))c, it holds that µ ≥ r
m+1
4 ≥ 2D(v). The probability that v is not covered after
m rounds is bounded by
Pr [X < D(v)] ≤ Pr [|X − µ| ≥ µ−D(v)] ≤ Pr
[
|X − µ| ≥ µ
2
]
≤ 2 exp
(
− ln k
24 · δ
)
= 2 · k−5 .
7
Set cCE =
1
3 (CE for covered early). We denote by E
CE the event that for some vertex v and terminal
t, t covered v before the blogr(cCE · dG(v, t))c round.
Lemma 3. Pr [ECE] ≤ k−3.
Proof. We denote by ECEv,t the event that the vertex v was covered by the terminal t before the
blogr(cCE · dG(v, t))c round. Note that ECE = ∪v,tECEv,t . We will show that Pr
[
ECEv,t
]
≤ k−8, and
the lemma will follow by union bound.
Fix some vertex v and terminal t. Denote by R`t the value of Rt after the `’th round. ECEv,t might occur
only if Rmt is at least dG(t, v) for m = blogr(cCE · d(t, v))c. The growth of Rt at round ` is according
to Exp(D · r`), where all the rounds are independent. Hence Rmt ∼
∑m
`=0 Exp(D · r`). It holds that
E [Rmt ] =
∑m
`=0D · r` = D ·
rm+1−1
r−1 ≤ r
m+1. By Lemma 1, we conclude
Pr
[
ECEv,t
]
≤ Pr [Rmt ≥ dG(t, v)] ≤ exp
(
− 1
2 ·D · rm
(d(t, v)− 2 · E [Rmt ])
)
≤ exp
(
− 1
2 ·D · rm
(
1
cCE
· rm − 2 · rm+1
))
= exp
(
− ln k
2δ
(
1
cCE
− 2r
))
< exp (−8 ln k) = k−8 .
Corollary 1. Assuming ECUB and ECE, for every two vertices v, v′ who both were covered by terminal
t at round `, it holds that dG(t, v
′) = O(D(v)).
Proof. As we assumed ECUB, v necessarily was covered until round blogr (8D(v))c, that is ` ≤ blogr (8D(v))c.
From the other hand, ECE implies ` > blogr(cCE · dG(v′, t))c. We conclude that logr (cCE · dG(v′, t)) ≤
logr (8D(v)), and therefore dG(t, v
′) < 8cCE ·D(v) = 24 ·D(v).
5 Clustering Analysis
In this section we describe in detail the probabilistic process of growing clusters, and define a charging
scheme that will be used to bound the distortion.
Consider two terminals t and t′. Let Pt,t′ = {t = v0, . . . , vL = t′} be the shortest path from t to t′ in G.
We can assume that there are no terminals in Pt,t′ other than t, t
′. This is because if we will prove that
for every pair of terminals t, t′ such that Pt,t′ ∩K = {t, t′} it holds that dM (t, t′) ≤ O(log k) · dM (t, t′),
the triangle inequality will imply this property for all pairs of terminals.
Set P = {v1, . . . , vL−1} to be the path Pt,t′ without its boundaries t, t′. For a sub interval Q =
{va, . . . , vb} ⊆ P , the internal length is L(Q) = dG(va, vb), and the external length is L+(Q) =
dG(va−1, vb+1). Set cint =
cCE
10δ =
8
3 (“int” for interval). We partition the vertices in P into sub
intervals Q, with the property that each Q ∈ Q will contain a vertex uQ ∈ Q such that L(Q) ≤
cintδ
ln k D(uQ) ≤ L
+(Q): Such a partition could be constructed as follows. Sweep along the interval
P in a greedy manner, after partitioning the prefix v1, . . . , vh−1, to construct the next Q, we set
uQ = vh and simply pick the minimal index s such that L
+({vh, . . . , vh+s}) ≥ cintδln k D(vh). By the
minimality of s, L({vh, . . . , vh+s}) ≤ L+({vh, . . . , vh+s−1}) ≤ cintδln k D(vh) (in the case s = 0, trivially
L({vh}) = 0 ≤ cintδln k D(vh)). Note that such s always could be found, as L
+({vh, . . . , vL−1}) =
dG(vh−1, t
′) > dG(vh, t
′) ≥ D(vh).
8
In the beginning of Algorithm 1, all the vertices of P are active. Consider round ` in the algorithm
when terminal tj grows a ball to increase Vj . Specifically, it picks q
`
j and sets Rj ← Rj + q`j and
Vj ← BG[V⊥∪Vj ](tj , Rj). Suppose that at least one active vertex joins Vj . Let a
`
j ∈ Pt,t′ (resp., b`j)
be the active vertex joining to Vj with minimal (resp., maximal) index (w.r.t Pt.t′). All the vertices{
a`j , . . . , b
`
j
}
⊂ Pt,t′ with indices between a`j to b`j become inactive. We call this set
{
a`j , . . . , b
`
j
}
a
detour D`j from a`j to b`j . See Figure 3 for illustration.
Within each interval Q, each maximal sub-interval of active vertices is called a slice. We denote by
S(Q) the current number of slices in Q. In the beginning of the algorithm, for every sub interval Q,
S(Q) = 1, while at the end of the algorithm S(Q) = 0.
For an active vertex v, let qv be the minimal choice of q
`
j , that will force v to join Vj . Let v
`
j be the
active vertex with minimal qv`j
(braking ties arbitrarily). Let Q`j ∈ Q be the interval containing v`j .
Similarly, let S`j be the slice containing v
`
j . We charge Q
`
j for the detour D`j . We denote by XQ the
number of detours the interval Q is currently charged for. For every detour D`′j′ which is contained in
D`j (that is a`j < a`
′
j′ < b
`′
j′ < b
`
j w.r.t. the order induced by Pt,t′), we erase the detour and its charge.
That is, for every Q′ 6= Q`j , XQ′ might only decrease, while XQ`j might increase by at most 1 (and
can also decrease as a result of deleted detours). We denote by X̃Q the size of XQ by the end of
Algorithm 1. Figure 3 illustrates a single step.
Next, we analyze the change in the number of slices when tj grows its cluster at round `. If q
`
j < qv`j
,
then no active vertex joins Vj and therefore XQ and S(Q) stay unchanged, for all Q ∈ Q. Otherwise,
q`j ≥ qv`j , a new detour will appear, and be charged upon Q
`
j . All the slices S which are contained in
D`j are deleted. Every slice S that intersects D`j but not contained in it will be replaced by one or two
new slices. If D`j ∩ S /∈ {D`j , S}, then S is replaced by a single new sub-slice S′. The only possibility
for a slice to be replaced by two sub-slices is if D`j ⊆ S, and D`j does not contain the extreme vertices
in S (see Figure 3, scenario (A)). This can happen only at S`j . We conclude that for every Q
′ 6= Q`j ,
S(Q′) might only decrease, while S(Q`j) might increase by at most 1.
Let qS`j
be the minimal choice of q`j , that will force all vertices in S
`
j to become inactive. If q
`
j ≥ qS`j ,
then S(Q`j) will decrease by at least one (Figure 3, scenario (B)). We call such occasion a success.
Otherwise, if q`j < qS`j
then S(Q`j) might increase by at most one. We call such occasion a failure
(Figure 3, scenario (A)).
Claim 1. Assuming ` ≥ logr
(
cCE · dG(v`j , tj)
)
and q`j ≥ qv`j , the failure probability is bounded by
p = 0.2.
Proof. Recall that there is a vertex uQ`j
∈ Q`j such that L(Q`j) ≤
cintδ
ln k D(uQ`j
). In particular, by the
triangle inequality D(v`j) ≥ D(uQ`j )− dG
(
uQ`j
, v`j
)
≥
(
ln k
cintδ
− 1
)
L(Q`j) ≥ ln k2cintδ · L(Q
`
j). It holds that
D · r` ≥ D · cCE · dG(v`j , tj) ≥ D · cCE ·D(v`j) ≥ D · cCE ·
ln k
2cintδ
· L(Q`j) = 5 · L(Q`j) . (2)
As S(Q`j) ⊆ Q`j , and all the vertices in S(Q`j) are active, for every u ∈ S(Q`j), dG[V⊥∪Vj ](v
`
j , u) ≤ L(Q`j)
(we used here that Pt,t′ is a shortest path). Therefore, if q
`
j ≥ qv`j +L(Q
`
j), all the vertices in S will be
covered by tj , and in particular become inactive. We conclude that qS`j
≤ qv`j + L(Q
`
j) . Recall that
9
tj
v`j
u3 u4
Q1 Q2 Q3 Q4
tj
v`j
u2
Q1 Q2 Q3 Q4
u1
S1 S2 S3 S4 S5 S6
S1 S2 S3 S4 S5 S6
(A)
(B)
D1 D2
D1 D2
Figure 3: The figure illustrates round ` in Algorithm 1, when tj increases Vj. We present two scenarios for
different choices of q`j. The black line is part of Pt,t the shortest path from t to t
′. The blue intervals Qi represent
the subsets in Q. The red sub-intervals Si are slices, maximal subsets of active vertices. Where S2, S3 ⊂ Q2
and S4, S5 ⊂ Q3. The yellow areas represent detours D1 and D2, where Q2 (resp., Q3) is charged for D1 (resp.,
D2). Note that vertices in that areas are inactive.
tj increases gradually q
`
j, the first vertex to be covered is v
`
j. In scenario (A), the growth of q
`
j quickly terminates
and sets a`j = u1, b
`
j = u2. While in scenario (B), the growth of q
`
j continues longer, setting a
`
j = u3, b
`
j = u4.
Points already inactive are colored in blue. Points which currently covered by tj, are colored in red. The green
points, are points which still un-covered, but nevertheless become inactive. Points which remain active after the
increase in Vj, are colored in black.
In scenario (A) all the vertices that become inactive, D`j, included in S4. Q3 is charged for D`j. The number
of slices in Q3 is increased by 1, and no other changes occur. In scenario (B) D`j contains all the vertices in
S2, S3, S4, S5, and part of the vertices in S1, S6. The number of slices in Q2 and Q3 become 0, while the number
of slices in Q1 and Q4 remain unchanged. Q3 is charged for D`j, while its charge for D2 erased. Additionally,
the charge of Q2 for D1 is erased. That is, Q2 will remain uncharged till the end of the algorithm (X̃Q2 = 0).
10
q`j is distributed according to Exp(D · r`). Using the memoryless property, we get:
Pr
[
q`j < qS`j
| q`j ≥ qv`j
]
= Pr
[
q`j < qS`j
− qv`j
]
= 1− e
−
(
q
S`
j
−q
v`
j
)
/(D·r`)
≤
(
qS`j
− qv`j
)
/(D · r`) ≤ L(Q`j)/(D · r`)
(2)
≤ 1
5
= p .
6 Bounding the Number of Failures
Set ϕ = |Q|. We define a cost function f : Rϕ+ → R+, in the following way f(x1, x2, . . . , xϕ) =∑
i xi · L+(Qi). Note that the cost function f is linear and monotonically increasing coordinate-wise.
In Section 7 we show that the distance between t to t′ in the minor graph M can be bounded (roughly)
by the total “length” of all the detours that the intervals were charged for by the end of Algorithm 1.
Moreover, w.h.p. the “length” of detour D`j can be bounded by L+(Q`j). Thus f
(
X̃Q1 , . . . , X̃Qϕ
)
is
an asymptotic bound on dM (t, t
′). This section is devoted to proving the following lemma.
Lemma 4. Pr
[
f
(
X̃Q1 , . . . , X̃Qϕ
)
≥ 43 · dG(t, t′)
]
≤ 2 · k−3.
Using Claim 1, one can show that for every Q ∈ Q, E[X̃Q] = O(1), and moreover, w.h.p. X̃Q =
O(log k). However, we use a concentration bound on all {X̃Q1 , . . . , X̃Qϕ} simultaneously in order to
prove a stronger upper bound.
6.1 Bounding by independent variables
In our journey to bound f
(
X̃Q1 , . . . , X̃Qϕ
)
, the first step is replacing
(
X̃Q1 , . . . , X̃Qϕ
)
with inde-
pendent variables. Consider the following process: we start with ϕ boxes BQ1 , . . . , BQϕ , where the
box BQ resembles the interval Q ∈ Q. The boxes will contain independent coins. Each coin has
probability p to get 0 (failure), and 1 − p to get 1 (success). Coins can be active and inactive. In
the beginning, there is a single active coin in each box BQ. We toss the active coins in the boxes in
some arbitrary order. When tossing a coin from box BQ, the tossed coin becomes inactive. If we get
0 we add two additional active coins to the box BQ. The process terminates when no active coins
remain. For a box BQ, denote by ZQ the number of active coins, by YQ the number of inactive coins
and by ỸQ the number of inactive coins at the end of the process. Let X CE be an indicator for the
event ECE (recall that ECE is the event that some vertex v was covered by some terminal t, before the
blogr(cCE · dG(v, t))c round).
Claim 2. For every α ∈ R+,
Pr
[
f
(
X̃Q1 , . . . , X̃Qϕ
)
≥ α
]
≤ Pr
[
f
(
ỸQ1 , . . . , ỸQϕ
)
+ f
(
k4 · X CE, . . . , k4 · X CE
)
≥ α
]
.
Proof. We will treat X CE dynamically, such that X CE = 0 at the beginning of Algorithm 1, and
becomes 1 when some vertex v is covered by terminal t and round ` ≤ blogr(cCE · dG(v, t))c. The proof
is done by coupling the two process of Algorithm 1 and the coin tosses. We execute Algorithm 1,
which implicitly induces slices and detour charges. Simultaneously, we will use Algorithm 1 to toss
coins. We will maintain the invariant that, as long as X CE = 0,
(
ZQ1 , YQ1 , . . . , ZQϕ , YQϕ
)
is bigger
11
than
(
S(Q1), XQ1 , . . . ,S(Qϕ), XQϕ
)
coordinate-wise. In the beginning both of them are equal (to
(1, 0, 1, 0, . . . , 1, 0)). Consider round `, step j, when tj grows its cluster. If q
`
j < qv`j
then nothing
happens, and the invariant holds. Else, q`j ≥ qv`j . If ` ≤
⌊
logr cCE · dG(v`j , tj)
⌋
, then X CE turn
into 1, we unwind the coupling and continue each of the processes independently. Otherwise, ` ≥
logr
(
cCE · dG(v`j , tj)
)
. We will make a coin toss from the BQ`j
box. Let p′ be the probability that
q`j < qS`j
(and thus S(Q`j) might grow), note that by Claim 1, p′ ≤ p. If indeed q`j < qS`j , then the
coin set to be 0. Otherwise, if q`j ≥ qS`j , then with probability
p−p′
1−p′ the coin is set to be 0. Note
that the probability of 0 is exactly p. If the number of slices S(Q`j) is increased by 1, then the
number of active coins ZQ`j
increases by 1 as well. The number of detours XQ`j
charged upon Q`j
might increase by at most 1, while the number of inactive coins YQ`j
is necessarily increases by 1. For
every Q′ 6= Q`j , S(Q′) and XQ′ might only decrease, while ZBQ′ and YBQ′ stay unchanged. Therefore(
ZQ1 , YQ1 , . . . , ZQϕ , YQϕ
)
is at least
(
S(Q1), XQ1 , . . . ,S(Qϕ), XQϕ
)
coordinate-wise after the changes
made at round ` step j as well.
At the end of the algorithm (where no slices are left), we might still have some active coins. In this
case we will simply toss coins until no active coins remain. Note that by doing so
(
YQ1 , . . . , YQϕ
)
can
only grow. The marginal distribution on
(
ỸQ1 , . . . , ỸQϕ
)
is exactly identical to the original one.
We conclude: in the case X CE = 0, at the end of the Algorithm 1, the two process remain coupled and
hence
(
YQ1 , . . . , YQϕ
)
is at least
(
X̃Q1 , . . . , X̃Qϕ
)
coordinate-wise. From this point,
(
YQ1 , . . . , YQϕ
)
can only grow, the claim follows as f is monotone. In the case where X CE = 1, the claim follows as
X̃Q is smaller than k
4 for every Q (as the number of vertices and therefore detours is bounded by
k4).
6.2 Replacing Coins with Exponential Random Variables
Our next step is to replace each YQ with exponential random variable. This is done in order to use
concentration bounds. Consider some box BQ. Equivalent way to describe the probabilistic process
in BQ is the following. Take a single coin with failure probability p, toss this coin until the number of
successes exceeds the number of failures. The total number of tosses is exactly ỸQ. Note that ỸQ is
necessarily odd. Next we bound the probability that ỸB ≥ 2m+1, for m ≥ 1. This is obviously upper
bounded by the probability that in a series of 2m tosses we had at least m failures (as otherwise the
process would have stopped earlier, in fact this true even for 2m− 1 tosses). Let Wi be an indicator
for a failure in the i’th toss. W =
∑2m
i=1Wi. Note that E [W ] = 2m ·p. Using Chernoff bound (Fact 1),
Pr
[
ỸB ≥ 2m+ 1
]
≤ Pr [W ≥ m] = Pr
[
W ≥
(
1 + (
1
2p
− 1)
)
E[W ]
]
≤ exp
(
−2m · p · ( 1
2p
− 1)2/4
)
= exp
(
− 9
40
m
)
≤ exp
(
−1
5
m
)
.
We conclude that the distribution of ỸB is dominated by 1 + Exp (10) (as for W ∼ Exp(10),
Pr [1 +W ≥ 2m+ 1] = exp
(
−m5
)
). Let W1,W2, . . . ,Wϕ be i.i.d. variables distributed according
to Exp(10), since all the boxes are independent and f is linear and monotone coordinate-wise, we
conclude
Claim 3. For every α ∈ R+, Pr
[
f
(
ỸB1 , . . . , ỸBϕ
)
≥ α
]
≤ Pr [f (1, . . . , 1) + f (W1, . . . ,Wϕ) ≥ α].
12
Proof. Set f\{s}(x1, . . . , xs−1, xs+1, . . . , xϕ) =
∑
i∈[ϕ]\{s} xi · L+(Qi). When integrating over the ap-
propriate measure space, it holds that
Pr
[
f
(
Ỹ1, . . . , Ỹϕ
)
≥ α
]
=
∫
β
Pr
[
f\{1}
(
Ỹ2, . . . , Ỹϕ
)
= β
]
· Pr
[
Ỹ1 · L+(Q1) ≥ α− β
]
dβ
≤
∫
β
Pr
[
f\{1}
(
Ỹ2, . . . , Ỹϕ
)
= β
]
· Pr
[
1 +W1 ≥
α− β
L+(Q1)
]
dβ
= Pr
[
f
(
1 +W1, Ỹ2, . . . , Ỹϕ
)
≥ α
]
≤ Pr
[
f
(
1 +W1, 1 +W2, Ỹ3, . . . , Ỹϕ
)
≥ α
]
≤ · · · ≤ Pr [f (1 +W1, . . . , 1 +Wϕ) ≥ α]
= Pr [f (1, . . . , 1) + f (W1, . . . ,Wϕ) ≥ α] .
6.3 Concentration
Set ∆ = dG(t, t
′). It holds that
∆ ≤
∑
Q∈Q
L+(Q) ≤ 2∆ , (3)
as every edge in Pt,t′ is counted at least once, and at most twice in this sum. In particular f (1, . . . , 1) ≤
2∆. Recall that every edge in Pt,t′ is of weight at most
cw
ln k · dG(t, t
′). In particular, for every Q ∈ Q,
L+(Q) ≤ L(Q)+ 2cwln k ·∆. For every vertex v on Pt,t′ , it holds that D(v) ≤ min {dG(v, t), dG(v, t
′)} ≤ ∆2 .
Therefore for every Q ∈ Q,
L+(Q) ≤ L(Q) + 2cw
ln k
·∆ ≤ cintδ
ln k
·D(uQ) +
2cw
ln k
·∆ ≤ cintδ
ln k
· ∆
2
+
2cw
ln k
·∆ = cintδ
ln k
·∆ .
Let W̃Q ∼ L+(Q) · Exp (10). In particular, W̃Q ∼ Exp (10 · L+(Q)). Set W̃ =
∑
Q∈Q W̃Q. Then
f (W1, . . . ,Wϕ) is distributed exactly as W . The maximal mean among the W̃Q’s is λM = maxQ∈Q 10 ·
L+(Q) ≤ 10 · cintδln k ·∆. The mean of W̃ is µ =
∑
Q∈Q 10 · L+(Q) ≤ 20∆. Set ccon =
3
2 · δcint =
1
20 (con
for concentration). Using Lemma 1, we conclude
Pr [f (W1, . . . ,Wϕ) ≥ (ccon + 2)20∆] = Pr
[
W̃ ≥ (ccon + 2)20∆
]
≤ exp
(
− 1
2λM
((ccon + 2)20∆− 2µ)
)
≤ exp
(
− ln k
10cintδ∆
· 20ccon∆
)
= k
− 2ccon
δcint = k−3 .
Using Claim 2, Claim 3 and Lemma 3, we conclude
Pr
[
f
(
X̃Q1 , . . . , X̃Qϕ
)
≥ (20ccon + 42)∆
]
≤ Pr
[
f
(
ỸQ1 , . . . , ỸQϕ
)
+ X CE · f
(
k4, . . . , k4
)
≥ (20ccon + 42)∆
]
≤ Pr
[
f
(
ỸQ1 , . . . , ỸQϕ
)
≥ (20ccon + 42)∆
]
+ Pr [ECE]
≤ Pr [f (1 +W1, . . . , 1 +Wϕ) ≥ (20ccon + 42)∆] + Pr [ECE]
≤ Pr [f (W1, . . . ,Wϕ) ≥ (ccon + 2)20∆] + Pr [ECE]
≤ k−3 + k−3 = 2 · k−3 .
Note that 20ccon = 1, thus Lemma 4 follows.
13
D1 = D`1j1
D2 = D`2j2
D3 = D`3j3
D4 = D`4j4
D5 = D`5j5
tj0
tj1
tj2 = tj4
tj3
tj4 = tj5
a`1j1 a
`2
j2 a
`3
j3 a
`4
j4 a
`5
j5 a
`6
j6b
`1
j1 b
`2
j2 b
`3
j3 b
`4
j4b
`0
j0 b
`5
j5
Figure 4: The vertices P = v1 . . . vL−1 divided into consecutive detours D1, . . . ,D5. tj0 , tj1 , tj2 , tj3 , tj4 , tj5
is a walk in the terminal centered minor M of G (which induced by V1, . . . , Vk). Note that this walk might
not be a (shortest) path in M . The weight of the edge {tj1 , tj2} in M equals dG(tj1 , tj2), which bounded by
dG(tj1 , vb`1j1
) + dG(vb`1j1
, v
a
`2
j2
) + dG(va`2j2
, tj2).
7 Bounding the Distortion
Denote by E fBig the event that for some pair of terminals t, t′, f
(
X̃Q1 , . . . , X̃Qϕ
)
≥ 43 · dG(t, t′) .1 By
Lemma 4 and union bound, Pr [E fBig] ≤
(
k
2
)
· k−3 < k−1.
Lemma 5. Assuming ECE, ECUB and E fBig, for every pair of terminals t, t′, dM (t, t′) ≤ O(log k) ·
dG(t, t
′).
Proof. Fix some t, t′. For every round ` and step j, the detour D`j was charged upon the interval
Q`j . In addition to the vertex v
`
j , Q
`
j contains also a vertex uQ`j
such that D(uQ`j
) ≤ ln kcintδ · L
+(Q`j).
By the triangle inequality, D(v`j) ≤ D(uQ`j ) + L(Q
`
j) = O (ln k) · L+(Q`j). Using Corollary 1 the
distances dG(a
`
j , tj) and dG(b
`
j , tj), between the terminal t
`
j to the boundaries a
`
j , b
`
j of D`j , are bounded
by O
(
D(v`j)
)
= O (ln k) · L+(Q`j).
By the end of the Algorithm 1, all the vertices in P = v1 . . . vL−1 are divided into consecutive detours
D1, . . . ,Dz. Detour Di was constructed at round `i by terminal tji and is from a
`i
ji
to b`iji . In particular
Di was denoted D`iji during the analysis. See Figure 4 for illustration. For every i < z, as b
`i
ji
∈ Vtji ,
a
`i+1
ji+1
∈ Vtji+1 and
{
b`iji , a
`i+1
ji+1
}
is an edge in G, the minor graph M contains an edge from tji to tji+1 .
Set tj0 = t, tjz+1 = t
′, b`0j0 = t, a
`z+1
jz+1
= t′, and L+(Q`0j0) = L
+(Q
`z+1
jz+1
) = 0. Note that {tj0 , tj1} and
1We abuse notation here and use the same X̃Q1 , . . . , X̃Qϕ for all terminals.
14
{tjz , tjz+1} are also edges in M .2 We conclude
dM (t, t
′) ≤
z∑
i=0
dG(tji , tji+1) ≤
z∑
i=0
[
dG(tji , b
`i
ji
) + dG(b
`i
ji
, a
`i+1
ji+1
) + dG(a
`i+1
ji+1
, tji+1)
]
≤
z∑
i=0
dG(b
`i
ji
, a
`i+1
ji+1
) +O (ln k) ·
z∑
i=0
[
L+(Q`iji) + L
+(Q
`i+1
ji+1
)
]
≤
L−1∑
i=0
dG(vi, vi+1) +O (ln k) ·
∑
Q∈Q
2X̃Q · L+(Q)
= dG(t, t
′) +O (ln k) · f
(
X̃Q1 , . . . , X̃Qϕ
)
= O (ln k) · dG(t, t′) .
By Lemma 2, Lemma 3, and Lemma 4, Pr
[
ECE ∧ ECUB ∧ E fBig
]
≥ 1 −(
Pr [ECE] + Pr
[
ECUB
]
+ Pr [E fBig]
)
≥ 1 − 2k −
1
k3
− 1k > 1 −
4
k . Hence Lemma 5 implies Theo-
rem 1.
8 Acknowledgments
The author would like to thank his advisor, Ofer Neiman, for fruitful discussions.
References
[AGK14] Alexandr Andoni, Anupam Gupta, and Robert Krauthgamer. Towards (1 + )-approximate flow
sparsifiers. In Proceedings of the Twenty-Fifth Annual ACM-SIAM Symposium on Discrete Algo-
rithms, SODA 2014, Portland, Oregon, USA, January 5-7, 2014, pages 279–293, 2014.
[BFN16] Yair Bartal, Arnold Filtser, and Ofer Neiman. Constructing almost minimum spanning trees with
constant average distortion. In SODA, 2016.
[BG08] A. Basu and A. Gupta. Steiner point removal in graph metrics. Unpublished Manuscript, available
from http://www.math.ucdavis.edu/~abasu/papers/SPR.pdf, 2008.
[BK96] András A. Benczúr and David R. Karger. Approximating s-t minimum cuts in Õ(n2) time. In Pro-
ceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, Philadelphia,
Pennsylvania, USA, May 22-24, 1996, pages 47–55, 1996.
[BSS12] Joshua D. Batson, Daniel A. Spielman, and Nikhil Srivastava. Twice-ramanujan sparsifiers. SIAM
J. Comput., 41(6):1704–1721, 2012.
[CE05] Don Coppersmith and Michael Elkin. Sparse source-wise and pair-wise distance preservers. In
Proceedings of the Sixteenth Annual ACM-SIAM Symposium on Discrete Algorithms, SODA ’05,
pages 660–669, Philadelphia, PA, USA, 2005. Society for Industrial and Applied Mathematics.
[CGH16] Yun Kuen Cheung, Gramoz Goranci, and Monika Henzinger. Graph minors for preserving terminal
distances approximately - lower and upper bounds. In 43rd International Colloquium on Automata,
Languages, and Programming, ICALP 2016, July 11-15, 2016, Rome, Italy, pages 131:1–131:14,
2016.
2We assume here that each terminal has an edge to itself of length 0.
15
[Che17] Yun Kuen Cheung. Steiner point removal - distant terminals don’t (really) bother. CoRR,
abs/1703.08790, 2017.
[Chu12] Julia Chuzhoy. On vertex sparsifiers with steiner nodes. In Proceedings of the 44th Symposium on
Theory of Computing Conference, STOC 2012, New York, NY, USA, May 19 - 22, 2012, pages
673–688, 2012.
[CLLM10] Moses Charikar, Tom Leighton, Shi Li, and Ankur Moitra. Vertex sparsifiers and abstract rounding
algorithms. In 51th Annual IEEE Symposium on Foundations of Computer Science, FOCS 2010,
October 23-26, 2010, Las Vegas, Nevada, USA, pages 265–274, 2010.
[CXKR06] T.-H. Chan, Donglin Xia, Goran Konjevod, and Andrea Richa. A tight lower bound for the steiner
point removal problem on trees. In Proceedings of the 9th International Conference on Approx-
imation Algorithms for Combinatorial Optimization Problems, and 10th International Conference
on Randomization and Computation, APPROX’06/RANDOM’06, pages 70–81, Berlin, Heidelberg,
2006. Springer-Verlag.
[EFN15a] Michael Elkin, Arnold Filtser, and Ofer Neiman. Prioritized metric structures and embedding.
In Proceedings of the Forty-Seventh Annual ACM on Symposium on Theory of Computing, STOC
2015, Portland, OR, USA, June 14-17, 2015, pages 489–498, 2015.
[EFN15b] Michael Elkin, Arnold Filtser, and Ofer Neiman. Terminal embeddings. In Approximation, Random-
ization, and Combinatorial Optimization. Algorithms and Techniques, APPROX/RANDOM 2015,
August 24-26, 2015, Princeton, NJ, USA, pages 242–264, 2015.
[EGK+14] Matthias Englert, Anupam Gupta, Robert Krauthgamer, Harald Räcke, Inbal Talgam-Cohen, and
Kunal Talwar. Vertex sparsifiers: New results from old techniques. SIAM J. Comput., 43(4):1239–
1262, 2014.
[GHP17] Gramoz Goranci, Monika Henzinger, and Pan Peng. Improved guarantees for vertex sparsification
in planar graphs. CoRR, abs/1702.01136, 2017.
[GNR10] Anupam Gupta, Viswanath Nagarajan, and R. Ravi. An improved approximation algorithm for
requirement cut. Oper. Res. Lett., 38(4):322–325, 2010.
[Gup01] Anupam Gupta. Steiner points in tree metrics don’t (really) help. In Proceedings of the Twelfth
Annual ACM-SIAM Symposium on Discrete Algorithms, SODA ’01, pages 220–227, Philadelphia,
PA, USA, 2001. Society for Industrial and Applied Mathematics.
[KKN14] Lior Kamma, Robert Krauthgamer, and Huy L. Nguyen. Cutting corners cheaply, or how to remove
steiner points. In SODA, pages 1029–1040, 2014.
[KKN15] Lior Kamma, Robert Krauthgamer, and Huy L. Nguyen. Cutting corners cheaply, or how to remove
steiner points. SIAM J. Comput., 44(4):975–995, 2015.
[KNZ14] Robert Krauthgamer, Huy L. Nguyen, and Tamar Zondiner. Preserving terminal distances using
minors. SIAM J. Discrete Math., 28(1):127–141, 2014.
[KR13] Robert Krauthgamer and Inbal Rika. Mimicking networks and succinct representations of terminal
cuts. In Proceedings of the Twenty-Fourth Annual ACM-SIAM Symposium on Discrete Algorithms,
SODA 2013, New Orleans, Louisiana, USA, January 6-8, 2013, pages 1789–1799, 2013.
[KR17] Robert Krauthgamer and Inbal Rika. Refined vertex sparsifiers of planar graphs. CoRR,
abs/1702.05951, 2017.
[KV13] Telikepalli Kavitha and Nithin M. Varma. Small stretch pairwise spanners. In Proceedings of the 40th
International Conference on Automata, Languages, and Programming - Volume Part I, ICALP’13,
pages 601–612, Berlin, Heidelberg, 2013. Springer-Verlag.
[LM10] Frank Thomson Leighton and Ankur Moitra. Extensions and limits to vertex sparsification. In
Proceedings of the 42nd ACM Symposium on Theory of Computing, STOC 2010, Cambridge, Mas-
sachusetts, USA, 5-8 June 2010, pages 47–56, 2010.
16
[MM10] Konstantin Makarychev and Yury Makarychev. Metric extension operators, vertex sparsifiers and
lipschitz extendability. In 51th Annual IEEE Symposium on Foundations of Computer Science,
FOCS 2010, October 23-26, 2010, Las Vegas, Nevada, USA, pages 255–264, 2010.
[Moi09] Ankur Moitra. Approximation algorithms for multicommodity-type problems with guarantees inde-
pendent of the graph size. In 50th Annual IEEE Symposium on Foundations of Computer Science,
FOCS 2009, October 25-27, 2009, Atlanta, Georgia, USA, pages 3–12, 2009.
[PS89] David Peleg and Alejandro A. Schäffer. Graph spanners. Journal of Graph Theory, 13(1):99–116,
1989.
[RTZ05] Liam Roditty, Mikkel Thorup, and Uri Zwick. Deterministic constructions of approximate distance
oracles and spanners. In Automata, Languages and Programming, 32nd International Colloquium,
ICALP 2005, Lisbon, Portugal, July 11-15, 2005, Proceedings, pages 261–272, 2005.
[TZ05] Mikkel Thorup and Uri Zwick. Approximate distance oracles. J. ACM, 52(1):1–24, 2005.
17
A Key
Preliminaries
dG : shortest path metric in G.
BG(v, r) : ball around v in dG with radius r.
G[A] : graph induced by A.
K = {t1, . . . , tk} : set of terminals.
D(v) = mint∈K dG(v, t).
Terminal partition : partition {V1, . . . , Vk} of V , s.t. for
every i, ti ∈ Vi and Vi is connected.
Induced minor : given terminal partition {V1, . . . , Vk},
the induced minor obtained by contracting each Vi
into the super vertex ti. The weight of the edge
{ti, tj} (if exist) set to be dG(ti, tj).
Distortion of induced minor: maxi,j
dM (ti,tj)
dG(ti,tj)
.
Exp(λ) : exponential distribution with mean λ.
Expλ(λ) : Exp(λ) truncated at its mean λ.
Assumptions
• Minimal distance between two terminals equals 1.
• k is larger then big enough constant.
• There are at most k4 vertices in G.
• Every edge on Pt,t′ has weight at most cwln k ·dG(t, t
′).
• There are no terminals other then t, t′ on Pt,t′ .
Constants
δ = 1
80
: governs the ratio r.
r = 1 + δ
ln k
: is the ratio in which the mean of the expo-
nential distribution grows in each round.
D = δ
ln k
: initial mean of the exponential distribution in
round 0.
cw =
cintδ
4
= 1
120
: governs the maximum (relative) weight
of an edge on Pt,t′ .
cCE =
1
3
. The constant in ECE.
cint =
cCE
10δ
= 8
3
: governs the size of interval in the parti-
tion Q of P .
ϕ = |Q|: number of intervals in the partition Q.
p = 0.2: upper bound on the failure probability.
Events
ECUB : denotes that every vertex was already covered af-
ter the blogr (8D(v))c round.
ECE : denotes that some vertex v was covered by some
terminal t, before the blogr(cCE · dG(v, t))c round.
E fBig : denotes that for some pair of terminals t, t′,
f
(
X̃Q1 , . . . , X̃Qϕ
)
≥ 43 · dG(t, t′).
Notations
Vj : cluster of tj .
Rj : radius of the cluster of tj .
q`j : growth of Rj in the ` round.
V⊥ : set of unclustered (uncovered) vertices.
Pt,t′ = {t = v0, . . . , vL = t′}: shortest path from t to t′.
P = {v1, . . . , vL−1}: Pt,t′ without its boundaries.
L({va, va+1, . . . , vb}) = dG(va, vb): internal length.
L+({va, va+1, . . . , vb}) = dG(va−1, vb+1): external length.
Q : partition of P into intervals Q.
uQ : vertex in Q ∈ Q with the property L(Q) ≤
cintδ
log k
D(uQ) ≤ L+(Q).
a`j : index of the leftmost active vertex covered by tj at
round `.
b`j : index of the rightmost active vertex covered by tj at
round `.
D`j =
{
va`j
, va`j+1
, . . . , vb`j
}
: detour created by terminal tj
at round `.
Slice maximal sub-interval (of some Q) of active vertices.
qv minimal choice of q
`
j , such that tj will cover vertex v.
v`j : vertex with the minimal qv (among active vertices).
Q`j : interval containing v
`
j .
S`j : slice containing v
`
j .
qS`j
: minimal choice of q`j that forces tj to cover all of S
`
j .
f(x1, x2, . . . , xϕ) =
∑
i xi · L
+(Qi): cost function.
BQ : a coin box which resembles the interval Q.
Counters
S(Q) : (current) number of slices in interval Q.
XQ : number of detours the interval Q is (currently)
charged for.
X̃Q : number of detours the interval Q is charged for by
the end of Algorithm 1.
ZQ : number of active coins in BQ. Each coin is active
when added to the box.
YQ : number of inactive coins in BQ. A coin become inac-
tive after tossing.
ỸQ : number of inactive coins in BQ by the end of the
process.
18

