1
A SURVEY OF RECENT RESULTS IN NETWORKED CONTROL SYSTEMS
João P. Hespanha Payam Naghshtabrizi Yonggang Xu
Department of Electrical and Computer Engineering,
Univ. of California, Santa Barbara, CA 93106-9560
Tel: +1 (805) 893-7067 Fax: +1 (805) 893-3262
Abstract
Networked Control Systems (NCSs) are spatially distributed systems for which the communication between sensors, actuators,
and controllers is supported by a shared communication network. In this paper we review several recent results on estimation,
analysis, and controller synthesis for NCSs. The results surveyed address channel limitations in terms of packet-rates, sampling,
network delay and packet dropouts. The results are presented in a tutorial fashion, comparing alternative methodologies.
I. INTRODUCTION
Network Control Systems (NCSs) are spatially distributed systems in which the communication between sensors, actuators
and controllers occurs through a shared band-limited digital communication network, as shown in Fig. 1.
PSfrag replacements
PlantPlant
SensorsSensors ActuatorsActuators
EncEnc DecDec
ControllerController
Network
Fig. 1. General NCS architecture.
The use of a multi-purpose shared network to connect spatially distributed elements results in flexible architectures and
generally reduces installation and maintenance costs. Consequently, NCSs have been finding application in a broad range
of areas such as mobile sensor networks [52], remote surgery [33], haptics collaboration over the Internet [17, 19, 59], and
automated highway systems and unmanned aerial vehicles [57, 58]. However, the use of a shared network—in contrast to using
several dedicated independent connections—introduces new challenges and Murray et al. [39] identify control over networks
as one of the key future directions for control.
NCSs lie at the intersection of control and communication theories. Traditionally, control theory focuses on the study of
interconnected dynamical systems linked through “ideal channels”, whereas communication theory studies the transmission
of information over “imperfect channels”. A combination of these two frameworks is needed to model NCSs. This survey is
primarily written from a controls perspective and attempts to systematically address several key issues that make NCSs distinct
from other control systems.
a) Band-limited channels: Any communication network can only carry a finite amount of information per unit of time. In
many applications, this limitation poses significant constraints on the operation of NCSs. Examples of NCSs that are afflicted
by severe communication limitations include unmanned air vehicles (UAVs) due to stealth requirements, power-starved vehicles
such as planetary rovers, long-endurance energy-limited systems such as sensor networks, underwater vehicles, and large arrays
of micro-actuators and sensors.
Inspired by Shannon’s results on the maximum bit-rate that a communication channel can carry reliably, a significant research
effort has been devoted to the problem of determining the minimum bit-rate that is needed to stabilize a linear system through
feedback over a finite capacity channel [71, 18, 41, 9, 66, 4] (c.f., the survey [67] in this special issue). Recently, some progress
has also been made in solving the finite-capacity stabilization problem for nonlinear systems [42, 24] and for linear systems
with unknown parameters [64]. In [56], stability conditions are derived based on anytime information, which quantifies the
“time value” of data bits. Performance limitations of feedback over finite capacity memory-less channels are addressed in [31],
which obtains a general extension of Bode’s integral inequality.
This material is based upon work supported by the National Science Foundation under Grants No. CCR-0311084 and ECS-0242798.
2
Most of the results discussed in this survey are motivated by the observation that, in most digital networks, data is transmitted
in atomic units called packets and sending a single bit or several hundred bits consumes the same amount of network resources.
For example, every fixed-size ATM (Asynchronous Transfer Mode) cell consists of a 40-bit header and a 384-bit data field, an
Ethernet IEEE 802.3 frame has a 112 or 176-bit header and a data field that must be at least 368-bit long, and each Bluetooth
time slot carries 625 bits leaving at least 499 bits for data payload [62, 54]. This observation leads to an alternative view of
band-limited channels, in which a channel can transmit a finite number of packets per unit of time (packet-rate), but each
packet can carry a large number of bits (possibly infinitely many). Although from Shannon’s point of view these channels
have infinite capacity, the closed-loop system stability and performance is still limited by the network. This perspective is
prevalent in most of the results that we discuss in this survey, which generally neglect the quantization effects imposed by
digital networks.
b) Sampling and Delay: To transmit a continuous-time signal over a network, the signal must be sampled, encoded in
a digital format, transmitted over the network, and finally the data must be decoded at the receiver side. This process is
significantly different from the usual periodic sampling in digital control. The overall delay between sampling and eventual
decoding at the receiver can be highly variable because both the network access delays (i.e., the time it takes for a shared
network to accept data) and the transmission delays (i.e., the time during which data are in transit inside the network) depend
on highly variable network conditions such as congestion and channel quality. In some NCSs, the data transmitted are time-
stamped, which means that the receiver may have an estimate of the delay’s duration and take appropriate corrective action.
A significant number of results have attempted to characterize a maximum upper-bound on the sampling interval for which
stability can be guaranteed. These results implicitly attempt to minimize the packet-rate that is needed to stabilize a system
through feedback.
c) Packet dropout: Another significant difference between NCSs and standard digital control is the possibility that data may
be lost while in transit through the network. Typically, Packet dropouts result from transmission errors in physical network links
(which is far more common in wireless than in wired networks) or from buffer overflows due to congestion. Long transmission
delays sometimes result in packet re-ordering, which essentially amounts to a packet dropout if the receiver discards “outdated”
arrivals. Reliable transmission protocols, such as TCP, guarantee the eventual delivery of packets. However, these protocols
are not appropriate for NCSs since the re-transmission of old data is generally not very useful.
d) Systems architecture: Figure 1 shows the general architecture of an NCS. In this figure, encoder blocks map measure-
ments into streams of “symbols” that can be transmitted across the network. Encoders serve two purposes: they decide when to
sample a continuous-time signal for transmission and what to send through the network. Conversely, decoder blocks perform
the task of mapping the streams of symbols received from the network into continuous actuation signals. One could also
include in Fig. 1 encoding/decoding blocks to mediate the controllers’ access to the network. We do not explicitly represent
these blocks because the boundaries between a digital controller and encoder/decoder blocks are often blurry.
Most of the research on NCSs considers structures simpler than the general one depicted in Fig. 1. For example, some
controllers may be collocated (and therefore can communicate directly) with the corresponding actuators. It is also often
common to consider a single feedback loop as in Fig. 2. Although considerably simpler than the system shown in Fig. 1,
this architecture still captures many important characteristics of NCSs such as bandwidth limitations, variable communication
delays, and packet dropouts.
PSfrag replacements
Plant
EncDec
SensorsActuators
Controller
Network
Fig. 2. Single-loop NCS.
Paper organization
Section II addresses the problem of state estimation over imperfect communication channels. Section III reviews a collection
of results to determine the closed-loop stability of NCSs in the presence of network sampling, delays, and packet dropouts.
Section IV addresses control synthesis methods for NCSs. To provide a unified view, we formulate all the results surveyed
with consistent terminology and notation. Consequently, the statements of the theorems found in this survey often differ from
the ones in the original papers. In some cases, we also combine results from multiple papers into single theorems.
3
Notation and basic definitions
Throughout the paper, R stands for real numbers and N for nonnegative integers. For a given matrix A ∈ Rn×n and
vector x ∈ Rn, ‖x‖ :=
√
x′x denotes the Euclidean norm of x, ‖A‖ the corresponding induced matrix norm, and λ(A) the
set of eigenvalues of A. Random variables are generally denoted in boldface. For a random variable y, E[y] stands for the
expectation of y [53]. For deterministic systems we use standard notions of stability, e.g., from [21]. General stability notions
for stochastic systems can be found in [22], and our definitions are compatible with [10]: We say that a random process xk,
k ∈ N is almost surely stable if Pr
(
supk∈N ‖xk‖ < ∞
)
= 1; that it is stable in the m-th moment if supk∈N E ‖xk‖m < ∞;
that it is asymptotically stable in the m-th moment if limk→∞ E ‖xk‖m = 0; and that it is exponentially stable in the m-th
moment if there exist constants α, β > 0 such that E ‖xk‖m < αE ‖x0‖me−βk, ∀k ∈ N. When m = 2, we simply say that
the random process is (asymptotically/exponentially) mean-square stable.
II. ESTIMATION OVER LOSSY NETWORKS
This section addresses the problem of estimating the state of a remote plant based on measurements carried through a lossy
network. State estimation over networks is important in applications such as remote sensing, space exploration, and sensor
networks. It is also a crucial component of certainty equivalence NCS controllers that construct control signals based on state
estimates of a remote plant. In several NCS scenarios, certainty equivalence controllers are not optimal, but are still of a great
practical interest due to the difficulty in designing optimal controllers.
In this and the subsequent sections, we assume that the network can be viewed as a channel that can carry real numbers
without distortion, but that some of the messages can be lost. This is appropriate when the number of bits in each data packet
is sufficiently large so that quantization effects can be ignored, but packet dropouts cannot.
Network
PSfrag replacements
Plant
Remote
estimator
yk
Linear plant
Remote
estimator
(a)
Network
PSfrag replacements
Plant
Remote
estimator
yk
Smart sensor
x̃k
Processor
(b)
Fig. 3. Scenarios for state estimation over a network. In (a) the raw sensor measurements are sent to a remote estimator, whereas in (b) the measurements
are processed locally before transmission.
We consider two scenarios for state-estimation over networks. In the one depicted in Fig. 3(a), every raw sensor measurement
yk is sent to the remote estimator via the network, but may not arrive there if there is a packet dropout [32, 61, 60]. Alternatively,
in the scenario shown in Fig. 3(b), the raw sensor measurements may be processed locally and at each time instant a decision
is made on whether or not it is worth to send data to the remote estimator [72, 75, 74]. This option is motivated by the desire
to reduce network traffic and to make the estimate robust with respect to packet dropouts.
We restrict out attention to linear time-invariant (LTI) plants with Gaussian measurement noise and disturbance:
xk+1 = Axk + wk, yk = Cxk + vk, ∀k ∈ N, xk,wk ∈ Rn, yk,vk ∈ Rp, (1)
where the initial state x0 is zero-mean Gaussian with covariance matrix Σ, and the zero-mean Gaussian white noises wk
and vk are mutually independent with covariance matrices Rw ≥ 0 and Rv > 0, respectively. It is assumed that (C,A) is
detectable, and (A,Rw) is stabilizable.
A. Optimal estimation for Bernoulli dropouts
Consider the architecture in Fig. 3(a) and a lossy channel modeled by a stochastic process θk ∈ {0, 1}, ∀k ∈ N with the
understanding that θk = 1 signifies that the measurement yk sent at time k reaches its destination and that θk = 0 when it
does not. It is generally assumed that the dropout process θk is statistically independent of x0, wk, and vk.
The optimal estimate of xk, k ∈ N given all the data {θ`, ∀ ` ≤ k − 1} ∪ {y` : θ` = 1, ∀ ` ≤ k − 1} that is known to the
remote estimator at time k is given by
x̂k|k−1 = E
[
xk
∣
∣ θ`, ∀ ` ≤ k − 1; y`, ∀` ≤ k − 1 s.t. θ` = 1
]
. (2)
4
This estimate can be computed recursively using the following time-varying Kalman filter (TVKF) [20]:
x̂0|−1 = 0, (3a)
x̂k|k = x̂k|k−1 + θkFk(yk − Cx̂k|k−1), ∀k ∈ N, (3b)
x̂k+1|k = Ax̂k|k, (3c)
with the gain matrix Fk calculated recursively as follows
P0 = Σ
Fk = PkC
′(CPkC
′ +Rv)
−1, ∀k ∈ N,
Pk+1 = APkA
′ +Rw −AFk(CPkC ′ +Rv)F ′kA′.
Each Pk corresponds to the estimation error covariance matrix
Pk = E[(xk − x̂k|k−1)(xk − x̂k|k−1)′], ∀k ∈ N.
Sinopoli et al. [60] study the performance of this Kalman filter when θk is a Bernoulli process with probability of dropout
(θk = 0) equal to p ∈ [0, 1). They show the existence of a critical value pc for the dropout rate p, above which the estimation
error covariance becomes unbounded:
Theorem 1 ([60]): Assume that the dropout process θk ∈ {0, 1} is Bernoulli with dropout probability
p := Pr[θk = 0] ∈ [0, 1), ∀k ∈ N.
There exists a critical value pc ∈ (0, 1] with the property that
1) for every p ≥ pc, there is some P0 ≥ 0 for which E[Pk], k ∈ N is unbounded along solutions to the TVKF (3);
2) for every p < pc and every P0 ≥ 0, E[Pk], k ∈ N remains uniformly bounded along solutions to the TVKF (3).
Furthermore, the critical value pc satisfies p ≤ pc ≤ p̄, where the upper-bound is given by
p̄ =
1
(max{|λ(A)|})2 , (4)
and the lower-bound is given by the solution to the following (quasi-convex) optimization problem
p = max
{
p ≥ 0 : Ψp(Y, Z) > 0, 0 ≤ Y ≤ I for some Y, Z
}
,
where
Ψp(Y, Z) =
[
Y
√
1−p(Y A+ZC) √pY A√
1−p(A′Y +C′Z′) Y 0√
pA′Y 0 Y
]
, ∀Y, Z ∈ Rn×n. 
In some special cases (such as when the matrix C is invertible) the upper-bound in (4) is tight in the sense that pc = p̄ but in
general this may not be the case.
Liu and Goldsmith [29] consider a setting similar to that of [60], but extend the results to allow partial observation losses.
In [29], each yk is split into two elements that are encoded separately and sent over different (wireless) channels in which
packets may be dropped independently.
B. Multi-sensor plants
Several variations of the problem formulated above have been considered. Matveev and Savkin [32] consider N sensors,
each independently sending its measurements to the estimator with some delay. In practice, this corresponds to the following
plant model
xk+1 = Axk + wk, yν,k = Cνxk + vν,k , ν ∈ {1, · · · , N}, ∀k ∈ N, (5)
where yν,k denotes the measurement collected by sensor ν at time k. Assuming that the measurement yν,` suffers a random
delay of τ ν(`), the optimal estimate of xk that the receiver can construct at time k is given by
x̂k = E
[
xk
∣
∣ θν,`, ∀ ` ≤ k − τ ν(`); yν,`, ∀` ≤ k − τ ν(`) s.t. θν,` = 1
]
,
where θν,` = 1 if yν,` reaches its destination, and θν,` = 0 otherwise. Matveev and Savkin [32] derive a recursive Kalman
filter and provide conditions under which the estimation error process is almost surely stable. These conditions are given in
terms of the observability of xk for specific realizations of the process θk.
Gupta et al. [14] also consider the state-estimation of the plant (5), but they impose the constraint that only one sensor
can use the channel at each time step. They develop a stochastic sensor selection algorithm that decides how to schedule the
sensors’ access to the network to minimize the error covariance. They also compute upper- and lower-bounds on the achievable
error covariance matrices.
5
C. Reduced-computation estimation
Even though the plant (1) is time-invariant, the matrix gain Fk and the covariance matrix Pk of the optimal TVKF (2) do
not converge to steady-state values as k → ∞. Moreover, these matrices cannot be computed off-line because they depend on
the whole dropout history {θ0,θ1, . . . ,θk}. Smith and Seiler [61] avoid this difficulty by pre-computing a finite set of gains
to be selected according to the dropout history in the last τ time-steps. The resulting estimator is called a finite loss history
estimator (FLHE) and has the following form:
x̂0|−1 = 0,
x̂k|k = x̂k|k−1 + Fηk (yk − Cx̂k|k−1), ∀k ∈ N,
x̂k+1|k = Ax̂k|k ,
where ηk is an integer from 1 to 2τ that encodes the dropout history {θk,θk−1, . . . ,θk−τ+1} in the last τ time-steps and
F1, F2, . . . , F2τ are appropriately selected matrix gains with Fηk = 0 whenever θk = 0. Smith and Seiler [61] model the
evolution of ηk as a Markov chain, which allows them to consider correlated (bursty) dropouts and is an improvement over the
Bernoulli drop model. For this model, they provide an optimal synthesis method for the gains F1, F2, . . . , F2τ and conditions for
stability of the error process in terms of the convergence of a Riccati iteration. Although the FLHE is not optimal, simulations
show that the variance of the estimation error is comparable to that of the optimal TVKF when τ is sufficiently large.
D. Estimation with local computation
The encoder-estimator scheme in Fig. 3(b) is motivated by the growing number of smart sensors with embedded processing
units that are capable of local computation. In this context, Xu and Hespanha [74] investigate the benefits of pre-processing
the measurements before transmission to the network. For the LTI plant (1), the smart sensor computes locally an optimal state
estimate x̃k|k = E[xk|y`, ` ≤ k] using the following stationary Kalman filter:
x̃0|0 = 0, x̃k+1|k+1 = Ax̃k|k + F (yk+1 − CAx̃k|k), ∀k ∈ N, (6)
where F := PC ′(CPC ′ +Rv)−1 and P > 0 is the solution to the discrete-time Algebraic Riccati Equation
P = APA′ +Rw −APC ′(CPC ′ +Rv)−1CPA′.
The smart sensor then transmits the local estimates x̃k|k (instead of the raw measurements yk), which are used by the remote
estimator to compute the optimal estimate x̂k|k−1 of xk, k ∈ N given all the data {θ`, ∀ ` ≤ k−1}∪{x̃`|` : θ` = 1, ∀ ` ≤ k−1}
successfully received up to time k:
x̂k|k−1 = E
[
xk | θ`, ∀ ` ≤ k − 1; x̃`|`, ∀ ` ≤ k − 1 s.t. θ` = 1
]
.
This remote estimate can be computed recursively by
x̂0|−1 = 0, (7a)
x̂k|k = (1 − θk)x̂k|k−1 + θkx̃k|k , k ∈ N, (7b)
x̂k+1|k = Ax̂k|k . (7c)
The main advantage of this solution is that each message x̃k|k that successfully reaches the remote estimator encodes all the
relevant information that can be extracted from every raw measurement collected up to time k. In general, this permits the
stability of the error process for larger drop rates p than those permitted by the architecture in Fig. 3(a), in which the raw
measurements are sent over the network.
Theorem 2 ([74]): Assume that θk is a Bernoulli process with probability of dropout p ∈ [0, 1). For every m ≥ 2 and
p <
1
(max{|λ(A)|})m , (8)
the (remote) estimation error ek := xk − x̂k|k−1 computed by (7) is stable in the m-th moment. 
The bound in (8) is tight in the sense that the estimation error is not stable in the m-th moment for every p > 1(max{|λ(A)|})m .
The critical value in (8) for mean-square stability (m = 2) matches the upper bound in (4) that is only known to be tight when
the matrix C is invertible. Theorem 2 shows that this critical value can be achieved even when C is not full rank, as long
as one uses the architecture in Fig. 3(b). This is obtained at the expense of shifting some computation to the smart sensor,
which now needs an embedded processor. Moreover, each network packet now carries x̃k|k instead of the raw measurement
yk, which will generally require larger packets.
6
E. Estimation with controlled communication
To actively reduce network traffic, sensor measurements may not be sent to the remote estimator at every time step. This
is known as controlled communication and has been investigated by Yook et al. [75], Xu and Hespanha [73, 74] to explore
the trade-off between communication and estimation performance. It is also related to the concept of Lebesgue sampling
introduced by Åström and Bernhardsson [1]. Controlled communication requires local processing at the sensor so we will
focus our attention on the architecture in Fig. 3(b).
Yook et al. [75], Xu and Hespanha [73, 74] construct within the smart sensor the stationary Kalman filter (6) as well as a
copy of the remote estimator (7). This implicitly assumes an erasure channel for which the smart sensor receives immediate
feedback regarding the success of the transmission, which is required to be able to use θk in implementing (7). To decide
whether or not the local estimate x̃k|k should be sent to the network, the smart sensor compares x̃k|k with the (local copy) of
the remote estimate x̂k|k−1. Xu and Hespanha [74] make this decision stochastically, by selecting
θk =
{
1 with prob. Λk(ẽk)
0 with prob. 1 − Λk(ẽk)
(9)
where the random variable θk is now determined by a random draw inside the smart sensor and specifies whether or not x̃k|k
is sent to the remote estimator. Its distribution is a function Λk(·) ∈ [0, 1] of the difference ẽk := x̃k|k − x̂k|k−1 between the
local and the remote estimators. The function Λk(·) should be chosen so that it takes values close to one when the error ẽk
is large because this is an indication that the remote state estimate can be significantly improved by sending x̃k|k .
When the network introduces dropouts with probability p ∈ [0, 1), independent of the plant state, one should replace (9) by
θk =
{
1 with prob. (1 − p)Λk(ẽk)
0 with prob. 1 − (1 − p)Λk(ẽk),
(10)
to account for the fact that a message only reaches the remote estimator if (i) the smart sensor decides to send it [which
occurs with probability Λk(ẽk)] and (ii) the packet that carries the message is not dropped by the network, which happens
with probability 1 − p.
Unlike the “uncontrolled” Bernoulli dropout process discussed in the previous sections, neither the controlled process θk
in (9) nor the mixed controlled/uncontrolled process θk in (10) is independent of the plant’s state xk. In fact, combining (1),
(6), (7) and (10), we conclude that the difference ẽk := x̃k|k − x̂k|k−1 between the local and the remote estimators evolves
according to
ẽk+1 =
{
dk with prob. (1 − p)Λk(ẽk)
Aẽk + dk with prob. 1 − (1 − p)Λk(ẽk),
where dk := FCA(xk − x̃k|k) +Fwk + vk+1 is a zero-mean Gaussian process. The following discrete-time result is adapted
from those in [74] for continuous-time processes.
Theorem 3: Assume that θk is generated by (10) with Λk(e) → 1 as ‖e‖ → ∞. For every m ≥ 2 and drop probability p
satisfying (8), the (remote) estimation error ek := xk − x̂k|k−1 computed by (7) is stable in the m-th moment. 
Xu and Hespanha [73] consider the problem of optimal controlled communication for a network without packet dropouts.
They make the simplifying assumption that the smart sensor can measure the whole state xk and therefore it does not need to
build a local estimate x̃k|k . The objective is to find the optimal “communication policy” that minimizes the following long-term
average cost
J := lim
K→∞
1
K
E
[
K−1
∑
k=0
‖ek+1‖2 + λθk
]
, λ > 0, (11)
which penalizes a linear combination of the remote estimation error variance E[‖ek+1‖2] and the average packet sending rate
E[θk]. In this context, a communication policy should be understood as a rule that selects a distribution for the θk based on
all the measurements x1,x2, . . . ,xk available to the smart sensor, i.e., a family of functions Λ̄k(·) for which
θk =
{
1 with prob. Λ̄k(x1,x2, . . . ,xk)
0 with prob. Λ̄k(x1,x2, . . . ,xk),
Finding the optimal Λ̄k(·) that minimize (11) can be done using dynamic programming and value iteration. The optimal policy
turns out to be stationary and it depends on the measurements only through the local estimation error ẽk. In particular, it can
be expressed as in (9), but with
Λk(e) =
{
0 e ∈ Ω
1 otherwise,
∀k ∈ N, e ∈ Rn
7
for an appropriately chosen set Ω ⊂ Rn, which contains the origin. This corresponds to a deterministic controlled communication
scheme, in which data communication is inhibited while ẽk remains inside Ω and is triggered when the error exits this set.
Xu and Hespanha [73] consider a more general case of networks that introduce a τ -step delay, but this does not significantly
change the nature of the results.
III. STABILITY OF NCSS WITH SAMPLING, DELAY, AND PACKET DROPOUTS
This section addresses the stability of feedback loops that are closed over a network. This problem is motivated by scenarios
in which sensors, controllers, and actuators are not co-located and use a shared network to communicate. As before, we ignore
quantization and focus our attention on the effects of data sampling, network delay, and packet dropouts on the stability of the
resulting closed-loop NCSs.
PSfrag replacements
y(t)
ykŷk
ŷ(t)
hold
tk
LTI Sys.
Network
Hold
Fig. 4. One-channel feedback NCS with LTI plant/controller
A. Sampling and delay
The one-channel feedback NCS in Fig. 4 has been commonly used to investigate the effects of sampling and delay in
the stability of NCSs. The LTI system encapsulates a linear time-invariant plant/controller pair modeled by the following
continuous-time system
ẋ = Ax+Bŷ, y = Cx. (12)
This one-channel feedback NCS can capture several NCS configurations. The signal y can be regarded as a vector of sensor
measurements and ŷ as the input to a continuous-time controller collocated with the actuators, as in Fig. 5(a) [57, 36].
Alternatively, ŷ can be viewed as the input to the actuators and y as the desired control signal computed by a controller
collocated with the sensors, as in Fig. 5(b). In either case, x would include the states of the plant and the controller. The block
diagram in Fig. 4 also captures the case of a static controller that is not collocated with the sensors nor with the actuators
as in Fig. 5(c), because a memoryless controller could be moved next to the actuators, without affecting the stability of the
closed loop [3, 81].
PSfrag replacements
PlantController
Network
Samp.Hold
(a)
PSfrag replacements
Plant Controller
Network
Samp.Hold
(b)
PSfrag replacements
Plant
Controller Network
Samp.Hold
Static
Controller
(c)
Fig. 5. NCS control architectures captured by the one-channel feedback NCS in Fig. 4
In the one-channel feedback NCS in Fig. 4, the signal y(t) is sampled at times {tk : k ∈ N} and the samples yk := y(tk),
∀k ∈ N are sent through the network. In a lossless network, we have
ŷk = yk, ∀k ∈ N, (13)
but the samples only arrive at the destination after a (possibly variable) delay of τk ≥ 0. At these times ŷ(t) is updated, leading
to
ŷ(t) =
{
ŷk−1 t ∈ [tk, tk + τk)
ŷk t ∈ [tk + τk , tk+1)
(14)
8
where we assume that the network delays are always smaller than one sampling interval, i.e., that tk + τk < tk+1, ∀k ∈ N
(cf. Fig 6). Defining xk := x(tk), ∀k ∈ N and applying the variation of constants formula to (12) and (14) we conclude that
PSfrag replacements
tk−1 tk tk+1
τk
y(tk−1)
y(tk)
t
ŷ(t)
y(t)
Fig. 6. The piecewise constant signal ŷ(t) defined by (14).
xk+1 = e
A(tk+1−tk)xk + e
A(tk+1−tk−τk)Γ(τk)Bŷk−1 + Γ(tk+1 − tk − τk)Bŷk, (15)
where Γ(s) :=
∫ s
0
eAzdz, ∀s ∈ R. To analyze this NCS, one can define an augmented discrete-time state z ′k :=
[
x(tk)
′ ŷ′k−1
]
,
∀k ∈ N and conclude from (13) and (15) that it evolves according to
zk+1 = Φ(tk+1 − tk, τk)zk, ∀k ∈ N, (16)
where
Φ(a, b) :=
[
eAa + Γ(a− b)BC eA(a−b)Γ(b)B
C 0
]
, ∀a, b ∈ R.
In the absence of delay (i.e., when τk = 0, ∀k ∈ N), the state zk does not need to include ŷk−1 and therefore the function
Φ(·) in (16) can simply be defined by
Φ(a, 0) := eAa + Γ(a)BC, ∀a > 0. (17)
When the plant (12) is open-loop unstable, (16) will generally be unstable if the interval between sampling times becomes
very large. In view of this, significant work has been devoted to finding upper bounds on tk+1 − tk, ∀k ∈ N for which stability
can be guaranteed. These upper bounds are sometimes called the maximum allowable transfer interval (MATI) [69].
Delays longer than one sampling interval may result in more than one ŷk (or none) arriving during a single sampling interval,
making the derivation of recursive formulas like (16) difficult. All results reviewed in this section are based on a reduction of
the NCS to some form of discrete-time system such as (16), for simplicity we will therefore implicitly assume delays smaller
than one sampling interval. This restriction will be lifted in Section III-C.
Periodic sampling and constant delay: When y(t) is sampled periodically and the delay is constant, the discrete-time
system (16) is time-invariant and it is straightforward to establish its stability:
Theorem 4 ([3]): Assuming that there exist constants h > τ ≥ 0 such that
tk+1 − tk = h, τk = τ, ∀k ∈ N,
the NCS (12)–(14) in Fig. 4 is exponentially stable if and only if Φ(h, τ) is Schur (i.e., all its eigenvalues have magnitude
strictly less than one). 
Remark 1: Defining the alternative augmented state z̄ ′k :=
[
x(tk + τk)
′ x(tk)′
]
, ∀k ∈ N we obtain
z̄k+1 = Φ̄(tk+1 − tk − τk, τk+1)z̄k, ∀k ∈ N, Φ̄(a, b) :=
[
eA(a+b) Γ(a+ b)BC
eAa Γ(a)BC
]
, ∀a, b ∈ R, (18)
from which stability of the NCS can also be deduced. Zhang et al. [81] use results from [2] on the stability of nonlinear
hybrid systems to conclude that Schurness of Φ̄(h, τ) is a sufficient condition for stability of the NCS in the time-invariant
case. From (18) one can see that this condition is also necessary. 
While some network protocols guarantee constant delay, such as the Controller Area Network (CAN) protocol [23], most
protocols introduce delays that can vary significantly from message to message. Variable delays can be equalized by introducing
a buffer at the receiver, where data packets can be held so that all packets appear to have the same delay from the perspective
of the NCS [30]. However, the downside of delay equalization is that all packets will appear to have a delay as large as the
worst-case delay that the network can introduce.
9
Periodic sampling and variable delay: Suppose that the sampling intervals are constant and equal to h and the delay
takes values equal to κ hN where κ ∈ 0, 1, · · · , Dmax and Dmax ≤ N ∈ N. This situation happens when computation and
transmission delays are negligible and access delays serve as the main source of delays in NCS [26, 25, 27]. Under these
assumptions the closed-loop system (16) can be written as a discrete-time switched system with Dmax + 1 modes as follows
zk+1 = Aσkzk, ∀k ∈ N,
where the switching signal σk takes values from {0, 1, · · ·Dmax} at each time step and, when σk = κ,
Aκ := Φ
(
h, κ
h
N
)
κ ∈ {0, 1, · · ·Dmax}
Lin et al. [26] assume that for the case of no delay or small delays ( κ ≤ N0), the corresponding state matrix, Aκ, is
Schur stable while for the case of large delay (κ > N0), Aκ is not Schur stable. Using average dwell time results for discrete
switched systems [79] provides conditions such that NCS stability is guaranteed. Also the authors consider robust disturbance
attenuation analysis for this class of NCSs.
Remark 2: One Packet dropout can be modeled as an extra mode where κ = N . The authors extended the results for the
case of consecutive packet dropouts in [25].
Variable sampling and delay: When the network delay is not constant or when the signal y(t) is sampled in a non-periodic
fashion, (16) is not time-invariant and one needs a Lyapunov-based argument to prove its stability. The following result is
adapted from [80]1 and expresses a sufficient condition for V (z) := z ′Pz to be a Lyapunov function for (16), from which
stability of the NCS can be deduced:
Theorem 5: Assume that there exist constants hmin, hmax, τmin, τmax such that
0 ≤ hmin ≤ tk+1 − tk ≤ hmax, 0 ≤ τmin ≤ τk ≤ τmax, ∀k ∈ N.
The NCS (12)–(14) in Fig. 4 is exponentially stable if there exists a symmetric matrix P such that
P > 0, Φ(h, τ)′PΦ(h, τ) − P < 0, ∀h ∈ [hmin, hmax], τ ∈ [τmin, τmax]. (19)

From a numerical perspective, it is generally not simple to find a matrix P that satisfies (19) for all values of h and τ in the
given intervals. However, testing the existence of a matrix P that satisfies (19) for values of h and τ on a finite grid leads to a
finite set of Linear Matrix Inequalities (LMIs) that is easy to solve. Zhang and Branicky [80] propose a randomized algorithm
to find the largest value of hmax for which stability can be guaranteed when hmin = τmin = τmax = 0.
PSfrag replacements
discrete
updates
Model
x̂P
K
u(t)
Plant y(t)
tk
ykŷk = yk
Ideal network
Fig. 7. State feedback model-based NCS.
Model-based controller: Montestruque and Antsaklis [34, 35, 36, 37, 38] consider the model-based one-channel feedback
NCS in Fig. 7, in which the signal y transmitted across the network is the state of an LTI plant
ẋP = APxP +BPu, y = xP (20)
whose input u is generated by an estimator-based controller collocated with the actuators. In general, an exact model of the
plant is not available and therefore the controller must construct an estimate x̂P of xP based on the following approximate
plant model
˙̂xP = ÂP x̂P + B̂Pu, (21)
which is instantaneously updated at the sampling times {tk : k ∈ N} using the true value of xP coming from the network. The
key difference between the NCSs in Figures 4 and 7 is that in the former the data coming from the network is held constant
1A special case of Theorem 5 with hmin = τmin = τmax = 0 and the matrix Φ(·) given by (17) can be found in [80].
10
between sampling times, whereas in the later this data is used to instantaneously update the state of the controller. Assuming
that the network delay is negligible, the controller updates its state estimate according to
x̂P (tk) = y(tk) = xP (tk), ∀k ∈ N. (22)
It then uses a certainty equivalence control law of the form
u = Kx̂P , (23)
with the matrix K chosen so that ÂP + B̂PK is Hurwitz (i.e., all its eigenvalues have strictly negative real part). Note that
the matrices in the plant model (20) and the estimator model (21) generally do not match due to parametric uncertainty.
Because of (22), we conclude that the state estimation error e := xP − x̂P is reset to zero at sampling times and therefore
its dynamics are defined by
ė = (ÃP + B̃PK)xP + (ÂP − B̃PK)e, e(tk) = 0,
where the matrices Ã := AP − ÂP and B̃P := BP − B̂P represent the difference between the actual plant and the model used
to build the estimator. Defining z′ :=
[
x′P e
′], we conclude that the overall closed-loop evolves according to the following
impulsive system
ż = Λz, z(tk)
′ =
[
x′P (t
−
k ) 0
]
, (24)
where xP (t−k ) denotes the limit from below of xP (τ) as τ ↑ tk and
Λ :=
[
AP +BPK −BPK
ÃP + B̃PK AP − B̃PK
]
. (25)
Defining the discrete-time state zk := z(tk), ∀k ∈ N, we obtain the following model for its evolution
zk+1 = M(tk+1 − tk)zk, ∀k ∈ N, M(a) :=
[
I 0
0 0
]
eΛa
[
I 0
0 0
]
, ∀a > 0.
The following result is adapted from [36] and follows from standard results on the stability of discrete-time systems:
Theorem 6: The following two results hold for the NCS (20)–(23) in Fig. 7:
1) When there exists a constant h such that tk+1 − tk = h, ∀k ∈ N, the NCS is globally exponentially stable if and only
if M(h) is Schur.
2) When there exist constants hmin and hmax such that 0 ≤ hmin ≤ tk+1 − tk ≤ hmax, ∀k ∈ N, the NCS is exponentially
stable if there exists a symmetric matrix P such that
P > 0, M(h)PM(h) − P < 0, ∀h ∈ [hmin, hmax]. 
For periodic sampling, Montestruque and Antsaklis [34, 35, 36] use a similar approach to determine the maximum value of
h := tk − tk−1, ∀k ∈ N for which the NCS is stable, both under state and output feedback. The same authors [37, 38] also
consider (non-constant) stochastic2 sampling intervals hk := tk − tk−1, ∀k ∈ N. The following result addresses the case of
independent identically distributed (i.i.d.) hk.
Theorem 7 ([38]): Assume that the sampling intervals hk := tk − tk−1, ∀k ∈ N are i.i.d. random variables and that the
following two conditions hold
E
[
(e2σmax(Λ)hk − 1)1/2
]
<∞, E
[
σmax(M(hk))
]
< 1, ∀k ∈ N,
where the matrix Λ is defined by (25) and σmax(Λ) denotes its largest singular value. Then the NCS (20)–(23) in Fig. 7 is
almost surely stable in the sense that for every initial condition z(t0) to (24) and for every  > 0, we have that
lim
δ̄→∞
Pr
{
sup
k≥δ̄
(
∫ tk+1
tk
‖z(ξ)‖2dξ
)1/2
> 
}
= 0. 
Montestruque and Antsaklis [38] further generalize these results to sampling intervals driven by Markov chains, which can be
used to model correlated inter-sampling intervals hk.
2To emphasize the fact that the sampling times are now random variables, we represent them in bold-face.
11
General nonlinear case: Consider a nonlinear plant and remote controller with exogenous disturbances of the following
form:
ẋP = fP (xP , û, w), y = gP (xP ), (26a)
ẋC = fC(xC , ŷ, w), u = gC(xC), (26b)
where xP and xC are the states of the plant and the controller; û and y the plant’s input and output; ŷ and u the controller’s
input and output; and w an exogenous disturbance. The plant and the controller are connected through a two-channel feedback
NCS as in Fig. 2. Ignoring network delay, between the sampling times {tk : k ∈ N} both û and ŷ are held constant:
û(t) = û(t+k ), ŷ(t) = ŷ(t
+
k ), ∀t ∈ (tk, tk+1], k ∈ N, (27)
where u(t+k ) and y(t
+
k ) denote the limit from above of u(τ) and y(τ), respectively, as τ ↓ tk. The signals u(t) and y(t) are
not necessarily both sampled and sent to the network at every sampling time and therefore
û(t+k ) =
{
u(tk) u sampled at time tk
û(tk) u not sampled at time tk
ŷ(t+k ) =
{
y(tk) y sampled at time tk
ŷ(tk) y not sampled at time tk
∀k ∈ N. (28)
The sampling model (28) can be written compactly as
û(t+k ) = u(tk) + hu
(
k, e(tk)
)
, ŷ(t+k ) = y(tk) + hy
(
k, e(tk)
)
, ∀k ∈ N, (29)
where
e =
[
ey
eu
]
:=
[
ŷ − y
û− u
]
∈ Rne ,
and
hu(k, e) :=
{
0 u sampled at time tk
eu u not sampled at time tk
hy(k, e) :=
{
0 y sampled at time tk
ey y not sampled at time tk
∀k ∈ N, e ∈ Rne .
These definitions allow us to write the following “reset-map” for the error e at the sampling times:
e(t+k ) =
[
ŷ(t+k ) − y(tk)
û(t+k ) − u(tk)
]
=
[
hu(k, e)
hy(k, e)
]
, (30)
where we used (29) and the fact that both y and u are continuous functions of time. The fact that the neither the state of the
process nor the state of the controller appear in (30) will be very convenient for the analysis. It is also interesting to observe
that the error reset map in (30) does not depend on the process/controller dynamics, but only on the “protocol” used to decide
which variables should be sampled at each sampling time.
Walsh et al. [70], Nesic and Teel [43] actually consider a sampling model more general than (28), as they allow for only
some entries of u and y to be transmitted through the network at each sampling time. In practice, this means that only some
entries of hu(·) and hy(·) may be equal to zero at each sampling time. To capture this, Nesic and Teel [43] generalize (30) to
e(t+k ) = h
(
k, e(tk)
)
, ∀t ∈ (tk, tk+1], k ∈ N, (31)
where h(k, ·) specifies which entries of the error are reset to zero at the kth sampling time. This function can be regarded as
implementing a network access protocol that decides which input/output signals should be sampled at each time tk, k ∈ N.
When this decision is based on the current mismatches between u and û and/or between y and ŷ, we have a dynamic protocol,
such as the Try-Once-Discard protocol in [70, 43]. Otherwise, we have a static protocol, such as the Round-robin protocol in
[81, 70, 43]. Since the current mismatches may not always be available, Tabbara et al. [63] propose an alternative formulation
in which the decision to sample a signal is based on an estimate of the mismatch for that signal.
Defining x :=
[
x′P x
′
C
]′, the NCS described by (26), (27), and (31) can be modeled by an impulsive system of the form
ẋ = f(x, e, w), ∀t ≥ 0, x ∈ Rnx , w ∈ Rnw , (32a)
ė = g(x, e, w), ∀t ∈ (tk, tk+1], e ∈ Rne , (32b)
e(t+k ) = h
(
k, e(tk)
)
, ∀k ∈ N, (32c)
where e(t+k ) denotes the limit from above of e(τ) as τ ↓ tk and all limits from below of e(t), t ≥ 0 coincide with the value of
the function at the same time. This is a generalization of the NCS model in (24), in which signals were assumed continuous
from above instead of continuous from below.
The following result is adapted from [43] and can be used to establish the stability of (32):
Theorem 8: Suppose that the following conditions hold:
12
1) There exists a function W : N × Rne → [0,∞) and constants ρ ∈ [0, 1), a1, a2 > 0 such that
a1‖e‖ ≤W (k, e) ≤ a2‖e‖, W (k + 1, h(k, e)) ≤ ρW (k, e), ∀k ∈ N, e ∈ Rne .
2) There exists a function H : Rnx → [0,∞) and a constant L such that
∂W (k, e)
∂e
· g(x, e, w) ≤ LW (k, e) +H(x) + ‖w‖, ∀k ∈ N, x ∈ Rnx , e ∈ Rne , w ∈ Rnw .
3) There exists a class KL function3 β1 and a positive constant γ1 > 0 such that
H
(
x(t)
)
≤ β1
(
‖x(t0)‖, t− t0
)
+ γ1 ess sup
τ∈(t0,t)
(
‖e(τ)‖ + ‖w(τ)‖
)
, ∀t ≥ t0 ≥ 0
along solutions to (32a).
4) There exists a class KL function β2 and a class K function γ2 such that
‖x(t)‖ ≤ β2
(
‖x(t0)‖, t− t0
)
+ ess sup
τ∈(t0,t)
γ2
(
H
(
x(τ)
)
+ ‖e(τ)‖ + ‖w(τ)‖
)
, ∀t ≥ t0 ≥ 0
along solutions of (32a).
5) There exists a positive constant ξ (called the maximum allowable transfer interval, MATI) such that
0 < tk+1 − tk ≤ ξ <
1
L
ln
( L+ γ1
ρL+ γ1
)
, ∀k ∈ N.
Then the NCS modeled by (32) is input-to-state stable from the disturbance input w to its state (x, e). 
Condition 1 should be viewed as a requirement on the network access protocol specified by the function h(·). In practice, this
condition requires the protocol to define an exponentially stable auxiliary discrete-time system
zk+1 = h(k, zk)
with a decay rate of ρ < 1. In view of this, Nesic and Teel [43] introduce the terminology “uniformly exponentially stable
protocol” to denote any protocol that satisfies condition 1.
For linear systems, the remaining assumptions of Theorem 8 are fairly mild. They basically require a growth for the error
dynamics no faster than exponential and appropriate disturbance rejection properties of the “closed-loop” system (32), with
respect to the inputs e and w. However, for nonlinear systems these assumptions may be difficult to verify. In either case,
Nesic and Teel [43, 44, 45] show that the MATI condition 5 in Theorem 8 is less conservative than the ones in [69, 70, 68].
B. Packet dropouts
Packet dropouts can be modeled either as stochastic or deterministic phenomena. The simplest stochastic model assumes
that dropouts are realizations of a Bernoulli process [60, 65]. Finite-state Markov chains can be used to model correlated
dropouts [61] and Poisson processes can be used to model stochastic dropouts in continuous time [74]. Deterministic models
for dropouts have also been proposed, either specified in terms of time-averages [81] or in terms of worst-case bounds on the
number of consecutive dropouts [78, 40]. We defer the study of worst-case dropout models to Section III-C.
Consider again the one-channel feedback NCS in Fig. 4, with a plant/controller pair (12), for which the signal y is sampled
at times {tk : k ∈ N} and the samples yk := y(tk) are sent through the network. When packets are dropped, the network
model in (13) must be changed. It is often assumed that when the packet containing the sample yk is dropped, the NCS utilizes
the previous value of ŷk [81, 57]. This corresponds to replacing the lossless network model (13) by
ŷk = θkyk + (1 − θk)ŷk−1 =
{
yk θk = 1 (no packet dropout)
ŷk−1 θk = 0 (packet dropout)
∀k ∈ N, (33)
where θk = 0 when there is a packet dropout at time k and θk = 1 otherwise. Hadjicostis and Touri [15] assume instead that
ŷk is set to zero when the packet containing yk is dropped, i.e., ŷk = θkyk, ∀k ∈ N.
Assuming that the delay4 τk experienced by the kth packet is smaller than the corresponding sampling interval, the continuous-
time signal ŷ(t) is still updated according to (14). For simplicity, we assume periodic sampling and constant network delay,
3Recall that a function α : [0,∞) → [0,∞) is said to be of class K if it is continuous, strictly increasing, and α(0) = 0. A function β : [0,∞)× [0,∞) →
[0,∞) is said to be of class KL if β(·, t) is of class K for each fixed t ≥ 0 and β(r, t) decreases to 0 as t → ∞ for each fixed r ≥ 0.
4When the kth packet is dropped the value of τk is of no consequence and can be assumed zero.
13
i.e., tk+1 − tk = h, τk = τ , ∀k ∈ N. To analyze this NCS, once again we define an augmented discrete-time state z ′k :=
[
x(tk)
′ ŷ′k−1
]
. From (15) and (33) we now conclude that
zk+1 = Φθkzk, (34)
where
Φθ :=
[
eAh + θΓ(h− τ)BC eA(h−τ)Γ(τ)B + (1 − θ)Γ(h− τ)B
θC (1 − θ)I
]
, ∀θ ∈ {0, 1}. (35)
Deterministic dropouts: Zhang et al. [81] consider a deterministic dropout model, with packet dropouts occurring at an
asymptotic rate defined by the following time-average
r := lim
T→∞
1
T
k0+T−1
∑
k=k0
(1 − θk), ∀k0 ∈ N, (36)
which implicitly assumes that the limit exists. Under this dropout model, the system (34) falls under the class of asynchronous
dynamical systems (ADSs). These are hybrid systems whose continuous dynamics are governed by differential or difference
equations and the discrete dynamics are governed by finite automata. In ADSs, the finite automata are driven asynchronously
by external events that occur at pre-specified rates. The ADSs of interest to us are defined by a difference equation such as
(34), where θk takes values in some index set {0, 1, . . . , N} and the rate at which the event θk = j occurs is defined by the
following time average
rj := lim
T→∞
1
T
k0+T−1
∑
k=k0
δj θk , ∀k0 ∈ N, j ∈ {0, 1, . . . , N}, (37)
where δj θk = 1 when θk = j and zero otherwise. When all the limits exist, we have
∑N
j=0 rj = 1. The following result is
adapted from Hassibi et al. [16] and uses a quadratic Lyapunov function of the form V (z) := z ′Pz to establish the asymptotic
stability of the ADS system (34) with rates (37).
Theorem 9 ([16]): Assume that there exist a symmetric matrix P > 0 and scalars α, α0, α1, . . . , αN such that
αr00 α
r1
1 · · ·αrNN > α > 1, Φ′jPΦj ≤ α−2j P, ∀j ∈ {0, 1, . . . , N},
then the ADS (34) is exponentially stable in the sense that limk→∞ αk‖zk‖ = 0 for every sequence δj θk for which (37)
holds. 
The following result is obtained by applying Theorem 9 to our NCS with constant sampling interval h and constant delay τ :
Corollary 10: Assuming that there exist a symmetric matrix P > 0 and scalars α, α0, α1 such that
αr0 α
1−r
1 > α > 1, Φ0(h, τ)
′PΦ0(h, τ) ≤ α−20 P, Φ1(h, τ)′PΦ1(h, τ) ≤ α−21 P, (38)
then the NCS (34) is exponentially stable in the sense that limk→∞ αk‖zk‖ = 0 for every sequence θk for which (36)
holds. 
The main difficulty in applying this result is that the set of matrix inequalities that appears in (38) is bilinear in the
unknowns P, αj and therefore generally non-convex. However, one can use a “line-search” procedure over the two scalars
α0, α1 to determine the feasibility of (38).
Remark 3: One can also express (33) as ŷk = Cx̂k , ∀k ∈ N, with x̂k defined by
x̂k := θkxk + (1 − θk)x̂k−1 =
{
xk θk = 1 (no packet dropout)
x̂k−1 θk = 0 (packet dropout)
∀k ∈ N.
When τ = 0 one can analyze the system’s stability using the discrete-time state z̄ ′k :=
[
x′k x̂
′
k
]
, which evolves according to
z̄k+1 = Φ̄θk+1 z̄k, Φ̄θ :=
[
eAh Γ(h)BC
θeAh θΓ(h)BC + (1 − θ)I
]
, ∀k ∈ N.
In their work, Zhang et al. [81] considered this discrete-time system instead of (34). 
14
PSfrag replacements
1 − p
1 − p
p
p
θk = 0 θk = 1
Fig. 8. Bernoulli drops with probability p modeled as a two-state discrete-time Markov chain.
Stochastic dropouts: Seiler and Sengupta [57, 58] consider stochastic losses. In their formulation, θk is a Bernoulli
process5 with probability of dropout (i.e., θk = 0) equal to p ∈ [0, 1). Under this dropout model, the system (34) is a special
case of a discrete-time Markovian jump linear system (MJLS). In general MJLSs, the index θk in (34) would be the state of
a discrete-time Markov chain with a finite number of states and a given transition probability matrix. For Bernoulli drops, the
Markov chain only has two states and the transition probability from any state to the dropout-state θk = 0 is equal to p and
the transition probability from any state to the state θk = 1 is equal to 1− p, as shown in Fig 8. The stability of discrete-time
MJLSs can be established using results from [5] (cf. [6] for continuous-time MJLs), leading to the following theorem:
Theorem 11 ([57]): The NCS (34) with dropout probability p (Bernoulli) is exponentially mean-square stable if there exists
a symmetric matrix Z > 0 such that6


Z
√
p(Φ0Z)
′ √1 − p(Φ1Z)′
∗ Z 0
∗ ∗ Z

 > 0. (39)

When the controller is collocated with the actuators, Seiler and Sengupta [57, 58] suggest that the control law can adapt
to the occurrence of dropouts by allowing the controller to use different gains at different time instants k, based on the value
of θk ∈ {0, 1}. In this case, the matrices A,B,C in (35) depend on θ, but one still gets a system of the form (34) and one
can use similar tools to analyze its stability. We will return to this issue in Section IV when we discuss the design of NCS
controllers.
PSfrag replacements
G(z)
∆k
vv̂
(a)
PSfrag replacements
G(z)
∆k
vv̂
G(z)
F (z)
P (z) K(z)N(z)
2
4
∆1
. . .
∆N
3
5
(b)
Fig. 9. Fading networks: (a) Nominal deterministic system with a stochastic perturbation. (b) Fading network representation of a general NCS.
Fading networks: Elia [8] models NCSs with LTI plants and controllers as deterministic “nominal” discrete-time systems
connected to zero-mean stochastic structured uncertainty as in Fig. 9(a). To see how this can be done, consider the one-channel
feedback NCS in Fig. 4, with a SISO plant/controller pair (12) with periodic sampling at times tk := kh, ∀k ∈ N and constant
delay τ < h. We have seen that if the previous value of ŷk is used when the packet containing the sample yk is dropped,
this NCS can be modeled by the discrete-time system (34)–(35), where θk ∈ {0, 1} is a Bernoulli process with probability of
dropout (θk = 0) equal to p ∈ [0, 1). Defining
∆k :=
θk
1 − p − 1, ∀k ∈ N, (40)
5To emphasize the fact that now the θk, k ∈ N are random variables, we denote them in boldface.
6Matrix entries denotes by ’*’ are implicitly defined by the fact that the matrix is symmetric.
15
this variable can be viewed as a (SISO) stochastic perturbation with zero mean and variance
σ2 := E[∆2k] =
p
1 − p.
The corresponding nominal system is obtained using the fact that θk = (1− p)(1 + ∆k) to re-write (34)–(35) as in Fig. 9(a):
{
zk+1 = Āzk + B̄v̂k
vk = C̄zk
v̂k = ∆kvk, (41)
where
Ā :=
[
eAh + (1 − p)Γ(h− τ)BC eA(h−τ)Γ(τ)B + pΓ(h− τ)B
(1 − p)C pI
]
, B̄ :=
[
(1 − p)Γ(h− τ)B
(1 − p)I
]
, C̄ :=
[
C −I
]
.
Much more general NCSs can be modeled in this fashion. Fig. 9(b), depicts a general model for NCSs in this framework. In
this figure, P (z) denotes a discretized model of the plant(s) with associated sample and hold blocks and K(z) a discrete-time
model of the controller(s). These two blocks are interconnected through a fading network denoted by F (z), which is depicted
inside the dashed box. This network consists of a deterministic discrete-time model N(z) called the mean network and a zero-
mean stochastic block-diagonal multiplicative block ∆ called the stochastic perturbation. In the example above, the fading
network essentially corresponds to (33), which can be re-written as follows in terms of the stochastic perturbation (40):
{
ŷk = pŷk−1 + (1 − p)yk + (1 − p)v̂k
vk = yk − ŷk−1
v̂k = ∆kvk,
with the mean network on the left-hand-side and the stochastic perturbation on the right-hand-side. Figure 9(b) can be viewed
as a special case of Fig. 9(a) by associating the system inside the dash-dot box in Fig. 9(b) with G(z) in Fig. 9(a).
To study the stability of the NCSs in Fig. 9, Elia [8] considers the interconnection of a discrete-time LTI system with a
transfer function G(z) and a stabilizable and detectable realization7
xk+1 = Axk +Bv̂k , vk = Cxk, k ∈ N, xk ∈ Rn, vk, v̂k ∈ Rm, (42)
in feedback with a multiplicative stochastic perturbation of the form
v̂k =



∆
1
k 0 ··· 0
0 ∆2k ··· 0
...
. . .
...
0 0 ··· ∆mk



vk , ∀k ∈ N, (43)
where all the ∆ik are i.i.d. random variables with zero mean and the same variance σ2 := E[(∆ik)2], ∀i, k. It turns out that
the stability of this interconnection is independent of the distribution of the ∆ik and only depends on their variance σ2. The
following theorem characterizes the stability of the interconnection in terms of LMIs.
Theorem 12 ([8]): Suppose that the matrix A is Schur and that the initial state x0 has finite variance and is independent
of the ∆ik. The system (42)–(43) is mean-square stable if and only if there exists a symmetric matrix Q > 0 and scalars
α1, . . . , αm > 0 such that
AQA′ +
m
∑
j=1
bjαjb
′
k < Q, σ
2ciQc
′
i < αi, ∀i ∈ {1, . . . ,m},
where bj denotes the jth column of B and ci the ith row of C. 
We leave to the reader the formulation of a necessary and sufficient condition for the stability of the NCS (41) in Fig. 4 based
on Theorem 12.
The mean-square structured norm of (42)–(43) is defined to be
µMS(G,∆) =
1
sup{σ2 : (42)–(43) is mean-square stable} .
The quantity 1/µMS(G,∆) can be viewed as a stability margin that measures how much (structured) stochastic uncertainty
the system G can tolerate, since it is the largest value of σ2 for which the interconnection is mean-square stable. The following
7Elia [8] actually considers more general LTI systems, which can have a strictly triangular direct feed-through term.
16
result relates the mean-square structured norm of a system with the mean-square norm of its transfer function. We recall that
the mean-square norm of the transfer function T (s) is given by
‖T (s)‖MS := max
i∈{1,...,m}
(
m
∑
j=1
‖Tij(s)‖22
)
1
2
, ‖Tij(s)‖22 :=
1
2π
∫ ∞
−∞
|Tij(jω)|2 dω.
Theorem 13 ([8]): Under the assumptions of Theorem 12,
µMS(G,∆) = inf
D>0, D diagonal
‖D−1G(z)D‖MS ,
where the infimum is taken over all positive definite m×m diagonal matrices .
This result is used in Section IV for NCSs controller synthesis.
C. NCSs as delayed differential equations (sampling, delays, and dropouts)
Once again we go back to the one-channel feedback NCS in Fig. 4, with a plant/controller pair (12), for which the signal
y(t) is sampled at times {tk : k ∈ N}. In a lossless network, all the samples ŷk = yk = Cx(tk) arrive at the destination with
a (possibly variable) delay of τk ≥ 0, which leads to
ŷ(t) = Cx(tk), ∀t ∈ [tk + τk, tk+1 + τk+1), k ∈ N. (44)
In the previous sections, we proceeded by deriving discrete-time models for the evolution of the state of the NCS at sampling
times. Instead, Yu et al. [76] propose to regard (44) as a delayed equation
ŷ(t) = Cx
(
t− τ(t)
)
, ∀t ≥ 0, (45)
in which the delay τ(t) is time-varying and evolves according to
τ(t) = t− tk, ∀t ∈ [tk + τk, tk+1 + τk+1), k ∈ N.
Fig. 10(a) shows the evolution of the time-varying delay τ(t) in (45) for the case of periodic sampling with period h = tk+1−tk,
∀k ∈ N and constant network delay τ0 = τk, ∀k ∈ N. In view of (45), this approach regards the overall NCS as a continuous-
PSfrag replacements
τ0 τ0
h + τ0h + τ0
tk−1 + τ0tk−1 + τ0 tk + τ0tk + τ0 tk+1 + τ0tk+1 + τ0
2h + τ0
tk+2 + τ0
τ(t) τ(t)
tt
(a) (b)
Fig. 10. Variable delay in an NCS for constant network delay τk = τ0, ∀k ∈ N and periodic sampling with period tk+1 − tk = h, ∀k ∈ N for (a) no
packet dropout and (b) one packet dropout.
time delayed differential equation (DDE) of the form
ẋ(t) = Ax(t) +BCx
(
t− τ(t)
)
, ∀t ≥ 0, (46)
where the time-varying delay τ(t) satisfies
τ(t) ∈ [τmin, τmax), τ̇ = 1, ∀t ≥ 0, a.e. (47)
where
τmin := min
k∈N
{τk}, τmax := max
k∈N
{tk+1 − tk + τk+1}. (48)
An important advantage of characterizing an NCS as in (46)–(48) is that these equations are valid even when the delay exceeds
the sampling interval. So in this section we shall not restrict our attention to delays smaller than one sampling interval.
As illustrated in Fig. 10(b), we can also view packet dropouts as a delay τ(t) that grows beyond the maximum in (48). This
means that an NCS with a maximum number of consecutive dropouts equal to m is still a DDE like (46)–(47), but with
τmin := min
k∈N
{τk}, τmax := max
k∈N
{tk+1+m − tk + τk+1+m}.
The Lyapunov-Krasovskii and the Razumikhin Theorems [13, 55, 11] are the two main tools available to study the stability
of DDEs of the form (46)–(47). However, the Lyapunov-Krasovskii Theorem generally leads to less conservative results. To
17
formulate this theorem we need following notation: Given a constant τmax > 0, a continuous signal x : (−τmax,∞) → Rn, and
some time t ∈ R, we denote by xt : [−τmax, 0] → Rn the restriction of x to the interval [t− τmax, t] translated to [−τmax, 0],
i.e., xt(s) = x(t + s), ∀s ∈ [−τmax, 0]. The function xt is an element of the Banach space C([−τmax, 0],Rn) of continuous
functions from [−τmax, 0] to Rn.
Theorem 14 (Lyapunov-Krasovskii [13]): The DDE
ẋ(t) = Ax(t) +Adx
(
t− τ(t)
)
, ∀t ≥ 0,
with τ(t) ∈ [0, τmax], ∀t ≥ 0 and initial condition x(t) = ψ(t), ∀t ∈ [−τmax, 0] is asymptotically stable if there exists a
bounded quadratic Lyapunov-Krasovskii functional V : C([−τmax, 0],Rn) → R and a positive constant  for which
V (φ) ≥ ‖φ(0)‖2, dV (xt)
dt
∣
∣
xt=φ
≤ −‖φ(0)‖2, ∀φ ∈ C([−τmax, 0],Rn).
where the (total) derivative is taken along solutions to (46). 
To study the stability of (46), Yue et al. [78] use the following Lyapunov-Krasovskii functional
V (xt) = x(t)
′Px(t) +
∫ t
t−τmax
∫ t
s
ẋ(v)′T ẋ(v)dvds,
with symmetric matrices P > 0 and T > 0. They show that the derivative of V (xt) is negative along solutions to (46) if




N1 +N
′
1 −M1A−A′M ′1 N ′2 −N1 −A′M ′2 −M1BK N ′3 −A′M ′3 +M1 + P τmaxN1
∗ −N2 −N ′2 −M2BK −K ′B′M ′2 −N ′3 +M2 −K ′B′M ′3 τmaxN2
∗ ∗ M3 +M ′3 + τmaxT τmaxN3
∗ ∗ ∗ −τmaxT




< 0, (49)
where Ni,Mi, i ∈ {1, 2, 3} are slack matrix variables. This leads to the following result:
Theorem 15 ([78]): For a given scalar τmax > 0, suppose that there exist square matrices Ni,Mi, i ∈ {1, 2, 3} and symmetric
matrices P, T > 0 such that (49) holds. Then the NCS (46)–(47) in Fig 4 is asymptotically stable as long as
tk+1+m − tk + τk+1+m ≤ τmax, ∀k ∈ N,
where m denotes the maximum number of consecutive dropouts. 
Yu et al. [76] also model one-channel feedback NCSs as DDEs, but they study their stability using the Razumikhin Theorem,
which generally leads to more conservative results.
PSfrag replacements
Hold
û(t)
x̂
K
Plant y(t)
tsk Measurement channel
yk
ŷk
ŷ(t)
Observer
x̂P
û(t)
Network with bounded delay and packet dropouts
ta`
u`
Actuation channel
Network model
Hold
Fig. 11. Two channel feedback NCS with observer-based controller.
Naghshtabrizi and Hespanha [40] consider the two-channel feedback NCS in Fig. 11, in which a known plant
ẋP = APxP +BP û, y = CPxP (50)
is controlled by a remote observer-based controller that receives sensor data through a sensor channel and sends control
signals to the actuators through an actuation channel. The output signal y(t) is sampled at times tsk, k ∈ N and the samples
yk := y(t
s
k), k ∈ N are sent through the sensor channel suffering a (possibly variable) delay of τ sk ≥ 0. In a lossless network,
ŷ(t) is therefore updated according to
ŷ(t) = yk = CPxP (t
s
k), ∀t ∈ [tsk + τsk , tsk+1 + τsk+1), k ∈ N,
18
and if ms > 0 sensor channel packets are dropped after the kth packet, the above equation holds ∀t ∈ [tsk + τsk , tsk+1+ms +
τsk+1+ms).
Two alternative observer-based controllers are proposed: non-anticipative and anticipative. Non-anticipative controllers
construct an estimate x̂P of the plant’ state xP using
˙̂xP (t) = AP x̂P (t) +BP û(t) + L
(
ŷ(t) − CP x̂P (tsk)
)
, ∀t ∈ [tsk + τsk , tsk+1 + τsk+1), k ∈ N, (51)
for which the innovation term ŷ−CP x̂P (tsk) was chosen so that it is equal to zero whenever xP (tsk) = x̂P (tsk). Control updates
u` := Kx̂P (t
a
` ) are sent through the actuation channel to the actuators at times ta` , ` ∈ N suffering a (possibly variable) delay
of τa` ≥ 0. In a lossless network, the control signal û(t) is therefore updated according to
û(t) = u` = Kx̂P (t
a
` ), ∀t ∈ [ta` + τa` , ta`+1 + τa`+1), ` ∈ N,
which would hold over a longer interval if actuation channels packets were dropped.
Anticipative controllers attempt to compensate the sampling and delay introduced by the actuation channel. For simplicity,
we assume that the actuation channel is sampled with period ha = ta`+1 − ta` , ∀` ∈ N and that its delay is constant and equal
to τa = τa` , ∀` ∈ N. At each sampling time ta` = `ha, ` ∈ N the controller sends a time-varying control signal u`(·) that
should be used from the time `ha + τa at which it arrives until the time (`+ 1)ha + τa at which the next control update will
arrive. This leads to
û(t) = u`(t), ∀t ∈ [`ha + τa, (`+ 1)ha + τa), ` ∈ N.
To stabilize (50), u`(t) should be equal to −Kx̂P (t), where x̂P (t) is an estimate of xP (t). However, the estimates x̂P (·)
needed in the interval [`ha + τa, (` + 1)ha + τa) must be available at the transmission time `ha, which requires the control
unit to estimate the plant’ state up to ha + τa time units into the future. In this case, the estimator (51) is of no use. Instead,
an estimate z(t) of xP (t+ ha + τa) is constructed as follows:
ż(t) = AP z(t) +BP û(t+ h
a + τa) + L
(
ŷ(t) − CP z(tsk − ha − τa)
)
, ∀t ∈ [tsk + τsk , tsk+1 + τsk+1), k ∈ N,
for which the innovation term ŷ−CP z(tsk−ha−τa) was chosen so that it is equal to zero whenever xP (tsk) = z
(
tsk−ha−τa
)
.
The signal u`(·) sent at time `ha {and to be used during the interval [`ha + τa, (`+ 1)ha + τa)} is then given by
u`(t) = −Kz(t− ha − τa), ∀t ∈ [`ha + τa, (`+ 1)ha + τa), ` ∈ N,
which only requires knowledge of z(·) in [(`−1)ha, `ha) and is therefore available at the transmission time `ha. For anticipative
controllers to be able to compensate for packet dropouts in the actuation channel, z would have to estimate xP further into
the future. Anticipative controllers send through the actuation channel actuation signals to be used during time intervals of
duration ha, therefore for these controllers the sample and hold blocks in Fig. 11 should be understood in a broad sense. In
practice, the sample block would send over the network some parametric form of the control signal u`(·) (e.g., the coefficients
of a polynomial approximation to this signal).
Naghshtabrizi and Hespanha [40] write the closed-loop NCSs as DDEs for both the anticipative and the non-anticipative
controllers. For an anticipative controller with no dropouts, this leads to
ẋ(t) =
[
AP −BPK 0
0 AP
]
x(t) +
[
0 LCP
0 −LCP
]
x(t− τ), ∀t ≥ 0, (52)
where x′(t) :=
[
z(t) xP (t+ h
a + τa) − z(t)
]
, ∀t ≥ 0 and
τ(t) := t− tsk + ha + τa, ∀t ∈ [tsk + τsk , tsk+1+m + τsk+1+m), k ∈ N.
Moreover, if ms > 0 sensor channel packets are dropped after the kth packet, this equation holds over the interval [tsk +
τsk , t
s
k+1+ms + τ
s
k+1+ms).
The “triangular” structure of (52) is unique to the anticipate controller. With this type of controller, if we choose K so that
AP −BPK is Hurwitz, asymptotic stability of the NCS is equivalent to the asymptotic stability of the (decoupled) dynamics
of the error e(t) := xP (t+ ha + τa) − z(t), ∀t ≥ 0, which is given by the following DDE
ė(t) = AP e(t) − LCP e
(
t− τ(t)
)
, t ≥ 0,
with τ(t) ∈ [τmin, τmax), τ̇ = 1, ∀t ≥ 0, a.e., where
τmin := min
k∈N
{τsk + ha + τa}, τmax := max
k∈N
{tsk+1+ms − tsk + τsk+1+ms + ha + τa},
19
where ms denotes the maximum number of consecutive packet dropouts in the sensor channel. Naghshtabrizi and Hespanha
[40] use the following Lyapunov-Krasovskii functional to analyze this system
V (et) = e(t)
′P1e(t) +
∫ t
t−τmax
∫ t
s
ė′(v)Rė(v)dvds +
∫ t
t−τmin
e′(s)Se(s)ds,
where P1 > 0, R > 0, S > 0. This leads to the following result:
Theorem 16 ([40]): Suppose that there exist symmetric matrices P1, S, R > 0, square matrices P2, P3, Z1, Z2, and a (non-
square) matrix T such that


Ψ P ′
[
0
−LCP
]
− T ′
∗ −S

 < 0,
[
R
[
0 −(LCP )′
]
P
∗ Z2
]
> 0,
[
R T
∗ Z1
]
> 0, (53)
where
P :=
[
P1 0
P2 P3
]
, Ψ := P ′
[
0 I
AP −I
]
+
[
0 I
AP −I
]′
P +
[
S 0
0 τmaxRi
]
+ τminZ1 + (τmax − τmin)Z2 +
[
T
0
]
+
[
T
0
]′
.
(54)
Then the NCS with the anticipative controller (52), (47) is asymptotically stable as long as there are no dropouts in the actuation
channel and
τsk + h
a + τa ≥ τmin, tsk+1+ms − tsk + τsk+1+ms + ha + τa ≤ τmax, ∀k ∈ N,
where ms denotes the maximum number of consecutive dropouts in the sensor channel. 
The reader is referred to [40] for an analogous result with a non-anticipative controller.
IV. CONTROLLER SYNTHESIS
In this section, we discuss the design of feedback controllers for NCSs. Some of these results stem directly from the analysis
methods presented in Section III.
PSfrag replacements
Hold
tk
τ sk
Plant
Controller
τ ak Network
ûk û(t)
y(t) yk
ŷkuk
Fig. 12. Two-channel feedback NCS considered by Nilsson [46].
A. Sampling and delay
Nilsson et al. [47, 49, 48, 51, 50, 46] consider the two-channel feedback NCS in Fig. 12. The plant is an LTI system with
the following state-space model
ẋ = Ax +Bû + w, y = Cx + v, (55)
where v and w are zero-mean uncorrelated white noise processes. The output signal y(t) is sampled periodically at times
tk := kh, ∀k ∈ N and the samples yk := y(tk), ∀k ∈ N are sent through the network. After a (possibly varying) delay of
τ sk ≥ 0, these samples reach a remote controller that immediately computes control updates uk and sends them to the network.
These updates reach the actuators after a (possibly varying) delay of τ ak ≥ 0. Assuming that there are no packet dropouts in
either of the network channels, this leads to
û(t) =
{
uk−1 t ∈ [tk, tk + τ sk + τ ak)
uk t ∈ [tk + τ sk + τ ak, tk+1)
, (56)
where we assumed that the total delay is smaller than one sampling interval, i.e., that τ sk + τ ak < h, ∀k ∈ N. Any computation
time needed by the remote controller can be incorporated in the network delay τ ak.
20
The delays τ sk and τ ak are assumed to be independent random variables with known probability distributions. Moreover, it
is assumed that all data sent through the network is time-stamped, which means that the controller knows the value of the
delay τ sk when the kth measurement ŷk arrives.
Defining xk := x(tk), ∀k ∈ N and applying the variation of constants formula to (55)–(56), we conclude that
xk+1 = e
Ahxk + e
A(h−τsk−τak)Γ(τ sk + τ
a
k)Buk−1 + Γ(h− τ sk − τ ak)Buk + vk,
yk = Cxk + wk,
where Γ(s) :=
∫ s
0 e
Azdz, ∀s ∈ R and vk , wk are uncorrelated zero-mean white noise processes.
Assuming state-feedback (i.e., yk = xk, ∀k ∈ N), Nilsson et al. [51, 49] show that the optimal control uk that minimizes
Jk = E
{
x′NQNxN +
N−1
∑
j=k
[
xj
uj
]′
Q
[
xj
uj
]
}
,
with
QN ≥ 0, Q :=
[
Q11 Q12
∗ Q22
]
≥ 0, Q22 > 0,
is of the form
uk = −Lk(τ sk)
[
xk
uk−1
]
, ∀k ∈ N. (57)
Hence the optimal controller with full state information is a linear but τ sk-dependent function of the current state and previous
control signal. The computation of the matrix gain Lk(τ sk) requires the solution of a backwards-in-time Riccati equation that
involves the computation of expectations with respect to the random variables τ sk and τ ak.
In practice, the delays τ sk, τ ak, ∀k ∈ N are often correlated because they depend on the network load, which typically varies
at time scales slower than the sampling interval h. To account for this, Nilsson and Bernhardsson [48] consider three alternative
distributions for the delay and model the transitions between the distributions using a three-state Markov chain. Each state
of the Markov chain would correspond to a particular network load (low, medium, or high). In this case the optimal control
strategy is of the form
uk = −Lk(τ sk, rk)
[
xk
uk−1
]
, (58)
where now the matrix gain Lk(τ sk, rk) depends both on the delay τ sk and the current state rk of the Markov chain. To implement
this control law, the remote controller must know the current value of rk.
The main difficulty in using the optimal controllers (57), (58) is the computation of the matrix gains Lk(·). However, when
stationary values for these gains exist, they can be computed offline and stored in a table, which is indexed in real time by the
current value of the delay τ sk and network state rk. Nilsson et al. [51, 49] also propose to use suboptimal controllers that are
more attractive from a computational perspective. The same authors [51, 49, 48] extended this work for the output feedback
case. They showed that the separation principle holds and that the optimal control can be obtained by replacing xk in (57)
and (58) by an estimate x̂ computed using a time-varying Kalman filter.
Nilsson et al. [50] further extended this work by considering non-periodic sampling, timeouts on the period during which a
controller waits for new measurements before sending a new control command, and asynchronous loops in which the clocks
used for time-stamping are not synchronized and run at different speeds. Lincoln and Bernhardsson [28] also extended these
results to situations in which the sum of the delays exceeds one sampling interval but remains bounded.
B. Packet dropout
Deterministic dropout rates: Yu et al. [77] consider the one-channel feedback NCS shown in Fig. 13 with a LTI plant
ẋ = Ax +Bu, y = Cx,
whose output is sampled periodically at times {tk := kh : k ∈ N} and the samples yk := y(tk) are sent through the network.
It is assumed that the delay introduced by the network is negligible but packets may be dropped. The network output ŷk is
kept equal to its previous value when the packet containing the sample yk is dropped as in (33). Denoting by κj , j ∈ N the
indexes of the packets that are not dropped, ŷk remains equal to yk from k = κj until k = κj+1 − 1, i.e.,
ŷk = yκj , ∀k ∈ {κj , κj + 1, . . . , κj+1 − 1}.
21PSfrag replacements
Kκ
Hold u(t)uk
Hold Plant
ykŷk
y(t) tk
Network
Fig. 13. One-channel feedback NCS with switching controller.
Yu et al. [77] use a static output-feedback controller, whose gain changes depending on whether or not a packet is dropped.
More precisely, they use
uk = Kk−κj ŷk = Kk−κjyκj , ∀k ∈ {κj , κj + 1, . . . , κj+1 − 1},
where the matrix gain K0 is used when the sample yk has not been dropped, K1 is used when yk has been dropped but yk−1
has not, K2 is used when yk and yk−1 have been dropped but yk−2 has not, and so on. The control signal u(t) is kept constant
between samples:
u(t) = uk, t ∈ [tk, tk+1), ∀k ∈ N.
Defining zj := x(tκj ), ∀j ∈ N and using the variation of constants formula, we conclude that
zj+1 = Aκj+1−κj−1zj , Ad := e
Ah(d+1) +
d
∑
i=0
eAh(d−i)Γ(h)BKiC, ∀d ∈ N, (59)
where Γ(s) :=
∫ s
0 e
Azdz, ∀s ∈ R. Assuming that the maximum number of consecutive dropouts is equal to m, we have
0 ≤ κj+1 − κj − 1 ≤ m, ∀j ∈ N and we can view (59) as a linear system that switches among the matrices A0, . . . , Am.
The stability of such system can be established using a common quadratic Lyapunov function V (z) := z ′S−1z, leading to the
following theorem:
Theorem 17 ([77]): Suppose that there exists matrices M , Yi, i ∈ {0, 1, . . . ,m} and a symmetric matrix S > 0 such that8
MC = CS and
[ −S ∗
eAh(d+1)S +
∑d
i=0 e
Ah(d−i)Γ(h)BYiC −S
]
< 0, ∀d ∈ {0, 1, . . . ,m}.
Then the NCS (59) in Fig. 13 is exponentially stable for the controller gain Ki = YiM−1, ∀i ∈ {0, 1, . . . ,m}. 
PSfrag replacements Controller
uk
Plant
yk
Network
ŷkNetwork
Fig. 14. One-channel feedback NCS with a discrete-time plant and controller.
Stochastic (Markovian) dropouts: Seiler and Sengupta [57] consider the design of a switching controller for the one-
channel feedback NCSs in Fig. 14. The plant and the controller are modeled by discrete-time LTI systems of the form
xk+1 = Axk +Buk, yk = Cxk, (60a)
x̄k+1 = Aθk x̄k +Bθk ŷk, uk = Cθk x̂k, (60b)
where yk and ŷk are the input and the output of the network. These variables are related by (33), where θk is a Bernoulli
process with probability of dropout (i.e., θk = 0) equal to p ∈ [0, 1). They allow the controller state-space model to adapt to
the occurrence of dropouts, hence its matrix gains depend on the value of θk ∈ {0, 1}.
8In the state feedback case, C is the identity matrix and we simply have M = S.
22
Defining z′k :=
[
x′k x̄
′
k u
′
k
]
, the system can be written in compact form as (34), with
Φθ :=


A BCθ 0
BθC Aθ (1 − θ)Bθ
θC 0 (1 − θ)I

 , ∀θ ∈ {0, 1}.
Since this system is an MJLS, the inequality (39) in Theorem 11 provides a necessary and sufficient condition for the
exponentially mean-square stability of the NCS. For given controller matrices Aθ, Bθ, Cθ, θ ∈ {0, 1}, the inequality (39)
is a (convex) LMI on the unknown Z. However, if the controller matrices are also taken as unknowns we have a bilinear
matrix inequality (BMI), leading to a feasibility problem that is generally not convex and therefore not numerically tractable.
However, it is possible to obtain an equivalent LMI that leads to a tractable feasibility problem.
Theorem 18 ([57]): Suppose that there exist matrices Lθ, Fθ,Wθ, θ ∈ {0, 1}, Y = Y ′, X = X ′ such that



[ Y II X ]
√
p
[
Y Ā0+L0C̄0 W0
Ā0 Ā0X+B̄F0
]′ √
1 − p
[
Y Ā1+L1C̄1 W1
Ā1 Ā1X+B̄F1
]′
∗ [ Y II X ] [ 0 00 0 ]
∗ ∗ [ Y II X ]



> 0,
where
Āθ :=
[
A 0
θC (1 − θ)I
]
, B̄θ :=
[
B
0
]
, C̄θ :=
[
θC (1 − θ)I
]
, ∀θ ∈ {0, 1}.
Then the NCS (60) in Fig. 14 is exponentially mean-square stable for the following controller realizations:
Aθ = −Y −1
(
Y ĀθX + Y B̄θFθ + LθC̄θX −Wθ
)(
Y −1 −X
)−1
, Bθ = Y
−1Lθ, Cθ = Fθ
(
Y −1 −X
)−1
, ∀θ ∈ {0, 1}.

Seiler and Sengupta [58] further extended these results to the synthesis of an H∞ controller that rejects plant disturbances.
De Farias et al. [6] consider mixed H∞ / H2 synthesis for MJLSs in a continuous-time setting.
Fading networks: Within the fading networks formulation, Elia [8] proposes to design controllers for NCSs that minimize
the mean-square structured norm of the nominal system G(z) in Fig. 9(b). Such controllers would maximize the NCS’s tolerance
with respect to packet dropouts.
Elia [8] shows that minimum achievable mean-square structure norm is the solutions to either of the following optimizations
µ∗MS = inf
K
inf
D>0, D diagonal
‖D−1G(P,K)D‖2MS (61a)
= inf
D>0, D diagonal
inf
K
‖D−1G(P,K)D‖2MS , (61b)
where the infimum over K is taken over the set of LTI stabilizing controllers; the infimum over δ is taken over all positive
diagonal matrices; and G(P,K) denotes the interconnection of the plant P , the controller K, and the mean network N shown
in Fig. 9(b). As in many structured robust control problems, the search for the optimal controller that minimizes (61a) is not
convex on the diagonal matrix D. However, for every fixed D, the controller optimization in (61b) is convex and can be
reduced to an LMI [8, Theorem 6.6]. Heuristic methods such as the D-K iteration can explore this to find suboptimal solutions
to (61a) [7].
C. NCSs as delay differential equations (sampling, delays, and dropouts)
In Section III-C we presented matrix inequalities from which one could conclude stability for NCSs modeled as delay
differential equations. For given controllers gains K and L, the inequalities (49) and (53) in Theorems 15 and 16, respectively,
are linear on all the matrices that do not depend on the (known) plant model. The stability of the NCS can therefore be verified
by studying the feasibility of a (convex) LMI. However, if the controllers gains are also taken as unknowns, we obtain a BMI
and therefore these matrix inequalities are not directly suitable for controller synthesis.
Yue et al. [78] utilize Theorems 15 as the basis for a numerically tractable controller synthesis procedure. They require the
matrices M1, M2, M3 in (49) to further satisfy
M1 = M
′
1 > 0, M2 = ρ2M1, M3 = ρ3M1, (62)
for some constants ρ2, ρ3 ∈ R. They then make the (bijective) change of variables
X := M−1, Y := KX ′, P̃ := XPX ′, T̃ := XTX ′, Ñi := XNiX
′, M̃i := XMiX
′, ∀i ∈ {1, 2, 3}.
23
Pre- and post-multiplying (49) by diag(XXXX) and its transpose, respectively, yields




Ñ1 + Ñ
′
1 −AX ′ −XA′ Ñ ′2 − Ñ1 − ρ2XA′ −BY Ñ ′3 − ρ3XA′ +X ′ + P̃ τmaxÑ1
∗ −Ñ2 − Ñ ′2 − ρ2BY − ρ2Y ′B′ −Ñ ′3 + ρ2X ′ − ρ3Y ′B′ τmaxÑ2
∗ ∗ ρ3X + ρ3X ′ + τmaxT̃ τmaxÑ3
∗ ∗ ∗ −τmaxT̃




< 0,
which is an LMI on the unknowns X,Y, P̃ , T̃ and Ñi, i ∈ {1, 2, 3}. Moreover, the controller gain can be recovered using
K = Y X−1. This procedure introduces some conservativeness because it will not find controller gains K for which (49) holds
for matrices M2 and M3 that are not scalar multiples of M1, as in (62).
A simple but conservative way to make the matrix inequalities in Theorem 16 suitable for controller synthesis consists of
requiring that
P2 > 0, P3 = ρP2,
for some positive constant ρ > 0 and making the (bijective) change of variables Y = P2L, which transforms (53) into


Ψ −
[
Y CP
ρY CP
]
− T ′
∗ −S

 < 0,
[
R −
[
C ′PY
′ ρC ′PY
′]
∗ Z2
]
> 0,
[
R T
∗ Z1
]
> 0,
with Ψ given by (54). This inequality is linear in the unknowns P1, P2, S, R, Z1, Z2, T, Y and can therefore be solved using
efficient numerical algorithms. The observer gain is found using L = P−12 Y . This procedure introduces some conservativeness
because it restricts P3 to be a scalar multiple of P2. Naghshtabrizi and Hespanha [40] use the linear cone complementarity
algorithm introduced by Ghaoui et al. [12] to design the controller gains L and K for the anticipative or non-anticipative
controllers in Section III-C. The use of the cone complementarity algorithm avoids introducing additional conservativeness in
going from a matrix inequality that is only appropriate for analysis to another matrix inequality that is appropriate for controller
synthesis.
V. CONCLUSION AND FUTURE DIRECTION OF RESEARCH
We presented several recent results on estimation, analysis, and controller synthesis for NCSs. The materials surveyed address
different aspects of the limitations imposed by the use of communication channels to connect elements of NCSs. We focused
on limitations in terms of packet-rate, sampling, network delay, and packet-dropout. In Section II, we addressed the state
estimation of a remote plant over a channel in which some of the packets are lost in a random fashion. We considered both
single and multiple sensors. Section III covered a collection of results to determine the closed-loop stability of NCSs in the
presence of network sampling, delays, and packet dropouts. We considered a variety of assumptions on the plant and network
effects, which led to closed-loop models represented by Markovian jump linear systems (MJLSs), linear time-varying systems,
switched systems, nonlinear systems with resets, asynchronous dynamical systems (ADSs), linear time-invariant systems with
stochastic structured uncertainty, and linear systems with delayed inputs. Many of the results presented rely on Lyapunov-based
techniques, and only provide sufficient conditions for stability of the NCS. For linear systems, these results usually translate
into linear matrix inequalities (LMIs), which generally become bilinear matrix inequalities (BMIs) in design problems for
which the controller needs to be viewed as an unknown (cf. Section IV).
This survey did not addressed a few important issues in NCSs, such as bit-rate and quantization. The problem of determining
the minimum bit-rate needed for stabilization has been solved exactly for linear plants, but only conservative results have been
obtained for nonlinear plants. Quantization becomes especially important for networks designed to carry very small packets
with little overhead, because for such networks one can save bandwidth by encoding measurements or actuation signals with
a small number of bits.
NCS have been attracting significant interest in the past few years and will continue to do so for the years to come. With the
advent of cheap, small, and low-power processors with communication capabilities, it has become possible to endow sensor
and actuators with processing power and the ability to communicate with remove controllers through multi-purpose networks.
In view of this, we conjecture that in the near future NCSs will become the norm, replacing the current fixed-rate digital
control systems that rely on dedicated connections between sensors, controllers and actuators.
Results are still lacking to overcome several of the challenges raised by NCSs. Among these we highlight the following:
There has been significant work on NCSs with variable sampling rate, but most results investigate the stability for a given
wost-case interval between consecutive sampling times. This generally leads to conservative results that could be improved by
taking into account a stochastic characterization for the inter-sampling times. Most work has been devoted to determining the
stability of NCSs, whereas issues related to performance have been somewhat neglected. The design of controllers for NCSs
has also been overlooked, as many researchers start with a controller that has been designed ignoring the challenges introduced
by NCSs and then investigate to what extent such controllers can guarantee stability in spite of the network.
24
REFERENCES
[1] K. Åström and B. Bernhardsson. Comparison of Riemann and Lebesgue sampling for first order stochastic systems. In
Proc. of the 41th Conf. on Decision and Contr., volume 2, pages 2011–2016, Dec. 2002.
[2] M. S. Branicky. Stability of hybrid systems: State of the art. In Proc. of the 36th Conf. on Decision and Contr., volume 1,
pages 120–125, Dec. 1997.
[3] M. S. Branicky, S. M. Phillips, and W. Zhang. Stability of networked control systems: Explicit analysis of delay. In
Proc. of the 2000 Amer. Contr. Conf., volume 4, pages 2352–2357, June 2000.
[4] J. H. Braslavsky, R. H. Middleton, and J. S. Freudenberg. Feedback stabilization over signal-to-noise ratio constrained
channels. In Proc. of the 2004 Amer. Contr. Conf., pages 4903–4908, June 2004.
[5] O. L. V. Costa and M. D. Fragoso. Stability results for discrete-time linear systems with Markovian jumping parameters.
Journal of mathematical analysis and applications, 179(1):154–178, Oct 1993.
[6] D. P. De Farias, J. C. Geromel, J. B. R. Do Val, and O. L. V. Costa. Output feedback control of markov jump linear
systems in continuous-time. IEEE Trans. on Automat. Contr., 45(5):944 – 949, May 2000.
[7] G. E. Dullerud and F. Paganini. A Course in Robust Control Theory. Number 36 in Texts in Applied Mathematics.
Springer, New York, 1999.
[8] N. Elia. Remote stabilization over fading channels. Syst. & Contr. Lett., 54(3):237–249, Mar. 2005.
[9] N. Elia and S. K. Mitter. Stabilization of linear systems with limited information. IEEE Trans. on Automat. Contr., 46
(9):1384–1400, Sept. 2001.
[10] Y. Fang and K. A. Loparo. Stochastic stability of jump linear systems. IEEE Trans. on Automat. Contr., 47(7):1204–1208,
July 2002.
[11] E. Fridman and U. Shaked. A descriptor system approach to H∞ control of linear time-delay systems. IEEE Trans. on
Automat. Contr., 47(2):253 – 270, Feb. 2002.
[12] L. E. Ghaoui, F. Oustry, and M. AitRami. A cone complementarity linearization algorithm for static output-feedback and
related problems. IEEE Trans. on Automat. Contr., 42(8):1171–1176, Aug. 1997.
[13] K. Gu, V. L. Kharitonov, and J. Chen. Stability of Time-delay Systems. Birkhauser, 1st edition, 2003.
[14] V. Gupta, T. H. Chung, B. Hassibi, and R. M. Murray. On a stochastic sensor selection algorithm with applications in
sensor scheduling and sensor coverage. Automatica, 42(2):251–260, Feb. 2006.
[15] C. N. Hadjicostis and R. Touri. Feedback control utilizing packet dropping network links. In Proc. of the 41th Conf. on
Decision and Contr., volume 2, pages 1205–1210, Dec. 2002.
[16] A. Hassibi, S. P. Boyd, and J. P. How. Control of asynchronous dynamical systems with rate constraints on events. In
Proc. of the 38th Conf. on Decision and Contr., volume 2, pages 1345–1351, Dec. 1999.
[17] J. P. Hespanha, M. L. McLaughlin, and G. Sukhatme. Haptic collaboration over the Internet. In Proc. of the 5th Phantom
Users Group Workshop, Oct. 2000.
[18] J. P. Hespanha, A. Ortega, and L. Vasudevan. Towards the control of linear systems with minimum bit-rate. In Proc. of
the Int. Symp. on the Mathematical Theory of Networks and Syst., Aug. 2002.
[19] K. Hikichi, H. Morino, I. Arimoto, K. Sezaki, and Y. Yasuda. The evaluation of delay jitter for haptics collaboration over
the Internet. In IEEE Global Telecomm. Conf. (GLOBECOM), volume 2, pages 1492 – 1496, Nov. 2002.
[20] T. Kailath, A. H. Sayed, and B. Hassibi. Linear Estimation. Prentice-Hall, Upper Saddle River, New Jersey, 2000.
[21] H. K. Khalil. Nonlinear systems. Prentice Hall, Upper Saddle River, NJ, 1996.
[22] F. Kozin. A survey of stability of stochastic systems. Automatica, 5:95–112, 1969.
[23] F.-L. Lian. Analysis, design, modeling, and control of networked control systems. PhD thesis, University of Michigan,
2001.
[24] D. Liberzon and J. P. Hespanha. Stabilization of nonlinear systems with limited information feedback. IEEE Trans. on
Automat. Contr., 50(6):910–915, June 2005.
[25] H. Lin and P. J. Antsaklis. Persistent disturbance attenuation properties for networked control systems. In Proc. of the
43th Conf. on Decision and Contr., volume 1, pages 953–958, Dec 2004.
[26] H. Lin, G. Zhai, and P. J. Antsaklis. Robust stability and disturbance attenuation analysis of a class of networked control
systems. In Proc. of the 42th Conf. on Decision and Contr., volume 2, pages 1182–1187, Dec. 2003.
[27] H. Lin, G. Zhai, L. Fang, and P. J. Antsaklis. Stability and H∞ performance preserving scheduling policy for networked
control systems. In Proc. of the 16th World Congress of Int. Federation of Automat. Contr., July 2005.
[28] B. Lincoln and B. Bernhardsson. Optimal control over networks with long random delays. In Proc. of the 14th Int. Symp. of
Mathematical Th. of Networks and Syst., 2000.
[29] X. Liu and A. Goldsmith. Kalman filtering with partial observation losses. In Proc. of the 43th Conf. on Decision and
Contr., pages 4180–4186, dec 2004.
[30] R. Luck and A. Ray. An observer-based compensator for distributed delays. Automatica, 26(5):903–908, Sept. 1990.
[31] N. C. Martins and M. A. Dahleh. Feedback control in the presence of noisy channels: “Bode-like” fundamental limitations
of performance. Submitted for publication, Oct. 2004.
25
[32] A. Matveev and A. Savkin. The problem of state estimation via asynchronous communication channels with irregular
transmission times. IEEE Trans. on Automat. Contr., 48(4):670–676, Apr. 2003.
[33] C. Meng, T. Wang, W. Chou, S. Luan, Y. Zhang, and Z. Tian. Remote surgery case: robot-assisted teleneurosurgery. In
IEEE Int. Conf. on Robot. and Auto. (ICRA’04), volume 1, pages 819–823, Apr. 2004.
[34] L. A. Montestruque and P. J. Antsaklis. Model-based networked control systems: Necessary and sufficient conditions for
stability. In 10th Mediterranean Contr. Conf. and Auto., Lisbon, Portugal, 2002.
[35] L. A. Montestruque and P. J. Antsaklis. State and output feedback control in model-based networked control systems. In
Proc. of the 41th Conf. on Decision and Contr., volume 2, pages 1620 – 1625, Dec. 2002.
[36] L. A. Montestruque and P. J. Antsaklis. On the model-based control of networked systems. Automatica, 39(10):1837–1843,
Oct. 2003.
[37] L. A. Montestruque and P. J. Antsaklis. Stochastic stability for model-based networked control systems. In Proc. of the
2003 Amer. Contr. Conf., volume 5, pages 4119 – 4124, June 2003.
[38] L. A. Montestruque and P. J. Antsaklis. Stability of model-based networked control systems with time-varying transmission
times. IEEE Trans. on Automat. Contr., 49(9):1562–1572, Sept. 2004.
[39] R. M. Murray, K. J. Åström, S. P. Boyd, R. W. Brockett, and G. Stein. Control in an information rich world. IEEE
Contr. Syst. Mag., 23(2):20–33, Apr. 2003.
[40] P. Naghshtabrizi and J. Hespanha. Designing observer-based controller for network control system. In Proc. of the 44th
Conf. on Decision and Contr., volume 4, pages 2876–2880, June 2005.
[41] G. N. Nair and R. J. Evans. Exponential stabilisability of finite-dimensional linear systems with limited data rates.
Automatica, 39(4):585–593, Apr. 2003.
[42] G. N. Nair, R. J. Evans, I. M. Y. Mareels, and W. Moran. Topological feedback entropy and nonlinear stabilization. IEEE
Trans. on Automat. Contr., 49(9):1585–1597, Sept. 2004.
[43] D. Nesic and A. Teel. Input-output stability properties of networked control systems. IEEE Trans. on Automat. Contr.,
49(10):1650–1667, Oct. 2004.
[44] D. Nesic and A. R. Teel. Input-to-state stability of networked control systems. Automatica, 40(12):2121–2128, Dec 2004.
[45] D. Nesic and A. R. Teel. A note on input-to-state stability of networked control systems. In Proc. of the 43th Conf. on
Decision and Contr., volume 5, pages 4613 – 4618, Dec 2004.
[46] J. Nilsson. Real-Time Control Systems with Delays. PhD thesis, Department of Automatic Control, Lund Institute of
Technology, Sweden, Jan. 1998.
[47] J. Nilsson and B. Bernhardsson. Analysis of real-time control systems with time delays. In Proc. of the 35th Conf. on
Decision and Contr., volume 3, pages 3173–3178, Dec. 1996.
[48] J. Nilsson and B. Bernhardsson. LQG control over a Markov communication network. In Proc. of the 36th Conf. on
Decision and Contr., volume 5, pages 4586–4591, Dec. 1997.
[49] J. Nilsson, B. Bernhardsson, and B. Wittenmark. Stochastic analysis and control of real-time systems with random time
delays. In Proc. of the 13th World Congress of Int. Federation of Automat. Contr., 1996.
[50] J. Nilsson, B. Bernhardsson, and B. Wittenmark. Some topics in real-time control. In Proc. of the 1998 Amer. Contr. Conf.,
volume 4, pages 2386–2390, June 1998.
[51] J. Nilsson, B. Bernhardsson, and B. Wittenmark. Stochastic analysis and control of real-time systems with random time
delays. Automatica, 34(1):57–64, Jan. 1998.
[52] P. Ogren, E. Fiorelli, and N. E. Leonard. Cooperative control of mobile sensor networks: Adaptive gradient climbing in
a distributed environment. IEEE Trans. on Automat. Contr., 49(8):1292–1302, Aug. 2004.
[53] B. Oksendal. Stochastic Differential Equations: An Introduction with Applications. Springer, Berlin, 2000.
[54] L. L. Peterson and B. S. Davie. Computer Networks, A System Approach. Morgan Kaufmann Publishers, 3 edition, 2003.
[55] J. P. Richard. Time-delay systems: an overview of some recent advances and open problems. Automatica, 39(10):
1667–1694, Oct. 2003.
[56] A. Sahai. Anytime Information Theory. PhD thesis, MIT, Cambridge, MA, 2001.
[57] P. Seiler and R. Sengupta. Analysis of communication losses in vehicle control problems. In Proc. of the 2001
Amer. Contr. Conf., volume 2, pages 1491–1496, June 2001.
[58] P. Seiler and R. Sengupta. An H∞ approach to networked control. IEEE Trans. on Automat. Contr., 50(3):356–364, Mar.
2005.
[59] S. Shirmohammadi and N. H. Woo. Evaluating decorators for haptic collaboration over the Internet. In The 3rd IEEE
Int. Workshop on Haptic, Audio and Visual Env. and their Applic., pages 105–109, Oct. 2004.
[60] B. Sinopoli, L. Schenato, M. Franceschetti, K. Poolla, M. I. Jordan, and S. S. Sastry. Kalman filtering with intermittent
observations. IEEE Trans. on Automat. Contr., 49(9):1453–1464, Sept. 2004.
[61] S. C. Smith and P. Seiler. Estimation with lossy measurements: jump estimators for jump systems. IEEE Trans. on
Automat. Contr., 48(12):2163–2171, Dec. 2003.
[62] W. Stallings. Data and Computer Communications. Prentice Hall, 6th edition, 2000.
[63] M. Tabbara, D. Nesic, and A. R. Teel. Input-output stability of wireless networked control systems. In Proc. of the 44th
26
Conf. on Decision and Contr., pages 209–214, dec 2005.
[64] G. Tang and L. Guo. Adaptive stabilization of unknown linear systems under communication constraints. Submitted to
the Chinese Control Conference (in Chinese), Mar. 2005.
[65] S. Tatikonda. Control Under Communication Constrains. PhD thesis, MIT, Cambridge, MA, 2000.
[66] S. Tatikonda and S. Mitter. Control under communication constraints. IEEE Trans. on Automat. Contr., 49(7):1056–1068,
July 2004.
[67] TBA. TBA. To appear.
[68] G. C. Walsh, O. Beldiman, and L. G. Bushnell. Asymptotic behavior of nonlinear networked control systems. IEEE
Trans. on Automat. Contr., 46(7):1093–1097, July 2001.
[69] G. C. Walsh, H. Ye, and L. Bushnell. Stability analysis of networked control systems. In Proc. of the 1999
Amer. Contr. Conf., volume 4, pages 2876–2880, June 1999.
[70] G. C. Walsh, H. Ye, and L. Bushnell. Stability analysis of networked control systems. IEEE Trans. on Contr. Syst. Tech.,
10(3):438–446, May 2001.
[71] W. S. Wong and R. W. Brockett. Systems with finite communication bandwidth constraints–II: Stabilization with limited
information feedback. IEEE Trans. on Automat. Contr., 44(5), May 1999.
[72] Y. Xu and J. P. Hespanha. Communication logics for networked control systems. In Proc. of the 2004 Amer. Contr. Conf.,
volume 1, pages 572–577, June 2004.
[73] Y. Xu and J. P. Hespanha. Optimal communication logics for networked control systems. In Proc. of the 43th Conf. on
Decision and Contr., pages 3527–3532, Dec. 2004.
[74] Y. Xu and J. P. Hespanha. Estimation under uncontrolled and controlled communications in networked control systems.
In Proc. of the 44th Conf. on Decision and Contr., pages 842–847, June 2005.
[75] J. K. Yook, D. M. Tilbury, , and N. R. Soparkar. Trading computation for bandwidth: Reducing communication in
distributed control systems using state estimators. IEEE Trans. Contr. Syst. Technol, 10(4):503–518, July 2002.
[76] M. Yu, L. Wang, T. Chu, and F. Hao. An LMI approach to networked control systems with data packet dropout and
transmission delays. J. of Hybrid Syst., 3(11), Nov. 2004.
[77] M. Yu, L. Wang, G. Xie, and T. Chu. Stabilization of networked control systems with data packet droupout via switched
system approach. In IEEE Int. symp. on computer aided control systems design, Taipei, Taiwan, pages 362–367, Sept.
2004.
[78] D. Yue, Q.-L. Han, and C. Peng. State feedback controller design for networked control systems. IEEE Trans. on Circ. and
Sys., 51(11):640–644, Nov. 2004.
[79] G. Zhai, B. Hu, K. Yasuda, and A. N. Michel. Qualitative analysis of discrete-time switched systems. In Proc. of the
2002 Amer. Contr. Conf., volume 3, pages 1880–1885, June 2002.
[80] W. Zhang and M. S. Branicky. Stability of networked control systems with time-varying transmission period. In Allerton
Conf. of Communication, contr. and computing, Urbana, IL, Oct. 2001.
[81] W. Zhang, M. S. Branicky, and S. M. Phillips. Stability of networked control systems. IEEE Contr. Syst. Mag., 21(1):
84–99, Feb. 2001.

