The Challenges of Real-Time AIDavid J. Musliner and James A. Hendler and Ashok K. AgrawalaInstitute for Advanced Computer StudiesThe University of MarylandCollege Park, MD 20742fmusliner,hendler,agrawalag@cs.umd.eduEdmund H. DurfeeDept. of EE & Computer ScienceThe University of MichiganAnn Arbor, MI 48109durfee@eecs.umich.edu Jay K. Strosnider and C. J. PaulDept. of Elec. & Computer EngineeringCarnegie Mellon UniversityPittsburgh, PA 15213fjks,cjpaulg@ece.cmu.eduU. Maryland Technical Report CS-TR-3290, UMIACS-TR-94-69June, 1994An abridged version of this paper was submitted to IEEE Computer.1 IntroductionThe research agendas of two major areas of computer science are converging: Articial Intelli-gence (AI) methods are moving towards more realistic domains requiring real-time responses, andreal-time systems are moving towards more complex applications requiring intelligent behavior.Together, they meet at the crossroads of interest in \real-time intelligent control," or \real-timeAI"1. This subeld is still being dened by the common interests of researchers from both real-time and AI systems. As a result, the precise goals for various real-time AI systems are still inux [28, 31, 43]. This paper describes an organizing conceptual structure for current real-time AIresearch, clarifying the dierent meanings this term has acquired for various researchers. Havingidentied the various goals of real-time AI research, we then specify some of the necessary stepstowards reaching those goals. This in turn enables us to identify promising areas for future researchin both AI and real-time systems techniques.1.1 Background: Real-Time SystemsIn many applications, a computer control system must sense the environment and directlyinuence it through action. Such control systems are subject to the real-time constraints of theenvironments in which they operate. For example, an autonomous vehicle operating in the realworld needs a control system that responds quickly enough to avoid collisions with obstacles orDavid Musliner and James Hendler are also aliated with the UM Institute for Systems Research (NSF Grant NSFDCDR-88003012).1These two terms are used interchangeably by many researchers. We will use the somewhat more common \real-time AI" for consistency and brevity. 1
other vehicles. This requirement for timely behavior is the dening characteristic of a class ofenvironments known as hard real-time domains. Hard real-time domains have deadlines by whichcontrol responses must be produced, or catastrophic failure may occur. Other common examplesof hard real-time domains include nuclear power plant control, medical monitoring, and aircraftcontrol.Because catastrophic failure may occur if deadlines are missed, control systems for agents oper-ating in real-time environments must not only choose appropriate actions in varied situations, theymust also make those action choices at appropriate times. Research in real-time systems addressesprecisely this issue, by developing methods for guaranteeing that the reaction rate of a controlsystem matches the rate of change in the environment. Real-time computing is not about building\fast" systems; it is about building systems that are predictably \fast enough" to act on theirenvironments in well-specied ways [31, 43, 66, 69].This understanding of what it means to be \real-time" is dramatically dierent from the casual,non-technical use of the term which has become common in many elds. For example, if a databasequerying system responds quickly according to human time-scales (i.e., in a few seconds or less),it is called \real-time." But what if we use that same database system in a critical applicationrequiring responses in milliseconds? Clearly, the system is no longer \fast enough." The factthat the inadequacy of the system in this new domain (and its \adequacy" in the slower domain)could not be recognized or predicted in any rigorous fashion indicates that this system was never\real-time" in the technical sense; it was never known to meet the required deadlines.Early real-time systems operated in relatively simple, well-characterized environments. Such\traditional" real-time systems are composed of a set of repeated tasks with known execution timesand arrival patterns. The primary challenge in building such systems is to schedule these tasks andensure they will meet their deadlines. Real-time systems researchers have developed a powerfulset of tools for both specifying a task's resource requirements and deadlines and for predictablyscheduling and executing the described behaviors to guarantee that they will meet their deadlines.With the success of these techniques, researchers have been extending real-time systems tomore complex applications. Faced with resource limitations that make it impossible to scheduleand guarantee all of the possible behaviors that might ever be needed in a particular domain, ithas become necessary for systems to adapt to the operational modes of the physical processes theymonitor and control. For example, a real-time system controlling the avionics of an aircraft has todeal with dierent types of activities during the take-o, cruising, and landing stages. The controlsystem's tasks and their execution characteristics will vary, depending on the particular operationalmode of the aircraft. Lack of adaptability would require that the superset of all tasks required inall modes be active at all times. This is clearly an inecient and infeasible approach| hence,real-time systems have been developed with limited abilities to change their task characteristics fordierent operational modes.However, this type of simple mode-switching adaptability is insucient for the emerging gener-ation of complex, dynamic, and uncertain application domains. For example, consider the proposed2
NASA Mars Rover, which must operate at a distance of about 15 light-minutes from Earth, andthus cannot be tele-operated. This system must operate continuously and autonomously in anuncertain and incompletely-specied environment. The system must detect and react in real-timeto unpredictable but dangerous situations such as navigation route blockages and non-geometricterrain hazards (e.g., sand-pits or other potential traps that cannot be detected by sensors di-rectly [29]). These situations require a broad range of adaptability and reasoning processes (e.g.,route planning) that are beyond the abilities of conventional real-time systems. Fortunately, thesetopics (reasoning, adaptability, general and exible intelligent behavior) have long been the purviewof a dierent research area: Articial Intelligence.1.2 Background: AIIn general, AI research attempts to computationally model the various \intelligent" capabilitiesof humans, including their abilities to solve complex reasoning problems while also operating inand adapting to dynamic, uncertain, and incompletely-specied domains. Many of the problemsaddressed by traditional AI research can be viewed as search. In its most general sense, search isthe process of nding an appropriate set of operators (actions) to lead an agent from some initialstate to some goal state. Early AI research centered on basic search methods and representationsfor tasks involving the sorts of symbolic knowledge humans use, as opposed to the numeric dataprocessed by simple algorithms. Much traditional and current AI research revolves around buildingpowerful search-based planning mechanisms that can nd useful plans of action in complex domainsthat may include goal interactions, uncertainty, and temporal information.Traditionally, AI systems have been developed without much attention to the resource limita-tions that motivate real-time systems researchers. However, as these AI systems move out of theresearch laboratories into real-world applications, they also become subject to the time constraintsof the environments in which they operate. For example, AI applications are now being used formonitoring space shuttle telemetry during launches to detect problems quickly when they develop.They are also used to assist operators of electrical power distribution centers. As the complex-ity of the controlled processes increases, the human operators of these systems are increasinglyoverloaded with data, particularly in time-critical fault recovery operations. Sorting through largeamounts of data to identify problems and evaluate solutions can result in cognitive overload. Thenew generation of AI systems are being called upon to provide decision-support capabilities thatreduce the cognitive burden in these situations.Early eorts to build real-time AI systems focused largely on ad hoc speedups for existingAI methods, yielding systems that are only coincidently real-time [43]. That is, these systemshave been tested and shown to operate quickly enough to meet domain deadlines for the testscenarios, and are thus considered guaranteed real-time. However, complex behavior interactionsand domain variations beyond the set of tested scenarios may still lead to failure, because there isno rigorous proof that these systems will meet deadlines or provide logically adequate responses intime. As Stankovic [69] points out, this type of performance is not suited to mission-critical real-3
time systems2. Instead, the rigorous design techniques developed by real-time systems researchersmust be used to guarantee that a system will meet domain deadlines, even in worst-case scenarios.Thus, the technologies of real-time system design and AI are being brought together by theneeds of real applications. We would like to combine the guaranteed performance methods of real-time systems with AI planning, problem-solving, and adaptation mechanisms to build a exible,intelligent control system that can dynamically plan its own behaviors and guarantee that those be-haviors will meet hard deadlines. Unfortunately, building such a system is not as easy as describingits behavior.1.3 Real-Time AI: The ProblemIn the most general sense, the diculty of building real-time AI systems stems from constraintsimposed by the agent, its tasks, and its environment. The agent itself is subject to \bounded ratio-nality" [67], because its data processors have limited speed and memory. The agent is also subjectto \bounded reactivity" [56], because its sensors and actuators are limited in their range, eld ofview, torque, accuracy, etc. Thus the agent has only a restricted capacity to sense its environment,process the sensed data, and use that information to aect its environment. Nevertheless, thislimited agent is required to perform a wide variety of tasks ranging from mission-critical emergencyreactions to complex knowledge-based problem-solving that may involve searching for solutionsin exponentially-large search spaces. The domain itself may impose both severe real-time dead-line constraints and complexities that result from incompletely-modeled dynamics, unpredictableagents, and failures. Putting all of these constraints together, we see that real-time AI systemsmust reliably accomplish complex and mission-critical tasks under realistic resource limitations indynamic domains.More specically, real-time AI systems are required to work continuously over extended periodsof time, interface to the external environment via sensors and actuators, deal with uncertain ormissing data, focus resources on the most critical events, handle both synchronous and asynchronousevents in a predictable fashion with guaranteed response times, and degrade gracefully. Gracefuldegradation may be required to cope with both resource overloads (in which case a system mustalter its various performance goals or methods) and faults (in which case a system may have toexecute recovery actions to resume its normal operations). Realizing such system behavior not onlyrequires that signicant research advances are made in both the real-time and AI methodologies,but also requires that techniques from the two disciplines be combined or interfaced. This paperoutlines many of the specic research challenges that must be solved to develop future generationsof real-time AI systems.2In mission-critical systems, failure to take appropriate and timely action may lead to loss of life or unacceptablyhigh economic costs. 4
1.4 An Example DomainThroughout this paper, we will draw examples from the medical Intensive Care Unit (ICU)domain3. In an ICU, a patient is hooked to a number of monitoring and life support devices underelectronic control. The goals of the system are obvious: keeping the patient healthy and stable,dealing with unexpected changes in the patient's condition, and alerting medical personnel if thesituation becomes critical. With current technology, the individual devices connected to the patientare each separately controlled. If the patient goes into some type of trauma (e.g., shock), a numberof alarms sound to summon medical personnel. During the time that it takes for the personnelto arrive, the patient's condition deteriorates. Even worse, upon entering the ICU room, medicalpersonnel must waste precious time trying to gure out what has happened, why, and what to doabout it.An intelligent real-time control system could vastly improve this situation. A computer controlsystem that could see the whole picture (integrating the results of the many sensor readings comingat various rates from a patient) could then initiate small actions (such as adjusting the feed rateon a respirator) which might prevent the patient from experiencing the trauma. In addition, if thepatient does go into shock, the system can diagnose the cause and have diagnostic (and treatment)suggestions ready by the time medical personnel arrive. In cases where immediate steps must betaken, the system can initiate precursor actions such as reducing a particular gas in a ventilator,which should be done if emergency surgery may be required.From this example domain, the need for combined real-time and AI capabilities becomes clear.Traditional real-time control systems could not handle the decision-making inherent in performingon-line diagnosis or treatment planning (which may also require access to symbolic informationsuch as patient history, information about the surgery from which the patient is recovering, or thequalitative assessments made by medical personnel). On the other hand, a traditional AI-basedmedical diagnostic system could not handle the real-time needs of monitoring sensor data or ofproducing action plans during critical events (such as a drop in blood pressure). Thus the ICUdomain captures the need for both intelligent, symbolic, deliberative AI techniques, and the needfor guaranteed real-time reactions.2 Categorizing Approaches to Real-Time AIThere are three principal ways that real-time systems and AI techniques can be combinedinto a single system [22, 56]: by embedding AI into a real-time system, by embedding real-timereactions into an AI system, and by coupling AI and real-time subsystems as parallel, cooperatingcomponents. Figure 1 illustrates these three system organizations. As we will see, these dierentapproaches do not aim at the same result: the desired performance of a real-time AI system hasnot been clearly and uniquely dened. In the followings subsections, we provide additional detailson the three main approaches to real-time AI, describing their overall performance goals and the3These examples are based on the Guardian real-time AI project [34] under the direction of Dr. Barbara Hayes-Roth at Stanford University. 5
AI methods
AI subsystem
Real-time system
Environment
Environment
Environment
Real-time  subsystem
Real-time reactions
AI system
Figure 1: The three main approaches to real-time AI.diculties to be addressed.Note that these categories are somewhat articial, in that many implemented systems combineaspects from more than one approach. However, by classifying the general approach a system takesto implementing real-time AI, we can understand more clearly the precise goals and intent of thesystem, and its suitability for dierent types of tasks.2.1 Embedding AI in Real-TimeThe simplest approach to combining real-time and AI technologies is to embed AI methodswithin a conventional real-time system, forcing the AI computations to meet deadlines just likeother real-time tasks. The goal, then, is to be \intelligent in real-time," so that all of the system'sreasoning capacity is applied to each decision before its deadline. In many ways this performancegoal is the most intuitive interpretation of \real-time AI," since the term itself seems to imply thatthe intelligent methods will run in real-time. Some researchers refer to this particular approach as\real-time problem solving," clearly indicating that complex, traditional AI tasks such as search-based problem-solving will be constrained to meet real-time deadlines.The fundamental problem with this approach is that AI tasks are generally ill-suited to real-timescheduling mechanisms, which rely on allocating the worst-case execution time for all tasks. AItasks such as planning and search-based problem-solving often have unknown or extremely largeworst-case execution times [58]. While conventional real-time tasks often have small executiontime variations due to data dependency, many AI tasks have additional variations due to searchand backtracking. As a result, simply applying conventional worst-case scheduling methods to AI6
tasks results in systems which are either not schedulable, or have very low utilization.There are two general methods for addressing this conict between high-variance AI tasks andreal-time schedulers: the variance of the AI tasks may be reduced, or the AI tasks may be castas incremental, interruptible algorithms. Systems that address the conict and are able to use theembedded-AI approach include: Deliberative AI architectures such as PRS [30, 37], in which the AI search mechanisms maybe bounded so that the overall response-time of the system can be predicted. Approximationtechniques and multiple problem-solving methods [14, 46] may be used to provide additionalexibility within time bounds. Purely reactive AI architectures like the subsumption architecture [5] and REX/Gapps [39],in which all of the reactive elements are assumed to run in real-time. Reactivity can be seenas the ultimate simplication or removal of AI search from planning tasks, and the varianceof the tasks is removed with the search, making real-time guarantees feasible. Any-time algorithms and deliberation-scheduling systems [8], in which all AI tasks are castas incremental methods that can be interrupted before any deadline, yielding a result thatmay have reduced precision, condence, accuracy, etc.2.2 Embedding Real-Time in AIEmbedding real-time capabilities into an AI system is an alternative approach, which essentiallyassumes that the overall system will employ typical AI search-based deliberation techniques, butthat under some circumstances these techniques might be short-circuited in favor of a real-timereexive action. This type of system is suited to domains in which deliberative action is the norm,and mission-critical real-time reactions will not be common. By retaining a unied system witha single locus of control, this embedded-real-time approach prioritizes real-time reactions withoutrestricting the complexity of the AI methods that may be used. These systems are designed tooperate in domains where they can rely mainly on deliberative processing for the intelligent selectionof actions, occasionally overridden or preempted by real-time reexes.Implemented embedded-real-time systems have used several methods to achieve this behavior,including: Modied production systems such as Soar [45]. In Hero-Soar [44], distinguished real-timeproductions bypass the normal deliberative operator selection phase; instead, the action of areal-time production is executed as soon as the production is matched. Interruptible blackboard-style systems like PRS [30, 37] and RT-1 [17]. In response to ahigh-priority input that requires a response before a deadline, PRS may interrupt ongoingnon-real-time AI tasks and switch to a predictable real-time task to generate the response4.4Note that we have now seen how PRS can operate both as an embedded-AI and embedded-real-time system; thearchitecture is exible enough for either approach, and the choice is made when encoding procedural knowledge forthe system. 7
There are several diculties with the embedded-real-time approach, including the problem ofeectively coordinating and mediating reexive behaviors with the overall deliberative behaviorof the system; if the reexive actions can bypass the normal deliberation mechanisms, it maybe dicult or impossible for the deliberation processing to reason about and aect the real-timereactions. Furthermore, some systems using this approach can add to their repertoire of reexiveactions based on inference or on experience (e.g., Soar's chunking [45]). The trouble with thisapproach is that the pattern-matching activity performed by the AI system against all of thepossible cognitive and reexive actions might be hard to bound5. As a result, even if the reexiveactions themselves have well-characterized real-time properties, they are invoked by high-variance,unpredictable AI techniques.2.3 Cooperating Real-Time and AIThe third approach to real-time AI attempts to keep the strengths of real-time and AI systemsundiluted by not mixing them directly, but instead allowing separate real-time and AI subsystemsto cooperate in achieving overall desirable behaviors. The AI and real-time subsystems must beisolated, so that the AI mechanisms cannot interfere with the guaranteed operations of the real-timesubsystem, but the subsystems must also be able to communicate and judiciously inuence eachother.The performance goals of this type of cooperative system are considerably dierent from theembedded-AI approach, in which all of the AI processing was required to meet real-time deadlines.In the cooperative approach, the AI subsystem can be isolated from the real-time environment bythe concurrent control behaviors of the real-time subsystem. Thus the goal of cooperative systemscan be more broadly stated as being \intelligent about real-time," rather than necessarily being\intelligent in real-time."The tasks that are executed on the real-time subsystem of a cooperative system may containvirtually any processing, as long as the tasks will denitely execute within their allocated time inthe task schedule. Thus cooperative systems can take advantage of any advances in embedded-AItechnology: when AI methods are built that can be embedded within real-time environments, thosemethods may also be used within the real-time subsystem of a cooperative real-time AI system.In other words, the real-time subsystem may execute complex AI methods, as long as they arepredictable and scheduled.Cooperative real-time AI systems span a wide range of designs, varying greatly in the complex-ity of the processing available on the respective AI and real-time subsystems, and in the preciserelationship between these subsystems. At one extreme is a modied subsumption-based modelsuch as DR/MARUTI [35] where a number of real-time reexive behaviors execute concurrently,while higher-level AI processes adjust parameters that aect how the reexive behaviors combineinto outward action. This model essentially assumes that the system has sucient resources toguarantee that every real-time reaction will meet its deadline, and that intelligence is primarily5But see [18] for recent results indicating that, in some cases, such pattern matching may be scalable.8
 Scheduler Feedback. Scheduling Iterative Tasks. Communication. Scenario Swapping (Mode Switching). Real-time Task Languages. Non-real-time Tasks. Enhanced Task Specications.Figure 2: Summary of real-time systems challenges.useful for mediating amongst these sometimes-contradictory reactions (e.g., when one ICU reactionsuggests increasing respirator ow, while a dierent reaction suggests the opposite).However, as noted in Section 1.1, trying to scheduling the superset of all tasks required in allmodes of behavior can lead to very inecient or infeasible system designs. Thus, at the otherextreme of coroutining, real-time AI systems such as CIRCA [56, 57] have an AI component thatreasons about which real-time behaviors need to be carried out at any given time, and designs areal-time control plan appropriately. The real-time subsystem is only expected to schedule andexecute a subset of all of its possible behaviors; as circumstances change, the AI system constructsalternative real-time reactive plans. The challenges in this approach include minimizing the real-time subsystem's reliance on receiving new schedules within hard deadlines, and developing richworld models that the AI system can use to reason about the real-time characteristics of a situation.3 Challenges for Real-Time SystemsTo date, real-time systems research has focused largely on developing low-level operating systemmechanisms to support predictable execution of traditional periodic control tasks with only minordata dependencies. As more varied types of intelligent control tasks and real-time AI architec-tures are implemented, the role of system-level support for predictable hard real-time operationsis expanding and changing. Figure 2 summarizes several focus areas we have identied as being ofprime concern for supporting future mission-critical real-time AI systems. The following paragraphsprovide additional details.Scheduler FeedbackAs always in real-time systems, scheduling is a paramount concern. However, the unusualnature of the tasks generated by real-time AI systems imposes special requirements and suggestsseveral areas for future development. Most fundamentally, the inclusion of intelligent deliberationtechniques in a real-time AI system raises the hope that AI methods based on decision theory might9
be used to control performance tradeos in the face of resource limitations. Such tradeo techniquescould make eective use of feedback information that an enhanced \cooperative" scheduler couldprovide. In the ICU domain, for example, the scheduler of a cooperative real-time AI systemlike CIRCA [56, 57] might indicate that a particular heart-monitoring task is the most severeconstraint making a particular schedule infeasible. Using that feedback information, the system'splanner might decide to decrease the required frequency of the monitoring task (and thus ease thescheduling constraints), if the patient is currently stable. However, if the planner deems the high-frequency monitoring task essential, it might instead choose to omit a less-important task from theschedule, such as a long-term data evaluation and diagnosis task.Research on this type of advanced scheduling system could involve extending the view ofscheduling as a search process that can generate explicit feedback, and/or integrating schedul-ing mechanisms with more traditional AI planning technologies (e.g., Miller's work on planningby search through simulations [54]). Search is a particularly apt metaphor for complex multi-processor scheduling tasks, so applying the AI community's experience with search methods mayyield signicant advances in this area.Scheduling Iterative TasksScheduling techniques that can utilize task performance proles and integrate real-time andnon-real-time tasks in a fair way are also of interest. The real-time systems counterpart to theany-time algorithm method, known as imprecise computation [47], has led to several advances insuch scheduling technologies. Additional work will be required, however, to improve our abilityto build performance proles automatically and to enhance schedulers to manage tasks that arecharacterized by more complex representations such as conditional performance proles [73] orquality functions.In the ICU domain, for example, the utility of the results from an incremental treatment-planning task may vary greatly depending on the patient's condition: if the patient is havingsevere respiratory diculty, even an abstract, incomplete treatment plan may have very high utilitybecause it would begin by increasing respirator pressure and summoning medical personnel. Onthe other hand, if a patient has no emergency conditions, then taking action based on only partialplanning would be ill-advised, and of low utility. Thus the overall utility of a particular partial plancan depend upon the context in which it is generated, and xed performance proles would not besucient to represent these dependencies. Conditional performance proles, which can take intoaccount such context dependencies, represent a rst step towards addressing this representationproblem.The introduction of AI methods in real-time tasks also raises the possibility of tasks thatprovide periodic estimates of their remaining required execution time, which a scheduler could useto make dynamic adjustments to the task's resource allocation. These dynamic schedule changescould allow a system to adapt more eectively to uncertain, data-dependent search methods andchanging environments. For example, a system might initially attempt to use a powerful model-10
based diagnosis method to plan treatment. However, if the model-based task initially evaluates theproblem and indicates that it is expected to require several minutes to arrive at a treatment, thesystem might choose to rst quickly retrieve a relevant treatment plan via case-based methods, inorder to stabilize any emergency conditions.CommunicationThe cooperative approach to real-time AI places the most stringent demands for extensions onexisting real-time systems, because it involves dramatically new types of operations. For example,communication between real-time and non-real-time tasks is a major issue in the cooperative ap-proach, while it is virtually nonexistent in embedded AI systems. In cooperative systems, the AIsubsystem must be able to interact with the concurrently executing real-time control plan, eitherreceiving feedback information (e.g., patient symptoms), downloading new plans (e.g., monitor-ing and treatment tasks), or communicating action arbitration information (e.g., which of severalconicting treatments should be used). The real-time support system must provide appropriatecommunication channels while also ensuring that those channels cannot interfere with ongoingguaranteed real-time tasks. For example, a system may be required to ensure that a real-time taskwill denitely receive an action arbitration message from a non-real-time AI task by a particulartime, and it must be possible to provide that assurance to the system's AI methods despite ongoingschedule swaps and task variations.Scenario Swapping (Mode Switching)In the cooperative model of real-time AI, the AI subsystem generates a real-time task schedulethat must then be rapidly swapped in for execution by the real-time subsystem, without violatingany hard real-time deadlines. This capability requires the real-time system to support predictable-latency schedule substitutions. In combination with the precomputing concept described belowfor AI systems, it may also be necessary for the real-time subsystem to provide storage space foranticipated real-time schedules, and dynamic links between them. Thus, for example, an ICU taskschedule used for monitoring a stable patient might itself trigger the action of swapping in a specialschedule for treating shock when certain sensor readings are noted.Support for this type of activity will require not only rapid schedule swaps, but the abilityto reason about the temporal latencies that may arise during swaps, as well as the possibility ofoverlapping portions of task schedules during startup and shutdown phases of operation. In theprevious example, the tasks used to treat shock might require an initializing process that loadsdata from the prior general-monitoring tasks. To accommodate that information transfer, tasksfrom both the general monitoring and special treatment schedules must be interleaved during thetransition period between schedules.Real-time Task LanguagesSome cooperative real-time AI designs require the AI subsystem to download new real-timecontrol tasks for predictable execution. Thus a task-specication language must be developed11
which is amenable both to manipulation by the AI subsystem (for planning) and to subsequentrapid execution by the real-time subsystem. This type of language may form a bridge between theknowledge and action representations common in AI planning systems and the more traditionalsystems-programming languages that real-time systems researchers have developed [40]. In the ICUdomain, such a language would have to be capable of describing patient monitoring and treatmenttasks, along with their projected eects on a patient (for planning) and their resource requirements(for scheduling). Providing both rigorous execution timing control and useful semantic exibilitywill be a signicant challenge. The work by Lyons et al. on theRS representation [49, 50] exempliesa programming language model that combines aspects of real-time temporal specications with AI-like planning models.Enhanced Task SpecicationsBecause the computational tasks in a real-time AI system may be generated automatically, theplanning system may be able to provide detailed information about those tasks to the scheduler.For example, an AI planner might be able to tell the scheduler about runtime dependencies andconstraints between tasks, such as that a particular pair of tasks will never need to execute con-currently (i.e., they are mutually exclusive), and the scheduler might use this information when itis allocating tasks to processors. Or, the scheduler may be given timing information about a taskother than just its worst-case execution time and required period (e.g., a probability distributionof arrival times for an event-driven task, or a maximum allowable invocation separation [55]). Ad-vances in scheduling techniques that can take full advantage of this additional information shouldbe able to schedule more tasks than simpler existing methods.Non-real-time TasksThe inclusion of non-real-time AI tasks in the same processing environment as guaranteed real-time tasks can introduce many complications relating to resource management, scheduling, andcommunications (as above). One primary concern with non-real-time AI tasks is that they are notusually cast as short, easily restartable computations. Instead, AI problem-solving methods mayhave very large runtimes and contain vast state information. For example, a model-based diagnosismethod in the ICU domain could maintain a large open set of partially-hypothesized diagnoses as itsearches for the best solution. Such tasks must be treated as ongoing, non-terminating tasks muchlike those found in traditional Unix-type operating systems. However, this capability is unusual forreal-time operating systems, which may not even provide virtual memory.4 Challenges for AINearly all of the areas of current AI research could nd applications in future real-time AIsystems. However, we can pinpoint several areas of AI that may have signicant impact on thedevelopment of real-time AI systems, because they are related to the fundamental operationalconstraints of these systems. Figure 3 summarizes the areas we have identied, while the followingparagraphs provide descriptions and examples for each.12
 Reduction of Search Variance. Incremental and Approximate Problem-solving. Customized Problem-solving. Precomputing. Representing, Planning, and Learning Reactions. Utility-based Modeling. Temporal Representation and Reasoning. Representation and Prediction of Processes. Concurrent Planning and Execution. Multi-agent Reasoning and Commitment.Figure 3: Summary of AI challenges.Reduction of Search VarianceStrosnider & Paul [70] have identied several techniques by which the variance inherent insearch-based AI problem solving can be reduced, thus making problem-solving methods amenableto worst-case scheduling. These techniques include search-space pruning (removing portions ofthe space known to not contain a solution), search ordering (adjusting the order in which thesearch space is explored), and scoping (limiting the lookahead used to select operators). Otherresearchers are focusing on improved search algorithms such as RTA* [41]. If these techniquescan be successfully applied to a particular domain's AI search problems, then the embedded-AIapproach can provide real-time problem solving for the domain. In the ICU example, if we coulduse these techniques to manipulate the space of possible treatment plans such that the search for atreatment could be guaranteed to complete in a reasonably short amount of time, then the searchcould be scheduled and executed each time a change of patient status occurred.Incremental and Approximate Problem-solvingMost current AI planning and problem-solving systems attempt to generate a complete and cor-rect solution to a problem. In resource-bounded situations, it may be more eective to quickly gen-erate an approximately correct solution. Incremental constraint-satisfaction techniques, iterative-deepening-style search strategies [41], dynamic programming [9], transformational planning [53],and approximate reasoning methods [14, 46] are currently being explored as ways to generate in-cremental and improving solutions. In the ICU system, these techniques could be used to quicklydevelop an approximate treatment plan (i.e. start to administer a dose of a particular drug) at theonset of an emergency, followed by improving this treatment as the patient stabilizes (i.e., decide13
to stop at 22.5 ccs).Incremental improvement mechanisms allow an embedded-AI system to meet deadlines by sim-ply interrupting the incremental algorithm when a deadline arrives. This approach, variously knownas \any-time algorithms" [8], \imprecise computations" [47], \best-so-far methods" [70], and \in-creasing reward for increasing service" (IRIS) tasks [16], has gained even more proponents thannames. However, signicant advances are still necessary in characterizing task performance to de-velop the mappings between solution quality and service time (\performance proles") that areneeded to ensure that the interrupted algorithms will indeed produce results of acceptable qualityby the time a deadline arrives. In addition, the process of composing larger systems from severalincremental algorithms (\deliberation scheduling") is a growing area of research [4, 61], closelyrelated to scheduling research in the real-time systems community.Modications to basic incremental methods may also lead to variants such as \dynamic expectedruntime" tasks, which would occasionally re-evaluate their own expected runtimes and notify thereal-time support system. Using this update information, an intelligent real-time control systemcould modify its task schedules and adjust its behavior to account for its current progress andexpected future work.Customized Problem-solvingA slightly dierent approach, under investigation by Garvey & Lesser [27], is to postulate anite set of alternative computation methods for solving each particular problem a system mightface. For example, the ICU controller might have complex causal model-based methods for ana-lyzing sensor data and arriving at a diagnosis, as well a set of simpler rules that classify situationsless accurately, but much more quickly. Using the \design-to-time" (DTT) methodology, selectionsare made from these alternative problem-solving techniques given a priori knowledge of the re-quired resources and task deadlines. One signicant weakness of this approach is the need for sucha priori information. However, the discrete set of alternative methods used in DTT may be muchmore feasible to accurately characterize than the generalized incremental computations needed fordeliberation scheduling. Research in the real-time systems community on \version selection" [51]and \load adjustment" [42] is closely related to DTT.PrecomputingAI systems currently solve problems from scratch or use memory-based techniques to solvecurrent problems based on past experience. A related technique that may improve real-time per-formance is to cache solutions for anticipated problems| that is, essentially creating a case memorybased on reasoning about hypothetical situations, rather than on past practice [6]. This approachmay include both compiling problem solutions and pre-prioritizing behavioral tradeo decisionsthat may arise in the future. In the ICU domain, for example, the system might generate and storesample treatment plans for likely medical complications and trauma conditions, and then retrievethem for use in an emergency. As the plans take eect, they can then be tailored to the precisecondition of the current patient. 14
Representing, Planning, and Learning ReactionsReactive AI systems that perform little or no lookahead planning are well-suited to interactingwith real-time domains because they avoid the high variance of planning and search activities.However, in order to be applicable to hard real-time domains, existing representations of reaction(e.g., RAPs [26], routines [1], and monitors [63]) must be extended to support predictable, provably-correct behavior. This requires enhanced capabilities to represent both the resource requirementsof a reaction [56] and the functional behavior of a reaction [60].In many types of real-time AI systems, intelligently adapting to dynamic environments requiresthe ability to create and use reactive plans that can immediately make necessary changes while aplanner begins to determine longer-term actions. For planners that build reactive plans, signicantareas of research include reaction planning mechanisms [39, 53, 56, 65] and formalisms which cansupport the proofs of guaranteed behavior that are necessary in hard real-time domains [40, 49, 50].The inherent parallelism of reactive control systems is a particularly challenging aspect for AIplanners, which have largely focused on sequential plan execution.In addition, using learning methods to acquire reactions could provide improved reaction speedand coverage. Techniques that have proven useful in this area include compilation of reactivebehaviors [64], \chunking" of previous action sequences [45], reinforcement learning [38, 59], anddynamic programming methods [3]. Such learning techniques allow a system to take necessaryactions (e.g., increasing respirator rate) in emergencies (e.g., a decrease in blood pressure), if theaction has been useful in the past.Utility-based modelingGiven the dynamic and uncertain nature of real world domains (particularly as viewed throughsensor readings), an intelligent control system must often make decisions based on incompleteinformation. To achieve optimal behavior according to some metric, the system might reasonabout probabilities and expected utilities [20, 25, 36, 72]. However, traditional decision theoryoften requires more information than is available in realistic domains. In these situations, a morequalitative model of uncertainty and decision-making is needed, including the ability to representthe growth of uncertainty as time passes. In the ICU case, such methods might lead to a decisionto take certain actions based on their immediate benecial eects (e.g., increasing respirator owrate), even if the long term eects may be less clear (e.g., if left at too high a rate, this couldeventually cause a respiratory problem).Temporal Representation and ReasoningParticularly in systems where all AI processing is not guaranteed to meet real-time deadlines, itbecomes important for a system to have an explicit understanding of the temporal characteristics ofits behaviors. In the ICU domain, for example, if administering a particular test and analyzing theresulting data takes several minutes, it may be important for the system to anticipate this delay andimplement intermediary treatment actions, pending the results of the test. Current AI research15
on representations of time [2, 10, 32, 52, 71] generally involves complex constraint propagationmechanisms to maintain partial ordering relations between time intervals. In many cases, it maybe possible to use simpler, more ecient temporal representations that can still provide the typesof worst-case timing information required for real-time guarantees [57].Representation and Prediction of ProcessesIn a medical diagnostic knowledge-based system, the inputs used in making the diagnosis aretypically symptoms observed at a particular time. In contrast, in the ICU example the symptomsinclude a recognition of how the patient's health is changing over time, in response to ongoingphysical processes and actions taken by the system. Being able to represent and reason aboutprocesses is crucial to predicting the possible future states of the patient and what to do aboutthem. In addition, predicting how long a process should take (e.g., this IV should take about 20minutes to drain) and comparing this to the actual behavior (e.g., after 10 minutes it is still 90%full) can be an important aspect of intelligent behavior and fault detection (e.g., the IV is notinserted correctly). This type of performance has been initially investigated by Cohen et al. [7, 33]using \envelopes" describing projected plan execution. Other techniques expected to be of useinclude extending planning systems to handle processes using quantitative [11, 62] and qualitativerepresentations [15, 19], and modifying Bayesian techniques to cope with change over time.Concurrent Planning and ExecutionIn the cooperative approach to real-time AI, the ability to concurrently plan and execute actionsis crucial to successful performance [56, 65]. It is particularly useful to be able to begin executingplans before they can be completely eshed out. For example, if the ICU patient is starting toenter a respiratory failure, the control system should immediately begin to increase oxygen ow,even before completely determining what other actions will be taken later. Techniques useful inenabling this sort of behavior include the use of iterative planning models (which can rapidlyidentify promising steps towards goals) [48, 53] and decision-theoretic control techniques (whichcan identify the most important steps to take).Multi-agent Reasoning and CommitmentIn many cases, deadlines and time constraints stem from commitments between agents. TheICU, for example, makes commitments to a patient and his or her family to monitor the patient'ssigns and intervene (to the extent possible) quickly enough to prevent the patient's conditionfrom degrading signicantly. It is this commitment that places such severe time constraints onautomated diagnostic systems in the ICU. The same systems, if employed in a morbidity/mortalitystudy, would likely be able to take more time to explain the progression of symptoms and outcomes.Even then, however, the systems must meet (possibly implicit) time commitments to provide resultsin time for a hearing, or publication.While in some domains an agent will have little exibility over the deadlines placed on a sup-porting knowledge-based system (e.g., the ICU patient), in other cases deadlines can be much16
more negotiable. It is important to understand how deadlines arise due to commitments betweenagents [68], how dierent types of relationships between the tasks at dierent agents inuence theseverity and exibility of time commitments [12, 13], how commitments and goals can be revised,relaxed, and reassigned as unexpected events change what can be done when [6, 21, 23], and how ab-straction can be used to generate the right degree of commitment under various circumstances [24].5 SummaryExtending previous work [22, 56], we have identied and described three fundamental ap-proaches to developing real-time AI systems. This paper improves upon the previous classicationby distinguishing the various approaches according to their performance goals, in addition to theirarchitectural organization of real-time and AI methods. With the eld of real-time AI still in ux,choosing an appropriate system architecture for a particular application requires a clear descriptionof the system's performance goals and design features. We hope that our classication of existingapproaches to real-time AI will serve as a starting point for such descriptions.By examining the functional constraints that these dierent architectures place on their com-ponents, we have pinpointed several challenging research areas that are critical to the developmentof next-generation real-time AI systems. As more complex, intelligent programs are applied tocontrolling systems in mission-critical domains, the need for more powerful and exible real-timesystems support technology is growing rapidly. In Section 3 we outlined several areas in sys-tems support that will be important for the short-term development of next-generation intelligentreal-time control systems. Likewise, we have found that the broad application of AI methods toreal-time domains will require new approaches, diering from many of the traditional search-basedtechniques explored in the eld. As discussed in Section 4, reactivity, incremental algorithms,decision-theoretic tradeo methods, and other non-traditional techniques will be required to intel-ligently meet the demands of mission-critical environments. This paper may thus serve, in part, asa guideline for future research aimed at advancing the state of the art.Existing systems represent a strong initial eort, but do not yet provide the comprehensivecoordination of real-time reactivity and intelligent, deliberative behavior implied by the full senseof \real-time AI." The embedded-AI and embedded-real-time approaches place strong constraintson either the AI or real-time components, making them applicable to only limited domains. The co-operative approach to real-time AI removes some of those constraints, but current implementationsremain largely master-slave systems in which the real-time subsystem is enslaved, simply execut-ing plans sent from the AI subsystem. In the long term, we expect that the merging of real-timeand AI research will lead to systems in which task planning, scheduling, and execution are moreintegrated, yet still retain the guaranteed performance characteristics required for mission-criticaloperations. Precisely how this will be accomplished is, of course, the subject of future work. How-ever, it is clear that advances the areas we have pinpointed will lead us closer to the overall goalof building a exible but predictable goal-directed mechanism capable of recognizing and adjustingto environmental dynamics and its own resource bounds.17
AcknowledgementsThe authors would like to acknowledge useful input from the many participants in the NSF-sponsored workshop on \Articial Intelligence and Real-time" (Grant IRI-9216094) the Panel onResource Bounded Systems at the June 1993 Workshop on Design Principles and Engineering ofKnowledge Based Systems (sponsored by the Joint Directors of Laboratories), and contributors to areport being collated by Kang Shin6. Researchers involved in these eorts include: Ron Arkin, MarkBoddy, Chris Brown, B. Chandrasekaran, Su-Shing Chen, Bruce D'Ambrosio, Susan Davidson, TomDean, David Etherington, Oscar Firschein, Northrup Fowler, Alan Garvey, Rich Gerber, MattGinsberg, Moises Goldszmidt, Barbara Hayes-Roth, Connie Heitmeyer, Leslie Interrante, FarnamJahanian, Paris Kanellakis, Bob Kohout, Jean-Louis Lassez, Insup Lee, Kwei-Jay Lin, Jane Liu,Doug Locke, Nancy Lynch, David Miller, Al Mok, Howard Mora, Ragunathan Rajkumar, KrithiRamamritham, Daniel Rochowiak, Paul Rosenbloom, Stan Rosenschein, Fred Schneider, MarcelSchoppers, Karsten Schwan, Liu Sha, Kang Shin, Sang Son, Jack Stankovic, Alex Stoyenko, HideTokuda, Abe Waksman, and Wei Zhao.References[1] P. E. Agre and D. Chapman, \Pengi: An Implementation of a Theory of Activity," in Proc.National Conf. on Articial Intelligence, pp. 268{272. Morgan Kaufmann, 1987.[2] J. F. Allen, \Maintaining Knowledge about Temporal Intervals," Communications of the ACM,vol. 26, no. 11, pp. 832{843, 1983.[3] A. G. Barto, S. J. Bradtke, and S. P. Singh, \Real-time Learning and Control using Asyn-chronous Dynamic Programming," submitted to Articial Intelligence, 1994.[4] M. Boddy and T. Dean, \Solving Time-Dependent Planning Problems," in Proc. Int'l JointConf. on Articial Intelligence, pp. 979{984, August 1989.[5] R. A. Brooks, \A Robust Layered Control System for a Mobile Robot," IEEE Journal ofRobotics and Automation, vol. RA-2, no. 1, pp. 14{22, March 1986.[6] B. Chandrasekaran, R. Bhatnagar, and D. D. Sharma, \Real-Time Disturbance Control,"Communications of the ACM, vol. 34, no. 8, pp. 33{47, August 1991.[7] P. R. Cohen, M. L. Greenberg, D. M. Hart, and A. E. Howe, \Trial by Fire: Understandingthe Design Requirements for Agents in Complex Environments," AI Magazine, vol. 10, no. 3,pp. 33{48, Fall 1989.[8] T. Dean and M. Boddy, \An Analysis of Time-Dependent Planning," in Proc. National Conf.on Articial Intelligence, pp. 49{54, 1988.[9] T. Dean, L. P. Kaelbling, J. Kirman, and A. Nicholson, \Planning With Deadlines in StochasticDomains," in Proc. National Conf. on Articial Intelligence, pp. 574{579, 1993.6To appear as a University of Michigan technical report.18
[10] T. L. Dean, \Intractability and Time-Dependent Planning," in Proceedings of the 1986 Work-shop on Reasoning about Actions & Plans, pp. 245{266. Morgan Kaufmann Publishers Inc.,1987.[11] T. L. Dean and M. P. Wellman, Planning and Control, Morgan Kaufmann Publishers, 1991.[12] K. S. Decker and V. R. Lesser, \Quantitative Modeling of Complex Environments," Int'l J. ofIntelligent Systems in Accounting, Finance, and Management, vol. 2, no. 4, , December 1993.[13] K. S. Decker and V. R. Lesser, \Designing a Family of Coordination Algorithms," TechnicalReport 94{14, University of Massachusetts, Department of Computer Science, 1994.[14] K. S. Decker, V. R. Lesser, and R. C. Whitehair, \Extending a Blackboard Architecture forApproximate Processing," Journal of Real-Time Systems, vol. 2, no. 1/2, pp. 47{79, May 1990.[15] G. F. DeJong, \Learning to Plan in Continuous Domains," Articial Intelligence, vol. 65, no.1, , January 1994.[16] J. K. Dey, J. F. Kurose, and D. Towsley, \Ecient On-line Processor Scheduling for a Class ofIRIS (Increasing Reward with Increasing Service) Real-Time Tasks," Performance EvaluationReview, vol. 21, no. 1, , June 1993.[17] R. Dodhiawala, N. S. Sridharan, P. Raulefs, and C. Pickering, \Real-Time AI Systems: ADenition and An Architecture," in Proc. Int'l Joint Conf. on Articial Intelligence, pp. 256{261, August 1989.[18] R. B. Doorenbos, \Matching 100,000 Learned Rules," in Proc. National Conf. on ArticialIntelligence, pp. 290{296, 1993.[19] B. Drabble, \EXCALIBUR: A Program for Planning and Reasoning with Processes," ArticialIntelligence, vol. 62, no. 1, , July 1993.[20] D. Draper, S. Hanks, and D. Weld, \Probabilistic Planning with Information Gathering andContingent Execution," Technical Report 93{12{04, University of Washington, December 1993.[21] E. H. Durfee and V. R. Lesser, \Incremental Planning to Control a Time-Constrained,Blackboard-Based Problem Solver," IEEE Trans. Aerospace and Electronic Systems, vol. 24,no. 5, pp. 647{662, 1988.[22] E. H. Durfee, \A Cooperative Approach to Planning for Real-Time Control," in Proc. Work-shop on Innovative Approaches to Planning, Scheduling and Control, pp. 277{283, November1990.[23] E. H. Durfee and V. R. Lesser, \Partial Global Planning: A Coordination Framework forDistributed Hypothesis Formation," IEEE Trans. Systems, Man, and Cybernetics, vol. 21, no.5, pp. 1167{1183, 1991.[24] E. H. Durfee and T. A. Montgomery, \Coordination as Distributed Search in a HierarchicalBehavior Space," IEEE Trans. Systems, Man, and Cybernetics, vol. 21, no. 6, pp. 1363{1378,1991. 19
[25] O. Etzione, \Embedding Decision-Analytic Control in a Learning Architecture," ArticialIntelligence, vol. 49, pp. 129{159, 1991.[26] R. J. Firby, \An Investigation into Reactive Planning in Complex Domains," in Proc. NationalConf. on Articial Intelligence, pp. 202{206, 1987.[27] A. Garvey and V. Lesser, \Design-to-time Real-Time Scheduling," IEEE Trans. Systems, Man,and Cybernetics, vol. 23, no. 6, pp. 1491{1502, 1993.[28] A. Garvey and V. Lesser, \A Survey of Research in Deliberative Real-Time Articial Intelli-gence," Journal of Real-Time Systems, vol. 6, no. 3, , May 1994.[29] E. Gat, M. G. Slack, D. P. Miller, and R. J. Firby, \Path Planning and Execution Monitoringfor a Planetary Rover," in Proc. IEEE Int'l Conf. on Robotics and Automation, pp. 20{25,1990.[30] M. P. George and F. F. Ingrand, \Decision-Making in an Embedded Reasoning System," inProc. Int'l Joint Conf. on Articial Intelligence, pp. 972{978, August 1989.[31] J. R. Greenwood and J. P. Marsh, \Real-Time AI: Software Architecture Issues," Technicalreport, Advanced Decision Systems, May 1987.[32] S. Hanks, \Practical Temporal Projection," in Proc. National Conf. on Articial Intelligence,1990.[33] D. M. Hart, S. D. Anderson, and P. R. Cohen, \Envelopes as a Vehicle for Improving theEciency of Plan Execution," in Proc. Workshop on Innovative Approaches to Planning,Scheduling and Control, pp. 71{76, November 1990.[34] B. Hayes-Roth, \An Architecture for Adaptive Intelligent Systems," accepted for publicationin Articial Intelligence, Special Issue on Agents and Interactivity, 1994.[35] J. Hendler and A. Agrawala, \Mission Critical Planning: AI on the MARUTI Real-TimeOperating System," in Proc. Workshop on Innovative Approaches to Planning, Schedulingand Control, pp. 77{84, November 1990.[36] A. Howe and P. Cohen, \Failure Recovery: A Model and Experiments.," in Proc. NationalConf. on Articial Intelligence, pp. 801{808, 1991.[37] F. F. Ingrand and M. P. George, \Managing Deliberation and Reasoning in Real-Time AISystems," in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control,pp. 284{291, November 1990.[38] L. P. Kaelbling, Learning in Embedded Systems, MIT Press, 1994.[39] L. P. Kaelbling and S. J. Rosenschein, \Action and Planning in Embedded Agents," in Roboticsand Autonomous Systems 6, pp. 35{48, 1990.[40] R. C. Kohout, D. J. Musliner, and J. A. Hendler, \Grounding Dynamic Reaction on the MarutiOperating System," Technical Report CS-TR-3231, University of Maryland Department ofComputer Science, April 1994. 20
[41] R. E. Korf, \Depth-Limited Search for Real-Time Problem-Solving," Journal of Real-TimeSystems, vol. 2, no. 1/2, pp. 7{24, May 1990.[42] T.-W. Kuo and A. K. Mok, \Load Adjustment in Adaptive Real-Time Systems," in Proc.Real-Time Systems Symposium, pp. 160{170, December 1991.[43] T. J. Laey, P. A. Cox, J. L. Schmidt, S. M. Kao, and J. Y. Read, \Real-Time Knowledge-Based Systems," AI Magazine, vol. 9, no. 1, pp. 27{45, 1988.[44] J. E. Laird and P. S. Rosenbloom, \Integrating Execution, Planning, and Learning in Soar forExternal Environments," in Proc. National Conf. on Articial Intelligence, July 1990.[45] J. E. Laird, A. Newell, and P. S. Rosenbloom, \SOAR: An Architecture for General Intelli-gence," Articial Intelligence, vol. 33, pp. 1{64, 1987.[46] V. R. Lesser, J. Pavlin, and E. Durfee, \Approximate Processing in Real-Time Problem Solv-ing," AI Magazine, vol. 9, no. 1, pp. 49{61, 1988.[47] J. W.-S. Liu, K.-J. Lin, and S. Natarajan, \Scheduling Real-Time, Periodic Jobs Using Im-precise Results," in Proc. Real-Time Systems Symposium, pp. 252{260, December 1987.[48] D. M. Lyons, A. J. Hendriks, and S. Mehta, \Achieving Robustness by Casting Planning asAdaptation of a Reactive System," in Proc. IEEE Int'l Conf. on Robotics and Automation,pp. 198{203, April 1991.[49] D. M. Lyons, \A Process-Based Approach to Task Plan Representation," in Proc. IEEE Int'lConf. on Robotics and Automation, pp. 2142{2147, 1990.[50] D. M. Lyons, S. Mehta, and P. S. Gopinath, \Robust Representation and Execution of RobotPlans," in Proc. IEEE EUROMICRO Workshop on Real-Time, pp. 34{41, June 1990.[51] N. Malcolm and W. Zhao, \Version Selection Schemes for Hard Real-Time Communications,"in Proc. Real-Time Systems Symposium, pp. 12{21, December 1991.[52] D. McDermott, \A Temporal Logic For Reasoning About Processes and Plans," CognitiveScience, vol. 6, pp. 101{155, 1982.[53] D. McDermott, \Transformational Planning of Reactive Behavior," Technical Report 941, YaleUniversity Department of Computer Science, December 1992.[54] D. P. Miller, Planning by Search Through Simulations, PhD thesis, Yale University, 1985.[55] D. J. Musliner, \Scheduling Automatically-Generated Real-Time Monitoring Tasks," submit-ted to Intelligent Systems Engineering: The International Journal of AI in Engineering, 1994.[56] D. J. Musliner, E. H. Durfee, and K. G. Shin, \CIRCA: A Cooperative Intelligent Real-TimeControl Architecture," IEEE Trans. Systems, Man, and Cybernetics, vol. 23, no. 6, pp. 1561{1574, 1993.[57] D. J. Musliner, E. H. Durfee, and K. G. Shin, \World Modeling for the Dynamic Constructionof Real-Time Control Plans," to appear in Articial Intelligence, 1994.21
[58] C. J. Paul, A. Acharya, B. Black, and J. K. Strosnider, \Reducing Problem-Solving Varianceto Improve Predictability," Communications of the ACM, vol. 34, no. 8, pp. 81{93, August1991.[59] A. Ram and J. C. Santamara, \Multistrategy Learning in Reactive Control Systems for Au-tonomous Robotic Navigation," Informatica, vol. 17, no. 4, pp. 347{369, 1993.[60] S. J. Rosenschein and L. P. Kaelbling, \The Synthesis of Digital Machines with ProvableEpistemic Properties," in Proc. Conf. Theoretical Aspects of Reasoning About Knowledge, pp.83{98, 1986.[61] S. J. Russell and S. Zilberstein, \Composing Real-Time Systems," in Proc. Int'l Joint Conf.on Articial Intelligence, pp. 212{217, August 1991.[62] R. M. Salter, \Planning in a Continuous Domain| An Introduction," Robotica, vol. 1, pp.85{93, 1983.[63] J. C. Sanborn and J. A. Hendler, \A Model of Reaction for Planning in Dynamic Environ-ments," Int'l Journal for Articial Intelligence in Engineering, vol. 3, no. 2, pp. 95{102, April1988.[64] M. Schoppers, \Universal Plans for Reactive Robots in Unpredictable Environments," in Proc.Int'l Joint Conf. on Articial Intelligence, pp. 1039{1046, 1987.[65] M. Schoppers, \A Software Architecture for Hard Real-Time Execution of Automatically Syn-thesized Plans or Control Laws," in Proc. AIAA/NASA Conf. on Intelligent Robots in Field,Factory, Service, and Space, pp. 768{775, March 1994.[66] K. G. Shin and P. Ramanathan, \Real-Time Computing: A New Discipline of ComputerScience and Engineering," Proceedings of the IEEE, vol. 82, no. 1, pp. 6{24, January 1994.[67] H. A. Simon, Models of Bounded Rationality, MIT Press, 1982.[68] R. Smith, \The Contract Net Protocol: High-level Communication and Control in a Dis-tributed Problem Solver," IEEE Trans. Computers, vol. 29, , 1980.[69] J. A. Stankovic, \Misconceptions about Real-Time Computing: A Serious Problem for Next-Generation Systems," IEEE Computer, vol. 21, no. 10, pp. 10{19, October 1988.[70] J. K. Strosnider and C. J. Paul, \A Structured View of Real-Time Problem Solving," acceptedfor publication in AI Magazine, 1994.[71] S. Vere, \Temporal Scope of Assertions and Window Cuto," in Proc. Int'l Joint Conf. onArticial Intelligence, pp. 1055{1059, 1985.[72] M. P. Wellman, \The STRIPS Assumption for Planning with Uncertainty," in Proc. AAAISpring Symp. on Planning in Uncertain, Unpredictable, or Changing Environments, 1990.[73] S. Zilberstein and S. J. Russell, \Constructing Utility-Driven Real-Time Systems Using Any-time Algorithms," in Proc. IEEE Workshop on Imprecise and Approximate Computation, pp.6{10, December 1992. 22

