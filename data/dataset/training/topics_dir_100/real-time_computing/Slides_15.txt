Real-Time Systems 
Lecture #15 
Professor Jan Jonsson 
Department of Computer Science and Engineering 
Chalmers University of Technology 
 About the laboratory report 
1.  Your answers to the underlined questions/requests in the 
guideline text for Part 1 of the laboratory assignment. Special 
attention should be given to the explanation of the pitch drop 
effect in Step 3 and the schedulability analysis in Step 4. 
2.  An overall description of your software design for Part 2 of the 
laboratory assignment, focusing primarily on how the "state-
machine" software controlling the tone generator works, that 
is, how tones are started and stopped according to the melody 
being played (and the key and tempo chosen).  
Use access graphs (see slide 29 in Lecture 3) to illustrate how 
objects and methods are organized and refer to each other, 
and use timing diagrams (see slides 35 - 39 in Lecture 3) to 
illustrate the method event chains. 
No source code listings need to be included in the report. 
A report template can be found on the course web page. 
Facing the written exam 
Real-Time Systems 
Monday 08:30 − 12:30, March 16, 2015 
in the ”V” building 
Note: in case you need to take a re-exam, you 
must remember to register in the Student Portal 
Facing the exam 
Reading guidelines:  
•  Lecture notes (”PowerPoint hand-outs”) 
–  All material are very relevant 
–  No exam questions regarding the guest lectures (#3 and #9) 
•  Compendium of examples 
–  Good experience in solving theoretical analysis problems 
•  Compendium: ”Real-Time Systems …”, Tindell 
–  Overview reading (chapters given on course web page) 
•  Course book: ”Real-Time Systems …”, Burns & Wellings 
–  No exam questions from the book (since it is out of print) 
–  Overview reading for your own pleasure only. 
Facing the exam 
Permitted to use during the exam:  
•  Chalmers-approved calculator 
–  Useful if you need to solve feasibility analysis problems 
•  ”Programming with the TinyTimber kernel” 
–  Important aid for understanding the basic principles of 
TinyTimber 
–  Useful if you need to explain how to construct, for example, 
software with periodic activities 
Facing the exam 
Important knowledge areas:  
•  Design principles for real-time systems 
–  Real-time systems: typical properties, misconceptions 
–  Real-time constraints: origin, interpretation (soft/hard) 
–  Design phases: specification, implementation, verification 
–  Verification: methods, difficulties, pitfalls 
–  Fault tolerance and network communication 
•  Language constructs for concurrent programming 
–  Mutual exclusion: protected objects, monitors, semaphores, 
synchronized methods, mutex’d methods 
–  Machine-level mutual exclusion: disable interrupt, test-and-set 
Facing the exam 
Important knowledge areas (cont’d): 
•  Principles of concurrent programming 
–  Parallelization: pros & cons 
–  Resource management: mutual exclusion, critical region 
–  Deadlock: definition, management 
–  Starvation: definition, management 
•  Language support for real-time programming 
–  Units of concurrency: task, thread, method 
–  Scheduling support: clocks, time, delays, priorities 
–  Machine-level support: I/O-addressing, bit manipulation, 
interrupt handling 
Facing the exam 
•  Scheduling theory 
–  Task model: WCET, deadline, period, offset 
–  Scheduling: definitions, priorities, preemption 
–  Feasibility test: purpose, exactness (sufficient/necessary) 
•  Static scheduling 
–  Properties: time table, pros & cons 
–  Scheduling: generation of time tables, run-time behavior 
•  Dynamic scheduling (RM, DM, EDF, RMFF, RM-US) 
–  Properties: priority assignment, optimality, pros & cons 
–  Scheduling: run-time behavior, construct timing diagram 
–  Feasibility test: theory, assumptions, exactness, complexity 
Important knowledge areas (cont’d): 
Facing the exam 
What type of exam problems will there be? 
•  Real-time computing concepts 
–  Will probe your general knowledge in real-time computing 
•  Programming concepts 
–  Will probe your general knowledge in how to design concurrent 
real-time programs 
–  No exam problems where you will write lots of program code! 
•  Scheduling concepts and theory 
–  Will probe your knowledge in WCET analysis, scheduling and 
feasibility analysis 
       Let yourself be inspired, but not controlled, by the  
            contents of old exams! 
… and then ... 
Real-time systems 
… what to do if you are curious and want to know more? 
Design of real-time systems 
What additional issues are there? 
•  How to generate schedules using search algorithms? 
–  Branch-and-bound and simulated annealing algorithms 
•  How to achieve efficient multiprocessor scheduling? 
–  P-fair scheduling and task-splitting algorithms 
•  How to handle system overload? 
–  Which tasks to accept and which tasks to reject 
•  How to handle aperiodic tasks? 
–  Server-based and server-less approaches  
These issues (and more) are addressed in the advanced 
course in ”Parallel and Distributed Real-Time Systems”  
 (EDA421/DIT171, quarter 4) 
Parallel & Distributed 
Real-Time Systems 
EDA421 (DIT171) 
7.5 credit points 
 
Professor Jan Jonsson 
Department of Computer Science & Engineering 
Chalmers University of Technology 
EDA421: Course aim 
After the course, the student should be able to: 
  Formulate requirements for computer systems used in time- and 
safety critical applications.  
  Master the terminology of scheduling and complexity theory within the 
real-time system domain.  
  Describe the principles and mechanisms used for scheduling of task 
execution and data communication in real-time systems.  
  Derive performance for, and be familiar with the theoretical 
performance limitations of, a given real-time system. 
EDA421: Organization 
Lectures: 
–  Lectures on modeling, performance and scheduling theory 
for parallel and distributed real-time systems 
Homework assignments: 
–  Two assignments (handed out in two-week intervals) 
–  Theoretical problem solving + paper reading 
–  Written report + oral argumentation/presentation 
Examination:  
–  Compulsory homework assignments (grade: U, 3, 4, 5) 
–  Voluntary written exam (to enable highest grade) 
EDA421: Course contents 
What this course is all about: 
–  real-time systems modeling 
–  real-time application constraints 
–  real-time task assignment and scheduling algorithms 
–  real-time inter-processor communication techniques 
–  real-time performance measures 
–  complexity theory and NP-completeness 
–  distributed clock synchronization 
–  fault-tolerance techniques 
–  estimation of program run times 
EDA421: Evaluation by students 
 The course has been well received by the students 
–  For the last three years, the overall course evaluation grade 
has been very good: 4.62, 4.64, 4.66 (out of 5) 
–  The nature of the homework assignments, and an interactive 
grading process, are particularly mentioned in the feedback 
from the students. 
 
Research activities at Chalmers 
Department of Computer Science & Engineering 
  Dependable real-time systems group 
–  Methods for detecting and handling software/hardware faults 
–  Modeling methodology for embedded real-time systems 
–  Analysis methods for schedulability and time complexity 
–  Researchers: Prof. Johan Karlsson, Prof. Jan Jonsson,  
Dr. Risat Pathan 
–  PhD students: Negin Fathollah Nejad Asl, Behrooz 
Sangchoolie, Fatemeh Ayat 
 
We are always looking for good master’s thesis students (and, 
sometimes, PhD candidates) for our research projects.  
For further information consult our home page 
 URL: http://www.chalmers.se/cse 

