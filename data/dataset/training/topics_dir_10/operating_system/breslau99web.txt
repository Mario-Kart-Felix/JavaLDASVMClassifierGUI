IEEE IINFOCOM, VOL. XX, NO. Y, MONTH 1999 1
Web Caching and Zipf-like Distributions: Evidence and Implications
Lee Breslau, Pei Cao, Li Fan, Graham Phillips, Scott Shenker.
Abstract—
This paper addresses two unresolved issues about web
caching. The first issue is whether web requests from a fixed
user community are distributed according to Zipf’s law [22].
Several early studies have supported this claim [9], [5], [1]
while other recent studies have suggested otherwise [16], [2].
The second issue relates to a number of recent studies on
the characteristics of web proxy traces, which have shown
that the hit-ratios and temporal locality of the traces exhibit
certain asymptotic properties that are uniform across the
different sets of the traces [4], [19], [7], [10], [15]. In partic-
ular, the question is whether these properties are inherent
to web accesses or whether they are simply an artifact of
the traces. An answer to these unresolved issues will facili-
tate both web cache resource planning and cache hierarchy
design.
We show that the answers to the two questions are re-
lated,. We first investigate the page request distribution seen
by web proxy caches using traces from a variety of sources.
We find that the distribution does not follow Zipf’s law pre-
cisely, but instead follows a Zipf-like distribution with the
exponent varying from trace to trace. Furthermore, we find
that there is only (i) a weak correlation between the access
frequency of a web page and its size and (ii) a weak cor-
relation between access frequency and its rate of change.
We then consider a simple model where the web accesses
are independent and the reference probability of the doc-
uments follows a Zipf-like distribution. We find that the
model yields asymptotic behaviors that are consistent with
the experimental observations, suggesting that the various
observed properties of hit-ratios and temporal locality are
indeed inherent to web accesses observed by proxies.
Finally, we revisit web cache replacement algorithms and
show that the algorithm that is suggested by this simple
model performs best on real trace data. The results indicate
that while page requests do indeed reveal short-term corre-
lations and other structures, a simple model for an inde-
pendent request stream following a Zipf-like distribution is
sufflciient to capture certain asymptotic properties observed
at web proxies.
Ke~/worris— caching, World Wide Web, Zipf distribution.
I. INTRODUCTION
D ~JE to the explosive growth of the web, web proxyleaching has recently received considerable attention.
It is (considered one of the most important techniques for
reducing web trfic, which accounts for a large percentage
of Internet traffic today. Several researchers have observed
that the relative frequency with which web pages are re-
quested follows Zipf’s law [22]. Zipf’s law states that the
relative probability of a request for the i’th most popu-
lar page is proportional to I/i. Glassman [9] was perhaps
the first to use Zipf’s law to model the distribution of web
page requests, and several other authors have also applied
Lee Breslau and Scott Shenker are with the Xerox Palo Alto Re-
search Center, 3333 Coyote Hill Road, Palo Alto, CA 94304. Email:
{breslaulshenker} Qparc.xerox.com. Pei Cao and Li Fan are with the
Computer Science Department, University of WLsconsin, Madison,
WI 53706. Email: {cao]lfau}Clcs.wise.edu. Graham Phillips is with
the Cc)mputer Science Department, University of Southern California,
Los Angeles, CA 90089. Email: grahamQcatarina. usc.edu.
Zipf’s law to the distribution of web requests [5], [1]. How-
ever, several recent studies have investigated whether the
requests do indeed follow Zipf’s law and concluded other-
wise [16], [2].
One of our goals in this paper is to explore the applica-
bility of Zipf’s law to web requests. Using six traces from
proxies at academic institutions, corporations and ISPS,
we find that the distribution of page requests generally fol-
lows a Zipf-like distribution where the relative probability
of a request for the i ‘th most popular page is proportional
to I/ia, with a typically taking on some value less than
unity, The observed value of the exponent a varies from
trace to trace. That is, the request distribution does not
follow the strict Zipf’s law (for which a = 1), but instead
follows a more general Zipf-like distribution with varying
a. Moreover, we find that there is little correlation be-
tween the access frequency of a document and its size, and
the correlation between the access frequency of a document
and its rate of modification varies from very low to none,
depending on the traces. These results raise the possibility
that, for some purposes, one might be able to sufficiently
model web accesses by a simple model that assumes inde-
pendent references following a Zipf-like distribution and no
correlation between request frequency and response size or
rate of change.
In looklng at web proxy traces, researchers have also in-
vestigated how the hit-ratio depends, asymptotically, on
the cache size and the number of requests, and have exam-
ined the temporal locality of these request streams [4], [19],
[7], [10], [15]. Although various studies have used different
sets of traces, the following three qualitative asymptotic
properties have been identified:
● For an infinite sized cache, the hit-ratio for a web proxy
grows in a log-like fashion~ as a function of the client pop-
ulation of the proxy and of the number of requests seen
by the proxy. Cm et al. observed this property in Digi-
tal Equipment Corporation’s proxy traces [4], [14], Gribble
et al. observed this property in University of California at
Berkeley’s proxy traces [10], [11] and Duska et al. observed
this property in a number of traces from university proxies
and ISP proxies [7].
. The hit-ratio of a web cache grows in a log-like fashion
as a function of the cache size. Many web caching studies
reach this conclusion [1], [9], [4], [21], [10], [19], [5], [7].
. The probability that a document will be referenced k re-
quests after it was last referenced is roughly proportional to
l/k. That is, web traces exhibit excellent temporal local-
ity. Of the two studies that investigated temporal locality,
Rlzzo et al. observed this property in the web proxy traces
1That is, the hit-ratio growe as either the log, or as a small power,
of the argument. Given the coarseness of the data, it ie impoeeible to
distinguish between a logarithmic and a small power growth.
0-7803-5420-6/99/$10.00 (c) 1999 IEEE
IEEE IINFOCOM, VOL. XX, NO. Y, MONTH 1999 2
collected at University of Piss, Italy [19], while Cao et al.
observed this property in the Digital Equipment Corpora-
tion’s proxy traces [4], [14].
These observations were offered without an underlying
explanation. It is not clear whether these properties fol-
low certain inherent characteristics of web accesses or are
simply an artifact of the collection of traces studied. The
properties are useful for designing caching algorithms and
configuring proxy caches, and therefore it is important to
understand how general they are.
In the second portion of this paper, we show that the
asymptotic behavior of the cache hit-rate and temporal
locality are related to the Zipf-like nature of the request
stream. More specifically, we show that if one assumes
that web page requests are independent and the probability
that a page is accessed follows a Zipf-like distribution then
the three asymptotic properties listed above all follow. Al-
though the assumption that the requests are independent is
obviously an over-simplification, our results show that the
model is powerful enough to explain the three asymptotic
properties as observed in real proxy traces.
The rest of the paper is organized as follows, In Section II
we describe the trace data and the resulting frequency dis-
tribution of requests. Section III discusses the implications
of the Zipf-like behavior, with Section III-A describing the
simple model for page requests and Sections III-B, III-C
and III-D deriving expressions for cache hit-ratio and page
request interarrival-times. We analyze web cache replace-
ment algorithms in Section IV where we compare the LRU
and LFU page replacement policies. We conclude in Sec-
tion V with a short discussion of our results.
11. THE APPLICABILITY OF ZIPF’S LAW TO WEB
REQUESTS
SEVERAL prior studies have investigated the applica-tion of Zipf’s law to web accesses and arrived at differ-
ent conclusions.
. In 1994, Glassman et al. [9] traced web accesses from
Digital Equipment Corporation’s Palo Alto facilities and
gathered about 100,000 HTTP requests and found that the
request distribution fit Zipf’s law, O/i, quite well (where 0
is a normalizing constant).
. In 1995, Cunha et al. [5] gathered 500,000 web accesses
from the Computer Science Department at Boston Univer-
sity and observed that the requests follow an ~/i~ distri-
bution where a = 0.986, which is quite close to the true
Zipf’s law.
. In 1.996, Almeida et al, [1] showed that web accesses seen
by a web server follow Zipf’s law. However, the web ac-
cesses seen at a web server and those seen at a web proxy
are different, because the former includes requests from all
users on the Internet while the latter includes only those
users from a fixed group.
. In 1998, Nishikawa et al. [16] from Hitachi, Ltd, Japan
studied an access log of 2,000,000 requests and found that
the request distribution followed the Zipf-like distribution
fl/ia quite well, but with a = 0.75, which is rather far from
true Zipf behavior.
. In 1998, Almeida et al. [2] examined requests at a ma-
jor proxy cache in Brazil and concluded that the request
stream did not fit Zipf’s law.
There might be several reasons for the conflicting results,
including the fact that some of the traces are old and some
are quite short. Adding further to the confusion is the
phrase “Zipf’s law,” which in some papers refers to the f2/i
distribution, and in others refers to the Q/ia distribution
with a <1.
To address the issue, we study six traces from academic,
corporate and ISP environments, and examine whether the
request distribution follows O/i or f2/ia with O < a < 1.
We call f_l/i” with O < a < 1 a Zipf-like behavior, and
reserve the phrase Zipf’s law for the true O/i distribution.
The six traces are:
. DEC traces [14]: Digital Equipment Corporation web
proxy traces, servicing about 17,000 workstations. We use
a 7 day portion of the trace starting from August 29, 1996
and comprising 3,543,968 requests.
. UCB traces [11]: HTTP requests gathered from the
Home 1P service offered by UC Berkeley to its academic
community. We use an 18 day portion of the trace start-
ing from November 14, 1996 and comprising 1,907,762 re-
quests.
● UPisa traces [18]: HTTP requests made by the users in
the Computer Science Department in University di Piss,
Italy. We use a portion of a three month trace that includes
only HTTP GET requests and URLS that do not include
query strings. The trace includes 2,833,624 requests.
. Questnet traces [20]: a 7 day trace of HTTP requests
seen by the parent proxies at Questnet, a regional ISP in
Australia, starting from January 15, 1998. We extract all
successful GET requests as seen by the parent proxies. The
trace includes 2,885,285 requests.
. NLANR traces [17]: a one day trace of HTTP requests
to four proxy caches at the National Lab for Applied Net-
working Research, USA on December 22, 1997. We extract
successful GET requests, totaling 1,766,409 requests.
. FuNet traces [13]: a 10 day (around mid June, 1998)
trace of HTTP requests to proxies at FuNet, a regional
network serving the academic communities in Finland. The
trace contains 4,815,551 requests.
Our main observations are as follows:
● The distribution of web requests from a fixed group of
users follows a Zipf-like distribution, Q/im, very well. The
value of a varies from trace to trace, ranging from 0.64 to
0.83.
. The “10/90’’” rule (i.e. 90% of accesses go to 10% of
items), evident in program execution, does not apply to
web accesses seen by a proxy. The concentration of web
accesses to “hot” documents depends on a, and it takes
25% to 40% of documents to draw 70% of web accesses.
. There is low statistical correlation between the frequency
that a document is accessed and its size, though the average
size of cold documents (for example, those accessed less
than 10 times) is larger than that of hot documents (for
example, those accessed more than 10 times).
● The statistical correlation between a document’s access
0-7803-5420-6/99/$10.00 (c) 1999 IEEE
IEEE [NFOCOM, VOL. XX, NO. Y, MONTH 1999
--- DEC-Trace ~ UCB-Trace --- PISA-Trace
1~
1 10 100 1000 le+041e+051e+06
1000 m
a
:
100 ~ &
2
107
w
:
1~
1 “’”l “’”l -
1 10 100 1000 le+041e+05
Document Ranking Document Ranking
--- QuestNet-Trace --- NLANR-Trace
z
: [000 y
&
ii
100
%o
* 10 ~
1
1 10 100 1000 le+041e+051e+06
=tk
1000
100
10
1
-+ W ‘U”, -1-1 ‘n-l “*
1 10 100 1000 le+041e+051e+06
10000
1000
100
10
1
Document Ranking Document Ranking
Fig. 1. Frequency of document accesses versus document
TABLE I
VALUES OF a FOR EACH TRACE.
F,DEC I UPisa I FuNet I UCB I Questnet I NLANR().:77 0.78 0.83 0.69 0.73 0.64
frequency and its average modifications per request varies
from trace to trace, but is generally quite low.
The results are detailed in the following sections.
A. Is the distribution of web requests Zipf-like?
Figure 1 shows, for each of the six traces, the number of
times that a URL has been accessed versus the ranking of
the URL in the trace, where rank 1 is the most frequently
accessed URL. Note that both axes in the figure are in log
scale.
Frc,m the plots, one can observe that most of the curve
fits a straight line reasonably well. The straight line on the
log-log scale implies that the request frequency is propor-
tional~to l/za. The values of a for the six traces are shown
in Table I; they are obtained using MatLab’s curve-fitting
tool, excluding the top 100 documents. For traces from a
homogeneous environment, as in a corporation (DEC) or
academic department (Piss), a appears to be larger, cen-
tering around 0.8. For traces from a more diversified user
1 “’”’l ““”7 “’””l ~
1 10 100 1000 le+041e+05
10000
1000
100
10
1
Document Ranking
--- Funet-Trace
1 10 100 1000 le+041e+051e+06
Document Ranking
rank]ng.
a
&
J 0.6
r
—.— DEC-Trace
w
o ~ FuNet-Trace
~ 0.4
-+-- QuestNet-Trace
~ --&- NLANR-Trace
~ ~ Piss-Trace
8 0.2 ~ UCB-Trace
&
? I I I I I
0.0 0.2 0.4 0.6 0.8 1.0
Document Ranking
Fig. 2. Cumulative distribution of requests to documents.
population (UCB) or those that are filtered by first-level
proxies (QuestNet and NLANR), a appears to be smaller,
centering around 0.7.
Perhaps the biggest impact of a lies in the concentration
of web requests to hot documents. For Zipf-like distribu-
tions, the cumulative probability that one of the top k page
is accessed is given asymptotically by ~(k) = ~$=1 .fl/i” %
fM-a/(l – a). Because f2 % (1 – a)/Nl–”, where jV is
0-7803-5420-6/99/$10.00 (c) 1999 IEEE
IEEE INFOCOM, VOL. XX, NO. Y, MONTH 1999 4
TABLE II TABLE III
CORRELATIONCOEFFICIENTBETWEENTHE FREQUENCYOF ACCESSES CORRELATIONCOEFFICIENTBETWEENDOCUMENTCHANCERATE AND
TO A DOCUMENT AND ITS SIZE. ACCESS FREQUENCY.
EDEC UPisa I FuNet UCB \ Questnet NLANR DEC UPisa FuNet UCB Questnet \ NLANR0.04 -0.08 0.003 -0.04 I -0.02 -0.09 -0.19 -0.27 0.005 0.002 -0.03 -0.08
the total number of web documents, ~(k) % (k/IV)l-a. Be-
cause k/IV < 1 for all meaningful k, a larger a increases
@(k), meaning more requests are concentrated on a few hot
docwments.
We examine the the cumulative distribution of requests
to popular documents in each trace, Figure 2 shows the cu-
mulative probability of access for the top r’% of documents
in each trace. The figure shows that the top l% of the doc-
uments account for about 20% to 35% of all requests seen
by the proxy, and the top 10% of the documents account
for about 45% to 55% of all requests, However, it takes
25% to 40% of all documents to account for 70% of the
requests, and it takes 70?70to 80% of documents to account
for 90% of requests. In other words, the “10/90” rule, ev-
ident in program execution, unfortunately does not apply
to web accesses. This is why, in practice, web caches rarely
achieve hit ratios of 90Y0, and no satellite-based broadcast
scheme can reduce Internet traffic by an order of magni-
tude.
B. Correlation between access frequency and document size
A natural question is whether there is any correlation be-
tween the frequency of access to a document and its size.
The answer afFects the design of caching algorithms and
web lproxy benchmarks. Figure 3 shows the average size
of the documents that are accessed exactly n times in the
trace, with the x-axis showing n. Again, both axes are in
log scale. Due to space constraints we show results of three
traces; the rest are similar and can be found in [3]. The fig-
ure shows that there are many popular documents that are
larger than 15KB, which is the average size of documents
that are accessed only once. Furthermore, across n, there
does not seem to be strong correlation between document
size amd n, though the average size of popular documents
is smaller than that of unpopular documents.
We also calculated the correlation coefficient between the
access frequency and document size for the traces, shown
in Table II. The numbers show that the correlation, if any,
is weak and can be ignored.
C. Correlation between access frequency and change rate
Another question of interest is whether popular docu-
ments change less often than unpopular ones. The answer
affects designs of web cache consistency mechanisms [12].
Frc>mthe traces, we observe the changes in a document
by detecting changes in the last-modified-time of each re-
sponse or changes in the document size of each response.
Only two of our traces, DEC and UCB, come with the last-
modified-time information. For each document, we then
measure the “change rate” r as the ratio between the num-
ber of observed changes and the number of accesses. The
observed change rate under-estimates the actual change
rate, because multiple changes between requests are not
picked up by the trace. Because of this potential skew, we
do not measure such things as the number of changes per
day for web pages since these numbers would be mislead-
ing.
Figure 4 plots the average change rate of the documents
as a function of the number of times they are accessed.
Only the x-axis is in log scale. We show results of three
traces here; the rest are similar and can be found in [3]. The
graphs show that while many popular documents change
infrequently (for example, less than 10 user requests per
change), some popular documents change very frequently.
Thus, there is no strong evidence that popular documents
change infrequently. We again calculate the correlation
coefficient between the document change rate and its access
frequency. The results are shown in Table III. Though the
correlation coefficients vary depending on the traces, they
are small in general. Therefore, in the design of web cache
consistency schemes, it is best to assume that there is no
correlation between document popularity and its rate of
change.
D. Request distribution to web servers
We have also investigated the dktribution of requests to
web servers. Figure 5 shows the number of times that a
server has been accessed versus the ranking of the server in
the trace, where rank 1 is the most accessed server. Both
axes are in log scale. We show only three traces here, with
the rest in [3]. In the case of the UCB trace, the Zipf-
like distribution does not characterize server accesses. We
also found that no single web server contributes to most of
popular pages, and popular web pages are spread almost
evenly across hot web servers. For more details see [3].
III. IMPLICATIONSOF ZIPF-LIKE BEHAVIOR
wE now investigate the implications of the Zipf-likebehavior observed in the traces. First, we define a
simple model for web requests where the requests are inde-
pendent and distributed according to a Zip f-like behavior.
We then derive expressions for the hit-ratios and request
interarrival-times.
A. The model
Consider a cache that receives a stream of requests for
web pages. Let N be the total number of web pages in the
universe. Let PjV(i) be the conditional probability that,
given the arrival of a page request, the arriving request is
made for page i. Let all the pages be ranked in order of
0-7803-5420-6/99/$10.00 (c) 1999 IEEE
IEEE [NFOCOM, VOL. XX, NO. Y, MONTH 1999 5
● DEC-Trace ● UCB-Trace ● QuestNet-Trace
g 1000000 3
a)
~’:j +’~’g “*”@jl;~ “+%;
Q
Om
w
a ●
w
e
&
103
a%
)
b 10 J
a
L 10 q
u
$
,0
1 I I I I T
4 1 ,5I I I 1 I I I I .
1 10 100 1000 10000 1 10 100 1000 1 10 100 1000
#of References #of References #of References
Fig. 3. Averagesizeof a documentversusaccessfrequency.
. Dee-Trace ● UCB-Trace ● QuestNet-Trace
1 10 100 1000 10000 “ 1
#of References
10 100 1000 “
#of References
l.o -
●o@
0.8- .<
0.6-
%
● .
0.4- ●
0.2- .
0.0 :: r Jl!lll!,
1 10 100 1000
#of References
Fig.4. Change rate ofa document versus access frequency.
--- Dee-Trace ~ UCB-Trace —.— Quest-Trace
100000
110000
1000
P \
100
-i
i
\
I
Y
i io 100 1000 le~04
Sewer Ranking
10000
1000
100
10
1~
1000 le+04
Sewer Ranking
10000
1000
100
10
1
Sewer Ranking
Fig. 5. Frequency of server accesses versus server ranking.
0-7803-5420-6/99/$10.00 (c) 1999 IEEE
IEEE lNFOCOM, VOL. XX, NO. Y, MONTH 1999 6
their popularity where page i is the i’th most popular page.
We assume that P~(i), defined for i = 1,2,..., N, has a
“cut-off” Zipf-like distribution given by
PN(i) = ;,
where
{% ‘al
The true Zipf’s law [22] has a = 1 but in this paper
we consider a broader class of distribution functions with
exponents in the range O < a < 1. Each page request is
drawn independently from the Zipf distribution, so we are
neglecting any other source of correlations in the request
stream. We additionally assume that, over the course of
time, no pages are invalidated by the cache.
We acknowledge that this model is unrealistic because
it assumes that requests are independent. However, the
model is tractable, and our question here is whether the
model is sufficient to derive an understanding of the asymp-
totic properties of hit-ratios and request interarrival-times.
In the following three subsections, we calculate the hlt-
ratio for the cache in two limiting cases and also the
interarrival-tirnes in a limiting case.
B. Injinite cache, jinite request stream
We first consider the case where the cache has unlimited
storage, so that all previously requested pages remain in
the cache. In this case, we consider a finite request stream
of R requests, and wish to determine the probability that
the next request, the R + l’st request, is a request for a
page that already resides in the cache. The hit-ratio H(R)
can be calculated as follows. If the R + 1‘st request is for
page i then the probability that this page is in the cache is
given by (1 – (1 – PN(i))R). Thus, we have:
H(R) = ~P~(i) (1 – (1 - PN(i))R) (1)
i= 1
For a = 1 the asymptotic behavior of the hit-ratio is
H(R) N in R, while for other values of a the asymptotic
behavior of the hit-ratio is H(R) w R(*-lJ. This asymp-
totic behavior can be seen by approximating the function
~(i) ==(1 – (1 – ~) R), for 1< R < N, by:
{
1, ifia ~ RQ
f(i) = O, otherwise
Then we have
Fe]: a = 1, H(R) w O ln(Rfl), while for O < a < 1,
H(R:I s &( RQ)&l). Note that when R > N this
approximation is no longer valid because H(R) must ap-
proach unity while these expressions diverge for large R.
H(R)
●*”+
0.5 - ‘*S
.*” fi”40~” o●*fo%o
“: ~p 0
* .9* ~
0.2 -e : go Obo
u
o~~; llEC trace o
0.1 -:”
Questnettrace o
NLANR tram o
UPisatrace ●
[1 UCBtrsce ~
~Nettrsce *
0.05 I ! ,
103 104 105 106 107 108
numberofrequests,R
Fig. 6. Hit-ratio H(R) as a function of the number of requests.
TABLE IV
VALUESOF (1 FROM LINEARFIT OF 10gH(R) VERSUS ]Og R.
DEC I UPisa I FhNet I UCB I Questnet I NLANR
0.83 0.84 0.84 0.83 0.88 0.90
This result that the hit-ratio grows logarithmically or like
a small power is qualitatively consistent with previously
observed behavior [10], [4], [7].
Figure 6 shows the hit-ratio H(R) as observed in the
traces as a function of R. The data for each trace on
this log-log plot is roughly linear, thereby suggesting that
H(R) = R@ for some /3 (where the power varies from trace
to trace). We fitted each of these log-log data sets to a
straight line to obtain an estimate for ~. We then used
the fact that the model predicts that H(R) w R(*-l) to
compute a = &. Table IV displays these a values. The
agreement with the a values computed directly from the
page request distribution (in Table I) is good, although the
Questnet and NLANR results are not as accurate as the
others.
C. Finite cache, injinite request stream
In this section we consider a finite cache with a capacity
of C web pages subject to an infinitely long request stream.
We assume that the cache can hold C web pages regardless
of the size of each web page. Furthermore, we assume that
the cache holds the C’ most popular pages as indicated by
the ordering i. This ordering is determined by measuring
the request frequency for each page, which is equivalent to
assuming that the cache has a Perfect-LFU page removal
policy (s~e Section IV).
We are interested in the asymptotic
which is given by:
hit-ratio H(C),
In the case a = 1, then asymptotically H(C) = in C, and
for O < a <1, then asymptotically II(C) % Cl-”. This
result is qualitatively consistent with previously observed
behavior that the hit-ratio increases logarithmically or as a
0-7803-5420-6/99/$10.00 (c) 1999 IEEE
IEEE [NFOCOM, VOL. XX, NO. Y, MONTH 1999 7
H(C)
-,3.5 . :*f *’*
~Q
~~ooon~
9
-1 -
●*”*Bi$
0 Do
0
~*9* ‘*go
-1.5 - .0 ;0
J*OD
-2 -ODD DEC trzce .
.
0 ❑ “
Q.estnet trzce o
NLANR trzce ❑
-2.5 - ‘b UP1sa trzce ●
[ID UCB trzce P
-3
WNet trscs *, , , ,
8 10 12 14 16 18
ccxheSize,C
d(k)
1, 1 I 1 1 I I I I 1
IO-5 -
0
~~-lo -
iv=lo@,. =l.o —
~’-15 - N = 108,a = 1.0
N=106, ca=0.8 —
DEC trace o
Questnet trzce o
NLANR trsce ❑
, “-20 , , ,--
1 10 102 103 10’ 10’ 106 107 108 109
number of rsquests, k
Fig. 7. Hit-ratioH(C) ss a functionof cachesize. Fig. 8. Distributionof requestinterarrival-times,d(k).
TABLE V
VALUESOF CI FROM LINEAR FIT OF 10g H(C) VERSUS log C. page requests are independent, we find that
E,D13C I UPisa I FuNet I UCB \ Questnet I NLANR d(k) = ~ (PN(i))2 (1 - PN(i))k-l (2)0.75 0.72 0.78 0.66 0.76 0.69 ‘i=1
For a = 1 we have O E+& and therefore2
small power as a function of cache size [1], [9], [4], [21], [10],
[19], [5], [7]. These references do not claim any particular
form for the asymptotic behavior, but their data appears
to grow in a log-like fashion in the asymptotic regime.
Figure 7 displays the hit-ratio for the various web cache
traces on a log-log plot. Note that some of the graphs for
the traces flatten out for large R. This behavior is expected
because, for finite sized traces, the hit-ratio will reach a
maximum and then remain constant when the cache size
becomes larger than the trace file. Thus, this flattening out
behavior is a limitation of the size of the trace file rather
than an indication of the true asymptotic behavior.
The hit-ratio shown on the log-log scale is roughly linear.
As with the H(R) data, this suggests that II(C) % C’~ for
some @ (where the power varies from trace to trace). Using
the prediction that H(C) N C1-a, we computed a linear
fit of each log-log data set to find /3 and then computed
a = 11– ~. When fitting the straight line we excluded all
data with R >106 to reduce the limitation of the trace file
size. The a values are shown in Table V. The agreement
with the a values computed directly from the page request
distribution (in Table I) is remarkably good. Thus, the
simple analytical model has been successful in predicting
the asymptotic behavior of H(R) and H(C).
D. Page request interam”val-times
We now investigate the distribution of times between
requests for a given page.
Let, us consider an infinite arrival stream and consider
a request for a given page i. The quantity of interest is
the probability distribution d(k) that the next request for
that page is k requests later (i.e., that the request for page
i is followed by k – 1 requests for pages other than page
i, followed by another request for page i). Assuming that
d(k).&((l-&)k-(l-&)k)
Note that for ~ln~ > k > lnlV, d(k) = l/(klnlV).
For O < a <1 the asymptotic behavior of this expression
is less tractable, but as shown in Fig. 8 the behavior in the
intermediate regime IVIn N >> k >> in N is qualitatively
similar to the a = 1 case, but with different slopes in the
linear regime. The model’s predictions, in the intermediate
regime, are qualitatively consistent with data observed at
operational web servers [19], [4].
We have also examined the request interarrival behavior
in our traces. Figure 8 shows a plot of the probability dis-
tribution for page request interarrival-times d(k) produced
by our model and the distribution for three cache traces (we
did not show the remaining three traces to keep the graph
readable). The agreement between the simple model and
the trace data is quite good in the intermediate regime.
IV. CACHE REPLACEMENTALGORITHMS
WE next consider whether the simple model intro-duced in the previous section can be used to improve
cache replacement strategies. The model that we have dis-
cussed so far is called an independent reference model [8]
in the early operating system paging studies [6]. It is well
known in the operating system caching community that if
(i) the requests are independent and have a fixed proba-
bility and (ii) the pages have the same size, then the op-
timal replacement algorithm is to keep those pages with
the highest probabilities in the cache [8]. In practice, an
online algorithm detects those documents by keeping track
of the number of references to each document and keeping
‘The approximation for d(k) is made by replacing the sum with an
integral in equation (2), substituting PN (i) = Q/i, then substituting
u = 1 – Q/i and finally noting that du = fl/i2di.
0-7803-5420-6/99/$10.00 (c) 1999 IEEE
IEEE JNFOCOM, VOL. XX, NO. Y, MONTH 1999
0.501 Perfect-LFU A. . . . . . . . . . . . . LRU
0.00 I I I
0.100 1.000 10.000
~he Size (% of Total Bytes)
—- –+(---- In-Cache-LFU ---- +----- GD_Size
o.ioo 1.000 10.000
Cache Size (% of Total Bytes)
4
0. ioo 1.000 10.000 o.ioo 1.000 lo.boo
Cache Size (’Y. of Total Bytes) Cache Size (% of Total Bytes)
DEC UCB
-1 I I I
0.100 1.000 10.000
Cache Size (% of Total Bytes)
o.ioo 1.000 10.000
Cache Size (% of Total Bytes)
QuestNet
Fig. 9. Hit-ratio and byte hit-ratio for four algorithms for a DEC, UCB and QuestNet traces,
those documents with the highest reference count in the
cache. In other words, the best online algorithm under the
independent reference model is the Least-Ilequently-Used
(LFU) algorithm.
However, there are two versions of LFU that are of-
ten confused in the literature: In-Cache-LFU, and Perfect-
LFU. To make a clear distinction between the two policies,
Perfect-LFU remembers page counters even when a page
is evicted from the cache, while In-Cache-LFU removes
the page counter together with the evicted page. Clearly,
Perfect-LFU incurs more overhead and is less practical than
In-Ca,che-LFU.
The question we wish to answer is: Which of the four re-
placement algorithms—Perfect-LFU, In-Cache-LFU, LRU
and GD-Size--performs the best in terms of hit-ratio?
Note that LRU is the most widely-used web cache replace-
ment algorithm, while GD-Size is a new algorithm that
takes both document size and locality into account and was
shown to outperform existing algorithms in terms of hit-
ratio [4]. We answer the above question using trace-driven
simulations.
Figure 9 shows the hit-ratios and byte hit-ratios for the
four replacement algorithms for the DEC, UCB and Quest-
Net traces. Results from other traces are similar to those
in the figure.
Figure 9 shows that, as predicted by the independent
reference model, Perfect-LFU performs best in terms of
byte hit-ratios in most cases. GD-Size still performs best
in terms of hit-ratios for small cache sizes because GD-Size
favors small documents over large ones. When cache sizes
are large, Perfect-LFU performs comparably to GD-Size
in hit-ratio and much better in byte hit-ratio. The fig-.
ure also shows that In-Cache-LFU performs the worst and
consequently is a poor choice for web cache replacement
algorithms.
The main drawback of Perfect-LFU is that it requires
additional space to maintain the counts for documents that
are evicted from the cache. In addition, it fails to take
document size into account.
Our goal is not the design of replacement policies, but
rather to observe that if temporal locality (due to correla-
tions between references) is the dominant effect then LRU
performs the best. However, because LRU did not perform
as well as Perfect-LFU, it may suggest that the tempo-
ral locality effects may not be important when analyzing
qualitative aspects of web caching performance.
For quantitative predictions of web caching performance,
it may be important to consider correlations in the request
stream. In particular, Almeida et al. compared plots of
miss-ratio for a synthetic workload having a Zipf distri-
bution against plots of miss-ratio for real workloads and
Guncluded *hat the Zipf model was inaccurate because it
did not capture the locality of reference in the real request
stream [1]. In this paper we looked at the asymptotic prop-
erties of the hit-ratio and request interarrival-times, and
perhaps in the asymptotic regime the correlations focused
on in [1] are not so relevant.
0-7803-5420-6/99/$10.00 (c) 1999 IEEE
IEEE INFOCOM, VOL. XX, NO. Y, MONTH 1999
V. DISCUSSION
IN this paper we first showed evidence that web requestsfollow a Zipf-like distribution. We then introduced a
simple model for web requests, where requests are indepen-
dent and distributed according to a Zipf-like distribution,
and showed that this simple model can explain the asymp-
totic behavior for three properties that are observed in real
web cache traces. Our results suggest that these properties
found in many studies are perhaps inherent to web access
streams and not an artifact of the traces studied.
Our results also suggest that a simple model for web re-
quests may be sufficient to understand certain asymptotic
properties of cache performance. Our model has many lim-
itations. For instance, the model does not consider docu-
ment modifications, nor does it consider the cache’s re-
placement policy, both of which no doubt play an impor-
tant role in a cache’s performance. Nonetheless, we think
the simple model presented here may be worthwhile for
studying the asymptotic behavior of various quantities. We
are currently trying to improve the model and gather more
traces to validate it.
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
REFERENCES
Virgilio Almeida, Azer Bestavros, Mark Crovella, and Adri-
ana de Oliveira. Characterizing reference locality in the
WWW. In IEEE International Conference in Parallel and
Lktributed Information Systems, Miami Beach, Florida, USA,
December 1996. http: //www.cs.bu.edu/groups/oceans/papers/
Home. html.
Virgilio Augusto F. Almeida, Marcio Anthony G. Ce-
sirio, Rodrigo Fonseca Canado, Wagner Meira Junior, and
C!ristina Duarte Murta. Analyzing the behavior of a
proxy server in the light of regional and cultural is-
sues. http: //www.anades.dcc. ufmg.br/paperSubmetidos/ web-
cache/cultural/, 1998.
Lee Breslau, Pei Cao, Li Fan, Graham Phillips, and Scott
Shenker. Web caching and zipf-like distributions: Evidence
and implications. Technical report, University of Wieconsin-
Madison, Department of Computer Science, 1210 West Dayton
Street, July 1998. http: //www.cs.wisc.edu/ ”cao/papers/zipf-
implications. html.
F’ei Cao and Sandy Irani. Cost-aware WWW proxy caching
algorithms. In Proceedings of the 1997 USENIX Symposium
on Internet Technolog~ and S@ems, pages 193–206, December
1997. http: //www.cs.wisc.edu/”cao/publications.html.
Carlos Cunha, Azer Bestavros, and Mark Crovella.
Characteristics of WWW client-baaed traces. Techni-
cal Report TR-95-O1O, Boston University, Computer
Science Dept., Boston, MA 02215, USA, April 1995.
http: //www.cs.bu.edu/groups/oceans/papers/Home.html.
F’eter J. Denning. Working sets past and present. IEEE Trans-
action on Software Engineering, SE6(1):64–84, January 1980.
Bradley M. Duska, David Marwood, and Michael J. Feeley. The
measured access characteristics of world-wide-web client proxy
caches. In Proceedings of USENIX Symposium on Internet Tech-
nology and Systems, December 1997.
Edward G. Coffman, Jr. and Peter J. Denning. Operating Sys-
tems Theory. Prentice-Hall, Inc., 1973.
Steven Glaasman. A caching relay for the world wide
web. In First International Conference on the World-
Wide Web, CERN, Geneva, Switzerland, May 1994. http://
wwwl.tern.ch/WWW94 /PrelimProcs.html.
Steven Gribble and Eric Brewer. System design issues for inter-
net middleware services: Deductions from a large client trace.
In Proceedings of the 199’7 Useniz Symposium on Internet Tech-
nologies and Systems, Monterey, California, USA, December
1997. http: //HTTP. CS.Berkeley.EDU/ -grabble/.
Steven Gribble and Eric Brewer. UCB home 1P HTTP
traces. http: //www.cs.berkeley.edu/ gribble/traces/index. html,
June 1997.
[12]
[13]
[14]
[15]
[16]
[17]
[18]
[19]
[20]
[21]
[22]
9
James Gwertzman and Margo Seltzer. World-wide web cache
consistency. In Proceedings of the 1996 USENIX Technical Con-
ference, San Diego, CA, January 1996.
Pekka Jarvelainen. Personal communication. mailto:pj~csc.fi,
1998.
T. M. Kroeger, J. Mogul, and C. Maltzahn. Digital’s web
proxy traces. ftp://ftp.digital. com/pub/DEC/traces/proxy/
webtraces.html, August 1996.
Thomas M. Kroeger, Darrell D. E. Long, and Jeffrey C. Mogul.
Exploring the bounds of web latency reduction from caching and
prefetching. In Proceedings of USENIX Symposium on Internet
Technology and Systems, December 1997.
Norifumi Nishikawa, Takafumi Hosokawa, Yaauhide
Mori, Kenichi Yoshidab, and Hiroshi Tsujia. Memory-
based architect ure for distributed Www caching
proxy. In The 7th WWW Conference, April 1998.
http: //www7.conf.au/programme/fullpapers/l928/
com1928.htm.
National Lab of Applied Network Research. Sanitized access log.
ftp://ircache.nlanr. net/Tkaces/, July 1997.
Luigi Rlzzo. Web proxy traces.
http: //info.iet .unipi.it/ luigi/proxy-traces/, May 1997.
Luigi Rizzo and Lorenzo Vicisano. Replacement poli-
cies for a proxy cache. Technical Report RN/98/13,
University College London, Department of Computer Sci-
ence, Gower Street, London WCIE 6BT, UK, 1998.
http: //www.iet .unipi.it/ ‘luigi/caching. ps.gz.
Julianne Weekers. Pereonal communication.
mailto:julianne@cc. uq.edu.au, January 1998.
Stephen Wllliarns, Marc Abrams, Charlee Standridge, Ghaleb
Abdulla, and Edward Fox. Removal policies in network caches
for WWW documents. In ACM SIGCOMM ’96, August 1996.
http: //www.xm.org/sigcomm/sigcomm96/program.html.
George Kingsley Zipf. Relative frequency as a determinant of
phonetic change. Reprinted from the Harvard Studies in Claasi-
cal Philology, Volume XL, 1929.
0-7803-5420-6/99/$10.00 (c) 1999 IEEE

