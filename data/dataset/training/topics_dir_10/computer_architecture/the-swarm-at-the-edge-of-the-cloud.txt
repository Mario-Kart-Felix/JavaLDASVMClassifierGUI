The Swarm at the Edge
of the Cloud
h OVER THE PAST two decades, there has been a
growing realization that large numbers of sensors
dispersed into the environment can help to solve
societal-scale problems. These sensory swarms (as
they were called by Jan Rabaey in a keynote talk at
the Asia and South Pacific Design Automation
Conference in 2008) can be wirelessly
interconnected and interact with the
cyber cloud, and offer an unpre-
cedented ability to monitor and act
on a range of evolving physical quan-
tities. Such pervasive observations and
measurements enable unprecedented
learning and modeling of the physical
world under dynamically changing
conditions.
At the core of all this are advances in design and
manufacturing technologies, which have enabled a
dramatic reduction in cost, size, and power con-
sumption of a variety of sensing and actuation de-
vices, along with the familiar improvements in
computation, storage, and wireless communication.
Industry observers predict that by 2020 there will be
thousands of smart sensing devices per person on
the planet (yielding a ‘‘tera-swarm’’); if so, we will be
immersed in a sea of input and output devices that
Edward A. Lee, Jan Rabaey, Björn Hartmann,
John Kubiatowicz, Kris Pister,
Alberto Sangiovanni-Vincentelli,
Sanjit A. Seshia, John Wawrzynek, and
David Wessel
University of California at Berkeley
Tajana Simunic Rosing
University of California at San Diego
David Blaauw, Prabal Dutta, and Kevin Fu
University of Michigan
Carlos Guestrin and Ben Taskar
University of Washington
Roozbeh Jafari
University of Texas at Dallas
Douglas Jones
University of Illinois at Urbana Champaign
Vijay Kumar, Rahul Mangharam,
and George J. Pappas
University of Pennsylvania
Richard M. Murray
California Institute of Technology
Anthony Rowe
Carnegie Mellon University
Editor’s notes:
This invited paper provides an overview of this area. The paper explains
how to use sensors as the eyes, ears, hands, and feet for the cloud. This
paper describes the opportunities and challenges when integrating sensors
and cloud computing.
VYung-Hsiang Lu, Purdue University
IEEE Design & Test2168-2356/14 B 2014 IEEE Copublished by the IEEE CEDA, IEEE CASS, IEEE SSCS, and TTTC8
Embedded Systems and Cloud Computing
Digital Object Identifier 10.1109/MDAT.2014.2314600
Date of publication: 01 April 2014; date of current version:
22 July 2014.
are embedded in the environ-
ment around us and on or in
our bodies.
The concept of wireless sen-
sor networks is not new. Sensor-
based systems have been pro-
posed and deployed for a broad
range of monitoring (and even
actuation) applications. But the
vast majority of those are target-
ing a single application or func-
tion. The potential of swarms
goes far beyond what has been
accomplished so far. When re-
alized in full, these technologies
will seamlessly integrate the
‘‘cyber’’ world (centered today
in ‘‘the cloud’’) with our physi-
cal/biological world, effectively
blurring the gap between the
two. We refer to such networked
sensors and actuators as the
‘‘swarm at the edge of the
cloud,’’1 and the emerging glob-
al cyber–physical network as the ‘‘TerraSwarm,’’
encompassing trillions of sensors and actuators
deployed across Earth.
TerraSwarm applications, which we call
‘‘swarmlets,’’ are characterized by their ability to
dynamically recruit resources such as sensors, com-
munication networks, computation, and information
from the cloud; to aggregate and use that informa-
tion to make or aid decisions; and then to dynam-
ically recruit actuation resourcesVmediating their
response by policy, security, and privacy concerns.
Achieving this vision will require a three-level
model, shown in Figure 1. The cloud backbone will
offer extraordinary computing and networking
capability, along with global data analytics, access,
and archiving. Mobile battery-powered personal
devices with advanced capabilities will connect
opportunistically to the cloud and to nearby swarm
devices, which will sense and actuate in the physical
world.
Ubiquitous connectivity between the cloud and
mobile devices such as smartphones is almost a
reality today. Through common and general
programming and communication interfaces (e.g.,
‘‘app’’ programming and TCP/IP) this connectivity
has turned the cloud+mobile universe into a flexible
platform enabling millions of applications that we
could not have imagined a few short years ago.
These parts of the system will continue to develop
rapidly under large-scale commercial investment.
The swarm level, however, because it directly
interacts with the physical world, presents chal-
lenges that demand forward-looking research. The
potential payoff of such research is a system that can
fundamentally change and empower human inter-
action with the world.
Current ‘‘smart’’ applications, such as smart
homes, smart grids, and battlefield management
systems, typically address a single application on a
dedicated set of resources. While this approach
provides performance guarantees and reliability, it
prevents economies of scale, and, more importantly,
it prevents the explosion of possibilities that results
from sharing data and devices across applications.
The TerraSwarm vision cannot be achieved by a
single vendor providing the components as an in-
tegrated system. What is needed instead is the
swarm equivalent of the common, general, ‘‘app’’
framework that has recently enabled smartphones
1This phrase was coined by Jan Rabaey in a keynote talk at
the VLSI Circuits Symposium in Kyoto, Japan, June 15, 2011 [8].
Figure 1. Three-tiered structure of the emerging information technology
platform [9].
May/June 2014 9
and similar devices to rapidly deploy and serve a
vast range of often unanticipated applications by
recruiting resources and composing services. The
swarm will never achieve its potential without a
‘‘SwarmOS’’ on which such swarmlets can be built
and composed by millions of creative inventors.
While open architectures with dynamically re-
cruitable resources can open up significant security
and privacy risks, they can also make systems more
efficient (through sharing of resources), more
resilient (through dynamic reconfiguration leverag-
ing redundant resources), and more capable,
enabling applications we have not yet invented or
that cannot yet be realized. Adaptability, reliability,
robustness, and security are essential ingredients to
be considered from the start.
When the web was first launched, few people
would have predicted the astounding range of appli-
cations that it would enable. It has profoundly
changed the way people interact and behave, how
businesses are run, and how information is ex-
changed. A similar revolution happened with the
introduction of mobile platforms such as Android
and iOS. We believe that swarm-based systems can
have at least asmuch impact. Enabling this requires a
collaborative environment in which to address the
TerraSwarm’s extraordinarily wide range of challenges
and opportunities. By viewing key challenges through
many different eyes, we expect to be able to generate
a broad range innovative ideas and solutions.
The TerraSwarm challenge
While the TerraSwarm vision holds enormous
promise, it also poses a number of daunting chal-
lenges. The technical challenges are defined by the
following unique combination of characteristics of
TerraSwarm systems:
h large scale: the swarm comprises a vast number
of nodes generating corresponding ‘‘big data’’;
h distributed: components of the swarm are net-
worked, separated physically and/or temporally;
h cyber–physical: the swarm fuses computational
processes with the physical world;
h dynamic: the environment evolves continually;
h adaptive: the system must adapt to its dynamic
environment, and thus the distinction between
‘‘design-time’’ and ‘‘runtime’’ is blurred;
Figure 2. Map of the technical problem space of the TerraSwarm.
IEEE Design & Test10
Embedded Systems and Cloud Computing
h heterogeneous: swarm components are of vari-
ous types, requiring interfacing and interopera-
bility across multiple platforms and models of
computation.
Given these characteristics, a sketch of the technical
problem space facing a scalable and universal
realization of the vision is shown in Figure 2. The
challenges and opportunities include the following.
h Swarm systems rely on vast numbers of heteroge-
neous sensors that are generating massive
amounts of data. How will these data be ac-
cessed, processed, stored, and interpreted? First,
we observe that data are more valuable when
aggregated than when isolated. The emergence of
the social networking industry is a case in point.
Second, we observe that data need not be com-
municated or stored if they can be predicted from
models. If such models can be learned in an un-
supervised way, then the TerraSwarm can be re-
flective, monitoring its own health, as well as the
health of physical devices and humans that it
interacts with.
h When data are used for security, or safety-critical
systems, how can we verify that they are accurate
(i.e., that the sensors are functioning properly),
that they have not been compromised (i.e., sec-
ure from deliberate or inadvertent tampering),
and that their source is known? We observe that
today’s mechanisms for identity and key manage-
ment likely will not scale well to the TerraSwarm.
The emergence of ubiquitous clock synchro-
nization (with IEEE 1588 and 802.1AS for wired
and wireless networks) offers unique new op-
portunities for scalable security mechanisms,
since stable local clocks provide a natural root
for trust.
h TerraSwarm applications are generally cyber–
physical systems that involve physical actuation
and closed-loop control, and hence will have
stringent testing and verification requirements.
But they will also be highly dynamic, adapting
their structure and recruiting resources on the fly.
How can testing and verification extend to conti-
nuously evolving systems? How can we ensure
that effects on the physical world are safe? We
observe that online verification of adaptive and
evolving systems will require lightweight formal
methods, something that remains elusive today.
h Swarms and swarmlets that dynamically recruit
resources will compete for those resources. How
will costs (energy, opportunity cost, and capital
investment) be managed? How can we ensure
that new deployments do not disrupt established
services? We observe that networking innovations
such as audio video bridging (AVB, now called
time-sensitive networking, or TSN) offer more
control over quality of service than has been
available in the past on open public networks, but
how the control gets exercised in an open and
competitive world remains an open question.
h How will we address data privacy and safety? We
observe that, counterintuitively, privacy may be
easier to preserve with more data than with less,
using, for example, the notion of differential
privacy [2].
It is worth observing that nearly every science
and engineering university and a broad fraction of
industry are engaged in activities that are either
directly or peripherally related to swarm systems,
often under the heading of the Internet of Things
(IoT), the Internet of Everything, Industry 4.0, the
Industrial Internet, Smarter Planet, Machine to Ma-
chine (M2M), TSensors (Trillion Sensors), or The
Fog (like The Cloud, but closer to the ground). Re-
levant research areas include sensor technologies,
actuators, semiconductors, communication sys-
tems, control systems, robotics, data analysis, data
mining, modeling and simulation, operating sys-
tems, energy-efficiency technologies, machine
learning, data security and encoding, and cyber–
physical systems, among others. Thus far, there has
not been a coherent effort to bring together these
disparate research efforts to serve swarm-based
application development. Yet the swarm will only
reach its full potential when it becomes a unified,
standardized platform enabling the unencumbered
development of many swarm applications.
TerraSwarm research
To address the challenges of the TerraSwarm, the
authors launched the Berkeley Ubiquitous Swarm-
Lab,2 soon followed by the nine-university cooper-
ative TerraSwarm Research Center.3 The latter is
organized along four themes. The first of these is
focused on the realization of a ‘‘Smart City’’ scenario,
2http://swarmlab.eecs.berkeley.edu
3http://terraswarm.org
May/June 2014 11
developing applications that drive and test the
technical developments of the other three themes.
Technology development is structured around the
three additional themes: platform architectures and
operating systems; services, applications, and cloud
interaction; and methodologies, models, and tools.
In their totality, these four research themes cover the
broad range of TerraSwarm technical problems
identified in Figure 2.
Smart cities
Cities are complex ecosystems, and their effective
functioning has enormous impact on our quality of life
and economic health. They stand to benefit from
swarm technology, probably not through a utopian
top–down authority-driven unified design,4 but rather
from the emergence of many of individual creative
applications that leverage the swarm. We focus on two
scenarios: a city during normal operation, and a city
during natural or man-made disasters (such as
accidents, infrastructure failures, earthquakes, or
terrorist attacks). We call this the ‘‘tale of two cities.’’
In normal operation (the best of times), a swarm-
enabled city not only helps run the infrastructure
more effectively but also empowers its occupants by
providing more effective interfaces, better mobility,
better information, and experiences in immersive
realities in a way not possible before. For example,
maintenance crews may recruit sensors from under-
ground utilities, and combine that sensor data with
data from pipe-crawling robots and from the cloud.
They can use this information to guide maintenance
operations using overlay displays in a manner simi-
lar to what televised sporting events use, based on
contextual 3-D information.
A key feature is the ability to aggregate information
from multiple sources, using this information, for
example, to reroute traffic, help citizens to find their
way through the city or accomplish their chores, and
identify health and safety threats (e.g., caused by air
pollution). Recognizing the limitations of keyboards
and screens as user interfaces, swarmlets might recruit
local resources such as cell phones, nearby displays,
or audio systems to interact with humans.
In the worst of times, in case of a disaster such as
caused by utility failures, earthquakes, or terrorist
attacks, the same systems may facilitate communi-
cation, find loved ones, mobilize response teams,
and deploy robots to hazardous areas. Many swarm
devices will be wireless, battery powered, and ener-
gy scavenging, offering the possibility of unpre-
cedented robustness in the face of infrastructure
collapse. The dynamic nature of the swarm, where
resources come and go, implies that swarmlets must
be, by design, adaptive, making them, therefore, by
design, more robust to failures of components.
A critical research challenge is how to recruit and
compose heterogeneous resources, how to dynamically
adapt applications to changing resources and conten-
tion for resources, and how to share resources without
compromising safety, security, or privacy.
Platform architectures and operating systems
In a TerraSwarm system, swarmlets compete for a
variety of resources, including sensors, actuators, net-
works, computing resources, storage, energy, and
wireless spectrum. To unleash the creativity of millions
of swarmlet developers, we need to create a stable
architecture that can dynamically balance the compet-
ing needs of distributed concurrent applications so that
functionality, robustness, utility, and quality of service
are guaranteed. We call the systems support for this
adaptive, resource-aware architecture the ‘‘SwarmOS,’’ a
highly distributed infrastructure that touches every
node in the system. Its purpose is to efficiently allocate
resources based on complex optimization strategies,
while maintaining appropriate security and privacy.
The SwarmOS must support continual reconfig-
uration of applications and of its own service defi-
nitions without ever having the luxury of a clean
restart. It must also support richly heterogeneous
components including sensors, actuators, networks,
and computers, and it must tolerate appearance or
disappearance of resources. It must be distributed
and mobile, orchestrating actions across heteroge-
neous networks.
Swarmlets are interconnected graphs of services,
likely constructed by leveraging ideas from service-
oriented architecture (SOA) such as loose coupling,
service abstraction, discoverability, and composa-
bility. Service interfaces provide utility guarantees
through service level agreements or contracts. So
that swarmlets can be adaptive, health monitoring of
the components, anomaly detection, and well-
defined lifetimes for service-level agreements
(SLAs) need to be provided by the SwarmOS.
A few of the services provided by a SwarmOS
giving swarmlets access to resources are shown
4For an excellent critique of such top–down utopian
visions, see [4].
IEEE Design & Test12
Embedded Systems and Cloud Computing
in Figure 3. One key insight that has emerged
early in the project is that virtualization of com-
puting resources is not necessarily in conflict with
time-sensitive and real-time services, though more
work is needed to manage quality of service in net-
works (leveraging protocols such as AVB and pre-
cision time protocols) and temporal isolation in
processors. It has also become clear that simulation
models will need to be integrated with deployed
systems (a concept we call ‘‘swarm-in-the-loop simu-
lation’’) in order to evaluate how services adapt in
times of stress. In addition, the SwarmOS will need
to embrace emerging and established mechanisms,
including HTTP and REST, CoAP, XMPP, The Thing
System (TTS), and many others.
The security of information, actuation, and brok-
erage is essential to the success of the TerraSwarm
vision. For the leaf nodes of the TerraSwarm sys-
tem (the sensors and actuators), it is important
that security mechanisms be built-in without be-
coming an undue energy burden. This leads to a
need to develop energy-efficient hardware sup-
port for encryption/decryption, authentication, and
hardware-enforced key management.
Services, applications, and cloud interaction
The TerraSwarm vision is one of composable
services that can be dynamically recruited by appli-
cations. Formally, applications are defined as dyna-
mic, distributed graphs of connected services. Both
‘‘dynamic’’ and ‘‘distributed’’ are important here; ap-
plications persist even as the individual components
that comprise these applications change. This view
elevates the concept of an integrated modular archi-
tecture (IMA), today’s target for systems-of-systems
design, from the system level to the enterprise level,
and augments it with discovery, data aggregation,
and runtime adaptation.
From the user perspective, the TerraSwarm pro-
vides (contextual) awareness, enabled by a dynam-
ically changing mixture of local and remote swarm
sensors. Adaptive services will exploit these devices
Figure 3. A few of the services provided by a SwarmOS giving Swarmlets access to resources.
May/June 2014 13
to improve accuracy and quality for the user. Ac-
tuators, such as mobile robots, can be used to place
sensors and networking capability where needed.
Ensuring that such adaptive services remain
effective, efficient, and safe under dynamic re-
structuring is a challenging control problem. The
TerraSwarm vision is to decentralize the design of
such systems, improving their robustness and mak-
ing them more adaptable and opportunistic. Control
strategies will be synthesized on the fly from formal
goal specifications and constraints (e.g., safety con-
straints), a vision we call control as a service. Formal
methods will ensure that constraints are enforced as
the application adapts.
A central challenge to be overcome is the imba-
lance between the massive amounts of information
that could be collected and the time-sensitive inter-
ests and needs of the user(s). A naive approach is to
collect and store all data, and have cloud-based
services distill the information for user consump-
tion. But the most interesting services will need the
right (contextual) data at the right time and the right
place. Closed-loop cyber–physical interactions will
not tolerate the latencies incurred by cloud-based
archiving and indexing. Moreover, the vast data
flood that will emerge from the TerraSwarm make
this naive approach far too costly, even with huge
advances in storage technology. A smarter approach
is the use of data to build and refine models of the
data sources that, in effect, learn the normal be-
havior of the data source. Only the anomalous data,
not predicted by the model, require a reaction. A
useful and reasonable reaction might be, for exam-
ple, data summarization, where only significant
events are presented to human observers.
As with social networks and information search
technologies, the cloud participates by aggregating
data from a multiplicity of sources, something not
possible on a single physical device, no matter how
much computation and memory capability it has.
The cloud is not just a computation and memory
resource; it is an information aggregator and a ser-
vice synthesizer. Data aggregation allows us to shift
feedback control from the system level to the enter-
prise level. Imagine, for example, fleets of vehicles
whose aggregated sensor data are used to improve
the efficiency, reliability, and safety of each individ-
ual vehicle.
Aggregating data comes with risks to privacy. The
web and social media have opened the floodgates
of personal information available about us even to
strangers. Even as our culture is only starting to learn
to deal with the consequences of that information
flood, that flood is about to be itself overwhelmed by
data streams from physical sensors. The TerraSwarm
vision is that security and privacy must be built into
the very core of service definitions.
One approach uses a system-theoretic formula-
tion to address privacy concerns, defining filters that
release useful information without compromising
privacy. Such an approach can rely on the notion of
differential privacy [2], which provides strong
privacy guarantees against adversaries with arbitrary
side information.
There is also potential data leakage introduced by
composable services through side channels such as
timing and power consumption. Fortunately, there are
synergies. For example, temporal isolation may be
introduced to guarantee resources to safety-critical
services, but it can also be used to prevent side-
channel attacks, where private information is deduced
from temporal variations in software execution.
Security-related technologies and techniques
such as static analysis, hazard analysis, and elliptic
curve cryptography will also prove useful. So will
existing research in the area of secure distributed
storage [1], [3], [5], [7], which can inform the de-
sign of cloud-based swarmlets that need strong
guarantees of security despite their reliance on
physically insecure infrastructure.
In a connected world, the physical location of
information does not matter much; the same is not
true of sensors and actuators. Location is much more
important at the cyber–physical boundary than in the
cyber world of information technology. However, for
many swarm services, location in 3-D space is not
nearly as important as semantic location. A swarmlet
needs to know what room a temperature sensor is in,
for example, not where in 3-D space it is. In fact, small
measurement errors could lead to significant mistakes,
placing a temperature sensor on the other side of a
wall, for example. The SwarmOS must provide
infrastructure for location-based services, for semantic
localization, and for learning the logical structure of
semantic spaces by observing mobility.
Methodologies, models, and tools
A key challenge in designing TerraSwarm appli-
cations and infrastructure is that the distinction be-
tween ‘‘design time’’ and ‘‘runtime’’ becomes
IEEE Design & Test14
Embedded Systems and Cloud Computing
blurred. Ensuring that different components and
subsystems can be dynamically recombined yet still
function properly will require new, highly advanced
development methodologies, models, and tools.
Functions to be realized must be separated from
the components that will be used to realize them
(the ‘‘separation of concerns’’ concept [10]). Prog-
ramming models must be less centered on algo-
rithms (step-by-step transformation of data) and
more centered on dynamics (change of state over
time), distribution, discovery, and adaptation. Optimi-
zations that might be performed at design time in a
conventional system of systems, such as mapping of
functions to resources, will need to be performed at
runtime. Design-time testing andverificationwill not be
adequate, because components and applications are
dynamically composed and recomposed. Validation
will need to be performed at a higher level, will need to
cover families of possible runtime configurations rather
than just one, and will need to include runtime
validation strategies that are lightweight and energy
efficient. Research will be needed in advanced
modeling, verification, and adaptation approaches.
We have already observed the central role of
models for managing the data flood. Models also play
a central role in swarm system design and adaptation.
Developing TerraSwarm systems will require the ability
to effectively model system components and their
interactions. Models must capture the evolving avail-
ability of services and resources, which can potentially
be combined to provide many different types of
applications. Models must also capture the rules for
recruiting and combining resources and services.
Current modeling approaches do not support the
complex, dynamically changing characteristics of
TerraSwarm systems.
We model TerraSwarm systems as a dynamic
hierarchical graph of components that comprise
the system. The nodes of the graph represent ser-
vices. Since these graphs are hierarchical, a node
may itself be a graph aggregating subservices to
define a new service. The edges in the graph repre-
sent: 1) communication paths between compo-
nents; 2) authority relations between components;
3) use relationships (i.e., service x uses service y);
4) ownership relations; 5) coordination; 6) control-
lability; and 7) observability. A configuration of a
TerraSwarm system is a particular graph structure
that selects specific capabilities of the nodes in the
graph (i.e., subsystems).
Verification of TerraSwarm systems’ functionality
will be difficult. The large number of components,
their heterogeneity, and the dynamically changing
structure will render exhaustive formal verification
impractical. Instead, we will need compositional
and incremental techniques. Compositional techni-
ques hierarchically infer properties of compositions
from properties of components. Incremental tech-
niques infer properties of a configuration from pro-
perties of a similar configuration.
Compositional verification is enabled by assume-
guarantee reasoning, which requires models of the
environment. (Assume-guarantee contracts are de-
scribed in [11].) In a dynamic TerraSwarm context,
these models will likely be incomplete, and hence
will need to be inferred or refined from observa-
tions. Such models will be imperfect, and, therefore,
should include metrics of uncertainty that verifica-
tion techniques can reason about.
Good models provide not only opportunities for
formal analysis, but also opportunities for simula-
tion. Because of the complexity of the systems of
interest and the uncertainty about the environment
in which they operate, simulation models will be
more valuable when coupled with systematic
mining of requirements. That is, although simulation
models will always be valuable for human designers
to develop an understanding of a system, they can
be even more valuable when combined with auto-
mated exploration of the possible system behaviors.
In the dynamic network of a TerraSwarm system,
noninterference properties become key. For exam-
ple, when a node joins or leaves a network, it must
not disrupt any service that does not depend on this
node. Noninterference of temporal properties be-
comes particularly important for closed-loop cyber–
physical systems, because if one service disrupts the
timing of another, it may change the dynamics of a
physical system in undesirable ways. Hence, models
will need to include temporal specifications that
verification techniques can reason about [6].
Not all nodes in a system will be equally trusted.
TerraSwarm protocols will need to detect compro-
mises, distinguish trusted from untrusted data and
resources, and be robust to the presence of a certain
number of malicious nodes. Techniques based on a
combination of formal methods and algorithmic
game theory (e.g., [12]) can be effective in anal-
yzing the impact of untrusted, potentially malicious
agents.
May/June 2014 15
Good models will also play a central role in the
adaptiveness of swarm applications. TerraSwarm
applications need to deploy resources dynamically
in order to achieve mission goals, and these goals
may change based on circumstances encountered
in the field. Typical optimization strategies for deter-
mining how best to deploy resources depend on
knowing the spatial probability distribution of rele-
vant events, but in a TerraSwarm system, this distri-
bution will not be known in advance.
By leveraging theoretical and algorithmic tools
developed for adaptive systems, we can derive new
simple algorithms for complex tasks, such as cover-
age, source seeking, distributed partitioning, and
tracking under uncertain communication con-
straints. These algorithms do not depend on a
model of the environment, exploiting instead event
observations during deployment. Moreover, they
adapt to slowly varying environmental conditions or
sudden but infrequent environmental changes.
TerraSwarm applications
A key characteristic of the TerraSwarm approach
is that infrastructure is shared among multiple
swarmlets. A few carefully chosen applications can
help drive the research in the right direction. The
applications used for research need not themselves
be innovative; indeed, a successful infrastructure
will lead to applications that none of us will have
anticipated, as has happened with smartphones.
Examples of applications that could be useful to
drive the research are illustrated as follows.
h Consumer applications. TerraSwarm systems en-
able a much richer set of consumer applications
because of their interactions with the physical
world. Consider, for example, a smart jukebox,
which is a relatively simple swarmlet that incorpo-
rates several key TerraSwarm characteristics.
During normal city operation, it uses information
about local demographics and listening prefer-
ences to generate a customized playlist, which can
then be used by restaurants (or other public
meeting spaces) to adapt their soundscapes to the
preferences of their customers on a dynamic basis.
Leveraging the work at the Berkeley Center for
New Music and Audio Technology (CNMAT),5 it is
even possible to deliver different soundscapes to
different locations within a public forum (using
beamforming and very large speaker arrays),
and to extend to soundscape synthesis rather
than just delivery. Interaction devices such as
touchscreen tables could extend the smart
jukebox into the social networking world, allow-
ing for participatory soundscapes that go well
beyond karaoke.
The smart jukebox will require semantic
localization, analysis of personal information
available from mobile devices and social net-
working databases, and dynamic resource re-
cruiting and control. The application will be
required to construct models of musical prefer-
ences, infer models from sample behaviors, find
optimization criteria and algorithms, construct
statistical models of user populations and system
dynamics, improvise subject to constraints, ana-
lyze the system dynamics, analyze privacy and
security, and optimize the delivery mechanism
according to the available resources. It can
leverage existing machine learning technology
used in (for example) Pandora and Apple
iTunes’ Genius Bar, both of which aggregate
information about musical preferences and
make predictions about new songs that are likely
to be enjoyed.
In emergency scenarios, the smart jukebox in-
frastructure can be used to identify the location of
people with relevant skills (e.g., doctors, electri-
cians, off-duty police officers) and alert them via
the localized sound system or text message that
their skills are needed at a nearby location. By
aggregating information about available human
resources and their locations, the system can
more effectively direct resources to appropriate
locations and optimize emergency response
times.
Although its utility in normal, day-to-day oper-
ation is not critical, the smart jukebox is a
technologically challenging application that is
serving as a good test case for key aspects of the
TerraSwarm tools and methodologies.
h Autonomous vehicle response. Advanced
TerraSwarm applications can include deploying
autonomous vehicles. These may include, for ex-
ample, cars, aerial drones, or microrobots, which
may be required to operate alone or within coor-
dinated groups. The range of possible uses for5http://cnmat.berkeley.edu/
IEEE Design & Test16
Embedded Systems and Cloud Computing
autonomous vehicles is huge. For example, in the
best of times, they can be used for accident and
crime prevention; in the worst of times, they may
be used for emergency response, rescue efforts,
surveillance, construction of ad hoc networks, or
delivery of medications. This application le-
verages considerable expertise in the design of
vehicle trajectories, control laws, and decision-
making protocols for autonomous vehicles, in-
cluding micro unmanned aerial vehicles (UAVs).
Tasks that must be performed by these vehicles
include collecting information using mobile
sensors, transporting physical objects and/or
people, establishing and maintaining impromptu
communicationVall of which must coexist with
other (human-operated) vehicles.
Under emergency conditions, mobile vehicles
must be capable of operating as individual units,
in ad hoc groups established by local proximity, or
as a citywide resource, with intermittent commu-
nication capability. Real-time, distributed algo-
rithms for aggregation of information, interaction
with cloud services, and cooperative control and
decision making can be tested in this context
and used to explore new TerraSwarm services
and applications.
h Health-related applications. The TerraSwarm in-
frastructure (together with the cloud) will have
access to a variety of health- and lifestyle-related
data, including people’s location, activity, and vital
signs (via mobile devices and wearable sensors,
as well as imagers embedded in the surrounding
environment); environmental conditions (via net-
worked sensors); and social connections (via the
social networking infrastructure). Some of this
information may be provided by streams of
data from innovative sensors, such as energy-
harvesting wearable sensors, or from wall-size
imagers. To close the loop, analysis of data from
such sensor streams might be used to guide peo-
ple toward healthy activities or to optimize the
performance of troops, police, and medical
personnel.
TerraSwarm infrastructure also provides a
unique opportunity to traverse in time and anal-
yze data and models that were collected in the
past to predict or analyze the onset of a disease in
future. Wearable sensors can provide details of the
unique physiological observations that may not
be reproducible in the future. Many medical
conditions develop over time, and are not no-
ticed until they have a significant impact on the
patient’s health. Once the condition has devel-
oped, data that detail the progression of the con-
dition may have been archived by a TerraSwarm
infrastructure. For example, a neurologist diag-
nosing a dementia patient may be interested in
observing gait parameters from five, ten, and
15 years ago. Data collected from fitness-oriented
swarmlets could be used in diagnosis if stored
and retrieved properly using the TerraSwarm
framework.
Toward an interdisciplinary
TerraSwarm community
PROGRESS TOWARD THE TerraSwarm vision requires
an astounding breadth of expertise, in large-scale,
adaptive, cyber–physical control systems; program-
ming models and tools for heterogeneous, real-time,
and distributed cyber–physical systems; security in
systems with dynamic topologies; machine learning;
privacy; networked sensor and actuator platform
design; signal analytics; wireless networking and
distributed systems; system architecture; human–
computer interaction; energy-aware system design;
and application platforms. To nurture the develop-
ment of a TerraSwarm research community, the au-
thors led the organization of the First International
Workshop on the Swarm at the Edge of the Cloud,
held September 29, 2013, in Montreal, QC, Canada,
in conjunction with ESWeek.6 Only a truly multidis-
ciplinary approach will bring the TerraSwarm vision
to reality. As such, this paper serves as an open in-
vitation to anyone interested to join this exciting
endeavor. h
Acknowledgment
This work was supported in part by the
TerraSwarm Research Center, one of six centers
administered by the STARnet phase of the Focus
Center Research Program (FCRP), a Semiconductor
Research Corporation program sponsored by the
Microelectronics Advanced Research Corporation
(MARCO) and the Defense Advanced Research
Projects Agency (DARPA), and by the Berkeley
Ubiquitous SwarmLab. This paper is dedicated to
the memory of Ben Taskar.
6http://www.terraswarm.org/conferences/13/swarm/
May/June 2014 17
h References
[1] P. Druschel and A. Rowstron, ‘‘Storage management
and caching in PAST, a large-scale, persistent
peer-to-peer storage utility,’’ in Proc. 18th ACM
Symp. Oper. Syst. Principles, 2001, pp. 188–201.
[2] C. Dwork, F. McSherry, K. Nissim, and A. Smith,
‘‘Calibrating noise to sensitivity in private data
analysis,’’ in Theory of Cryptography, vol. 3876,
S. Halevi and T. Rabin, Eds. Berlin, Germany:
Springer-Verlag, 2006, pp. 265–284, ser. Lecture
Notes in Computer Science, DOI: 10.1007/
11681878_14.
[3] K. Fu, M. F. Kaashoek, and D. Mazières, ‘‘Fast and
secure distributed read-only file system,’’ in Proc. 4th
USENIX Symp. Oper. Syst. Design Implementation,
2000, p. 13.
[4] A. Greenfield, Against the Smart City (The City Is Here
for You to Use). New York, NY, USA: Do Projects,
2013.
[5] J. Kubiatowicz et al., ‘‘OceanStore: An architecture
for global-scale persistent storage,’’ in Proc. 9th Int.
Conf. Architect. Support Programm. Lang. Oper. Syst.,
2000, pp. 190–201, doi: 10.1145/356989.357007.
[6] E. A. Lee, ‘‘Computing needs time,’’ Commun. ACM,
vol. 52, no. 5, pp. 70–79, 2009, DOI: 10.1145/1506409.
1506426.
[7] D.Mazières,M.Kaminsky, F. Kaashoek, andE.Witchel,
‘‘Separating key management from file system
security,’’ in Proc. 17th ACM Symp. Oper. Syst.
Principles, 1999, pp. 124–139.
[8] J. M. Rabaey, ‘‘The swarm at the edge of the
cloud the new face of wireless (keynote presentation),’’
in Proc. Symp. VLSI Circuits, Kyoto, Japan, 2011,
pp. 6–8.
[9] J. M. Rabaey, D. Burke, K. Lutz, and J. Wawrzynek,
‘‘Workloads of the future,’’ IEEE Design Test Comput.,
vol. 25, no. 4, pp. 358–365, Jul.–Aug. 2008.
[10] A. Sangiovanni-Vincentelli, ‘‘Quo vadis SLD:
Reasoning about trends and challenges of
system-level design,’’ Proc. IEEE, vol. 95, no. 3,
pp. 467–506, Mar. 2007.
[11] A. Sangiovanni-Vincentelli, W. Damm, and
R. Passerone, ‘‘Taming Dr. Frankenstein:
Contract-based design for cyber-physical systems,’’
Eur. J. Control, vol. 18, no. 3, pp. 217–238,
Jun. 2012.
[12] S. A. Seshia and A. Rakhlin, ‘‘Quantitative analysis
of systems using game-theoretic learning,’’ ACM
Trans. Embedded Comput. Syst., vol. 11, no. S2,
2012, DOI: 10.1145/2331147.2331165.
Edward A. Lee is a Professor in the Electrical
Engineering and Computer Science Department and
Director of the TerraSwarm Research Center at the
University of California Berkeley, Berkeley, CA, USA.
He works on cyber–physical systems and models of
computation. Lee has an SM from the Massachusetts
Institute of Technology (MIT), Cambridge, MA, USA
and a PhD from the University of California Berkeley.
He is a Fellow of the IEEE.
Jan Rabaey is a Professor of Electrical Engineer-
ing and Computer Science and the Founding
Director of the Ubiquitous SwarmLab at the Univer-
sity of California Berkeley, Berkeley, CA, USA. His
research interests include the conception and
implementation of next-generation integrated wire-
less systems. Rabaey has a PhD in applied sciences
from the Katholieke Universiteit Leuven, Leuven,
Belgium. He is a Fellow of the IEEE.
Björn Hartmann is an Assistant Professor of
Electrical Engineering and Computer Science at the
University of California Berkeley, Berkeley, CA, USA,
and Codirector of the Berkeley Institute of Design
and the Swarm Lab. His research in human–
computer interaction focuses on novel design,
prototyping, and implementation tools for the era of
postpersonal computing. Hartmann has a PhD in
computer science from Stanford University, Stanford,
CA, USA.
John Kubiatowicz is a Professor in the Electrical
Engineering and Computer Science Department,
University of California Berkeley, Berkeley, CA,
USA. His research focuses on the development of
new operating systems for many-core processors
with a particular focus on dynamic resource
management and quality-of-service guarantee.
Kubiatowicz has a PhD in electrical engineering
and computer science from the Massachusetts
Institute of Technology (MIT), Cambridge, MA, USA.
Kris Pister is a Professor of Electrical Engineering
and Computer Science and Codirector for the
Berkeley Sensor and Actuator Center (BSAC) and
the Swarm Lab at the University of California
Berkeley, Berkeley, CA, USA. His current research
interests are synthetic insects and smart dust. Pister
has a PhD in electrical engineering and computer
sciences from the University of California Berkeley.
IEEE Design & Test18
Embedded Systems and Cloud Computing
Alberto Sangiovanni-Vincentelli is the
Buttner Chair of Electrical Engineering and Comput-
er Science at the University of California Berkeley,
Berkeley, CA, USA. He is Cadence and Synopsys
Cofounder. He is a member of the UTC Technology
Advisory Council, the National Academy of Engi-
neering. He received the Kaufman Award for
‘‘pioneering contributions to EDA’’ and the IEEE/
RSE Maxwell Medal ‘‘for groundbreaking contribu-
tions with exceptional impact on development of
electronics.’’
Sanjit A. Seshia is an Associate Professor of
Electrical Engineering and Computer Science at the
University of California Berkeley, Berkeley, CA, USA.
His research blends formal methods and machine
learning for verification and synthesis, particularly
for cyber–physical systems and computer security.
He has coauthored a widely used textbook on
embedded systems. Seshia has a PhD in computer
science from Carnegie Mellon University, Pittsburgh,
PA, USA.
John Wawrzynek is a Professor at the University
of California Berkeley, Berkeley, CA, USA, and Co-
director at the Berkeley Wireless Research Center.
He is a leader in reconfigurable computing. His other
research interests include computer architecture
and wireless systems. He is the founder and
Vice-President of Technology at BEEcube, Inc.
Wawrzynek has a PhD from California Institute of
Technology, Pasadena, CA, USA.
David Wessel is a Professor in the Music De-
partment, University of California Berkeley, Berkeley,
CA, USA, and also serves as the Director for the
Center for New Music and Audio Technologies
(CNMAT), an institute that collaborates extensively
with the Electrical Engineering and Computer Sci-
ence Department, blending art and technology.
Wessel has a PhD in mathematical psychology
from Stanford University, Stanford, CA, USA.
Tajana Simunic Rosing is an Associate Pro-
fessor and the Director of the System Energy
Efficiency Laboratory at the University of California
San Diego, La Jolla, CA, USA. Her research focuses
on energy-efficient computing and embedded, wire-
less systems. Simunic Rosing has a PhD from
Stanford University. Stanford, CA, USA.
David Blaauw is a Professor at the University of
Michigan, Ann Arbor, MI, USA. His work has focused
on VLSI design with particular emphasis on adaptive
and low-power design. Blaauw has a PhD in
computer science from the University of Illinois at
Urbana-Champaign, Urbana, IL, USA.
Prabal Dutta is an Assistant Professor at the
University of Michigan, Ann Arbor, MI, USA. He re-
searches the circuits, systems, and software nec-
essary to realize pervasive sensing, computing, and
communications at scale and in the service of
society. Dutta has a PhD in computer science
from the University of California Berkeley, Berkeley,
CA, USA.
Kevin Fu is an Associate Professor of Electrical
Engineering and Computer Science at the University
of Michigan, Ann Arbor, MI, USA, where he directs
the Archimedes Research Center for Medical Device
Security and the SPQR Group. His research inves-
tigates how to achieve trustworthy computing on
embedded devices with application to healthcare,
commerce, and communication. Fu has a PhD from
the Massachusetts Institute of Technology (MIT),
Cambridge, MA, USA.
Carlos Guestrin is an Associate Professor of
Machine Learning in the Computer Science & Engi-
neering Department, University of Washington,
Seattle, WA, USA. He is cofounder and CEO of
GraphLab Inc., which focuses on large-scale ma-
chine learning and graph analytics. Guestrin has a
PhD from Stanford University, Stanford, CA, USA.
Ben Taskar joined the Computer Science &
Engineering Department, University of Washington,
Seattle, WA, USA, in 2012. He was nationally re-
cognized for his research in machine learning, com-
putational linguistics, and computer vision. Taskar
had a PhD in computer science from Stanford Univ-
ersity, Stanford, CA, USA (2004). He passed away
in 2013.
Roozbeh Jafari is an Associate Professor at the
University of Texas at Dallas, Richardson, TX, USA.
He is an expert in wearable computer and signal
processing design primarily for the applications of
healthcare and wellness. Jafari has a PhD in
computer science from the University of California
May/June 2014 19
Los Angeles, Los Angeles, CA, USA. He was a 2012
recipient of the National Science Foundation (NSF)
CAREER award.
Douglas Jones is a Professor in the Electrical and
Computer Engineering Department, University of
Illinois at Urbana-Champaign, Urbana, IL, USA. His
research centers on energy-efficient sensing sys-
tems and total system optimization under stringent
energy constraints. Jones has a PhD from Rice
University, Houston, TX, USA. He is a Fellow of
the IEEE.
Vijay Kumar is a Professor at the University of
Pennsylvania, Philadelphia, PA, USA. He works on
swarms of cooperating robots and autonomous
flight. Kumar has a PhD in mechanical engineering
from the Ohio State University, Columbus, OH, USA.
He is a Fellow of the IEEE and the American Society
of Mechanical Engineers (ASME), and a member of
the National Academy of Engineering.
Rahul Mangharam is an Assistant Professor in
the Electrical and Systems Engineering Depart-
ment and the Computer and Information Science
Department at the University of Pennsylvania,
Philadelphia, PA, USA, where he directs the Real-
Time and Embedded Systems Lab and the Comcast
Media Lab. His interests are in scheduling, controls,
and formal methods for cyber–physical systems in
implantable medical devices, energy-efficient build-
ings, and automotive systems. Mangharam has a
PhD from Carnegie Mellon University, Pittsburgh,
PA, USA.
George J. Pappas is a Professor and Chair at the
Electrical Engineering and Computer Science De-
partment, University of Pennsylvania, Philadelphia,
PA, USA. His research focuses on control theory
and, in particular, hybrid systems, embedded sys-
tems, hierarchical and distributed control systems,
with applications to unmanned aerial vehicles,
distributed robotics, green buildings, and biomolec-
ular networks. He is a Fellow of the IEEE.
Richard M. Murray is a Professor of Control &
Dynamical Systems and Bioengineering at the
California Institute of Technology, Pasadena, CA,
USA. He is an expert in systems and control engineer-
ing, recently leading aU.S. Air ForceOffice of Scientific
Research (AFOSR)-sponsored Multidisciplinary Uni-
versity Research Initiative (MURI) on specification,
design, and verification of distributed embedded
systems. Murray has a PhD from the University of
California at Berkeley, Berkeley, CA, USA.
Anthony Rowe is an Assistant Professor of
Electrical and Computer Engineering at Carnegie
Mellon University, Pittsburgh, PA, USA. His research
focuses on networked real-time embedded systems
and large-scale infrastructure for heterogeneous
sensing and actuation across Internet-connected
devices. Rowe has a PhD from Carnegie Mellon
University (2010).
h Direct questions and comments about this article
to Edward A. Lee, EECS Department, University of
California at Berkeley, Berkeley, CA 94720 USA;
eal@eecs.berkeley.edu.
IEEE Design & Test20
Embedded Systems and Cloud Computing

