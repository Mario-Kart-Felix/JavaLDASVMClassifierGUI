that glue these systems together must
not fail, or computers will no longer
be able to communicate accurately or
reliably. Given the magnitude of se-
curing cyberspace, a reflection on
what we are trying to do seems in
order. Several questions arise, such as
what exactly the infrastructure is,
what threats it must be secured
against, and how protection can be
provided on a cost-effective basis. But
underlying all these questions is how
to define a secure system.
What is security? Having it is ob-
viously good; everyone says so. But
few people define it exactly, or even
nebulously. This column tries to
place cybersecurity in perspective,
because it is, of course, central to
countries, organizations, and even
home users now and in the future. 
Security 
requirements
Consider the differences between
the needs of a university and a cryp-
tographic organization, in which
foreign governments’ ciphers and
codes are decoded. The key differ-
ence lies in their approach to sharing
information. The university fosters
scholarship and open research: pa-
pers, discoveries, and work are avail-
able to the general public as well as to
other academics. The cryptographic
organization, on the other hand,
prizes secrecy. Not only can the gen-
eral public not know which ciphers
have been broken, it might not even
learn that ciphers are being broken.
This sort of difference drives the
need to define security.
When an organization wants to
secure its systems, it must first deter-
mine what requirements to meet.
The university will need to protect
the integrity—and confidentiality,
such as grades—of the data on its sys-
tems. It might also want to ensure that
its systems are available via the Inter-
net so students, faculty, staff, and
other researchers and educators have
access to information. The cryp-
tographic organization, though, will
emphasize confidentiality of all its
work. Its systems should not be avail-
able over the network, because
telecommuters, for examples, could
download information (deliberately
or accidentally) that would reside on
an unsecured remote system indefi-
nitely. Data integrity is important,
but the organization would rather
data be deleted than read by unautho-
rized people.
Security policy
Requirements dictate that some ac-
tions (and system states) be allowed
and others disallowed. A security policy,
a specific statement of what is and is
not allowed, defines the system’s se-
curity. If the system always stays in
states that are allowed, and users can
only perform actions that are al-
lowed, the system is secure. If the sys-
tem can enter a disallowed state, or a if
user can successfully execute a disal-
lowed action, the system is nonsecure.
The type of explicit definition re-
quired to design and implement se-
curity measures throughout national
and international networks would
somehow have to reconcile these
disparate policies or, more likely,
specify the services that the infra-
structure could provide. Then, those
who use the infrastructure could de-
termine how to use these services to
enforce their policies.
Security 
mechanisms 
Security mechanisms enforce the poli-
cies; their goal is to ensure that the
system never enters a disallowed
state. The mechanisms may be tech-
nical or operational (sometimes
called procedural). For example,
suppose the cryptographic organiza-
tion has both unclassified and top-
secret documents. Users who are not
cleared to read top-secret documents
cannot access them. A type of access
control mechanism, called manda-
tory access controls, enforces this re-
striction. These controls are techni-
cal mechanisms. 
Technical mechanisms are unsuit-
able for some policies. The university
wants to prevent students from hav-
ing music on their computers. Sys-
tem administrators can scan systems
looking for music files, but clever stu-
Education
Editor:   Matt Bishop, bishop@cs.ucdavis.edu
PUBLISHED BY THE IEEE COMPUTER SOCIETY       1540-7993/03/$17.00 © 2003 IEEE       IEEE SECURITY & PRIVACY 67
MATT
BISHOP
University of
California,
DavisComputer and network security, or cybersecurity, arecritical issues. But merely protecting the systemsthat hold data about citizens, corporations, andgovernment agencies it is not enough. The infra-
structure of networks, routers, domain name servers, and switches 
What Is Computer Security?
Education
dents can encode the music files as
text files. Music file scanners would
not be able to determine that a text
file was really an encoded music file.
A procedural mechanism that forbids
students from putting music files on
their computers upon pain of suspen-
sion would be more appropriate than
using such scanners.
Whether a system’s set of mecha-
nisms, taken as a whole, correctly
implements the security policy is a
question of assurance. For example,
firewalls are systems that mediate
network connections between a sys-
tem (or set of systems on an intranet)
and the Internet. The firewall can
block attempts to connect to the sys-
tem from the Internet. However, if
the firewall software is not written
correctly, the firewall might block
connections that the security policy
requires be blocked.
Two examples illustrate this. First,
suppose the organizational policy
bans the use of external peer-to-peer
networks. The simplest way to en-
force this policy would be to have the
firewall refuse to accept messages on
the relevant port. However, if the
firewall is incorrectly configured, the
messages will be passed on even
though the policy forbids it. The
protection mechanism—the fire-
wall—is intended to enforce a secu-
rity policy component. However,
the mechanism is not configured
properly, and so will fail in its in-
tended task.
Second, suppose the university has
a Web site for documents that are
available to outside researchers. The
system’s security policy is that files in
the Web server’s data directories may
be sent in reply to external requests,
but no other files may be sent. The
Web server program is configured to
enforce this policy. Unfortunately, the
server has a bug. By sending a specially
crafted URL, the external request can
access any file on the system. Here the
mechanism fails—not because of in-
adequate configuration, but because
of a programming error. (The ubiqui-
tous buffer overflow error, in which
the buffer is too small to hold the data
copied into it, is another example of a
programming error.)
Security assurances
The problem of measuring how
well requirements conform to
needs, policy conforms to require-
ments, and mechanisms implement
the policy is in the realm of assur-
ance. Many different methodologies
help evaluate assurance. The
methodology can be structured as
part of the software engineering
process (for high-assurance systems,
this is necessary): it could test the
system in particular environments
to see if a policy can be violated
(penetration testing falls into this
category). No methodology can
provide absolute assurance that a
system is secure, but different meth-
ods provide different degrees of se-
curity, and the methods for evaluat-
ing assurance depend not only on
the system, but also on the environ-
ment in which the evaluation oc-
curs and on the process used to
specify, design, implement, and test
the system.
Assurance comes into play with
people, too. How well do the system
administrators understand the poli-
cies that they have to implement and
enforce? Do policymakers encour-
age people to ask questions when as-
pects of the policy are not clear? Are
their answers consistent? Do they ask
for help when they need to under-
stand the ramifications of the tech-
nology as they plan policies? How
can the company’s security staff best
be organized to provide the support
the policies require? Most impor-
tantly, will the staff work with people
who regard security as a problem to
find other ways of doing their jobs?
These questions touch on educa-
tion of computer security profession-
als. “Education” in its broadest sense
includes academic education and
training. The differences between the
68 JANUARY/FEBRUARY 2003       http://computer.org/security/
IL
LU
ST
RA
TI
O
N
 B
Y 
RO
BE
RT
 S
TA
C
K
Education
two lie in the goals. Academic educa-
tion deals primarily with principles
and concepts. A good academic
course will use existing technologies
as examples to enhance the students’
understanding, but what the student
learns about how a particular tech-
nology works is ancillary to the un-
derstanding of the principles and
concepts. Training, on the other
hand, deals primarily with one or
more technologies. Students can
glean general principles and concepts
from the technology, but that is sec-
ondary to understanding how the
particular technology works. Which
form of education is more appropri-
ate for the specific job at hand de-
pends on the nature of the task.
Security 
components
Security has three components: re-
quirements, policy, and mechanisms. 
Requirements define security
goals. They answer the question,
“What do you expect security to do
for you?” Policy defines the meaning
of security. It answers the question,
“What steps do you take to reach the
goal set out above?” Mechanisms en-
force policy. They answer the ques-
tion, “What tools, procedures, and
other ways do you use to ensure that
the above steps are followed?” These
components exist in all manifesta-
tions of security. 
Contrast the organizational level
with the programming level. A com-
pany designing a secure operating
system must first decide, In what
sense will our OS be secure? This is
the function of company manage-
ment, with the advice and assistance
of other groups in the company.
Once the system’s requirements have
been determined and the policy
specified, the system must provide
mechanisms adequate for enforcing
that policy. These steps are integrated
with the software engineering life
cycle; the security is designed and
implemented along with the other
properties that the system must meet.
Contrast this approach to adding se-
curity features to an existing system.
In such cases, new features often
conflict with existing mechanisms or
designs. When they do, the system
will not meet the security policy.
In one sense, security has a binary
value: either a system is secure or it is
not. However, evaluating security in
this fashion evades the purpose of
providing it. In general terms, a site’s
security strength is measured by how
closely the requirements describe the
site’s needs. If the policy satisfies the
requirements, and if the mechanisms
enforce the policy, a company that
uses a system with many security fea-
tures, all of them enabled, could in
fact be less secure than its competitor,
which uses the same system but en-
ables only some security features. 
Matt Bishop is an associate professor in
the Department of Computer Science at
the University of California, Davis, and a
codirector of the Computer Security Lab-
oratory there. His research interests
include vulnerabilities analysis, the design
of secure systems and software, network
security, formal models of access control,
and intrusion detection. He was the
keynote speaker for the National Collo-
quia for Information System Security Edu-
cation in 1997 and 2000 and is on the
board of directors. His book, Computer
Security: Art and Science, was published
by Addison-Wesley in December 2002.
Contact him at bishop@cs.ucdavis.edu.
JANUARY/FEBRUARY 2003       http://computer.org/security/ 69
What to expect from this department
This department has three purposes. The first is to examine security’s multi-faceted nature and argue for a holistic approach in which we consider
security in all phases of system development and deployment—specifically, in
requirements analysis, system specification, design, implementation, testing,
installation, and operation. 
The second is validation. How can we evaluate a system’s security, and how do
we decide if its security is appropriate for our needs? 
The third is the human side of security. Without people who know and
understand security principles—how those principles apply in a given situation,
how to define requirements and an appropriate policy, and how to use technology
to implement the policy—all the efforts in the world will not create secure systems.
Among the topics we plan to explore are
• Current research areas in computer security
• Education in computer security (what is being taught, what should be taught, and
how to bridge the gap)
• The role of research in education
• Standards, proposed standards, and standardization efforts
• Certification (its worthiness and role with respect to security professionals)
• Training (what is being taught, how applicable it is to the job, and its role in certifi-
cation)
• What a security professional does on the job and how companies structure their staffs
• Common problems facing security professionals (on the job and in education)
• Trends in employment
• Tutorials of different aspects of security problems 
Our goal is to make computer security less mysterious and better understood.
Without understanding security, our attempts to protect ourselves in cyberspace
are doomed to fail. We hope this department helps everyone learn what can—
and cannot—be done to protect themselves and others when working with com-
puters and networks.

