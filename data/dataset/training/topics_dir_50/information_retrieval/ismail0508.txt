A PROPOSAL OF INFORMATION RETRIEVAL METHOD BASED ON TPO METADATA
Ismail Arai
Graduate school of Information Science,
Nara Institute of Science and Technology
8916-5 Takayama Ikoma, Nara, 630-0192, Japan
E-mail : ismail-a@is.naist.jp
Kazutoshi Fujikawa, Hideki Sunahara
Information Technology Center,
Nara Institute of Science and Technology
8916-5 Takayama Ikoma, Nara, 630-0192, Japan
E-mail : fujikawa@itc.naist.jp, suna@wide.ad.jp
ABSTRACT
To search the contents through WWW in consideration of
user’s circumstance condition, search engines should make
use of some information such as current time, user’s loca-
tion, user’s schedule and so on. We propose an informa-
tion retrieval method that effectively uses both user’s and
content’s metadata based on TPO (Time, Position, Occa-
sion). We implement a prototype of information retrieval
system based on the proposed method, which consists of
query generation part, contents matching part, and matched
results scoring part. In our query generation part, we reduce
user’s overload of choosing metadata. And a user becomes
possible to retry sorting the matching results.
1. INTRODUCTION
A search engine, which provides information that depends
on user’s circumstance, is desired. For example, a user
wants to get weather forecast in business trip, or find a prefer-
able restaurant near user’s location. To acquire the informa-
tion related to user’s circumstance, we need to issue a query
that includes user’s circumstantial information exactly. Then,
a search engine should understand such query. Also, some
supplementary data are desired because a query in a text
form includes little circumstantial information.
A sequence of an ordinary information retrieval is shown
as follows:
1. A user sends a query, which includes user’s circum-
stantial information as keywords to a search engine.
2. The search engine compares user’s query with con-
tents. (Matching)
3. The search engine sorts the results of the matched
contents. (Scoring)
4. The search engine returns results to the user.
Usually, users make a query for a search engine to ac-
quire information reflecting his circumstance. When a query
depends on only text input, it is difficult to take current in-
formation such as current time and current location. Thus,
their information should be appended to a query as meta-
data.
W3C (World Wide Web Consortium) [1] standardizes
RDF (Resource Description Format) [2] which is a descrip-
tion format of web documents. Semantic Web [3] work-
ing group discusses structure web documents. In Semantic
Web, contents have a lot of metadata, which are effective for
information retrieval. However, a user suffers from choos-
ing a huge amount of metadata for information retrieval.
Context-Aware system enables users to make query in-
cluding their circumstantial information automatically [4, 5,
6, 7]. In the future, methods that make query automatically
from user’s context are essential to realize an information
retrieval adapting to user’s circumstance. On the other hand,
to choose suitable metadata automatically, data mining tech-
nique and natural language processing are promising. How-
ever, data mining technique casts anchor at applying to web
usage mining [8]. There is no information retrieval method
to embed their data mining technology element as a compo-
nent of system flexibly.
In the contents matching part, most systems are using
text pattern matching. It is airy ideas that a search engine
processes pattern matching to all contents. The matching
method that reflects user’s query including strict metadata
is desired.
In the matched results scoring part, most search engine
having a huge amount of contents e.g. Google [9] use static
scores such as Pagerank [10]. When a search engine gets
matching results, it can only to sort results by static scores.
When the search engine sorts results by dynamic scores, the
load of the search engine becomes higher.
However, sometimes a user wants search engine to cal-
culate the score dynamically when the user desires to match
exactly a user’s query with search results. For example,
when user’s query includes the exact location information
such as GPS (Global Positioning System) data, the user wishes
the score of a result were getting higher if user’s location
is closed to content’s location. If a search engine uses the
- choose metadata
- send query
UserÕs metadata
Search engine
User
-match query with contentsÕ
 metadata
- choose scoring functions
- send results
contentsÕ metadata
scoring functions
!"# $ % & ’!
-start retrieval
-retry to sort
matching functions
Fig. 1. A model of proposed information retrieval
static score, it cannot realize such requirement.
2. REQUIREMENTS FOR INFORMATION
RETRIEVAL
According to ordinary sequence of information retrieval, we
propose an information retrieval model based on TPO meta-
data. Fig. 1 shows a system environment. The proposed
system consists of three parts, query generation part, match-
ing part, and scoring part.
2.1. Query generation mechanism
A query consists of plain text keywords and metadata. The
plain text keywords are taken for full-text search; Metadata
are supplemental data for user’s circumstantial information
that is difficult to describe in the form of plain text. We sup-
pose user’s circumstantial information is written and stored
by metadata in advance. For example, location informa-
tion is sensed from GPS, time information is gotten from a
clock, user’s schedule data, and so on. Their circumstantial
information is systematized based on TPO (Time, Position,
Occasion). TPO is a description model, which reflects hu-
man behaviors.
To retrieve information by several search engines in WWW,
we have to choose adaptive user’s metadata unlike context
aware system. But, the cost of choosing user’s metadata,
which the search engine requires, gets higher. When a lot of
metadata are stored into user’s storage, a mechanism auto-
matically selecting metadata is desired.
There are two methods of choosing metadata automati-
cally. One method is that the search engine sends a user a
required user’s metadata list. When a user connects a search
engine, the search engine tells the required metadata to the
user, and then the user chooses user’s metadata according to
it. Another method is that a user utilizes a data mining en-
gine for behavior prediction of a user. A data mining engine
predicts user’s requirements and suggests the suitable user’s
metadata to the user. To realize the suitable user’s meta-
data choosing mechanism, we develop a query generation
mechanism.
Also, a query has scoring parameter because it is re-
quired that scoring parameter should be chosen automati-
cally.
2.2. Content retrieving mechanism
The search engine compares user’s metadata with contents’
metadata to judge whether both of metadata are matching or
not. Also, we suppose a content creator describes contents’
metadata. The quantity of matching functions should be suf-
ficient to compare any user’s metadata and contents’ meta-
data. Matching functions compare values of user’s meta-
data and contents’ metadata. If the value is written in a text
format, a matching function works as text pattern match-
ing function. If the value is written in a numerical value, a
matching function does as arithmetic formula. The search
engine is desired to select a proper matching function for
the query.
The contents, which are fitting for user’s purpose, should
be listed upper in the matching results. Therefore, the search
engine sorts contents by the score. A score is given by total
results of scoring which are calculated by scoring functions
with values of each metadata.
The search engine has a weight value for each TPO prop-
erty. It allows a user to adjust scoring results without send-
ing metadata for matching part. Ordinary search engines
have ”search engine spam” problem because of using static
scoring method. Averse to that, the proposed method mod-
erates such spam problem by adjusting scoring results.
3. A DESIGN OF M3 SEARCH ENGINE
According to the requirement, we design M3 (Make the best
use of Mutual Metadata) search engine.
3.1. Query generation mechanism
A sequence of query generation mechanism is as follows.
1. A user connects to a search engine, and he/she re-
ceives a text box and syntax of user’s metadata which
the search engine requires.
2. The user sends keywords written in a syntax of user’s
metadata to query generation mechanism; The user
receives a query written in XML format from a query
generation mechanism.
<?xml version=Ò1.0Ó?>
<rdf:RDF
xmlns:rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#
xmlns:ut=http://hoge.naist.jp/classes/>
<rdf:Description
rdf:about=http://hoge.naist.jp/gourmet/hoge.html>
<ut:Time>
<rdf:Description>
<ut:open>11:00</ut:open>
<ut:close>19:00</ut:close>
</rdf:Description>
</ut:Time>
<ut:Position>
<rdf:Description>
<ut:latitude>35.57</ut:latitude>
<ut:longitude>135.57</ut:longitude>
</rdf:Description>
</ut:Position>
</rdf:Description>
</rdf:RDF>
Fig. 2. User’s metadata
User
UserÕs metadata
RDF
RDF
RDF
Query generation
mechanism
Search engine
RDF
SOAP Request
SOAP Reply
SOAP Reply
SOAP Request
Choosing metadata
according to SOAP request
POST /QueryQGM HTTP/1.1
....
<SOAP-ENV:Body>
<m:QueryUserMetadata xmlns:m=...>
<m:Time>Now</m:Time>
<m:Position>Latitude</m:Position>
<m:Position>Longitude</m:Position>
...
HTTP/1.1 200 OK
....
<SOAP-ENV:Body>
<m:QueryUserMetadataResponse ...>
<m:Now>15:25</m:Now>
<m:Latitude>45.13</m:Latitude>
<m:Longitude>135.68</m:Longitude>
...
Fig. 3. Query generation mechanism
3. When the user is satisfied to the query, the user sends
the query to the search engine. Otherwise, the user
feeds back some modification to query generation mech-
anism.
4. The search engine sends results to the user. When the
user is not satisfied to the scoring results, the user re-
turns to the third phase. When the user is not satisfied
to the matching results, the user returns to the second
phase.
A query related to TPO is formed by user’s metadata in
RDF format. Fig. 2 shows user’s metadata syntax. This cir-
cumstantial information is written in each part Time (from
11:00 to 19:00) and Position (latitude is 35.57 and longitude
is 135.57). The quantity of property has no preference either
a lot of metadata are written in one file, or each metadata is
written in some files.
<?xml version="1.0"?>
  <math xmlns="http://www.w3.org/1998/Math/MathML">
    <mi><time>Now</time></mi>
    <mo>-</mo>
    <mi><time>Close</time></mi>
  </math>
!" .MathML# $% &’ () *+ , -. / !
Fig. 4. A scoring function written in MathML
When a search engine demands static user’s metadata
from a user in the first phase, a query generation mecha-
nism chooses user’s metadata written in RDF. Fig. 3 shows
a model of query generation mechanism. Each messages are
described in SOAP (Simple Object Access Protocol) [11].
In this instance, a user requests current time and current
position. Then, the query generation mechanism answers
”15:25,” ”45.13,” and ”135.68” to the user.
3.2. Contents retrieving mechanism
A matching metadata method of M3 search engine com-
pares each metadata but not full-text search. A user submits
this metadata as a query to M3 search engine.
M3 search engine has matching functions to compare a
query with contents’ metadata as follows.
A =
∏
i=T,P,O
ni∏
j=1
fmij(Mfmij1 ,Mfmij2 , ..., Mfmijk ) (1)
fmij =
{
1 : when matches
0 : when not matches
(2)
Mfmijk : metadata as argument
A matching function (2) returns ”1” when a content matches
metadata. Otherwise it returns ”0”. If all results of matching
function (1) return ”1”, it means query matches a content.
These matching functions are chosen by a mechanism
selecting matching functions. Their functions are written in
XML syntax, so the mechanism selecting matching func-
tions is built as XSLT [12]. Matching functions are written
in MathML [13] syntax which is specified by W3C. Gen-
erally, matching functions are stored in M3 search engine
because of their communication costs.
M3 search engine sorts matched results by scoring func-
tion as follows.
S =
∑
i=T,P,O
ni∑
j=1
ki
ni
· fsij − fsij
fsij
(3)
kT + kP + kO = 1
fsij(Mfsij1 ,Mfsij2 , ..., Mfsijk ) : scoring function
kT , kP , kO : TPO weight value
Content’s metadata are evaluated by each scoring func-
tion. Calculating with average value normalizes those re-
sults, and their total becomes a score of the content (3). The
value ki is weight value included in a query.
Fig. 4 shows scoring function written in MathML in
situation of shop search. The more expand the gap between
a current time and closing time of shop, the higher the score.
The quantity of functions should be sufficient for existing
metadata.
4. FUTURE WORKS
For the future, we contemplate to mount M3 search engine
based on former designing. We need to set some scenario
(e.g. sight-seeing, business trip, and so on) that circumstan-
tial information of a user has various values. Of course, re-
sults of retrieving contents vary with user’s movement. Fur-
thermore, the results might be changed by user’s occasion.
Also, we need to discuss data mining technique for user’s
behavior prediction and discovering metadata similarity. Some
study can be found in pervasive computing research [14].
And, we need to tune some parameters such as weights of
scoring functions and threshold point of matching functions
to get better results.
5. CONCLUSION
To realize information retrieval reflecting user’s circumstan-
tial information, we paid attention to the metadata describ-
ing user’s circumstantial information and content’s status.
And, we arranged requirements of an information retrieval
using metadata to reduce pains of users for manage own
metadata. And then, we proposed an information retrieval
method consisting of three parts (query generation mecha-
nism, matching part, and scoring part). The proposed method
flexibly takes the data mining technique and natural lan-
guage processing. Resulting from our proposal, users choose
their own metadata easily in an information retrieval.
6. REFERENCES
[1] “The World Wide Web Consortium (W3C),”
http://www.w3.org/.
[2] “Resource Description Framework Model and Syn-
tax,” http://www.w3c.org/RDF/.
[3] “SemanticWeb.org,” http://www.semanticweb.org/.
[4] Harry Chen, Tim Finin, Anupam Joshi, and Lalana
Kagal, “Intelligent Agents Meet the Semantic Web in
Smart Spaces,” IEEE Internet Computing, November
2004.
[5] Weigou Fan, Michael D. Gordon, and Praveen Pathak,
“Discovery of Context-Specific Ranking Functions for
Effective Information Retrieval Using Generic Pro-
gramming, Knowledge and Data Engineering,” IEEE
Transactions, vol. 16, no. 4, pp. 523–527, April 2004.
[6] Akio Sashima and Koichi Kurumatani, “Seamless
Context-Aware Information Assists Based on Multi-
agent Cooperation,” AESCS’02, pp. 39–46, 2002.
[7] Santtu Toivonen, Juha Kolari, and Timo Laakko, “Fa-
cilitating Mobile Users with Contextualized Content,”
AIMS2003, October 2003.
[8] Jiawei Han, Yongjan Fu, and Wei Wang et al, “Db-
miner: A system for mining knowledge in large re-
lational databases,” 2nd International Conference on
Knowledge Discovery and Data Mining, pp. 250–255,
August 1996.
[9] “Google,” http://www.google.com/.
[10] Larry Page, Sergey Brin, Rajeev Motwani, and Terry
Winograd, “The PageRank Citation Ranking: Bring-
ing Order to the Web,” Stanford Digital Library
Technologies, Working Paper, 1998, SIDL-WP-1999-
0120.
[11] “Simple Object Access Protocol (SOAP),”
http://www.w3.org/TR/soap/.
[12] “XSL Transformations (XSLT),”
http://www.w3.org/TR/xslt/.
[13] “MathML,” http://www.w3.org/Math/.
[14] Ugo Galassi, Attilio Giordana, and Dino Mendola,
“Learning user profile from traces,” The 2005 Sym-
posium on Applications and the Internet Workshops
(SAINT-W’05), January 2005.

