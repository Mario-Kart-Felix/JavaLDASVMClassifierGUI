ar
X
iv
:1
70
6.
09
77
3v
2 
 [
cs
.L
G
] 
 3
0 
Ju
n 
20
17
Interpretability via Model Extraction∗
Osbert Bastani
Stanford University
obastani@cs.stanford.edu
Carolyn Kim
Stanford University
ckim@cs.stanford.edu
Hamsa Bastani
Stanford University
hsridhar@stanford.edu
ABSTRACT
e ability to interpret machine learning models has
become increasingly important now thatmachine learn-
ing is used to inform consequential decisions. We pro-
pose an approach calledmodel extraction for interpret-
ing complex, blackbox models. Our approach approx-
imates the complex model using a much more inter-
pretable model; as long as the approximation quality is
good, then statistical properties of the complex model
are reected in the interpretable model. We show how
model extraction can be used to understand and de-
bug random forests and neural nets trained on several
datasets from the UCI Machine Learning Repository,
as well as control policies learned for several classical
reinforcement learning problems.
1 INTRODUCTION
Recent advances in machine learning have revolution-
ized our ability to use data to inform critical decisions,
such as medical diagnosis [8, 19, 27], bail decisions for
defendants [16, 17], and aircra collision avoidance sys-
tems [25]. At the same time, machine learning algo-
rithms have been shown to exhibit unexpected defects
when deployed in the realworld; examples include causal-
ity (i.e., inability to distinguish causal eects from cor-
relations) [8, 21], fairness (i.e., internalizing prejudices
present in training data) [13, 15], and algorithm aver-
sion (i.e., lack of trust by end users) [11].
Interpretability is a promising approach to address
these challenges [12, 24]—we can help human users di-
agnose issues and verify correctness of machine learn-
ing models by providing insight into the model’s rea-
soning [3, 18, 20, 23, 26]. For example, suppose the
user is trying to train a model that does not depend
on a prejudiced feature (e.g., ethnicity). Omiing the
feature might not suce to avoid prejudice, since the
∗Presented as a poster at the 2017Workshop on Fairness, Account-
ability, and Transparency in Machine Learning (FAT/ML 2017).
model could reconstruct that feature from other fea-
tures [22]. A beer approach might be to train the
model with the prejudiced feature, and then assess the
dependence of themodel on that feature. is approach
requires the ability to understand the model’s reason-
ing process, i.e., how model predictions are aected
by changing the prejudiced feature [12]. Similarly, the
user may want to determine whether dependence on
a feature is causal, or understand the high-level struc-
ture of the model to gain condence in its correctness.
In this paper, we propose an technique that we call
model extraction for interpreting the overall reasoning
process performed by amodel. Given amodel f : X →
Y, the interpretation produced by our algorithm is an
approximationT (x) ≈ f (x), whereT is an interpretable
model. In this paper, we take T to be a decision tree,
which has been established as highly interpretable [3,
20, 23]. Intuitively, if T is a suciently good approxi-
mation of f , then any issues in f should be reected
in T as well. us, the user can understand and debug
f by examining T ; then, the original model f can be
deployed so that performance is not sacriced.
Previous model extraction approaches have focused
on specic model families [10, 28, 29], enabling them
to leverage the internal structure of the model. In con-
trast, our approach is blackbox, i.e., it only requires the
ability to obtain the output f (x) ∈ Y corresponding to
a given input x ∈ X. us, our approach works with
any model family and is independent of the implemen-
tation. Complimentary approaches to interpretability
focus on learning interpretable models [7, 26, 30] or
on explaining the model’s behavior on specic inputs
rather than the model as a whole [23].
e key challenge to learning accurate decision trees
is that they oen overt and obtain poor performance,
whereas complex models such as random forests and
deep neural nets are beer regularized [4]. For exam-
ple, random forests use ensembles of trees to avoid
overing to specic features or training points.
Osbert Bastani, Carolyn Kim, and Hamsa Bastani
us, our algorithmuses active learning to construct
T from f —it actively samples a large number of train-
ing points, and computes the corresponding labels y =
f (x). e large quantity of data ensures that T does
not overt to the small set of initial training points.
We prove that under mild assumptions, by generating
a sucient quantity of data, the extracted tree T con-
verges to the exact greedy decision tree, i.e., it avoids
overing since the sampling error goes to zero.
We implement our algorithm and use it to interpret
random forests and neural nets, as well as control poli-
cies trained using reinforcement learning. We show
that our active learning approach substantially improves
over using CART [6], a standard decision tree learning
algorithm. Furthermore, we demonstrate how the de-
cision trees extracted can be used to debug issues with
thesemodels, for example, to assess the dependence on
prejudiced features, to determine why certain models
perform worse, and to understand the high-level struc-
ture of a learned control policy.
2 MODEL EXTRACTION
We describe our model extraction algorithm.
2.1 Problem Formulation
Given a training set Xtrain ⊆ X and blackbox access
to a function f : X → Y, our goal is to learn an in-
terpretable model T : X → Y that approximates f .
In this paper, we take T to be an axis-aligned decision
tree, since these models are both expressive highly in-
terpretable. For simplicity, we focus on the case of clas-
sication, i.e., Y = [m] = {1, ...,m}. We measure per-
formance using accuracy relative to f on a held out
test set, i.e., 1
|Xtest |
∑
x ∈Xtest I[T (x) = f (x)].
2.2 Algorithm
Our algorithm is greedy, both for scalability and be-
cause it is a natural t for interpretability, since more
relevant features occur higher in the tree.
Input distribution. First, our algorithm constructs a
distribution P over the input space X by ing a mix-
ture of axis-aligned Gaussian distributions to the train-
ing data using expectation maximization.
Exact greedy decision tree. Wedescribe the exact greedy
decision tree T ∗. We cannot constructT ∗ since we treat
f as a blackbox; as we describe below, our algorithm
approximates T ∗. Essentially, T ∗ is constructed greed-
ily as a CART tree [6], except the gain is computed
exactly according to P. For example, if the gain is the
Gini impurity, then it is computed as follows:
Gain(f ,CN ) = 1 −
∑
y∈Y
Prx∼P[f (x) = y | CN ],
where CN are the constraints encoding which points
ow to the node N in T ∗ for which a branch is cur-
rently being constructed. Similarly, the most optimal
leaf labels are computed exactly according to P.
Estimated greedy decision tree. Given n ∈ N, our al-
gorithm estimates Gain(f ,CN ) using n i.i.d. samples
x ∼ P | CN , whereCN is a conjunction of axis-aligned
constraints. We briey describe how our algorithm ob-
tains such samples. It is straightforward to show that
the constraint CN can be simplied so it contains at
most one inequality (xi ≤ t) and at most one inequal-
ity (xi > s) per i ∈ [d]. For simplicity, we assume CN
contains both inequalities for each i ∈ [d]:
CN = (s1 ≤ x1 ≤ t1) ∧ ... ∧ (sd ≤ xd ≤ td ).
en, the probability density function of P | CN is
pP |CN (x) ∝
K
∑
j=1
ϕ j
d
∏
i=1
pN(µji ,σji ) |(si ≤xi ≤ti )(xi ).
Since theGaussians are axis-aligned, the unnormalized
probability of each component is
ϕ̃ ′j =
∫
ϕ j
d
∏
i=1
pN(µji ,σji ) |(si ≤xi ≤ti )(xi )dx
= ϕ j
d
∏
i=1
(
Φ
(
ti − µ ji
σji
)
− Φ
(
si − µ ji
σji
))
,
where Φ is the cumulative density function of the stan-
dard Gaussian distribution N(0, 1). en, the compo-
nent probabilities are ϕ̃ = Z−1ϕ̃ ′, where Z =
∑K
j=1 ϕ̃
′
j .
To sample x ∼ P | CN , sample j ∼ Categorical(ϕ̃), and
xi ∼ N(µ ji ,σji ) | (si ≤ xi ≤ ti ) (for each i ∈ [d]).
Weuse standard algorithms for sampling truncatedGauss-
ian distributions to sample each xi .
2.3 eoretical Guarantees
e extracted treeT converges to T ∗ as n → ∞:
Interpretability via Model Extraction
Theorem 2.1. Assume the exact greedy tree T ∗ is
well dened, and the probability density function p(x)
is bounded, continuous, and has bounded support. en,
for any ϵ,δ > 0, there exists n ∈ N such that the tree
T extracted by our algorithm using n samples satises
Prx∼P[T (x) = T
∗(x)] ≤ ϵ , with probability at least 1−δ
over the training samples.
3 EVALUATION
Weuse ourmodel extraction algorithm to interpret sev-
eral supervised learningmodels trainedon datasets from
the UCI Machine Learning Repository [2], as well as a
learned control policy from OpenAI Gym [1], i.e., the
learned control policy π : S → A.
3.1 Comparison to CART
First, we compare our algorithm to a baseline that uses
CART to train a decision tree approximating f on the
training set {(x, f (x)) | x ∈ Xtrain}. For both algo-
rithms, we restrict the decision tree to have 31 nodes.
We show results in Table 1. We show the test set perfor-
mance of the extracted tree compared to ground truth
(or for MDPs, estimated the reward when it is used as a
policy), as well as the relative performance compared
to the model f on the same test set. Note that our goal
is to obtain high relative performance: a beer approx-
imation of f is a beer interpretation of f , even if f
has poor performance. Our algorithm outperforms the
baseline on every problem instance.
3.2 Examples of Use Cases
We show how the extracted decision trees can be used
to interpret and debug models.
Use of invalid features. Using an invalid feature is a
common problem when training models. In particu-
lar, some datasets contain multiple response variables;
then, one response should not be used to predict the
other. For example, the breast cancer dataset contains
two response variables indicating cancer recurrence:
the length of time before recurrence and whether re-
currence occurs within 24 months. is issue can be
thought of as a special case of using a non-causal fea-
ture, an important problem in healthcare seings. We
train a random forest f to predict whether recurrence
occurs within 24 months, where time to recurrence is
incorrectly included as a feature. en, we extract a
decision tree approximating f of size k = 7 nodes, us-
ing 10 random splits of the dataset into training and
test sets. e invalid feature occured in every extracted
tree, and as the top branch in 6 of the 10 trees.
Use of prejudiced features. We can use our algorithm
to evaluate how a model f depends on prejudiced fea-
tures. For example, gender is a feature in the student
grade dataset, and may be considered sensitive when
estimating student performance. However, if we sim-
ply omit gender, then f may reconstruct it from the
remaining features. For a model f trained with gender
available, we show how a decision tree extracted from
f can be used to understand how f depends on gen-
der. Our approach does not guarantee fairness, but it
can be useful for evaluating the fairness of f .
We extract decision treesT from the random forests
f trained on 10 random splits of the student grades
dataset. e top features are consistently grades in
other classes or number of failing grades received in
the past. Gender occurs below these features (at the
fourth or h level) in 7 of 10 of the trees. We can es-
timate the overall eect of changing the gender label:
∆ = Ex∼P[f (x) | male] − Ex∼P[f (x) | female].
When gender occurs, ∆ is between 0.31 and 0.70 grade
points (average 0.49) out of 20 total grade points. For
the remaining models, ∆ is between 0.11 and 0.32 (av-
erage 0.25). us, the extracted tree includes gender
when f has a relatively large dependence on gender.
Furthermore, becauseT approximates f , we can use
it to identify a subgroup of students where f has par-
ticularly strong dependence on gender. In particular,
points that ow to the internal node N ofT branching
on gender are a subset of inputs whose labelT (x) ∈ Y
is determined in part by gender. We can use T to mea-
sure the dependence on gender within this subset:
∆N = Ex∼P[f (x) | CNL ] − Ex∼P[f (x) | CNR ],
where NL and NR are the le and right children of N .
Also, we can estimate the fraction of students in this
subset using the test set, i.e., P =
∑
x ∈Xtest I[x ∈ F (CN )].
Finally, P · ∆N /∆ measures the fraction of the over-
all dependence of f on gender that is accounted for
by the subtree rooted at N . For models where gender
occurs in the extracted tree, the subgroup eect size
∆N ranged from 0.44 to 0.77 grade points, and the esti-
mated fraction of students in this subroup ranged from
Osbert Bastani, Carolyn Kim, and Hamsa Bastani
Description of Problem Instance Absolute Relative
Dataset Task Samples Features Model f T Tbase T Tbase
breast cancer [31] classication 569 32 random forest 0.966 0.942 0.934 0.957 0.945
student grade [9] regression 382 33 random forest 4.47 4.70 5.10 0.40 0.64
wine origin [14] classication 178 13 random forest 0.981 0.925 0.890 0.938 0.890
wine origin [14] classication 178 13 neural net 0.795 0.755 0.751 0.913 0.905
cartpole [5] reinforcement learning 100 4 control policy 200.0 190.0 35.6 86.8% 83.8%
Table 1: Comparison of the decision treeT extractedby our algorithm to the oneTbase extractedby the baseline. We
show absolute performance on ground truth and performance relative to the model f . For classication (resp.,
regression), performance is F1 score (resp., MSE) on the test set. For reinforcement learning, it is accuracy on
the test set for relative performance, and estimated reward using the decision tree as the policy for absolute
performance. We bold the higher score betweenT and Tbase.
18.3% to 39.1%. e two trees that had the largest ef-
fect size had ∆N of 0.77 and 0.43, resp., and P of 39.1%
and 35.7%, resp. e identied subgroup accounted for
67.3% and 65.6% of the total eect of gender, resp.
Having identied a subgroup of students likely to
be adversely aected, the user might be able to train
a beer model specically for this subgroup. In 5 of
the 7 extracted trees where gender occurs, the aected
students were students with low grades, in particular,
the 27% of students who scored fewer than 8.5 points
in another class. is ne-grained understanding of f
relies on the extracted model, and cannot be obtained
using feature importance metrics alone.
Comparing models. We can use the extracted deci-
sion trees to compare dierent models trained on the
same dataset, and gain insight into why some mod-
els perform beer than others. For example, random
forests trained on the wine origin dataset performed
very well, all achieving an F1 score of at least 0.961.
In contrast, the performance of the neural nets was
bimodal—5 had F1 score of at least 0.955, and the re-
maining had an F1 score of at most 0.741.
We examined the top 3 layers of the extracted deci-
sion trees T , and made two observations. First, occur-
rence of the feature “chlorides” in T was almost per-
fectly correlated with poor performance of the neural
nets. is feature occured in only one of the 10 trees
extracted from random forests, and in none of the trees
extracted from high performing neural nets. A weaker
observation was the branching of T on the feature “al-
cohol”, which is a very important feature—it is the top
branch for all but one of the 20 extracted decision trees.
For the high performing models, the branch threshold
t tended to be higher (749.8 to 999.6) than those for
the poorly performing models (574.4 to 837.3). e lat-
ter observation relies on having an extracted model—
feature inuence metrics alone are insucient.
Understanding control policies. Wecan use the extracted
decision tree to understand a control policy. For exam-
ple, we extracted a decision tree of size k = 7 from the
cartpole control policy. While its estimated reward of
152.3 is lower than for larger trees, it captures a signif-
icant fraction of the policy behavior. e tree says to
move the cart to the right exactly when
(pole velocity ≥ −0.286) ∧ (pole angle ≥ −0.071),
where the pole velocity is in [−2.0, 2.0] and the pole
angle is in [−0.5, 0.5]. In other words, move the cart to
the right exactly when the pole is already on the right
relative to the cart, and the pole is also moving toward
the le (or more precisely, not moving fast enough to-
ward the right). is policy is asymmetric, focusing on
states where the cart is moving to the le. Examining
an animation of simulation, this bias occurs because
the cart initially moves toward the le, so the portion
of the state space where the cart is moving toward the
right is relatively unexplored.
4 CONCLUSIONS
We have proposed model extraction as an approach for
interpreting blackboxmodels, and shown how it can be
used to interpret a variety of dierent kinds of models.
Important directions for future work include devising
algorithms for model extraction using more expressive
input distributions, and developing new ways to gain
insight from the extracted decision trees.
Interpretability via Model Extraction
REFERENCES
[1] Openai cartpole-v0 environment.
hps://gym.openai.com/envs/CartPole-v0. Accessed:
2017-05-18.
[2] Uci machine learning repository.
hp://archive.ics.uci.edu/ml. Accessed: 2017-05-18.
[3] Elaine Angelino, Nicholas Larus-Stone, Daniel Alabi, Margo
Seltzer, and Cynthia Rudin. Learning certiably optimal rule
lists for categorical data. KDD, 2017.
[4] Jimmy Ba and Rich Caruana. Do deep nets really need to be
deep? In Advances in neural information processing systems,
pages 2654–2662, 2014.
[5] Andrew G Barto, Richard S Suon, and Charles W Anderson.
Neuronlike adaptive elements that can solve dicult learn-
ing control problems. IEEE transactions on systems, man, and
cybernetics, (5):834–846, 1983.
[6] Leo Breiman, Jerome Friedman, Charles J Stone, and
Richard A Olshen. Classication and regression trees. CRC
press, 1984.
[7] Rich Caruana, Yin Lou, and Johannes Gehrke. Intelligible
models for classication and regression. In Proceedings of the
23rd ACM SIGKDD Conference on Knowledge Discovery and
Data Mining. Citeseer, 2012.
[8] Rich Caruana, Yin Lou, Johannes Gehrke, Paul Koch, Marc
Sturm, and Noemie Elhadad. Intelligible models for health-
care: Predicting pneumonia risk and hospital 30-day readmis-
sion. In Proceedings of the 21th ACM SIGKDD International
Conference on Knowledge Discovery and Data Mining, pages
1721–1730. ACM, 2015.
[9] Paulo Cortez and Alice Maria Gonçalves Silva. Using data
mining to predict secondary school student performance.
2008.
[10] HoutaoDeng. Interpreting tree ensembles with intrees. arXiv
preprint arXiv:1408.5456, 2014.
[11] Berkeley J Dietvorst, Joseph P Simmons, and Cade Massey.
Algorithm aversion: People erroneously avoid algorithms af-
ter seeing them err. Journal of Experimental Psychology: Gen-
eral, 144(1):114, 2015.
[12] Finale Doshi-Velez and Been Kim. A roadmap for a rigorous
science of interpretability. arXiv preprint arXiv:1702.08608,
2017.
[13] Cynthia Dwork, Moritz Hardt, Toniann Pitassi, Omer Rein-
gold, and Richard Zemel. Fairness through awareness. In
Proceedings of the 3rd Innovations ineoretical Computer Sci-
ence Conference, pages 214–226. ACM, 2012.
[14] M Forina et al. An extendible package for data exploration,
classication and correlation. Institute of Pharmaceutical and
Food Analisys and Technologies, Via Brigata Salerno, 16147,
1991.
[15] Moritz Hardt, Eric Price, Nati Srebro, et al. Equality of oppor-
tunity in supervised learning. In Advances in Neural Informa-
tion Processing Systems, pages 3315–3323, 2016.
[16] Jongbin Jung, Connor Concannon, Ravi Shro, Sharad Goel,
and Daniel G Goldstein. Simple rules for complex decisions.
arXiv preprint arXiv:1702.04690, 2017.
[17] Jon Kleinberg, Himabindu Lakkaraju, Jure Leskovec, Jens
Ludwig, and Sendhil Mullainathan. Human decisions and
machine predictions. Technical report, National Bureau of
Economic Research, 2017.
[18] P. W. Koh and P. Liang. Understanding black-box predictions
via inuence functions. arXiv preprint arXiv:1703.04730, 2017.
[19] Igor Kononenko. Machine learning formedical diagnosis: his-
tory, state of the art and perspective. Articial Intelligence in
medicine, 23(1):89–109, 2001.
[20] Benjamin Letham, Cynthia Rudin, Tyler H McCormick,
David Madigan, et al. Interpretable classiers using rules and
bayesian analysis: Building a beer stroke prediction model.
e Annals of Applied Statistics, 9(3):1350–1371, 2015.
[21] Judea Pearl. Causality. Cambridge university press, 2009.
[22] Dino Pedreshi, Salvatore Ruggieri, and Franco Turini.
Discrimination-aware data mining. In Proceedings of the 14th
ACM SIGKDD international conference on Knowledge discov-
ery and data mining, pages 560–568. ACM, 2008.
[23] Marco Tulio Ribeiro, Sameer Singh, and Carlos Guestrin.
Why should i trust you?: Explaining the predictions of any
classier. In Proceedings of the 22nd ACM SIGKDD Interna-
tional Conference on Knowledge Discovery and Data Mining,
pages 1135–1144. ACM, 2016.
[24] Cynthia Rudin. Algorithms for interpretable machine learn-
ing. In Proceedings of the 20th ACM SIGKDD international con-
ference on Knowledge discovery and data mining, pages 1519–
1519. ACM, 2014.
[25] Selim Temizer, Mykel Kochenderfer, Leslie Kaelbling, Tomas
Lozano-Pérez, and James Kuchar. Collision avoidance for un-
manned aircra using markov decision processes. In AIAA
guidance, navigation, and control conference, page 8040, 2010.
[26] Berk Ustun and Cynthia Rudin. Supersparse linear inte-
ger models for optimized medical scoring systems. Machine
Learning, 102(3):349–391, 2016.
[27] Gilmer Valdes, José Marcio Luna, Eric Eaton, Charles B Si-
mone, et al. Mediboost: a patient stratication tool for in-
terpretable decision making in the era of precision medicine.
Scientic Reports, 6, 2016.
[28] Anneleen Van Assche and Hendrik Blockeel. Seeing the for-
est through the trees. In International Conference on Inductive
Logic Programming, pages 269–279. Springer, 2007.
[29] Gilles Vandewiele, Olivier Janssens, Femke Ongenae, Filip
De Turck, and Soe Van Hoecke. Genesim: genetic ex-
traction of a single, interpretable model. arXiv preprint
arXiv:1611.05722, 2016.
[30] Fulton Wang and Cynthia Rudin. Falling rule lists. In AIS-
TATS, 2015.
[31] William H Wolberg and Olvi L Mangasarian. Multisurface
method of paern separation for medical diagnosis applied
to breast cytology. Proceedings of the national academy of
sciences, 87(23):9193–9196, 1990.

