Unsupervised Feature Selection Based on Space Filling
Concept
Mohamed Laib and Mikhail Kanevski
Institute of Earth Surface Dynamics, Faculty of Geosciences and Environment, University
of Lausanne, 1015 Lausanne, Switzerland. Email: Mohamed.Laib@unil.ch.
Abstract
The paper deals with the adaptation of a new measure for the unsupervised
feature selection problems. The proposed measure is based on space filling
concept and is called the coverage measure. This measure was used for judging
the quality of an experimental space filling design. In the present work, the
coverage measure is adapted for selecting the smallest informative subset of
variables by reducing redundancy in data. This paper proposes a simple analogy
to apply this measure. It is implemented in a filter algorithm for unsupervised
feature selection problems.
The proposed filter algorithm is robust with high dimensional data and can
be implemented without extra parameters. Further, it is tested with simulated
data and real world case studies including environmental data and hyperspectral
image. Finally, the results are evaluated by using random forest algorithm.
Keywords: Unsupervised feature selection, Coverage measure, Space filling,
Random forest, Machine Learning
1. Introduction
In recent years, the techniques of collecting environmental data (such as:
wind speed, permafrost, rainfall, pollution . . .) have been improved. Moreover,
environmental phenomena are mostly: non-linear, multivariate, and in many
cases they are studied in high dimensional feature spaces [1]. Usually, the input
space is constructed by considering available information and expert knowledge.
Preprint submitted to Elsevier June 28, 2017
ar
X
iv
:1
70
6.
08
89
4v
1 
 [
st
at
.M
L
] 
 2
7 
Ju
n 
20
17
The empirically designed input feature space can gain rapidly a high dimension.
In addition to the original features, there is always redundancy in the input
data. In fact, the data points are not uniformly distributed in the experimental
domain in which the data are embedded. In other word, the data space is not
well filled or covered in the presence of redundancy. Consequently, the modelling
of these data could take much time when introducing all features. Such problems
are known as the curse of dimensionality.
To overcome this issue, feature selection (FS) algorithms play an important
role in data driven modelling. Therefore, numerous methods and measures for
FS have been proposed [2, 3]. The main purpose is to retain only features
that bring new and relevant information by reducing the existing redundancy
in data. This procedure helps to manage the curse of dimensionality. In fact, it
improves the accuracy of modelling, speeds up the learning process, and offers
a good interpretation of the results.
The literature of machine learning distinguishes two well-known techniques
of FS, according to the availability of the output variable: supervised and unsu-
pervised feature selection [4, 5, 6, 7]. These techniques try to find the smallest
informative subset of features regarding to a defined measure or criterion.
Other methods are available, such as feature ranking [8, 9], which consists in
giving an order to features regarding their importance. Then, a learning process
to choose how many features can be selected usually follows these methods.
Several measures and criteria are used for selecting the smallest subset of
features: measures based on entropy [10, 11, 12], fractal dimension [13], intrinsic
dimension [6, 7, 14], and also on distance [15].
In the unsupervised methods, the goal is mainly to carry out an exploratory
analysis and to improve the discovering of hidden pattern. Therefore, the tech-
niques of unsupervised feature selection (UFS) [16, 17, 18] do not require a prior
information (output variable). They try to minimise existing redundancy, which
leads to a reduction of dimensionality of data. Further, UFS techniques improve
the understanding, the visualisation, and the interpretation of the results. In
short, the dimensionality reduction consists in choosing a subset of features that
2
contain new and relevant information about the data.
This paper is an adaptation of a new measure based on space filling concept,
which is called the coverage measure. It was mainly used in experimental designs
[19, 20]. Moreover, the proposed measure was used also for the construction
of spatial coverage designs in [21], which proposes its implementation in Splus.
Other implementation for the spatial coverage is available in the R library spcosa
proposed in [22]. The DiceDesign R library proposes an implementation of this
measure, in the context of space filling design [23].
The coverage measure is adapted here for the UFS problems. It can be
implemented in all search techniques such as exhaustive search [24] , sequential
forward selection (SFS) [25], and sequential backward selection [26] (SBS). In
this work, it is considered with a SFS technique.
The proposed measure computes how well the space is covered by the data
points. In fact, it quantifies the uniformity of points in a hypercube by compar-
ing the repartition of points to a regular grid [19]. The smallest coverage value
means that the hypercube is well filled. Intuitively, the coverage measure gives
zero value or near to zero if the data points are distributed as a regular grid, or
near to be a regular grid, in the data space.
The analogy is quite simple and clear, the selected features have to fill uni-
formly all the space in which the data are incorporated. In fact, the repartition
of points expresses the information amount disseminated. Therefore, the small-
est value of coverage means that the variables cover well the space in which
they are embedded. Moreover, the selected variables should contain new and
relevant information about the data.
A filter algorithm is used to implement the coverage measure. It is applied
on simulated dataset and on several well-known benchmark datasets used for
feature selection purpose. In addition, real environmental data are used as well.
Further, the algorithm is tested with different scenarios of noise injection
and shuffling data. Then, the results are verified and evaluated with random
forest algorithm [27, 28] by using a consistent methodology.
The remainder of this paper is organized as follows. Section 2 explains
3
the coverage measure and its use in experimental designs. Section 3 presents
the implementation of this measure for the UFS problems and introduces the
corresponding filter algorithm. In section 4, the measure is evaluated by several
datasets. In the last section, the conclusion is given with future developments.
2. Definition and basic notions
Design and modelling of experiments have always been a fundamental ap-
proach over the years. The experimenter has to propose and choose the suitable
factor space (i.e. experimental domain) for the experiment under study. The
most important early step to check is the coverage or the uniformity of the pro-
posed design. There are many ways to select the best design regarding several
conditions and criteria [29].
Numerous space filling design have been proposed under some prior proper-
ties. They can be constructed by using algebraic methods: based on incomplete
block resolvable design [29], based on association schemes [30]. The construction
algorithms were as well considered in [31, 32, 33]. Other high quality designs,
based on space filling concept, were proposed in [34, 35, 36]. Furthermore, dif-
ferent measures for choosing the best design have been given in [37, 38, 39, 40].
In the literature of sampling methods, one strategy is to generate randomly
different designs. Then, a comparison is carried out using a defined measure to
find the best design. Another approach can be on the extension of an existing
design. The objective is to add more points in the sampling design by taking
into account the prior defined measure.
Other strategies in choosing the best design is to adopt some optimality
criterion, such as:
• The entropy criterion [41, 42], which has been widely used in coding theory
and statistics. The Shannon entropy measures the amount of information
contained in the distribution of a set of points. In [42] it is described as
the classical idea of the information amount in an experiment. Moreover,
4
it is proposed with a linear model (a simple Kriging model), and presents
the corresponding maximum entropy designs.
• The integrated mean squared error [43], which is computationally more
demanding and needs a powerful optimisation algorithm due to the large
combinatorial design space. This criterion can be replaced by the maxi-
mum mean squared error involving a multidimensional optimisation [44].
• Minimax or Maximin distance criteria, proposed in [45], which measure
how well the experimental points are distributed through the experimental
domain. A minimax distance minimises the maximum distance between
points. Whereas the maximin distance maximises the minimum inter-site
distance. A well-known maximin designs are the Placket-Burman designs
where the number of points n = 4m+ 1 where m is a positive integer and
presents the number of factors.
Besides, several uniformity measures have been proposed in [29]. The most
known is the discrepancy. Numerous kinds of discrepancies have been defined
such as: the star discrepancy, the centred L2-discrepancy, and wrap-around L2-
discrepancy. These uniformity criteria are based on the Kolmogorov-Smirnov
test. In fact, it compares the design to a uniform distribution.
In addition to the discrepancy, the coverage measure was also proposed to
quantify the uniformity. In contrast to the discrepancy, the coverage measure
compares the proposed design to a regular grid. Furthermore, the coverage mea-
sure is more stable than the discrepancy in a high dimensional design. Therefore,
it can be applied to high dimensional data.
2.1. Coverage measure
Definition Let X =
{
x1, . . . , xn
}
⊂ [0, 1]d be a sequence of n points of dimen-
sion d. The coverage measure is defined as follows:
λ = 1
ϑ̄
(
1
n
n∑
i=1
(ϑi − ϑ̄)2
) 1
2
(1)
5
0.0 0.2 0.4 0.6 0.8 1.0
0.
0
0.
2
0.
4
0.
6
0.
8
1.
0
Halton sequence
0.0 0.2 0.4 0.6 0.8 1.0
0.
0
0.
2
0.
4
0.
6
0.
8
1.
0
Sobol sequence
0.0 0.2 0.4 0.6 0.8 1.0
0.
0
0.
2
0.
4
0.
6
0.
8
1.
0
Uniform sequence
Figure 1: Different sequences of points with λ: 0.2908866, 0.5243953, and 0.6546629 for
Halton, Sobol, and uniform sequence respectively
where: ϑi = mink (dist
(
xi, xk
)
) is the minimal distance between xi and the
other points of the sequence. And: ϑ̄ = 1n
n∑
i=1
ϑi is the mean of ϑi; where dist is
the euclidean distance.
If the data points are distributed as a regular grid: ϑ1 = ϑ2 = . . . = ϑn = ϑ̄.
Hence, λ = 0
The quality coverage of points can be detected by using the minimum eu-
clidean distance between the points. Further, it takes into account the dispersion
of distances. In fact, the coverage measure λ makes appear the coefficient of
variation of the ϑi, which is known as the relative standard deviation (the ratio
of the standard deviation to the mean of ϑi).
The smaller the value of λ is, the smaller the distance between the points
is. In this case, the design is near to be a regular grid. The best design should
have the smallest coverage value λ.
Figure 1 shows the capability of the coverage measure to compute and quan-
tify the filling of space. Therefore, the use of such measure helps to find the
best experimental design regarding the distribution of points.
From this point of view starts the adaptation idea of this measure for the
unsupervised feature selection problems. Furthermore, the simplicity of this
measure offers a good implementation in a filter algorithm for selecting variables.
It is important to note that the results giving by this measure are acceptable
regarding the selection of the informative feature subset. In addition, it can
make use of a parallel CPU computing and a GPU computing to speed up the
search procedure.
6
0.0 0.2 0.4 0.6 0.8 1.0
0.
0
0.
2
0.
4
0.
6
0.
8
1.
0
Without redundancy
X1
X2
0.0 0.2 0.4 0.6 0.8 1.0
0.
0
0.
1
0.
2
0.
3
0.
4
0.
5
Linear redundancy
X1
X2
0.0 0.2 0.4 0.6 0.8 1.0
0.
0
0.
5
1.
0
Non-Linear redundancy
X1
X2
Figure 2: Features with λ: 0.5110806, 1.061314, and 1.106582 for random (or non-
redundancy), linear redundancy, and non-linear redundancy respectively
3. Unsupervised feature selection based on coverage
Numerous techniques exist for implementing redundancy reduction mea-
sures. The SFS and SBS are the two commonly used techniques for this purpose.
They give acceptable results comparing to the exhaustive search in a short time.
The proposed measure can be implemented in any search technique. In the re-
mainder of this paper the used search technique is the SFS. The implementation
of the proposed measure is described in the following proposition.
Proposition For all subsets of features, the coverage measure is computed (as
it is defined in equation 1). The best subset has the smallest value, regardless
to the used search technique.
Since the present work is proposed with a SFS (see algorithm 1), the features
are added step by step regarding the obtained coverage value.
Figure 2 shows clearly that the redundancy is easily detected by this mea-
sure, whether it is linear or non-linear redundancy. Besides, the UFS using
the (UfsCov) algorithm takes into account the multivariate interactions between
selected features. In addition, the UfsCov algorithm does not need extra param-
eters and does not need a fixed threshold. Therefore, the best subset is the one
that gives the smallest coverage measure. Finally, The UfsCov algorithm can be
programmed easily in R and MATLAB software.
7
Algorithm 1 UfsCov algorithm
Input:
Dataset D with d features X1,...,d.
Empty vectors IdR and CovD
Output:
IdR and CovD respectively, the features id and the coverage values.
1: Rescale data to [0, 1].
2: for i = 1 to d do
3: for j = 1 to (d+ 1− i) do
4: λ = Coverage(DIdR , Dj)
5: end for
6: The lowest value of λ is stored in CovD[j]
7: The corresponding id of the lowest λ is stored in IdR[j]
8: end for
4. Experimental case studies
The simulated and the real world datasets presented in this section are com-
monly used in several papers on machine learning and feature selection. More-
over, several scenarios of noise injection and shuffling data are proposed to
evaluate and to explore the limitation of the UfsCov algorithm.
Further, this section discusses the quality of the obtained results. Finally,
the results are verified and evaluated by using random forest algorithm.
4.1. Simulated case study
The simulated Butterfly dataset, introduced in [46], is composed of 8 features
{X1, X2, J3, J4, J5, I6, I7, I8}, where 3 {X1, X2, I6} are relevant and contain all
the information of the dataset. The remaining 5 features are constructed ba-
sically from {X1, X2, I6} with linear and non-linear relations. In fact, these 5
features are redundant and do not bring new information. (See J. Golay et al.
[6]).
8
(b)
Added Features
C
ov
er
ag
e 
m
ea
su
re
0.
4
0.
5
0.
6
0.
7
0.
8
0.
9
1.
0
X1 X2 I6 I8 J4 I7 J3 J5
Added Features
C
ov
er
ag
e 
m
ea
su
re
0.
4
0.
5
0.
6
0.
7
0.
8
0.
9
1.
0
X2 I6 X1 J4 I8 J5 J3 I7
(a)
Added Features
C
ov
er
ag
e 
m
ea
su
re
0.
4
0.
5
0.
6
0.
7
0.
8
0.
9
X2 X1 I6 J4 I8 J3 J5 I7
(c)
Added Features
C
ov
er
ag
e 
m
ea
su
re
0.
4
0.
5
0.
6
0.
7
0.
8
0.
9
1.
0
I6 X2 X1 J4 I8 J3 J5 I7
(d)
Figure 3: The butterfly dataset results, with: (a) N = 1000, (b) N = 2000, (c) N = 5000, (d)
N = 10000. The algorithm chooses the correct subset of feature regardless of the number of
points (the minimum is reached at 3 features).
Figures 3 show the results for the Butterfly datasets with different number
of N points. The results show that the UfsCov algorithm finds easily the three
important features {X1, X2, I6} regardless of the number of points used to gen-
erate the Butterfly dataset. The minimum value of the coverage measure is
reached at the correct subset.
4.2. Noise injection
The robustness of UfsCov is evaluated against noise. In fact, several exper-
iments of noise injection were performed for two different scenarios. The first
one consists in injecting noise to all features of the Butterfly dataset. The sec-
ond one consists to corrupt only the redundant features (J3, J4, J5, I7, I8). A
Gaussian noise is used with a mean fixed at 0 and a standard deviation set at:
1%, 5%, 10%, 20%, and 50% of the original standard deviation of feature.
The objective of these experiments is to see if UfsCov can detect an existing
redundancy in data corrupted by a Gaussian noise. Furthermore, it is important
9
1
2
3
4
F F F F F F F F
Without noise
1% of noise
5% of noise
10% of noise
20% of noise
50% of noise
0.4
0.6
0.8
1.0
F F F F F F F F
Without noise
1% of noise
5% of noise
10% of noise
20% of noise
50% of noise
(a) (b)
C
ov
er
ag
e 
M
ea
su
re
C
ov
er
ag
e 
M
ea
su
re
Added Features Added Features
Figure 4: Noise injection: (a) all features are corrupted with a Gaussian noise, (b) only
redundant feature are injected with a Gaussian noise.
to find out the limitation of this algorithm against noise and at what level.
Figure 4 shows the two proposed scenarios of noise injection. Figure 4.b
presents the reaction of UfsCov with corrupted redundant features, at different
levels of noise. The algorithm is still robust and detects the important features.
However, at 50% of noise, the minimum value of the coverage is not indicating
the correct subset of features, which is normal for such level of noise. On the
other hand, the algorithm gives at least a correct ranking of features regard-
ing the importance and the provided information of each feature (see table 1).
Therefore, it can be concluded that the UfsCov algorithm is robust against noise.
4.3. Shuffling features
In addition to injecting noise in data, shuffling of features can be an inter-
esting experiment to evaluate the UfsCov algorithm. This operation was carried
out with two scenarios: at the beginning, only two redundant features are shuf-
fled ( J4, J5). Then, three redundant features are shuffled. The results were
expected, since the shuffling destroys the linear or non-linear relation between
features. In fact, this can reduce the redundancy. As figure 5 presents, UfsCov
selected features with relevant information (which are not redundant).
10
Without noise 1% 5% 10% 20% 50%
X1 X1 X2 X1 X1 I6
I6 I6 I6 I6 X2 X2
X2 X2 X1 X2 I6 X1
I8 I8 I8 I8 I8 J4
J4 J4 J4 J4 J4 J5
I7 I7 I7 I7 I7 J3
J5 J5 J5 J5 J5 I8
J3 J3 J3 J3 J3 I7
Table 1: The added features in the SFS technique (here, the Gaussian noise is injected to all
features).
Without noise 1% 5% 10% 20% 50%
X1 X1 X1 X1 X1 X1
I6 I6 I6 I6 I6 I6
X2 X2 X2 X2 X2 X2
I8 I8 I8 I8 I8 I8
J4 J4 J4 J4 J4 J4
I7 I7 I7 J5 J5 J5
J5 J5 J5 I7 I7 I7
J3 J3 J3 J3 J3 J3
Table 2: The added features in the SFS technique (here, the Gaussian noise is injected to all
features).
11
0.
3
0.
4
0.
5
0.
6
0.
7
0.
8
0.
9
1.
0
X2 I6 X1 J4_shJ5_sh I8 I7 J3
0.
3
0.
4
0.
5
0.
6
0.
7
0.
8
0.
9
1.
0
X2 I6 X1 J4_shJ5_sh I7_sh I8 J3
(a) (b)
C
ov
er
ag
e 
m
ea
su
re
C
ov
er
ag
e 
m
ea
su
re
Added Features Added Features
Figure 5: Shuffling features: (a) J4 and J5 are shuffled, (b) the features: J4, J5, and I7 are
shuffled .
Data Number of instances Number of features Selected features
Parkinson 195 22 7
PageBlocks 5393 10 3
Ionosphere 350 34 10
COIL20 1440 1024 98
Table 3: Description of the used datasets and summary of the results obtained by the UfsCov
algorithm.
4.4. Benchmark case studies
Benchmark case studies [47, 48] are also used to test the UfsCov algorithm.
The datasets used in this work are: Parkinson, PageBlocks, Ionosphere, and
COIL20 [48]. Table 3 describes these datasets and the number of selected fea-
tures for each dataset.
4.4.1. Results and discussions
In addition to applying the UfsCov algorithm on simulated and real world
datasets, this subsection discusses the evaluation of the results. Here, random
forest algorithm is used as a classifier for the four datasets used above (Parkin-
12
V
5
0.4
0.6
0.8
1.
0
1.2
1.4
V1
7
V2
1
V2
2
V7 V8 V4 V3 V1
3
1
2
3
4
5
6
V2
0
V1
9
V1 V1
6
V1
0
V5 V1
8
V6 V1
4
V1
1
V1
5
V9 V1
2
V2 V
6
V
2
V
4
V
3
V
1
V
9
V
8
V
10 V
7
(a) (b)
0.9
1.0
1.1
1.2
1.3
1.4
1.5
V
17
V
16
V
23 V
7
V
24
V
18
V
32
V
31
V
21 V
6
V
14 V
5
V
2
V
29
V
12
V
33
V
28 V
4
V
27
V
11 V
3
V
15
V
25
V
26 V
8
V
9
V
20
V
10
V
22
V
19
V
13
V
30 V
1
(c)
Added Features
C
ov
er
ag
e 
m
ea
su
re
C
ov
er
ag
e 
m
ea
su
re
C
ov
er
ag
e 
m
ea
su
re
Added Features Added Features
Figure 6: Results of the UfsCov algorithm for: (A) Parkinson, (B) PageBlocks, (C) Ionosphere.
The selected subset of features provides the minimum value of coverage measure
0.6
0.8
1.0
1.2
Number of added features
C
ov
er
ag
e 
m
ea
su
re
1 200 400 600 800 1000
Figure 7: Results of the UfsCov algorithm for the Coil20 dataset. The minimum is reached
with 98 features.
13
son, PageBlocks, Ionosphere, and COIL20).
The used procedure of testing with random forest is applied once with all
features of the datasets and once with only selected features. The procedure
can be summarised as follows:
• the data were split into training and testing sets (80% for training and
20% for testing);
• the training set was used to find the optimal parameters of random forest
(the number of trees and the number of predictors). Furthermore, the
training step was performed by using a 10-fold cross-validation;
• a random forest model was generated with the optimal parameters found
above (previous step), and then applied to classify the testing set. Two
classification evaluation metrics are used:
– the overall accuracy of classification is computed with the follow-
ing formula:
OA = 1
n
n∑
i=1
I(yi = ŷi) (2)
where ŷi is the predicted class label for the ith observation using the
random forest model. And I(yi = ŷi) is an indicator variable with:
I(yi = ŷi) =

1 if correctly classified
0 otherwise (misclassified)
(3)
Therefore, the OA formula computes the fraction of correct classifica-
tions, which means that the best classification has the highest overall
accuracy.
– Cohen’s Kappa coefficient k [49] is also used to compare the clas-
sification results of random forest. The Kappa evaluation metric is
computed on the test subset by using the following formula:
k =
n
∑
c Tc −
∑
c Pc
n2 −
∑
c GcPc
(4)
14
Data All features Selected features
Parkinson 0.916 (0.042) 0.918 (0.039)
PageBlocks 0.977 (0.004) 0.951 (0.006)
Ionosphere 0.913 (0.024) 0.915 (0.032)
COIL20 0.995 (0.001) 0.996 (0.002)
Table 4: In percent: random forest classification errors (20 repetitions with random splits)
and the standard deviation as well.
Data All features Selected features
Parkinson 0.7068 (0.1140) 0.7374 (0.109)
PageBlocks 0.8518 (0.0221) 0.7168 (0.0340)
Ionosphere 0.8289 (0.0623) 0.8242 (0.0722)
COIL20 0.9964 (0.0004) 0.9945 (0.0012)
Table 5: Mean Kappa coefficient (over 20 repetitions with random splits) and the standard
deviation as well.
where Tc indicates the number of correctly classified samples for class
c; and n is the number of data points in the test subset. Gc and Pc
are the size of samples for the class c and the samples classified in
the same class c.
During the evaluation, random forest algorithm was repeated 20 times. Ta-
bles 4 and 5 illustrate the obtained results with the overall accuracy and the
Kappa coefficient respectively.
The obtained results presented in tables 4 and 5 show that the UfsCov al-
gorithm kept only the relevant informative features. In fact, it reduces the
existing redundancy in data. Therefore, the proposed filter algorithm could be
an interesting tool to minimise redundancy in data.
4.5. Environmental case studies
This section shows the potential of the proposed unsupervised feature se-
lection algorithm on environmental data. In fact, the algorithm is applied on
15
Number of added features
C
ov
er
ag
e 
m
ea
su
re
0.
4
0.
6
0.
8
1.
0
1.
2
1 5 10 15 20 25
Figure 8: Results of the UfsCov algorithm applied on the Permafrost data. The minimum of
the coverage value is reached at 17 features.
Permafrost data and the Indian Pines hyperspectral image.
4.5.1. Permafrost case study
The data were collected in the Alp Mountains of Switzerland. 26 features
(excluding the XY coordinates) are used to predict Permafrost presence or ab-
sence. For more details on the study, including more complete references and
more information about the collected features, see N. Deluigi et al. [50].
Figure 8 presents the unsupervised feature selection results. The minimum of
the coverage measure is reached at 17 features. Furthermore, the given result is
evaluated by using random forest algorithm. Table 6 shows the results of random
forest, with all features and with only the selected features. The classification
accuracy and the Kappa coefficient are shown in figure 9. In this figure, random
forest is applied after each step of UfsCov algorithm.
16
Features Accuracy Kappa metric
All features (26) 0.9301 (0.0002) 0.848 (0.0008)
Selected features (17) 0.9339 (0.002) 0.867 (0.0087)
Table 6: Random forest errors and the standard deviation after 20 repetitions with different
splitting (Permafrost dataset).
0 5 10 15 20 25
0.
6
0.
7
0.
8
0.
9
Number of added Features
O
ve
ra
ll 
ac
cu
ra
cy
(a)
0 5 10 15 20 25
0.
0
0.
2
0.
4
0.
6
0.
8
Number of added Features
Ka
pp
a 
co
ef
fic
ie
nt
(b)
Figure 9: Random forest results for each step of the UfsCov (a) the overall accuracy, (b) the
Kappa coefficient. (Permafrost dataset)
4.5.2. Indian Pines image
The image was captured by Airborne Visible/Infrared Imaging Spectrometer
(AVIRIS) sensor in the Northwest Indiana, on June 12, 1992. The Indian Pines
scene contains agricultural and forested region (figure 10 ). The data consist of
145 x 145 pixels and 220 spectral bands with a spatial resolution of 20 m/pixel
[51].
In this work only 200 bands are used for the experiments, after removing 20
noisy bands (104 − 108, 150 − 163, 220) due to water absorption. The present
case study of hyperspectral image shows that the UfsCov algorithm is able to
deal with remote sensing problems. Furthermore, the proposed algorithm help
to manage high dimensional datasets (more than 100 features).
Figure 11 shows the results of the proposed algorithm. The minimum value
is reached with the 69 features. Table 7 compares the difference between the
two random forest models, with all features and with only the selected features.
17
Figure 10: The Indian Pine Site image with a size of 145 x 145 pixels and the ground truth
of the Indian Pine Site dataset.
0 50 100 150 200
0
1
2
3
4
5
6
7
Number of added features
C
ov
er
ag
e 
m
ea
su
re
Figure 11: Results of the UfsCov algorithm applied on the Indian Pines image. The minimum
of the coverage value is reached at 69 features
Features Accuracy Kappa metric
All features (200 bands) 0.870 (0.0055) 0.852 (0.0066)
Selected features (69 bands) 0.844 (0.0037) 0.822 (0.0036)
Table 7: Random forest errors and the standard deviation after 20 repetitions with different
splitting (for the Indian Pines image).
18
0 40 80 120 160 200
0.
3
0.
4
0.
5
0.
6
0.
7
0.
8
0.
9
Number of added Features
O
ve
ra
ll 
ac
cu
ra
cy
(a)
0 40 80 120 160 200
0.
2
0.
3
0.
4
0.
5
0.
6
0.
7
0.
8
Number of added Features
Ka
pp
a 
co
ef
fic
ie
nt
(b)
Figure 12: Random forest results for each step of the UfsCov (a) the overall accuracy, (b) the
Kappa coefficient. (Indian Pines dataset)
5. Conclusion
The research introduced a space filling measure for the unsupervised feature
selection problems. A new filter algorithm considered is based on the coverage
measure. The proposed UfsCov algorithm minimises redundancy in data. The
proposed algorithm showed its efficiency by testing on simulated and real world
case studies including environmental data. Random forest results confirm the
potential of space filling concept in the unsupervised feature selection problems.
Finally, the UfsCov was programmed in R language and will be available on the
CRAN repository in the SFtools library.
Future development could be in the adaptation of new measures based on
space filling concept for machine learning use and data mining. Furthermore,
it could be important to propose algorithms with a parallel CPU computing
version and GPU computing to speed up the execution time.
6. Acknowledgements
This research was partly supported by the Swiss Government Excellence
Scholarships for Foreign Scholars.
The authors would like to thank Nicola Deluigi for providing us with the
Permafrost dataset. They also would like to thank Micheal Leuenberger, Jean
19
Golay, and Fabian Guignard for fruitful discussions about machine learning.
References
[1] M. Kanevski, A. Pozdnoukhov, V. Timonin, Machine Learning of Spatial
Environmental Data, EPFL Press, 2009.
[2] I. Guyon, A. Elisseeff, An introduction to variable and feature selection,
Journal of Machine Learning Research 3 (2003) p. 1157–1182.
[3] H. Liu, H. Motoda (Eds.), Computational Methods of Feature Selection,
Chapman & Hall/CRC, 2007.
[4] B.-C. Verónica, Sanchez-MaronoNoelia, A.-B. Amparo (Eds.), Feature Se-
lection for High-Dimensional Data, Springer, 2015.
[5] U. Stańczyk, L. C. Jain (Eds.), Feature Selection for Data and Pattern
Recognition, Springer, 2015.
[6] J. Golay, M. Leuenberger, M. Kanevski, Feature selection for regression
problems based on the Morisita estimator of intrinsic dimension, Pattern
Recognitiondoi:http://dx.doi.org/10.1016/j.patcog.2017.05.008.
[7] J. Golay, M. Kanevski, Unsupervised feature selection based on the morisita
estimator of intrinsic dimension, arXiv (2016). arXiv:1608.05581.
[8] S. Solorio-Fernández, J. A. Carrasco-Ochoa, J. F. Martínez-Trinidad, A
new hybrid filter–wrapper feature selection method for clustering based on
ranking, Neurocomputing 214 (2016) p. 866–880.
[9] Q. Zou, J. Zeng, L. Cao, R. Ji, A novel features ranking metric
with application to scalable visual and bioinformatics data classification,
Neurocomputing 173 (2016) p. 346–354.
[10] I. Beheshti, H. Demirel, F. Farokhian, C. Yang, H. Matsuda, Structural
mri-based detection of alzheimer’s disease using feature ranking and classifi-
20
cation error, Computer Methods and Programs in Biomedicine 137 (2016)
p. 177–193.
[11] F. Li, Z. Zhang, C. Jin, Feature selection with partition differentiation
entropy for large-scale data sets, Information Sciences 329 (2016) p. 690–
700.
[12] X. Zhang, C. Mei, D. Chen, J. Li, Feature selection in mixed data:
A method using a novel fuzzy rough set-based information entropy,
Pattern Recognition 56 (2016) p. 1–15.
[13] S. D. Bhavani, T. S. Rani, R. S. Bapi, Feature selection using correlation
fractal dimension: Issues and applications in binary classification problems,
Applied Soft Computing 8 (2008) p. 555–563.
[14] F. Camastra, A. Staiano, Intrinsic dimension estimation: Advances and
open problems, Information Sciences 328 (2016) 26–41.
[15] S. yi Jiang, L. xi Wang, Efficient feature selection based on
correlation measure between continuous and discrete features,
Information Processing Letters 112 (2016) p. 203–215.
[16] J. G. Dy, Unsupervised feature selection, in: Computational Methods of
Feature Selection, Chapman & Hall/CRC, 2007, pp. 19–39.
[17] P. Mitra, C. A. Murthy, S. K. Pal, Unsupervised feature selection using
feature similarity, IEEE Transactions on Pattern Analysis and Machine
Intelligence 24 (3) (2002) 301–312.
[18] J. G. Dy, C. E. Brodley, Feature selection for unsupervised learning, Journal
of Machine Learning Research 5 (2004) 845–889.
[19] M. Gunzburer, J. Burkdart, Uniformity measures for point samples in hy-
percubes, https://people.sc.fsu.edu/ jburkardt/.
[20] J. Franco, Planification d’expériences numériques en phase exploratoire
pour la simulation des phénomènes complexes, Thesis (2008) 282.
21
[21] J. A. Royle, D. Nychka, An algorithm for the construction of spatial cover-
age designs with implementation in Splus, Computers and Geosciences 24
(1997) p. 479–488.
[22] D. Walvoort, D. Brus, J. de Gruijter, An r package for spatial coverage
sampling and random sampling from compact geographical strata by k-
means, Computers and Geosciences 36 (2010) p. 1261–1267.
[23] D. Dupuy, C. Helbert, J. Franco, DiceDesign and DiceEval: Two R Pack-
ages for Design and Analysis of Computer Experiments (2015).
URL http://www.jstatsoft.org/v65/i11/
[24] S. Kirkpatrick, C. D. Gelatt, M. P. Vecchi, Optimization by simulated
annealing, Science 220 (4598) (1983) 671–680.
[25] A. W. Whitney, A direct method of nonparametric measurement selection,
IEEE Transactions on Computers C-20 (9) (1971) 1100–1103.
[26] S. J. Reeves, An efficient implementation of the backward greedy algorithm
for sparse signal reconstruction, IEEE Signal Processing Letters 6 (10)
(1999) 266–268.
[27] L. Breiman, Random forests, Machine Learning 45 (1) (2001) 5–32.
[28] A. Jain, D. Zongker, Feature selection: evaluation, application, and small
sample performance, IEEE Transactions on Pattern Analysis and Machine
Intelligence 19 (2) (1997) 153–158. doi:10.1109/34.574797.
[29] K.-T. Fang, R. Li, A. Sudjianto, Design and Modeling for Computer Ex-
periments, Taylor and Francis Group, 2006.
[30] I. Rezgui, Z. Gheribi-Aoulmi, H. Monod, U-type designs via new gener-
alized partially balanced incomplete block designs with m = 4, 5 and 7
associated classes, Applied Mathematics 06 (2015) p. 242–264.
[31] M. Laib, I. Rezgui, Z. Gheribi-Aoulmi, H. Monod, CombinS: Constructions
method of rectangular PBIB and rectangular right angular PBIB(m) (m=
22
4,5 and 7), R package version 1.1-1 (2015).
URL https://CRAN.R-project.org/package=CombinS
[32] M. Laib, I. Rezgui, Z. Gheribi-Aoulmi, RPPairwiseDesign: Resolvable
partially pairwise balanced design and Space-filling design via association
scheme, R package version 1.0 (2015).
URL https://CRAN.R-project.org/package=RPPairwiseDesign
[33] M. Laib, A. Boudraa, Z. Gheribi-Aoulmi, PGM2: Recursive method for
construction of nested resolvable designs and uniform designs associated,
R package version 1.0-1 (2014).
URL https://CRAN.R-project.org/package=PGM2
[34] K. Fang, W. Shiu, J. Pan, Uniform designs based on latin squares, Statistica
Sinca 9 (1999) p. 905–912.
[35] G. Tian, K. Fang, Uniform design for mixture-amount experiments and for
mixture experiments under order restrictions, Science in China, Ser. A, 42
(1999) p. 456–470.
[36] P.Winkerand, K. Fang, Optimal u-type design, in monte carlo and quasi-
monte carlo methods, Springer (1996) p. 436–448Eds. by H. Niederreiter,
P. Zinterhof and P. Hellekalek.
[37] F. Hickernell, A generalized discrepancy and quadrature error bound,
Math. Comp. 67 (1998) p. 299–322.
[38] A. Jourdan, J. Franco, A new criterion based on kullback-leibler informa-
tion for space filling designs, arXiv:0904.2456.
[39] J. Franco, L. Carraro, O. Roustant, A. Jourdan, A radar-shaped statistic
for testing and visualizing uniformity properties in computer experiments,
arXiv:0802.2158.
[40] G. Damblin, M. Couplet, B. Iooss, Numerical studies of space filling designs:
optimization of Latin Hypercube Samples and subprojection properties,
23
Journal of Simulation 7 (2013) 276–289.
URL https://hal.archives-ouvertes.fr/hal-00848240
[41] C. E. Shannon, A mathematical theory of communication, Bell System
Technical Journal 27 (3) (1948) 379–423. doi:10.1002/j.1538-7305.
1948.tb01338.x.
[42] M. C. Shewry, H. P. Wynn, Maximum entropy sampling, Journal of Applied
Statistics 14 (2) (1987) 165–170. doi:10.1080/02664768700000020.
[43] J. Sacks, S. B. Schiller, W. J. Welch, Designs for computer experiments,
Technometrics 31 (1) (1989) 41–47.
URL http://www.jstor.org/stable/1270363
[44] J. Sacks, S. Schiller, Spatial designs, in: Statistical Decision Theory and
Related Topics IV, [eds. S. S. Guptaa and J. O. Berger, New York: Springer-
Verlag], 1988, pp. 385–399.
[45] M. Johnson, L. Moore, D. Ylvisaker, Minimax and maximin distance de-
signs, Journal of Statistical Planning and Inference 26 (2) (1990) 131 – 148.
doi:http://dx.doi.org/10.1016/0378-3758(90)90122-B.
[46] J. Golay, M. Laib, IDmining: Intrinsic Dimension for Data Mining, R
package version 1.0.0 (2016).
URL https://CRAN.R-project.org/package=IDmining
[47] M. Lichman, UCI Machine Learning Repository, University of California,
Irvine, School of Information and Computer Sciences (2013).
URL http://archive.ics.uci.edu/ml
[48] D. Cai, X. He, J. Han, T. S. Huang, Graph regularized nonnegative
matrix factorization for data representation, IEEE Transactions on Pat-
tern Analysis and Machine Intelligence 33 (8) (2011) 1548–1560. doi:
10.1109/TPAMI.2010.231.
24
[49] J. Cohen, A coefficient of agreement for nominal scales, Educational
and Psychological Measurement 20 (1) (1960) 37–46. doi:10.1177/
001316446002000104.
[50] N. Deluigi, C. Lambiel, M. Kanevski, Data-driven mapping of the potential
mountain permafrost distribution, Science of The Total Environment 590
(2017) 370–380.
[51] M. F. Baumgardner, L. L. Biehl, D. A. Landgrebe, 220 band aviris hy-
perspectral image data set: June 12, 1992 indian pine test site 3 (2015).
doi:doi:/10.4231/R7RX991C.
URL https://purr.purdue.edu/publications/1947/1
25

