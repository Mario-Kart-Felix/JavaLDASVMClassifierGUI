1
Storage, Communication, and Load Balancing
Trade-off in Distributed Cache Networks
Mahdi Jafari Siavoshani, Member, IEEE, Ali Pourmiri, Seyed Pooya Shariatpanahi
Abstract‚ÄîWe consider load balancing in a network of caching
servers delivering contents to end users. Randomized load
balancing via the so-called power of two choices is a well-
known approach in parallel and distributed systems. In this
framework, we investigate the tension between storage resources,
communication cost, and load balancing performance. To this
end, we propose a randomized load balancing scheme which
simultaneously considers cache size limitation and proximity in
the server redirection process.
In contrast to the classical power of two choices setup, since the
memory limitation and the proximity constraint cause correlation
in the server selection process, we may not benefit from the power
of two choices. However, we prove that in certain regimes of
problem parameters, our scheme results in the maximum load
of order Œò(log log n) (here n is the network size). This is an
exponential improvement compared to the scheme which assigns
each request to the nearest available replica. Interestingly, the
extra communication cost incurred by our proposed scheme,
compared to the nearest replica strategy, is small. Furthermore,
our extensive simulations show that the trade-off trend does not
depend on the network topology and library popularity profile
details.
Keywords
Randomized Algorithms, Distributed Caching Servers, Re-
quest Routing, Load Balancing, Communication Cost, Balls-
into-Bins, Content Delivery Networks.
I. INTRODUCTION
A. Problem Motivation
Advancement of technology leads to the spread of smart
multimedia-friendly communication devices to the masses
which causes a rapid growth of demands for data commu-
nication [2]. Although Telcos have been spending hugely
on telecommunication infrastructures, they cannot keep up
with this data demand explosion. Caching predictable data in
network off-peak hours, near end users, has been proposed as
a promising solution to this challenge. This approach has been
used extensively in content delivery networks (CDNs) such as
Akamai, Azure, Amazon CloudFront, etc. [3], [4], and mobile
video delivery [5]. In this approach, a cache network is usually
referred to as a set of caching servers that are connected over
a network, giving content delivery service to end users.
As a schematic view of a typical cache network see Fig-
ure 1. This figure shows caching servers connected through a
The authors‚Äô names appear in alphabetical order.
This work has been presented in part at IPDPS 2017, [1].
M. Jafari Siavoshani is with the Department of Computer Engineering,
Sharif University of Technology, Tehran, Iran (email: mjafari@sharif.edu).
A. Pourmiri is with the Department of Computer Engineering, University
of Isfahan, Isfahan, Iran (email: a.pourmiri@comp.ui.ac.ir).
S. P. Shariatpanahi is with the School of Computer Science, Institute for Re-
search in Fundamental Sciences (IPM), Tehran, Iran (email: pooya@ipm.ir).
Request Redirection
Backhaul Network
Assigned Requests
Incoming Requests
Fig. 1: A general distributed cache network.
backhaul network. These servers are responsible for delivering
contents requested by customers. Each server should assign
the demand to a responding server (which could be itself)
via an assignment strategy. In every cache network we have
three critical parameters, namely, Storage Resource, Commu-
nication Cost, and Network Imbalance. Storage, or memory
characterizes what percentage of the total content library can
be cached at each server. Communication cost is the amount
of data transferred inside the backhaul network to satisfy
content requests. Finally, network imbalance characterizes how
uniformly the requested contents‚Äô loads are distributed among
different responding servers. This is usually measured by
comparing the load of the busiest server with the average
load of all servers after request assignments. Every request
assignment strategy, in fact, leads to a trade-off between these
three quantities.
From a practical viewpoint, we are interested in distributed
server selection strategies which are scalable in large net-
works. Randomized load balancing via the so-called ‚Äúpower of
two choices‚Äù is a well-investigated paradigm in parallel and
distributed settings [6], [7], [8], [9]. In this approach, upon
arrival of a request, the corresponding user will query about the
current loads of two independently at random chosen servers,
and then allocates the request to the least loaded server.
Considering only the load balancing perspective, Berenbrink
et al., [10], showed that in this scheme after allocating m
balls (requests, tasks, etc.) to n bins (servers, machines, etc.)
the maximum number of balls assigned to any bin, called
maximum load, is at most m/n + O(log log n) with high
probability. This only deviates O(log log n) from the average
ar
X
iv
:1
70
6.
10
20
9v
1 
 [
cs
.I
T
] 
 3
0 
Ju
n 
20
17
2
load and the deviation depends on the number of servers.
Although the power of two choices strategy addresses the
load balancing issue in a distributed manner, it does not
consider the role of two other important quantities, namely,
memory and communication cost. Our goal in this paper is
to extend the power of two choices framework in order to
characterize the trade-off between these three quantities. Our
results show that the maximum load, communication cost, and
servers‚Äô memory are three entangled parameters. Thus, the
previous studies are not sufficient for designing a practical
load balancing strategy in cache networks.
B. Problem Setting and Our Contributions
In this paper, we consider a general cache network model
that entails basic characteristics of many practical scenarios.
We consider a network of n servers and a library of size
K files. Each server can cache M files in network low-
traffic hours. Let us assume a popularity distribution P =
{p1, . . . , pK} on the library. We assume that the cache content
placement at each server is proportional to this popularity
distribution. In high-traffic hours there are n sequential file
requests, from the library, distributed among servers uniformly
at random. Every server either serves its requests or redirects
them (via an assignment scheme) to other nodes which have
cached the files. We define the maximum load L of an assign-
ment scheme as the maximum number of allocations to any
single server after assigning all requests. The communication
cost C is the average number of hops required to deliver the
requested file to its request origin.
As the baseline assignment scheme, we consider that each
request arrived at every server is dispatched to the nearest file
replica. This scheme results in the minimum communication
cost, while ignoring maximum load of servers. We show that,
for a grid topology and every constant 0 < Œ± < 1/2, if
K = n, M = nŒ±, and P is a uniform distribution, this
scheme will result in the maximum load L in the interval
[‚Ñ¶(log n/ log log n), O(log n)] with high probability1 (w.h.p.).
Moreover, for every constant 0 <  < 1, if K = n1‚àí and
M = Œò(1), then the maximum load is Œò(log n) w.h.p. We also
investigate the communication cost incurred in this scheme for
Uniform and Zipf popularity distributions. In particular, we
derive the communication cost C of order Œò(
‚àö
K/M) for the
Uniform distribution in a grid topology.
In contrast, we propose a new scheme which considers
memory, maximum load, and communication cost, simulta-
neously. For each request, this scheme chooses two random
candidate servers that have cached the request while putting
a constraint on their distance r to the requesting node (i.e.,
the proximity constraint). Due to cache size limitation and the
proximity constraint, current results in the balanced allocation
literature cannot be carried over to our setting. Basically, we
show that here the two chosen servers will become correlated
and this might diminish the power of two choices. Since this
correlation arises from both memory limitation and proximity
constraint, the main challenge we address in this paper is
1With high probability refers to an event that happens with probability
1‚àí 1/nc, for some constant c > 0.
‚Üµ
 1/2
1 Power of two choices  
is achievable
Fig. 2: Suppose M = nŒ± and r = nŒ≤ . Then the shaded area
shows the region where the power of two choices is asymp-
totically achievable (for more details, refer to Theorem 4).
characterizing the regimes where we can benefit from the
power of two choices and at the same time have a low
communication cost.
In particular, suppose 0 < Œ±, Œ≤ < 1/2 be two con-
stants and let K = n, M = nŒ±, r = nŒ≤ , and P be
a Uniform distribution. Then, for grid topology, provided
Œ± + 2Œ≤ ‚â• 1 + 2(log log n/ log n), the maximum load is
Œò(log log n) w.h.p., and the communication cost is Œò(r).
Therefore, if we set Œ≤ = 1‚àíŒ±2 +log log n/ log n we achieve the
power of two choices with the communication cost of order
Œò(r) = Œò
(
n
1‚àíŒ±
2 log n
)
. This communication cost is only
log n factor above the communication cost achieved by the
nearest replica strategy, which is Œò(
‚àö
K/M) = Œò(n
1‚àíŒ±
2 ).
Figure 2 shows the region of parameters Œ± and Œ≤ where the
power of two choices is asymptotically achievable. It should
be noted that while our theoretical results are derived for grid
networks, the main reason for assuming a grid is presentation
clarity and the results can be extended to other topologies.
While our theoretical results are derived for large networks
(i.e., asymptotic analysis), our simulation results show their
validity even for finite sized networks. Also, in simulations
we investigate the problem in more diverse settings such as
considering other network topologies.
C. Related Work
Load balancing has been the focus of many papers on cache
networks [11], [12], [13], among which distributed approaches
have attracted a lot of attention (e.g., see [14], [8], and [15]).
Randomized load balancing via the power of two choices, is a
popular approach in this direction [7]. Chen et al. [16] consider
the two choices selection process, where the second choice is
the next neighbor of the first choice. In [17], Xia et al. use the
length of common prefix (LCP)-based replication to arrive at a
recursive balls and bins problem. In [16] and [17], the authors
benefit from the metaphor of power of two choices to design
algorithms for randomized load balancing. In contrast to these
works, we follow a theoretical approach to derive provable
results for cache networks.
Theoretical works investigating the power of two choices
in cache networks all just consider the role of two parameters
among Memory Resource, Load Balancing, and Communica-
3
tion Cost. These works can be summarized in three categories
as follow.
Memory Resource vs. Communication Cost trade-off has
been investigated in many works such as [5], [18], [19],
[20], and [21]. Non of these papers have considered the load
balancing issue, in cache networks which is very important in
practice.
Load Balancing vs. Memory Resource trade-off has been
investigated in [22] and [23]. In [22] the authors consider
the supermarket model for performance evaluation of CDNs.
Although the work [22] considers the memory limitation into
account, it does not consider the proximity principle which is
a central issue in our paper. Liu et al. [23] study the setting
where the clients compare the servers in terms of hit-rate
(for web applications), or bit-rate (for video applications) to
choose their favourite ones. Their setup and objectives are
different from those we consider here. Moreover, they have
not considered the effect of their randomized load balancing
scheme on communication cost.
Communication Cost vs. Load Balancing trade-off has been
investigated in [24], [25], [26], [27], [28], [29], and [30], with-
out considering the effect of cache size limitation. Although
the works [24], [25], and [26] have mentioned this trade-off,
non of them provides a rigorous analysis.
In contrast to the standard balls and bins model, the works
[27], [28], [29], and [30] introduced the effect of proximity
constraint to the ball and bins framework. In the standard
balls and bins model, each ball (request) picks two bins
(servers) independently and uniformly at random and it is then
allocated to the one with lesser load [6]. However, in many
settings, selecting any two random servers might be infeasible
or costly. In other words, this proximity constraint translates
to a correlation between the two choices, i.e., the balls and
bins model with related choices.
The most related work to our paper is [28]. Kenthapadi and
Panigrahi [28] proposed a model where n bins are connected
as a d-regular graph. Corresponding to each ball, a node
is chosen uniformly at random as the first candidate. Then,
one of its neighbours is chosen uniformly at random as the
second candidate and the ball is allocated to the one with
the minimum load. Under this assumption, they proved that
if the graph is sufficiently dense (i.e., the average degree is
n‚Ñ¶(log logn/ logn)), then after allocating n balls, the maximum
load is Œò(log log n) w.h.p.
Although the model used in [28] considers the proximity
principle by assigning each request to the origin neighbors,
it cannot be directly applied to our cache network setup.
First, they do not consider multi-hop communication, while
in practice the communication is done in a multi-hop fashion.
Second, the above model cannot accommodate the cache size
limitation of servers. Cache size limitation introduces the
notion of cache content placement which should be based on
the popularity profile. In addition, this limitation will introduce
a new source of correlation between choices which is not
considered in [28].
The organization of the paper is as follows. In Section II,
we present our notation and problem setup. Then, in Section
III the nearest replica strategy, is investigated as the baseline
scheme. In Section IV, we propose and analyze the proximity-
aware two choices strategy, which at the same time considers
memory limitation, proximity constraint, and benefits from
the power of two choices. In Section V the performance of
these two schemes are investigated via extensive simulations.
Finally, our discussions and concluding remarks are presented
in Section VI.
II. NOTATION AND PROBLEM SETTING
A. Notation
Throughout the paper, with high probability refers to an
event that happens with probability 1‚àí1/nc, for some constant
c > 0. Let G = (V,E) be a graph with vertex set V and edge
set E where e(G) := |E|. For u ‚àà V let d(u) denote for the
degree of u in G. For every pair of nodes u, v ‚àà V , dG(u, v)
denotes the length of a shortest path from u to v in G. The
neighborhood of u at distance r is defined as
Br(u) := {v : dG(u, v) ‚â§ r and v ‚àà V (G)} .
Finally, we use Po(Œª) to denote for the Poisson distribution
with parameter Œª.
B. Problem Setting
We consider a cache network consisting of n caching
servers (also called cache-enabled nodes) and edges connect-
ing neighboring servers forming a
‚àö
n √ó
‚àö
n grid. Direct
communication is possible only between adjacent nodes, and
other communications should be carried out in a multi-hop
fashion.
Remark 1. Throughout the paper for the sake of presentation
clarity we may consider a torus with n nodes. This helps to
avoid boundary effects of grid and all the asymptotic results
hold for the grid as well.
Suppose that the cache network is responsible for handling
a library of K files W = {W1, . . . ,WK}, whereas the popu-
larity profile follows a known distribution P = {p1, . . . , pK}.
The network operates in two phases, namely, cache con-
tent placement and content delivery. In the cache content
placement phase each node caches M ‚â§ K files randomly
from the library according to their popularity distribution
P = {p1, . . . , pK} with replacement, independent of other
nodes. Also note that, throughout the paper we assume that
M  K, unless otherwise stated.
Consider a time block during which n files are requested
from the servers sequentially that are chosen uniformly at
random. Let Di denote the number of requests (demands)
arrived at server i. Then for large n we have Di ‚àº Po(1)
for all 1 ‚â§ i ‚â§ n.
For library popularity profile P , we consider two probability
distributions, namely, Uniform and Zipf with parameter Œ≥. In
the Uniform distribution we have
pi =
1
K
, i = 1, . . . ,K,
4
which considers equal popularity for all the files. In Zipf
distribution the request probability of the i-th popular file is
inversely proportional to its rank as follows
pi =
1/iŒ≥
K‚àë
j=1
1/jŒ≥
, i = 1, . . . ,K,
which has been confirmed to be the case in many practical
applications [31], [32].
For any given cache content placement, an assignment
strategy determines how each request is mapped to a server.
Let Ti denote the number of requests assigned to server i at
the end of mapping process.
Now, for each strategy we define the following metrics.
Definition 1 (Communication Cost and Maximum Load).
‚Ä¢ The communication cost of a strategy is the average
number of hops between the requesting node and the
serving node, denoted by C.
‚Ä¢ The maximum load of a strategy is the maximum number
of requests assigned to a single node, denoted by L =
max1‚â§i‚â§n Ti.
III. NEAREST REPLICA STRATEGY
The simplest strategy for assigning requests to servers is
to allocate each request to the nearest node that has cached
the file. This strategy, formally defined below, leads to the
minimum communication cost, while does not try to reduce
maximum load.
Definition 2 (Strategy I: Nearest Replica Strategy). In this
strategy each request is assigned to the nearest node ‚Äìin the
sense of the graph shortest path distance‚Äì which has cached
the requested file. If there are multiple choices ties are broken
randomly.
Consider the set of nodes that have cached file Wj , say
Sj . According to Strategy I, each demand from node u for
file Wj will be served by arg minv‚ààSj dG(u, v). This induces
a Voronoi Tessellation on the torus corresponding to file
Wj which we denote by Vj . Then, alternatively, we can
define Strategy I as assigning each request of file Wj to the
corresponding Voronoi cell center.
In order to analyze the maximum load imposed on each
node, we should investigate the size of such Voronoi regions.
The following Lemma is in this direction.
Lemma 1. Under the Uniform popularity distribution, the
maximum cell size (number of nodes inside each cell) of Vj ,
1 ‚â§ j ‚â§ K, is at most O (K log n/M) w.h.p. In particular,
every Voronoi cell centered at any node is contained in a sub-
grid of size r √ó r with r = O
(‚àö
K log n/M
)
. Furthermore,
if K = n1‚àí, for some constant 0 <  < 1, and M = Œò(1),
then there exists a Voronoi cell of size Œò (K log n/M) w.h.p.
Proof of Lemma 1. Upper Bound ‚Äì Fix a node u and w.l.o.g.
assume that u is denoted by pair (0, 0) in the torus. With
respect to u and some positive number r > 0 define four
areas as follows
A1(u) := {(x, y) : 0 ‚â§ y ‚â§ x/2 and (x, y) ‚àà Br(u)},
A2(u) := {(x, y) : 0 ‚â§ ‚àíx ‚â§ y/2 and (x, y) ‚àà Br(u)},
A3(u) := {(x, y) : 0 ‚â§ ‚àíy ‚â§ ‚àíx/2 and (x, y) ‚àà Br(u)},
A4(u) := {(x, y) : 0 ‚â§ x ‚â§ ‚àíy/2 and (x, y) ‚àà Br(u)},
which are shown in Fig. 3. It is easy to see that all four areas
have the same size, that is
|A1(u)| =
br/3c‚àë
y=0
r‚àíy‚àë
x=2y
1
=
br/3c‚àë
y=0
(r ‚àí 3y + 1)
‚â•
br/3c‚àë
y=0
3y
‚â• r2/8. (1)
Let us fix some arbitrary 1 ‚â§ j ‚â§ K and for every node u
define indicator random variable Xu,j taking value 1 if u has
cached file Wj and there is no node in A1(u) that has cached
file Wj , and 0 otherwise. Then,
Pr [Xu,j = 1] =
(
1‚àí
(
1‚àí 1
K
)M)(
1‚àí 1
K
)M(|A1(u)|‚àí1)
,
where the first term determines the probability that u caches
Wj and the second one determines the probability that nodes in
A1(u) \ {u} do not cache Wj . By setting r = 5
‚àö
K log n/M
and applying Inequality (1) we have,(
1‚àí 1
K
)M(|A1(u)|‚àí1)
= e‚àí
25 logn
8 (1 + o(1))
= O(n‚àí3), (2)
where it follows from 1‚àí 1/K = e‚àí1/K(1 + o(1)) and
M/K = o(1). Moreover, by using the approximation
1‚àí (1‚àí 1/K)M = M(1 + o(1))/K, we have
Pr [Xu,j = 1] ‚â§
M(1 + o(1))
K ¬∑ n3
.
Therefore applying the union bound over all n nodes and
K files implies that w.h.p. for every u there exists at least one
node in A1(u) which shares a common file with u, supported
that we choose r = 5
‚àö
K log n/M . We can similarly prove
the same argument for A2(u), A3(u) and A4(u).
Suppose that u has cached file Wj , and we want to find
an upper bound for the size of the Voronoi cell centered at u
corresponding to Wj . In order to do this let us define v1 =
(v1x, v
1
y) ‚àà A1(u) to be the nearest node to u with file Wj .
Similarly define vi ‚àà Ai(u), 2 ‚â§ i ‚â§ 4. W.l.o.g. assume that
u is the origin and the nodes are in a xy-coordinate system.
Define
B := {(x, y) : v3x ‚â§ x ‚â§ v1x and v4y ‚â§ y ‚â§ v2y}.
Now we show that the Voronoi cell of u is contained in B,
and thus the size of B is an upper bound to the size of the
5
Fig. 3: Demonstration of regions A1(u), . . . , A4(u) used in
the upper bound proof of Lemma 1.
Voronoi cell. Consider Fig. 3. Let us consider node w in the
complement of B with wy > v2y and wx > 0. Assume that
Puw is a shortest path from w to u that passes node (0, v2y).
By definition of A2(u), we know the length of a shortest path
from (0, v2y) to (v
2
x, v
2
y) is |v2x| ‚â§ v2y/2. This shows that w
is closer to v2 than u, and by definition it does not belong
to the Voronoi cell centered at u. We similarly can show that
each arbitrary node w ‚àà Bc is closer to either vi‚Äôs rather than
u. Since we arbitrarily choose u and 1 ‚â§ j ‚â§ K, there is
sub-grid B that contains every Voronoi cell in Vj , centered at
any given u. So the size of any Voronoi cell centered at an
arbitrary node u is bounded from above by |B|, which is at
most 4r2 = O(K log n/M).
Lower Bound ‚Äì Let us define indicator random variable
Yu,j for every u and some fixed j taking value 1 if u has
cached file Wj and there is no v ‚àà Br(u) that has cached file
Wj , and 0 otherwise. Note that |Br(u) \ {u}| = 2r(r + 1).
Then we have
Pr [Yu,j = 1] =
(
1‚àí
(
1‚àí 1
K
)M)(
1‚àí 1
K
)M [2r(r+1)]
.
By setting r =
‚àö
 ¬∑K ¬∑ log n/4M and using similar approx-
imations used in (2) we have
p , Pr [Yu,j = 1] =
M(1 + o(1))
K ¬∑ n/2
.
Let Yj =
‚àë
u Yu,j . Then, we have the following claim.
Claim 1. For every j we have Yj ‚â• 1 with probability 1‚àío(1).
This claim shows that there exists at least a Voronoi cell of
size Œò(r2) = Œò(K log n/M) which concludes the proof.
Now, in order to prove the claim note that
E [Yj ] =
‚àë
u
E [Yu,j ] = n ¬∑
M(1 + o(1))
K ¬∑ n/2
= Mn/2(1+o(1)).
Also, we know that
Var [Yj ] =
‚àë
u,v
Cov(Yu,j , Yv,j)
=
‚àë
u,v
E [Yu,jYv,j ]‚àíE [Yu,j ]E [Yv,j ]
=
‚àë
u,v
(
Pr [Yu,j = 1, Yv,j = 1]
‚àíPr [Yu,j = 1] ¬∑Pr [Yv,j = 1]
)
, (3)
where the last equality holds because Yu,j‚Äôs are indicator
random variables. It is easy to see that for every u and v
with dG(u, v) > 2r, Cov(Yu,j , Yv,j) = 0 as cache content
placement at different nodes are independent processes. So
we only consider pairs u and v, with dG(u, v) ‚â§ 2r. Then for
each pair of nodes three following cases should be considered:
‚Ä¢ u = v: In this case we have
Pr [Yu,j = 1, Yv,j = 1]‚àíPr [Yu,j = 1] ¬∑Pr [Yv,j = 1]
= Pr [Yu,j = 1]‚àí p2 = p(1‚àí p).
(4)
‚Ä¢ 0 < dG(u, v) ‚â§ r: By definition of indicator random
variables Yu,j‚Äôs, we have
Pr [Yu,j = 1, Yv,j = 1]‚àíPr [Yu,j = 1] ¬∑Pr [Yv,j = 1]
= 0‚àí p2. (5)
‚Ä¢ r < dG(u, v) ‚â§ 2r: In this case we have
Pr [Yu,j = 1, Yv,j = 1]‚àíPr [Yu,j = 1] ¬∑Pr [Yv,j = 1]
= Pr [Yu,j = 1|Yv,j = 1]Pr [Yv,j = 1]‚àí p2
‚â§ M(1 + o(1))
K
p‚àí p2 ‚â§ 2M
K
p. (6)
Now let us split the summation (3) based on dG(u, v) as
follows
Var [Yj ] =
‚àë
u
Cov(Yu,j , Yu,j)
+
‚àë
u
‚àë
v:0<dG(u,v)‚â§r
Cov(Yu,j , Yv,j)
+
‚àë
u
‚àë
v:r<dG(u,v)‚â§2r
Cov(Yu,j , Yv,j).
Applying results (4-6) yields
Var [Yj ] ‚â§ np(1‚àí p)‚àí n|Br(u)|p2 + n|B2r(u)|
2Mp
K
‚â§ np+ 4nr(2r + 1)2Mp
K
‚â§ np+ 6np log n
‚â§ 7np log n,
where we use the fact that 4r(2r + 1) ‚â§ 9r2 ‚â§ 3K log n.
Applying Chebychev‚Äôs inequality leads to
Pr [|Yj ‚àíE [Yj ] | ‚â• E [Yj ] /2] ‚â§
4Var [Yj ]
E [Yj ]
2
‚â§ 28np log n
n2p2
=
28 log n
np
= o(1).
6
Therefore, Yj concentrates around its mean, i.e., np =
Œò(n/2), which proves the claim.
Now, we are ready to present our main results for this
section which characterize the maximum load of Strategy I,
for two different parameter regimes, in Theorems 1 and 2.
Theorem 1. Suppose that K = n1‚àí, for some constant 0 <
 < 1, and M = Œò(1). Then, under Uniform distribution P ,
Strategy I achieves maximum load of L = Œò(log n) w.h.p.
Proof. Consider node u which has cached a set of distinct
files, say S, with |S| ‚â§M . Applying Lemma 1 shows that all
Voronoi cells centered at u corresponding to cached files at
u are contained in a sub-grid of size at most O(K log n/M)
w.h.p. Also in each round, every arbitrary node requests for a
file in S with probability |S|/nK ‚â§M/nK, as each request
randomly chooses its origin and type. Hence, by union bound,
a node in the sub-grid may request for a file in S with
probability at most O(K log n/M) ¬∑ (M/nK) = O(log n/n).
Since there are n requests, the expected number of requests
imposed to node u is O(log n). Now using a Chernoff bound
(e.g., see Appendix A) shows that w.h.p. u has to handle at
most O(log n) requests.
On the other hand, to establish a lower bound on the
maximum load we proceed as follows. Lemma 1 shows that
there exits a Voronoi cell in Vj , for some j, such that the center
node should handle the requests of at least Œò(K log n/M)
nodes w.h.p. Also each node in the cell may request for
file Wj with probability 1/nK. So on average there are
Œò(log n/M) requests imposed on the cell center. Similarly,
by a Chernoff bound, one can see that this node experiences
the load Œò(log n/M), which concludes the proof for constant
M .
Remark 2. It should be noted that the same result of Œò(log n)
for the maximum load can also be proved for the Zipf
distribution. That is because the content placement distribution
is chosen proportional to the file popularity distribution P , and
consequently this result is insensitive to P . However, the proof
involves lengthy technical discussions which we omit in this
paper. For further numerical investigation on this remark refer
to Section V.
Theorem 2. Suppose that K = n and M = nŒ±, for some 0 <
Œ± < 1/2. Then, under the Uniform distribution, the maximum
load is in the interval [‚Ñ¶(log n/ log log n), O(log n)] w.h.p.
Proof of Theorem 2. To establish upper bound O(log n) for
the maximum load, we follow the first part of proof of
Theorem 1. To obtain a lower bound, consider an arbitrary
server u that has cached file set S with s distinct files. Note
that by Lemma 2, we have for every node u, s = Œò(M) with
high probability. Let us define the indicator random variable
Xu,j , Wj ‚àà S, taking 1 if the nearest replica of Wj is outside
of Br(u), where r =
‚àö
K/2M and zero otherwise. It is easy
to see that Xu,j‚Äôs are correlated. For example, consider the
set of files T = {Wj1 ,Wj2 , . . . ,Wjt} ‚äÇ S, where Xu,j‚Ä≤ = 1
for every Wj‚Ä≤ ‚àà T . Then conditioned on this event, each node
in Br(u) has cached files from a subset of the library of size
K ‚àí |T |. Then probability that a node in Br(u) caches Wj is
at most M/(K ‚àí t). Hence, for every Wj ‚àà S,
Pr [Xu,j = 1|{Xu,j‚Ä≤ = xu,j‚Ä≤ ,Wj‚Ä≤ ‚àà S \ {Wj}}]
‚â•
(
1‚àí M
K ‚àí
‚àë
Wj‚Ä≤‚ààS\{Wj}
xu,j‚Ä≤
)2r(r+1)
‚â•
(
1‚àí M
K ‚àíM + 1
)2r(r+1)
= e‚àí‚Ñ¶(1) = p,
where |Br(u)\{u}| = 2r(r+1) = Œò(K/M) and hence p is a
constant. Let Z =
‚àë
Wj‚ààS Xu,j and then E [Z] ‚â• s ¬∑p. Using
a Chernoff bound for moderately correlated indicator random
variables (e.g., see Lemma 4) implies that
Pr [Z < sp/2] = o(1/n2).
Therefore Br(u) does not contain any replica of at least p/2
fraction of files cached at u, namely S‚Ä≤. Using the union bound
over all nodes we deduce the similar statement for every node
with probability at least 1‚àío(1/n). Therefore, for every u we
have,
Pr [u severs a request] ‚â•
|Br/2(u)|
n
¬∑ |S
‚Ä≤|
K
= ‚Ñ¶(1/n)
where it follows from |S‚Ä≤| = Œò(M), |Br/2(u)| = Œò(K/M).
Since there are n requests, it is easy to see that the load of
each server is bounded from below by a Poisson distribution
Po(c), where c is a constant. On the other hand, it is known
that (e.g., see [33]) the maximum number taken by n Poisson
distribution Po(c) is ‚Ñ¶(log n/ log log n) w.h.p. and hence the
lower bound is proved.
Next, we investigate the communication cost of Strategy I
in the following theorem.
Theorem 3. Under the Uniform popularity distribution, Strat-
egy I achieves the communication cost C = Œò(
‚àö
K/M),
for every M  K. Under Zipf popularity distribution with
M = Œò(1), it achieves
C =
Ô£±Ô£¥Ô£¥Ô£¥Ô£¥Ô£¥Ô£¥Ô£¥Ô£¥Ô£¥Ô£≤Ô£¥Ô£¥Ô£¥Ô£¥Ô£¥Ô£¥Ô£¥Ô£¥Ô£¥Ô£≥
Œò
(‚àö
K/M
)
: 0 < Œ≥ < 1,
Œò
(‚àö
K/M logK
)
: Œ≥ = 1,
Œò
(
K1‚àíŒ≥/2/
‚àö
M
)
: 1 < Œ≥ < 2,
Œò
(
logK/
‚àö
M
)
: Œ≥ = 2,
Œò
(
1/
‚àö
M
)
: Œ≥ > 2.
(7)
Proof of Theorem 3. Assume a request from an arbitrary node
u for file Wj . The probability that this file is cached at another
node v is qj := 1 ‚àí (1 ‚àí pj)M . Cache content placement at
different nodes is independent. Thus, the number of nodes
which should be probed is a geometric random variable with
success probability qj . This results in the average 1/qj trials
that leads to expected distance of
Œò
(
1
‚àö
qj
)
= Œò
(
1‚àö
1‚àí (1‚àí pj)M
)
. (8)
7
When averaged over different files we will have
C =
K‚àë
j=1
pjŒò
(
1‚àö
1‚àí (1‚àí pj)M
)
. (9)
‚Ä¢ For Uniform distribution we have pj = 1/K and then
C = Œò(
‚àö
K/M). (10)
‚Ä¢ For Zipf distribution with M = Œò(1) we have
C =
K‚àë
j=1
pjŒò
(
1‚àö
1‚àí (1‚àí pj)M
)
=
K‚àë
j=1
pjŒò
(
1‚àö
pjM
)
= Œò
Ô£´Ô£¨Ô£≠ ‚àëKj=1 j‚àíŒ≥/2(
M
‚àëK
j=1 j
‚àíŒ≥
)1/2
Ô£∂Ô£∑Ô£∏ .
(11)
Define Œõ(Œ≥) :=
‚àëK
j=1 j
‚àíŒ≥ , for every Œ≥. On the other hand it
is known that for every Œ≥ > 0 (e.g., see [34])
Œõ(Œ≥) =
Ô£±Ô£≤Ô£≥ Œò
(
K1‚àíŒ≥
)
, 0 < Œ≥ < 1,
Œò (logK) , Œ≥ = 1,
Œò(1), Œ≥ > 1.
(12)
Now inserting the above equations into (11) completes the
proof.
Theorem 3 shows how non-uniform file popularity reduces
communication cost. The skew in file popularity is determined
by the parameter Œ≥ which will affect the communication cost.
For example, for Œ≥ < 1 communication cost is similar to the
Uniform distribution, while for Œ≥ > 2, it becomes independent
of K.
Since in Strategy I we have assigned each request to the
nearest replica, Theorem 3 characterizes the minimum com-
munication cost one can achieve. However, Theorems 1 and 2
show a logarithmic growth for the maximum load as a function
of network size n. This imbalance in the network load is be-
cause in Strategy I each request assignment does not consider
the current load of servers. A natural question is whether, at
each request allocation, one can use a very limited information
of servers‚Äô current load in order to reduce the maximum load.
Also one can ask how does this affect the communication cost.
We address these questions in the following section.
IV. PROXIMITY-AWARE TWO CHOICES STRATEGY
Strategy I introduced in the previous section will result in
the minimum communication cost, while, the maximum load
for that strategy is of order ‚Ñ¶ (log n/ log log n). In this section
we investigate an strategy which will result in an exponential
decrease in the maximum load, i.e., reduces maximum load to
Œò (log log n), formally defined as follows.
Definition 3 (Proximity-Aware Two Choices Strategy). For
each request born at an arbitrary node u consider two
uniformly at random chosen nodes from Br(u), that have
cached the requested file. Then, the request is assigned to the
node with lesser load. Ties are broken randomly.
For the sake of illustration, first, we consider some examples
in the following.
Example 1 (M = K and r =‚àû2). In this example each node
can store all the library and there is no constraint on proximity.
As mentioned in Section I, the number of files that should be
handled by each node (i.e., Di for i = 1, . . . , n) will be a
Po(1) random variable. In this case, according to Strategy II,
two random nodes are chosen from all network nodes and the
request is assigned to the node with lesser load.
Therefore, in terms of maximum load, this problem is
reduced to the standard power of two choices model in the
balanced allocations literature [6]. In this model there are
n bins and n sequential balls which are randomly allocated
to bins. In every round each ball picks two random bins
uniformly, and it is then allocated to the bin with lesser load
[6]. Then it is shown that the maximum load of network is
L = maxi Ti = log log n(1 + o(1)) w.h.p. [6], which is an
exponential improvement compared to Strategy I.
However, in contrast to Example 1, in cache networks
usually each node can store only a subset of files, and this
makes the problem different from the standard balls and bins
model, considered in [6]. Here, due to the memory constraint
at each node, the choices are much more limited than the
M = K case. In other words here we have the case of
related choices. In the related choices scenario, the event of
choosing the second choice is correlated with the first choice;
this correlation may annihilate the effect of power of two
choices as demonstrated in Example 2.
Example 2 (K = n, M = Œò(1), and r =‚àû). In this regime,
there is a subset of the library, say S, with |S| = Œò(n), whose
files are cached inside the network. On the other hand, each
file type is requested Po(1) times and hence w.h.p. there will
be a file in S which is requested Œò(log n/ log log n) times
(e.g., see [33]). Since each file in S is replicated at most M
times, requests for the file are distributed among at most M
nodes and thus the maximum load of the corresponding nodes
will be at least Œò(log n/ log log n)/M . Hence, due to memory
limitation we cannot benefit from the power of two choices.
Although Example 2 shows that memory limitation can
annihilate the power of two choices but this is not always the
case. Example 3 shows even for M = 1 for some scenarios
we can achieve L = O(log log n).
Example 3 (K = n1‚àí for every constant 0 <  < 1,
M = 1, and r =‚àû). For any popularity distribution P where‚àëK
j=1 (pjn)
‚àíc = o(1), Strategy II achieves maximum load
L = O(log log n) w.h.p. Also, notice that Uniform and Zipf
distributions satisfy this requirement, whenever  ‚àà
(
Œ≥‚àí1
Œ≥ , 1
)
for Œ≥ ‚â• 1, where Œ≥ is the Zipf parameter.
Roughly speaking, when M = 1, we may partition the
servers based on their cached file and hence we have K ‚Äúdis-
2It should be noted that r ‚â•
‚àö
n (including r = ‚àû) is equivalent to
r =
‚àö
n. Thus in this paper we use r =
‚àö
n and r =‚àû alternatively.
8
joint‚Äù subsets of servers. Similarly there are K request types
where each request should be addressed by the corresponding
subset of servers. Thus, here we have K disjoint Balls and
Bins sub-problems, and the sub-problem with maximum load
determines the maximum load of the original setup. The reason
that here, in contrast to Example 2, we can benefit from power
of two choices is the assumption of K  n.
Proof of Example 3. It is easy to see that for M = 1, the
number of caching servers with a specific file, say Wj denoted
by Sj , is distributed as a Bin(n, pj). Thus applying a Chernoff
bound for Sj (e.g., see Appendix A) implies that
Pr [|Sj ‚àíE [Sj ] | ‚â• E [Sj ] /2] ‚â§ 2 exp(‚àípjn/12).
Moreover, let Rj denote the number of requests for file Wj ,
which is the sum of n i.i.d. Bin(n, pj) random variables. Again
applying a Chernoff bound (e.g., see Appendix A) for Poisson
random variables yields that
Pr [|Rj ‚àíE [Rj ] | ‚â• E [Rj ] /2] ‚â§ 2 exp(‚àípjn/12).
Notice that E [Sj ] = E [Rj ] = npj . Suppose that Aj denotes
the event that |Sj ‚àíE [Sj ] | ‚â§ E [Sj ] /2 and |Rj ‚àíE [Rj ] | ‚â§
E [Rj ] /2. Then we have that Pr [Aj ] ‚â• 1‚àí4 exp(‚àípjn/12).
Also define Ej to be the event that the two-choice model with
Sj bins (caching servers) and Rj balls (requests) achieves
maximum load Rj/Sj + Œò(log logSj). It is shown that this
event happens with probability 1‚àíO(1/Scj ), for every constant
c (e.g., see [6]). So we have that
Pr [Ej ] = Pr [Ej |Aj ]Pr [Aj ] + Pr [Ej |¬¨Aj ]Pr [¬¨Aj ]
> (1‚àí 2(pjn)‚àíc)(1‚àí 4 exp(‚àípjn/12))
+ (1‚àí 2(pjn)‚àíc)(4 exp(‚àípjn/12))
‚â• 1‚àí 8(pjn)‚àíc.
Since we have K disjoint subsystems, the union bound over all
subsystems shows that the two choice model does achieve the
desired maximum load with probability 1‚àí8
‚àëK
j=1(npj)
‚àíc =
1‚àío(1) which concludes the proof due to example‚Äôs assump-
tion on popularity profile.
Now we show that the Uniform and Zipf distributions satisfy
the example‚Äôs assumption. When P is the Uniform distribution
over K files, ‚àÄj, pj ¬∑ n = n. Now by setting c = 3/, we
have that
K‚àë
j=1
(npj)
‚àíc = K(1/n)c = K/n3 = o(1/n2).
Also, for Zipf distribution we have
pj =
j‚àíŒ≥‚àëK
j=1 j
‚àíŒ≥
=
j‚àíŒ≥
Œõ(Œ≥)
.
Depending on Œ≥, we consider two cases:
‚Ä¢ Œ≥ ‚â• 1: For every c > 1 we have(
Œõ(Œ≥)
n
)c
Œõ(Œ≥c) = Œò
(
logcK
nc
)
Œõ(Œ≥c) = o(1),
where we used K < n and (12).
‚Ä¢ 0 < Œ≤ < 1: By setting c = 2/Œ≥ and using the fact that
K < n, we have(
Œõ(Œ≥)
n
)c
Œõ(Œ≥c) =Œò
(
K(1‚àíŒ≥)c
nc
)
‚â§ n(1‚àíŒ≥)c‚àícŒõ(Œ≥c)
=n‚àíŒ≥cŒõ(Œ≥c) = o(1),
where we applied (12).
Above examples bring to attention the following question.
Question 1. In view of the memory limitation at each server
in cache networks, what are the regimes (in terms of problem
parameters) one can benefit from the power of two choices to
balance out the load?
Addressing Question 1, for the general M > 1 case, is more
challenging than Example 3 and needs a completely different
approach. The simplicity of case M = 1 is that there is no
interaction between K Balls and Bins sub-problems. On the
other hand, consider M > 1. If a request, say Wj , should
be allocated to a server then the load of two candidate bins
that have cached Wj should be compared. However, load of
other file types will also be accounted for in this comparison.
So there is flow of load information between different sub-
problems which makes them entangled.
In all above examples, we have not considered the proximity
constraint, i.e., r = ‚àû, yet. This results in a fairly high
communication cost C = Œò (
‚àö
n). However, in general since
parameter r controls the communication cost, it can be chosen
to be much less than the network diameter, i.e., Œò(
‚àö
n). This
proximity awareness introduces another source of correlation
(other than the memory limitation) between the two choices.
Thus, considering the proximity constraint may annihilate
the power of two choices even in large memory cases as
demonstrated in the following example.
Example 4 (M = K and r = 1). In this example, when a
request arrives at a server, the server chooses two random
choices among itself and its neighbours. Then the request
is allocated to the one with lesser load. Since there exists
a server at which maxiDi = Œò(log n/ log log n) requests
arrive, maximum load of network (i.e., L = maxi Ti) will
be at least Œò(log n/ log logn)/5.
Thus, similar to Question 1 regarding the memory limitation
effect, one can pose the following question regarding proxim-
ity principle.
Question 2. In view of the proximity constraint of Scheme II,
what are the regimes (in terms of problem parameters) one
can benefit from the power of two choices to balance out the
load?
In order to completely analyze load balancing performance
of Scheme II, one should consider both sources of correlation
simultaneously (which is not the case in above examples). To
this end, in the following, we investigate two memory regimes,
namely M = K and M = nŒ± for some 0 < Œ± < 1/2.
Our main result for M = nŒ± is presented in the following
theorem.
9
Theorem 4. Suppose that 0 < Œ±, Œ≤ < 1/2 be two constants
and let K = n, M = nŒ±, and r = nŒ≤ . Then if
Œ±+ 2Œ≤ ‚â• 1 + 2 log log n/ log n,
under the Uniform popularity distribution, Strategy II achieves
maximum load L = Œò(log log n) and communication cost
C = Œò(r) w.h.p.
Remark 3. To have a more accessible proof, in Theorem 4,
we have assumed that K = n. Note that the proof techniques
can also be extended to the case where K = O(n).
In order to prove the theorem, let us first present an
interesting result that was shown in [28] as follows.
Theorem 5 ([28]). Given an almost ‚àÜ-regular graph3 G
with e(G) edges and n nodes representing n bins, if n balls
are thrown into the bins by choosing a random edge with
probability at most O(1/e(G)) and placing into the smaller
of the two bins connected by the edge, then the maximum load
is Œò(log log n) +O
(
logn
log(‚àÜ/ log4 n)
)
+O(1) w.h.p.
Remark 4. Note that in the original theorem presented in
[28], it is assumed that each edge is chosen uniformly among
all edges of graph G. However, here we slightly generalize
the result so that each edge is chosen with probability at most
O(1/e(G)). The proof follows the original proof‚Äôs idea with
some modifications in computation parts, where due to lack of
space we omit.
In order to apply Theorem 5, we first need to define a new
graph H as follows.
Definition 4 (Configuration Graph). For the given parameter
r, configuration graph H is defined as a graph whose nodes
represent the servers and two nodes, say u and v, are
connected if and only if u and v have cached a common file
and d(u, v) ‚â§ 2r in the torus.
For every two servers u and v, let T (u, v) be the set of
distinct files that have been cached in both nodes u and v.
Also denote |T (u, v)| by t(u, v). Define t(u) to be the number
of distinct cached files in u. Now, let us define goodness of a
placement strategy as follows.
Definition 5 (Goodness Property). For every positive constant
Œ¥ ‚àà [0, 1] and ¬µ = O(1), we say the file placement strategy is
(Œ¥, ¬µ)-good, if for every u and v, t(u) ‚â• Œ¥M and t(u, v) < ¬µ.
Lemma 2. The proportional cache placement strategy intro-
duced in Section II, is (Œ¥, ¬µ)-good w.h.p.
Proof. Clearly, every set of cached files in every node (with
replacement) can be one-to-one mapped to a non-negative
integral solution of equation
‚àëK
i=1 xi = M , where each xi
expresses the number of times that file i has been cached in
the node. A combinatorial argument shows that, the equation
has
(
K+M‚àí1
M
)
non-negative integer solutions. So for each
1 ‚â§ s ‚â§M , we have
Pr [t(u) = s] =
(
K
s
)(
M‚àí1
M‚àís
)(
K+M‚àí1
M
) , (13)
3A graph is said to be almost ‚àÜ-regular, if each vertex has degree Œò(‚àÜ).
where we first fixed a set of file indexes of size s, say
I = {i1, i2, . . . , is}, and then count the number of integral
solutions to the equation
‚àë
i‚ààI xi = M ‚àí s.
In order to bound (13), we note that for every 1 ‚â§ a ‚â§ b,
(b/a)a ‚â§
(
b
a
)
‚â§ ba and also
(
b
a
)
‚â§ 2b. Recall that we assumed
K = n and M = nŒ±, 0 < Œ± < 1/2. Hence for every 1 ‚â§ s ‚â§
Œ¥M , we have
Pr [t(u) = s] ‚â§ K
s2M(
K
M
) ‚â§ Ks2M
(K/M)M
= (2M)MKs‚àíM
‚â§ (2nŒ±nŒ¥‚àí1)M .
Thus, by choosing Œ¥ = (1‚àíŒ±)/3, for every 1 ‚â§ s ‚â§ Œ¥M , we
have
Pr [t(u) = s] ‚â§ (2nŒ±+Œ¥‚àí1)M = (2n2Œ±/3‚àí2/3)M
‚â§ (2n‚àí1/3)M = n‚àíœâ(1),
where the last equality follows from M = nŒ± = œâ(1). Now
the union bound over all 1 ‚â§ s ‚â§ Œ¥M and n nodes yields
Pr [‚àÉu ‚àà V : t(u) ‚â§ Œ¥M ] = n‚àíœâ(1). (14)
By a similar argument, for each 1 ‚â§ t ‚â§M and every u and
v, we have
Pr [t(u, v) ‚â• t] =
(
K
t
)((K+M‚àít‚àí1
M‚àít
)(
K+M‚àí1
M
) )2 .
Thus, for any constant ¬µ ‚â• 5/(1‚àí 2Œ±), we can write
Pr [t(u, v) ‚â• ¬µ]
‚â§ K¬µ
(
(K +M ‚àí ¬µ‚àí 1)!M !
(K +M ‚àí 1)!(M ‚àí ¬µ)!
)2
‚â§ K¬µ
(
M¬µ
K¬µ
)2
‚â§ M
2¬µ
K¬µ
= n(2Œ±‚àí1)¬µ = O(1/n5).
By applying the union bound over all pairs of servers, for
every u and v we have
Pr [t(u, v) ‚â• ¬µ] = O(1/n3). (15)
Hence, t(u, v) < ¬µ w.h.p. Putting (14) and (15) together
concludes the proof.
The following lemma presents some useful properties of H
and Strategy II.
Lemma 3. Conditioning on ‚Äúgoodness‚Äù of the file placement
and assuming K = n, M = nŒ± and r = nŒ≤ with Œ± + 2Œ≤ ‚â•
1 + 2 log log n/ log n, we have
(a) W.h.p. H is almost ‚àÜ-regular with ‚àÜ = Œò
(
M2r2
K
)
.
(b) For each request, Strategy II samples an edge of H (two
servers) with probability O(1/e(H)).
Proof. Consider an arbitrary node u with s distinct files. Then
by definition of H , for every node v we have
ps := Pr [t(u, v) ‚â• 1|t(u) = s] = 1‚àí
(
K ‚àí s
K
)M
=
sM
K
(1 + o(1)),
10
where 1 ‚â§ s ‚â§M . On the other hand u and v are connected in
H , if in addition we have dG(u, v) ‚â§ 2r. Therefore for every
given node u with s distinct cached files, d(u) in H (degree
of u in H) has a binomial distribution Bin(b2r(u), ps), where
b2r(u) = |B2r(u)|. Hence applying a Chernoff bound implies
that with probability 1‚àí n‚àíœâ(1), we have
d(u) =
sMb2r(u)
K
(1 + o(1)).
Conditioning on the goodness of file placement, s = t(u) =
Œò(M). Also by symmetry of torus, we have b2r(u) = Œò(r2),
for every u. So, with high probability for every u, we have
d(u) = Œò
(
M2r2/K
)
,
where this concludes the proof of part (a).
Now it remains to show that Strategy II picks an edge of
H , with probability O(1/e(H)). First, notice that
e(H) = Œò
(
nM2r2/K
)
= Œò(M2r2), (16)
as K = n. Then recall that each file is cached in every node
with probability p = 1 ‚àí (1 ‚àí 1/K)M = M/K(1 + o(1)),
independently. For any given node u and file Wj , let Fj(u)
be the number of nodes at distance at most r that have cached
file Wj . Then Fj(u) has a binomial distribution Bin(br(u), p),
where br(u) = |Br(u)|. So
E [Fj(u)] = br(u) ¬∑ p = Œò(r2M/K),
where br(u) = Œò(r2) for every u. Since
Œ±+ 2Œ≤ ‚â• 1 + 2 log log n/ log n, we have E [Fj(u)] =
œâ(log n), for every u and j. Now, applying a Chernoff bound
for Fj(u) implies that with probability 1 ‚àí n‚àíœâ(1), Fj(u)
concentrates around its mean and hence, w.h.p., we have for
every u and j
Fj(u) = Œò(r
2M/K) = Œò(r2M/n).
Consider an edge (u, v) ‚àà E(H), with t(u, v) = t. Define
Su,v to be the set of nodes that may pick pair u and v randomly
in Strategy II. It is not hard to see that |Su,v| = O(r2). Now
we have,
Pr [(u, v) ‚àà E(H) is picked by Strategy II|t(u, v) = t]
=
‚àë
j‚ààT (u,v)
1
K
‚àë
w‚ààSu,v
1
n
1(
Fj(w)
2
)
=
1
n2
‚àë
j‚ààT (u,v)
‚àë
w‚ààSu,v
1(
Fj(w)
2
)
=
1
n2
‚àë
j‚ààT (u,v)
‚àë
w‚ààSu,v
Œò(n2/r4M2). (17)
Conditioned on ‚Äúgoodness,‚Äù we have for every (u, v) ‚àà E(H),
1 ‚â§ t(u, v) < ¬µ. So (17) can be simplified as
Pr [(u, v) ‚àà E(H) is picked by Strategy II]
‚â§ Œò(¬µ|Su,v|/r4M2)
= O(1/r2M2) = O(1/e(H)),
where the last equality follows from (16).
Proof of Theorem 4. Applying Lemma 3 shows that w.h.p. the
configuration graph H is an almost ‚àÜ-regular graph where
‚àÜ = M2r2/n. Moreover, in each step, every edge of H is
chosen randomly with probability O(1/e(H)). Hence, we can
apply Theorem 5 and conclude that w.h.p. the maximum load
is at most
Œò(log log n) +O
(
log n
log(‚àÜ/ log4 n)
)
= Œò(log log n) +O(1),
where it follows because Œ±+ 2Œ≤ ‚â• 1 + 2 log log n/ log n and
hence ‚àÜ = M2r2/n = n2Œ±+2Œ≤‚àí1 > nŒ±.
Now let us present our next result regarding to the M = K
regime.
Theorem 6. Suppose M = K and Uniform distribution P
over the file library. Then Strategy II achieves the maximum
load L = Œò (log log n) and communication cost C = Œò
(
nŒ≤
)
for any Œ≤ = ‚Ñ¶(log log n/ log n).
Proof. Let us choose r = nŒ≤ , for some Œ≤ =
‚Ñ¶(log log n/ log n). By the assumption M = K, the configu-
ration graph H (corresponding to r) is a graph in which two
nodes u and v are connected if and only if d(u, v) ‚â§ 2r. Since
our network is symmetric, for every u, |Br(u)| = Œò(r2) and
hence H is a regular graph with ‚àÜ = Œò(r2). Also it is not
hard to see that Strategy II is equivalent to choosing an edge
uniformly from H . Applying Theorem 5 ([28]) to H results in
the maximum load of Œò(log log(n)). In addition, choosing two
random nodes in |Br(u)| = Œò(r2) results in communication
cost of C = Œò(r) = Œò
(
nŒ≤
)
.
The main point of Theorem 6 is that we should just endure
C = Œò
(
nŒ≤
)
, for Œ≤ = ‚Ñ¶(log log n/ log n), to benefit from the
luxury of power of two choices, which is a very encouraging
result.
V. SIMULATIONS
In this section, we demonstrate the simulation results for
two strategies introduced in the previous sections, namely,
nearest replica and proximity aware two choices strategies.
Our simulations are implemented in Python where the code is
available online at [35].
Figure 4 shows the maximum load of Strategy I as a
function of the number of servers where different curves
correspond to different cache sizes. The network graph is a
torus, where 100 files with Uniform popularity are placed
uniformly at random in each node. Each point is an average
of 10000 simulation runs. This figure is in agreement with
the logarithmic growth of the maximum load, asymptotically
proved in Section III, even for the intermediate values of
n ‚âà 100, . . . , 3000, which makes the results of Section III
more general. Comparing different curves reveals the fact that
in larger cache size setting, we have a more balanced network.
That happens because enlarging cache sizes results in a more
uniform Voronoi tessellation, i.e., having cells with smaller
variation in size.
Furthermore, Figure 5 shows the communication cost of
Strategy I as a function of cache size where different curves
11
0 500 1000 1500 2000 2500 3000 3500
4
4.5
5
5.5
6
6.5
7
7.5
8
# of servers
m
ax
im
um
 lo
ad
 
 
Cache size = 1
Cache size = 2
Cache size = 10
Cache size = 100
Fig. 4: The maximum load versus number of servers for
Strategy I. Here, the network topology is a torus, the file
popularity is Uniform, and we have K = 100.
0 10 20 30 40 50 60 70 80 90 100
0
5
10
15
20
25
Cache size (# of files)
av
er
ag
e 
co
st
 (#
 o
f h
op
s)
 
 
Library size = 100
Library size = 1000
Library size = 2000
Fig. 5: The communication cost versus cache size for Strat-
egy I. Here, the network topology is a torus of size 2025 and
the file popularity is Uniform.
correspond to different library sizes. Here, the network graph
is a torus of size 2025 and each point is an average of 10000
simulation runs. This figure is in agreement with the result of
Theorem 3.
In order to simulate Strategy II, first we set r = ‚àû to
study the effect of cache size on the maximum load and
0 2 4 6 8 10 12
x 104
3
4
5
6
7
8
9
10
11
# of servers
m
ax
im
um
 lo
ad
 
 
Cache size = 1
Cache size = 2
Cache size = 10
Cache size = 100
Fig. 6: The maximum load versus number of servers for
Strategy II. Here, the network topology is torus, the file
popularity is Uniform, and the library size is K = 2000.
Moreover, we assume r =‚àû.
0 1000 2000 3000 4000 5000 6000
# of servers
1
2
3
4
5
6
7
8
9
M
ax
im
um
 lo
ad
Strat. I, cache size = 1
Strat. II, cache size = 1
Strat. II, cache size = 2
Strat. II, cache size = 10
Fig. 7: The maximum load versus number of servers for
Strategies I and II. Here, the network topology is torus, the
file popularity is Uniform, and the library size is K = 100.
Moreover, we assume r =‚àû.
communication cost, and then consider the effect of limited
r on the performance of the system. Figure 6 shows the
maximum load of the network versus number of servers where
each curve demonstrates a different cache size. The network
graph is a torus, where 2000 files with Uniform popularity
are placed uniformly at random in each node. Each point is
an average of 800 simulation runs. In each curve, since cache
size and number of files are fixed, increasing the number of
servers translates to increasing each file replication. Figure 6
demonstrates the system performance for large system sizes,
i.e., n ‚âà 104, . . . , 105. However, to get a better understanding
of network behavior, let us compare the load balancing perfor-
mance of Strategies I and II in Figure 7 where the file library
size is K = 100 and n ‚âà 103.
In Figure 7, when the file replication is low, due to high
correlation between the two choices of Strategy II, power of
two choices is not expected. This is reflected in Figure 7; for
example in the curve corresponding to M = 1 for n ‚â§ 400 we
have a fast growth in maximum load which mimics the load
balancing performance of Strategy I. We see the same trend
for the curve corresponding to M = 2 for n ‚â§ 200. However,
assuming M ‚â• 2, for n > 1000, since there is enough file
replication in the network, the load balancing performance is
greatly improved due to the power of two choices. This is in
accordance with the lessons learned from Section IV. Also, in
between, we have a transition region where a mixed behavior
is observed. Observations made above from Figure 7 have an
important practical implication. Since employing Strategy II
is only beneficial in networks with high file replication, for
other situations with limited cache size, the less sophisticated
Strategy I is a more proper choice.
Figure 8 draws the communication cost versus number of
servers for various cache sizes for similar setting used in
Figure 6. Since in this figure there is no constraint on the
proximity, the communication cost growth is of order Œò(
‚àö
n).
In simulations presented so far, we only considered the case
r = ‚àû. In order to investigate the effect of parameter r on
the performance of the system, in Figure 9, we have simulated
network operation for different values of r. This results in a
12
0 2 4 6 8 10 12
x 104
10
20
30
40
50
60
70
80
90
100
# of servers
av
er
ag
e 
co
st
 (#
 o
f h
op
s)
 
 
Cache size = 1
Cache size = 2
Cache size = 10
Cache size = 100
Fig. 8: The communication cost versus number of servers for
Strategy II. Here, the settings are similar to that of Figure 6.
0 2 4 6 8 10 12 14 16 18 20
3
4
5
6
7
8
9
average cost (# of hops)
m
ax
im
um
 lo
ad
 
 
Cache size = 1
Cache size = 2
Cache size = 5
Cache size = 10
Cache size = 20
Cache size = 50
Cache size = 200
Fig. 9: The trade-off between the maximum load and com-
munication cost for Strategy II. Here, the network topology is
a torus of size 2025, the file popularity is Uniform, and the
library size is K = 500.
trade-off between the maximum load and communication cost,
as shown in Figure 9. Here we consider a torus with 2025
servers, where 500 files with Uniform popularity are placed
uniformly at random in each node. Each point is an average
of 5000 simulation runs.
In this figure, like before (i.e., Figure 7), we observe two
performance regimes based on the file replication in the net-
work. In high memory regime, e.g., for curves corresponding
to M = 50 and M = 200, we can achieve the power of
two choices by sacrificing a negligible communication cost.
On the other hand, in low memory regime, i.e., M = 1, we
cannot decrease the maximum load even at the expense of high
communication cost values. For intermediate values of M , we
clearly observe the trade-off between the maximum load and
communication cost.
All above simulations investigated the performance for
networks with torus topology and Uniform file popularity
distribution, being in agreement with our theoretical results‚Äô
indications. However, one may ask how sensitive are our
findings to the network topology and file popularity choices.
Thus, in the following, we examine network performance
for Zipf file popularity profile and more practical network
topologies, namely, random geometric graph (RGG) and power
law random graph model [36].
0 1000 2000 3000 4000 5000 6000
# of servers
2
3
4
5
6
7
8
M
ax
im
um
 lo
ad
Strat. I, Zipf (gamma=0.0)
Strat. II, Zipf (gamma=0.0)
Strat. I, Zipf (gamma=1.0)
Strat. II, Zipf (gamma=1.0)
Strat. I, Zipf (gamma=1.5)
Strat. II, Zipf (gamma=1.5)
Fig. 10: The maximum load versus number of servers for
Strategies I and II. Here, the network topology is torus, the file
popularity is Zipf, the library size is K = 64, and the cache
size is M = 2. Moreover, we assume r = ‚àû. Each point is
an average over 1000 independent simulation runs.
0 1000 2000 3000 4000 5000 6000
# of servers
2
4
6
8
10
12
14
16
M
ax
im
um
 lo
ad Strat. I, Zipf (gamma=0.0)
Strat. II, Zipf (gamma=0.0)
Strat. I, Zipf (gamma=1.0)
Strat. II, Zipf (gamma=1.0)
Strat. I, Zipf (gamma=1.5)
Strat. II, Zipf (gamma=1.5)
Fig. 11: The maximum load versus number of servers for
Strategies I and II. Here, the network topology is RGG. The
remaining settings are similar to that of Figure 10.
Figures 10, 11, and 12, show the maximum load versus the
number of servers for different network topologies (namely,
torus, RGG, and power law model) and Zipf distribution with
parameter4 Œ≥ ‚àà {0, 1, 1.5}.
Also Figures 13, 14, and 15, demonstrate the performance
trade-off between maximum load and communication cost for
different network topologies (namely, torus, random RGG, and
power law model) and Zipf distribution with parameter Œ≥ ‚àà
{0, 1, 1.5, 2}. All these simulations show that the trends and
the trade-off we found in our theoretical results are also valid
for more practical network settings.
For convenience, a summary of simulation parameters are
stated in Table I.
VI. DISCUSSION AND CONCLUDING REMARKS
In this section, we first discuss three important practical
issues related to our proposed scheme, then we will conclude
the paper.
4Note that the Zipf distribution with Œ≥ = 0 corresponds to the Uniform
distribution.
13
0 1000 2000 3000 4000 5000 6000
# of servers
0
10
20
30
40
50
60
70
80
90
M
ax
im
um
 lo
ad
Strat. I, Zipf (gamma=0.0)
Strat. II, Zipf (gamma=0.0)
Strat. I, Zipf (gamma=1.0)
Strat. II, Zipf (gamma=1.0)
Strat. I, Zipf (gamma=1.5)
Strat. II, Zipf (gamma=1.5)
Fig. 12: The maximum load versus number of servers for
Strategies I and II. Here, the network topology is power law
random graph. The remaining settings are similar to that of
Figure 10.
0 2 4 6 8 10 12 14
average cost (# of hops)
3
3.5
4
4.5
5
5.5
6
m
ax
im
um
 lo
ad
 (#
 o
f r
eq
ue
st
s)
Gamma = 0.0
Gamma = 1.0
Gamma = 1.5
Gamma = 2.0
Fig. 13: The trade-off between the maximum load and com-
munication cost for Strategy II. Here, the network topology
is a torus of size 2025, the file popularity is Zipf, the library
size is K = 500, and the cache size is M = 10. Each point
is an average over 5000 independent simulation runs.
0 1 2 3 4 5 6
average cost (# of hops)
3
3.5
4
4.5
5
5.5
m
ax
im
um
 lo
ad
 (#
 o
f r
eq
ue
st
s)
Gamma = 0.0
Gamma = 1.0
Gamma = 1.5
Gamma = 2.0
Fig. 14: The trade-off between the maximum load and com-
munication cost for Strategy II. Here, the network topology
is a RGG of size 2025. The remaining settings are similar to
that of Figure 13.
0 1 2 3 4 5 6 7
average cost (# of hops)
2
4
6
8
10
12
14
16
m
ax
im
um
 lo
ad
 (#
 o
f r
eq
ue
st
s)
Gamma = 0.0
Gamma = 1.0
Gamma = 1.5
Gamma = 2.0
Fig. 15: The trade-off between the maximum load and com-
munication cost for Strategy II. Here, the network topology
is a power law random graph of size 2025. The remaining
settings are similar to that of Figure 13.
Fig. Number Net. Topology Strategy Popularity
4, 5 Torus Strategy I Uniform
6, 8 Torus Strategy II (r =‚àû) Uniform
7 Torus Strategy I, II (r =‚àû) Uniform
9 Torus Strategy II (r varying) Uniform
10 Torus Strategy I, II (r =‚àû) Zipf
11 RGG Strategy I, II (r =‚àû) Zipf
12 Power Law Strategy I, II (r =‚àû) Zipf
13 Torus Strategy II (r varying) Zipf
14 RGG Strategy II (r varying) Zipf
15 Power Law Strategy II (r varying) Zipf
TABLE I: Summary of the simulation parameters for each
figure.
Our theoretical results in Sections III and IV are stated for
a 2D-Grid topology. The main reason for assuming this rather
unrealistic topology is developing the main idea of the paper
clearly. However, it should be noticed that our approach can
be extended to more general graph models at the expense of
lengthy proofs and calculations. For example, as mentioned
in Section IV, |Br(u)| is the size of the ball of radius r
around node u. The main feature of the 2D-Grid which affects
our results is that |Br(u)| = Œò(r2) for all u. Now suppose
that, instead of assuming a 2D-Grid, we consider a graph in
which |Br(u)| = Œò(rdim), w.h.p. Then the parameter dim will
appear in our results instead of dim = 2 in the special case
of 2D-Grid. For example, the term Œ± + 2Œ≤ in the statement
of Theorem 4 would be generalized to Œ± + dim √ó Œ≤. More
generally, even for |Br(u)| = Œò(f(r)), our basic technicalities
can be extended too. However, in this paper we investigate
other network topologies, such as Random Geometric Graphs
and Scale-Free (power law) networks via extensive simulations
in Section V. As we have discussed it there, the main trends
are also valid for these topologies as well. Thus, our findings
cover a wider class of graph models which are more similar
to real-world CDN network topologies.
The proposed proximity-aware two choices scheme can be
implemented in a distributed manner. To see why, notice
14
that upon arrival of each request at each server, this strategy
needs two kinds of information to redirect the request. This
information can be provided to the requesting server without
the need for a centralized authority in the following way. The
first one is the cache content of other users in its neighborhood
with radius r. Since, the cache content dynamic of servers is
much slower than the requests arrival, this can be done by
periodic polling of nearby servers without introducing much
overhead (also see Distributed Hash Table (DHT) schemes,
e.g., [37] and [38]). The second type of information is the
queue length information of two randomly chosen nodes inside
its neighborhood with radius r, which can also be efficiently
done in a distributed manner by polling or piggybacking.
In practice, request arrivals and servers‚Äô operation happen
in continuous time which needs a queuing theory based
performance analysis. However, as shown in [7] and [39], the
behaviour of load balancing schemes in continuous time (i.e.,
known as the supermarket model) and static balls and bins
problems are closely related. Thus, we conjecture that our
proposed scheme will also have the same performance in the
queuing theory based model. We postpone a rigorous analysis
of such scenario to future work.
In summary, in this work, we have considered the problem
of randomized load balancing and its tension with commu-
nication cost and memory resources in cache networks. By
proposing two request assignment schemes, this trade-off has
been investigated analytically. Moreover, extensive simulation
results support our theoretical findings and provide practical
design guidelines.
ACKNOWLEDGMENT
The authors would like to thank Seyed Abolfazl Motahari,
Omid Etesami, Thomas Sauerwald and Farzad Parvaresh for
helpful discussions and feedback.
REFERENCES
[1] M. Jafari Siavoshani, A. Pourmiri, and S. P. Shariatpanahi, ‚ÄúProximity-
aware balanced allocations in cache networks,‚Äù in IEEE International
Parallel & Distributed Processing Symposium (IPDPS), 2017.
[2] Cisco, ‚ÄúCisco visual networking index: global mobile data traffic fore-
cast update, 20132018,‚Äù White Paper, 2014.
[3] G. Zhang, Y. Li, and T. Lin, ‚ÄúCaching in information centric networking:
A survey,‚Äù Computer Network, vol. 57, pp. 3128‚Äì3141, 2013.
[4] E. Nygren, R. K. Sitaraman, and J. Sun, ‚ÄúThe akamai network: a
platform for high-performance internet applications,‚Äù Operating Systems
Review, vol. 44, no. 3, pp. 2‚Äì19, 2010.
[5] N. Golrezaei, K. Shanmugam, A. G. Dimakis, A. F. Molisch, and
G. Caire, ‚ÄúFemtocaching: Wireless video content delivery through
distributed caching helpers,‚Äù in INFOCOM, 2012 Proceedings IEEE,
March 2012, pp. 1107‚Äì1115.
[6] Y. Azar, A. Z. Broder, A. R. Karlin, and E. Upfal, ‚ÄúBalanced alloca-
tions,‚Äù SIAM J. Comput., vol. 29, no. 1, pp. 180‚Äì200, 1999.
[7] M. Mitzenmacher, ‚ÄúThe power of two choices in randomized load
balancing,‚Äù IEEE Trans. Parallel Distrib. Syst., vol. 12, no. 10, pp. 1094‚Äì
1104, 2001.
[8] M. Adler, S. Chakrabarti, M. Mitzenmacher, and L. E. Rasmussen, ‚ÄúPar-
allel randomized load balancing,‚Äù Random Struct. Algorithms, vol. 13,
no. 2, pp. 159‚Äì188, 1998.
[9] C. Lenzen and R. Wattenhofer, ‚ÄúTight bounds for parallel randomized
load balancing,‚Äù Distributed Computing, vol. 29, no. 2, pp. 127‚Äì142,
2016.
[10] P. Berenbrink, A. Czumaj, A. Steger, and B. VoÃàcking, ‚ÄúBalanced
allocations: The heavily loaded case,‚Äù SIAM J. Comput., vol. 35, no. 6,
pp. 1350‚Äì1385, 2006.
[11] G. Peng, ‚ÄúCDN: content distribution network,‚Äù CoRR, vol.
cs.NI/0411069, 2004. [Online]. Available: http://arxiv.org/abs/cs.NI/
0411069
[12] M. Roussopoulos and M. Baker, ‚ÄúPractical load balancing for
content requests in peer-to-peer networks,‚Äù Distributed Computing,
vol. 18, no. 6, pp. 421‚Äì434, 2006. [Online]. Available: http:
//dx.doi.org/10.1007/s00446-005-0150-7
[13] M. Leconte, M. Lelarge, and L. MassoulieÃÅ, ‚ÄúBipartite graph structures
for efficient balancing of heterogeneous loads,‚Äù in ACM SIGMET-
RICS/PERFORMANCE Joint International Conference on Measurement
and Modeling of Computer Systems, SIGMETRICS ‚Äô12, London, United
Kingdom, June 11-15, 2012, 2012, pp. 41‚Äì52.
[14] S. Manfredi, F. Oliviero, and S. P. Romano, ‚ÄúA distributed control law for
load balancing in content delivery networks,‚Äù IEEE/ACM Trans. Netw.,
vol. 21, no. 1, pp. 55‚Äì68, 2013.
[15] F. Xia, A. M. Ahmed, L. T. Yang, and Z. Luo, ‚ÄúCommunity-based event
dissemination with optimal load balancing,‚Äù IEEE Trans. Computers,
vol. 64, no. 7, pp. 1857‚Äì1869, 2015.
[16] C. Chen, Y. Ling, M. Pang, W. Chen, S. Cai, Y. Suwa, and O. Altintas,
‚ÄúScalable request routing with next-neighbor load sharing in multi-
server environments,‚Äù in 19th International Conference on Advanced
Information Networking and Applications (AINA 2005), 28-30 March
2005, Taipei, Taiwan, 2005, pp. 441‚Äì446.
[17] Y. Xia, A. Dobra, and S. C. Han, ‚ÄúMultiple-choice random network for
server load balancing,‚Äù in INFOCOM 2007. 26th IEEE International
Conference on Computer Communications, Joint Conference of the IEEE
Computer and Communications Societies, 6-12 May 2007, Anchorage,
Alaska, USA, 2007, pp. 1982‚Äì1990.
[18] A. Meyerson, K. Munagala, and S. Plotkin, ‚ÄúWeb caching using access
statistics,‚Äù in Proceedings of the Twelfth Annual ACM-SIAM Symposium
on Discrete Algorithms, ser. SODA ‚Äô01, 2001, pp. 354‚Äì363.
[19] S. Borst, V. Gupta, and A. Walid, ‚ÄúDistributed caching algorithms for
content distribution networks,‚Äù in 2010 Proceedings IEEE INFOCOM,
March 2010, pp. 1‚Äì9.
[20] M. A. Maddah-Ali and U. Niesen, ‚ÄúFundamental limits of caching,‚Äù
IEEE Trans. Information Theory, vol. 60, no. 5, pp. 2856‚Äì2867, 2014.
[21] S. Gitzenis, G. S. Paschos, and L. Tassiulas, ‚ÄúAsymptotic laws for
joint content replication and delivery in wireless networks,‚Äù IEEE
Transactions on Information Theory, vol. 59, no. 5, pp. 2760‚Äì2776,
May 2013.
[22] V. Shah and G. de Veciana, ‚ÄúHigh-performance centralized content
delivery infrastructure: Models and asymptotics,‚Äù IEEE/ACM Trans.
Netw., vol. 23, no. 5, pp. 1674‚Äì1687, 2015.
[23] C. Liu, R. K. Sitaraman, and D. Towsley, ‚ÄúGo-with-the-winner: Per-
formance based client-side server selection,‚Äù in 2016 IFIP Networking
Conference, Networking 2016 and Workshops, Vienna, Austria, May 17-
19, 2016, 2016, pp. 404‚Äì412.
[24] A.-M. K. Pathan, C. Vecchiola, and R. Buyya, ‚ÄúLoad and proximity
aware request-redirection for dynamic load distribution in peering cdns,‚Äù
in On the Move to Meaningful Internet Systems: OTM 2008, OTM 2008
Confederated International Conferences, CoopIS, DOA, GADA, IS, and
ODBASE 2008, Monterrey, Mexico, November 9-14, 2008, Proceedings,
Part I, 2008, pp. 62‚Äì81.
[25] J. Tang, W.-P. Tay, and Y. Wen, ‚ÄúDynamic request redirection and
elastic service scaling in cloud-centric media networks,‚Äù IEEE Trans.
Multimedia, vol. 16, no. 5, pp. 1434‚Äì1445, 2014.
[26] R. Stanojevic and R. Shorten, ‚ÄúLoad balancing vs. distributed rate
limiting: An unifying framework for cloud control,‚Äù in Proceedings of
IEEE International Conference on Communications, ICC 2009, Dresden,
Germany, 14-18 June 2009, 2009, pp. 1‚Äì6.
[27] P. Berenbrink, A. Brinkmann, T. Friedetzky, and L. Nagel, ‚ÄúBalls into
bins with related random choices,‚Äù J. Parallel Distrib. Comput., vol. 72,
no. 2, pp. 246‚Äì253, 2012.
[28] K. Kenthapadi and R. Panigrahy, ‚ÄúBalanced allocation on graphs,‚Äù in
Proc. 17th Symp. Discrete Algorithms (SODA), 2006, pp. 434‚Äì443.
[29] B. Godfrey, ‚ÄúBalls and bins with structure: balanced allocations on
hypergraphs,‚Äù in Proc. 19th Symp. Discrete Algorithms (SODA), 2008,
pp. 511‚Äì517.
[30] A. Pourmiri, ‚ÄúBalanced allocation on graphs: A random walk approach,‚Äù
in Computing and Combinatorics - 22nd International Conference,
COCOON 2016, Ho Chi Minh City, Vietnam, August 2-4, 2016, Pro-
ceedings, 2016, pp. 330‚Äì341.
[31] L. Breslau, P. Cao, L. Fan, G. Phillips, and S. Shenker, ‚ÄúWeb caching
and zipf-like distributions: evidence and implications,‚Äù in INFOCOM
‚Äô99. Eighteenth Annual Joint Conference of the IEEE Computer and
Communications Societies. Proceedings. IEEE, vol. 1, Mar 1999, pp.
126‚Äì134 vol.1.
15
[32] M. Cha, H. Kwak, P. Rodriguez, Y.-Y. Ahn, and S. Moon, ‚ÄúI tube, you
tube, everybody tubes: Analyzing the world‚Äôs largest user generated
content video system,‚Äù in Proceedings of the 7th ACM SIGCOMM
Conference on Internet Measurement, ser. IMC ‚Äô07. New York, NY,
USA: ACM, 2007, pp. 1‚Äì14.
[33] L. Devroye, ‚ÄúThe expected length of the longest probe sequence for
bucket searching when the distribution is not uniform,‚Äù J. Algorithms,
vol. 6, no. 1, pp. 1‚Äì9, 1985.
[34] M. Ji, A. M. Tulino, J. Llorca, and G. Caire, ‚ÄúOrder-optimal rate of
caching and coded multicasting with random demands,‚Äù CoRR, vol.
abs/1502.03124, 2015. [Online]. Available: http://arxiv.org/abs/1502.
03124
[35] [Online]. Available: https://github.com/mahdijafaris/Balls and Bins
[36] R. Albert and A.-L. BarabaÃÅsi, ‚ÄúStatistical mechanics of complex net-
works,‚Äù Reviews of modern physics, vol. 74, no. 1, p. 47, 2002.
[37] D. Bauer, P. Hurley, and M. Waldvogel, ‚ÄúReplica placement and location
using distributed hash tables,‚Äù in 32nd Annual IEEE Conference on Local
Computer Networks (LCN 2007), 15-18 October 2007, Clontarf Castle,
Dublin, Ireland, Proceedings, 2007, pp. 315‚Äì324.
[38] D. R. Karger, E. Lehman, F. T. Leighton, R. Panigrahy, M. S. Levine,
and D. Lewin, ‚ÄúConsistent hashing and random trees: Distributed
caching protocols for relieving hot spots on the world wide web,‚Äù in
Proceedings of the Twenty-Ninth Annual ACM Symposium on the Theory
of Computing, El Paso, Texas, USA, May 4-6, 1997, 1997, pp. 654‚Äì663.
[39] M. Mitzenmacher, A. W. Richa, and R. Sitaraman, ‚ÄúThe power of two
random choices: A survey of technique and results,‚Äù In Handbook of
Randomized Computation Volume 1, pp. 255‚Äì312, 2001.
[40] D. P. Dubhashi and A. Panconesi, Concentration of Measure for the
Analysis of Randomized Algorithms. Cambridge University Press, 2009.
[41] A. Auger and B. Doerr, Theory of Randomized Search Heuristics:
Foundations and Recent Developments. River Edge, NJ, USA: World
Scientific Publishing Co., Inc., 2011.
APPENDIX A
SOME TAIL BOUNDS
Theorem 7 (Chernoff Bounds). Suppose that
X1, X2, . . . , Xn ‚àà {0, 1} are independent random variables
and let X =
‚àën
i=1Xi. Then for every Œ¥ ‚àà (0, 1) the following
inequalities hold:
Pr [X ‚â• (1 + Œ¥)E [X]] ‚â§ exp(‚àíŒ¥2 E [X] /2),
Pr [X ‚â§ (1‚àí Œ¥)E [X]] ‚â§ exp(‚àíŒ¥2 E [X] /3).
In particular,
Pr [|X ‚àíE [X] | ‚â• Œ¥E [X]] ‚â§ 2 exp(‚àíŒ¥2 E [X] /3).
For a proof see [40].
To deal with moderate independency we can state the
following lemma.
Lemma 4 (Deviation bounds for moderate independency,
see [41, Lemma 1.18]). Let X1, . . . , Xn be arbitrary binary
random variables. Let X‚àó1 , X
‚àó
2 , . . . , X
‚àó
n be binary random
variables that are mutually independent and such that for all
i, Xi is independent of X1, . . . , Xi‚àí1. Assume that for all i
and all x1, . . . , xi‚àí1 ‚àà {0, 1},
Pr [Xi = 1|X1 = x1, . . . , Xi‚àí1 = xi‚àí1] ‚â• Pr [X‚àói = 1] .
Then for all k ‚â• 0, we have
Pr
[
n‚àë
i=1
Xi ‚â§ k
]
‚â§ Pr
[
n‚àë
i=1
X‚àói ‚â§ k
]
and the latter term can be bounded by any deviation bound
for independent random variables.

