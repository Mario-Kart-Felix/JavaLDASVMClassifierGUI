. ' .. 
Basic  Local  Alignment  Search Tool 
Stephen F. Altschul', Warren Gish', Webb Miller2 
Eugene  W. Myers3  and David J. Lipmanl 
'Satwnal Center for Biotechnology Informalion 
Kdional Library of Medicine,  National  Institutes of Health 
Bethesda, M D  20894, UX-4. 
2Departmenl of Computer Science 
The  Pennsylvania  State  University,  University  Park, P A  16802, U.S.A. 
=Department of Computer Science 
University of Arizona, T w o n ,  A2 85721, U.S.9. 
(Received 26 February 1990; accepted 15 May 1990) 
A ne& approach to rapid  sequence  comparison, basic local alignment  search tool (BLAST), 
directly  approsimates alignments that optimize  a  measure of local similarity,  the  maximal 
segment  pair (3ISP) score. Recent  mathematical  results on the stochastic properties of MSP 
scores allow an anallrsis of the performance of this method as well as the statistical 
significance of alignments it generates. The basic  algorithm is simple and  robust; it  can be 
implemented in a number of ways and applied in a variety of contexts  including straight- 
forward DKB and protein  sequence database searches, motif searches, gene identification 
searches, and in the analysis of multiple  regions of similarity in long DXA sequences. In 
addition, to its flexibility and tractabi1it.y to mathematical analysis, BLAST is an  order of 
magnitude faster than existing sequence  comparison tools of comparable sensitivity. . 
1. Introduction 
The  discovery of sequence homology to a  known 
protein or family of proteins often provides the  first 
clues about  the function of a newly sequenced  gene. 
As the DNA and amino acid sequence databases 
continue to grow in size they become increasingly 
useful  in the  analysis of  newly  sequenced genes and 
proteins because of the greater chance of finding 
such homologies. There are a number of software 
tools for searching sequence databases but all use 
some measure of similarity between sequences. to 
distinguish biologically significant relationships 
from chance similarities. Perhaps the best studied 
measures are  those d in conjunction  with varia- 
tions .of the  dynamic programming  algorithm 
(X'eedleman 8c Wunsch, 1970; Sellers, 1974; Sankoff 
8: Kruskal, 1983; Waterman, 1984). These  methods 
assign scores to insertions, deletions and replace- 
ments,  and compute  an alignment of two sequences 
that corresponds to the least costly set of such 
mutations.  Such an alignment may  be thought of as 
minimizing the evolutionary distance or maximizing 
the similarity between the two  sequences  compared. 
In either case, the cost of this  alignment is a 
measure of similarity; the  algorithm  guarantees i t  is 
optimal, based  on the given  scores. Because of their 
computational  requirements,  dynamic  program- 
ming  algorithms are impractical for searching large 
databases  without  he use of a  supercomputer 
(Gotoh & Tagashira, 1986) or other special purpose 
hardware (Coulson et al., 1987). 
Rapid heuristic algorithms that  attempt  to 
approximate the above methods have been deve- 
loped (Waterman, 1984), allowing large databases 
to be searched on commonly available computers. 
In many heuristic methods -the measure of -simi- 
larity is not explicitly defined as  a  minimal cost set 
of mutations, but instead is implicit in the algo- 
rithm itself. For example, the FASTP program 
(Lipman d: Pearson, 1985; Pearson 8: Lipman, 1988) 
first finds locally similar regions between  two 
sequences based  on identities but  not  gaps,  and  then 
rescores these regions  using a  measure of similarity 
between residues, such as  a PAM matrix  (Dayhoff et 
al., 1978) which  allows conservative  replacements as 
well as identities to increment the  similarity score. 
Despite  their  rather indirect approximation of 
minimal  evolution  measures, heuristic tools such as 
FASTP have been quite  popular and have identified 
many  distant but ' biologically significant 
relationships. 
403 
00.)2-2S36~90/lSaM34-08 $03.00/0 0 1990 Acrdemic Press Limited 
404 S. F.  Altschul et   a l .  
In this  paper  we  describe a new  method, BLASTt 
(Basic  Local  A ignment  Search Tool), which 
employs a measure  based  on  well-defined  mutation 
scores. It directly  approximates the r e su l t s  t ha t  
would be obtained by a dynamic  programming  algo- 
rithm  for  optimizing  this  measure.  The  method  will 
detect weak but biologically  significant  sequence 
similarities,  and is more than an order of magnitude 
faster  than  existing  heuristic  algorithms. . 
2. Methods 
(a) The marinad seqmeni pair mensure 
Sequence  similarity  measures  generallv can  be classified 
as either global or local. Global similarity algorithms 
optimize the overall alignment of two sequences, which 
may include  large stretches of low similarity  (Needleman 
& Wunsch, 1970). Local similarity algorithms seek only 
relatively conserved subsequences, and a single  compari- 
son may yield several distinct subsequence alignments; 
unconserved regions do  not  contribute to the  measure of 
similarity (Smith & Waterman, 1981; Goad & Kanehisa, 
1982; Sellers, 19%). Local similarity  measures  are 
generally preferred for database searches, where  cDNAs 
may be compared with partially sequenced genes, and 
where distantly related proteins  may share only isolated 
regions of similarity, e.g. in the vicini@ of an  active  site. 
Nany similarity measures, including the  one we 
employ, begin with a matrix of similarity scores for all 
p'assible pairs of residues. Identities and conservative 
replacements have positive  scores, while unlikely  replace- 
ments have negative scow. For amino acid sequence 
comparisons we generally use the PAM-120 matrix (a 
variation of that of Dayhoff et al., 1978); while for DNA 
sequence  omparisons we score  identities +5,  and 
mismatches -4, other scores are of course possible. A 
sequence segment is a contiguous stretch of residues of 
any  length,  and  the  similarity score for two aligned 
segments of the same  length is the sum of the similarity 
values for each pair of aligned residues. 
Given these rules, we d e h e  a marimal segment pair 
(NSP) to be the highest scoring pair of identical  length 
segments chosen from 2 sequences. The boundaries of an 
XSP are chosen to  maximize its score, sa an MSP may be 
of any Iength.  The NSP score,  which BLGT heuristically 
attempts to calculate, provides a me- of local simi- 
larity for any pair of sequences. X molecular biologist, 
however, may be interested  in all conserved  regions 
shared by 2 proteins, not only in their highest scoring 
pair. We therefore define a segment pair to be locally 
maximal if ' i t s  score .cannot be 'improved either by 
extending or by  shortening  both segments (Sellers, 1984). 
BLAST can seek all locally maximal , v e n t  pairs with 
scores above some cutoff. 
Like  many  other  similarity measures. the MSP score  for 
2 sequences may be computed  in time  proportional to the 
product of their lengths  using a simple d-mamic program- 
ming algorithm. An important advantage of the MSP 
meaaure is that recent mathematical results allow the 
statistical significance of MSP scores to be estimated 
under  an  appropriate random sequence model (Karlin & 
Altschul, 1990; Karlin ef al., 1990). Furthermore.  for  any 
t Abbreviations used: BLAST, blast local alignment 
search tool; MSP, maximal segment pair: bp, 
base-pair(s). 
particular scoring matrix (e.g. PAH-1-20) one can  estimate 
the frequencies of paired raiduea in maximal segments. 
This tractability to mathematical analysis is a crucial 
feature of the BLAST algorithm. 
(b) Rapid appozimaiion of MSP scores 
In  searching a database of thousands of sequences, 
generally  only a handful,  if any, will be homologous to the 
query sequence. The scientist is tberefore interested in 
identifying only those sequence entries with MSP scores 
over  some cutoff score S. These sequences indude  those 
sharing highly significant similarity vith the  query as well 
as some  sequences with borderline scores. This  latter  set 
of sequences may  indude high scoring random  matches as 
well as sequences distantly related to the query. The 
biological significance of the high scoring  sequences may 
be inferred almost solely on the basis of the similarity 
score, while the biological contert of the borderline 
sequences may be helpful in distinguishing biologically 
interesting  relationship. 
Recent results (Kariin 6 Altschnl, 1990; Karlin et al., 
1990) allow us to estimate the high& YSP score S a t  
which chance similarities are likely to appear. To accel- 
erate  database searches, BLUT minimizes the  time  spent 
on sequence regions whose sirnilaritp with the  query  has 
little chance of exceeding this score. Lzt a  word pair be a 
segment pair of fixed length w. Tbe main strategy of 
BLAST is to seek only ? p e n t  pairs that  contain a word 
pair with a score of a t  least T. & ! S i n g  through a 
sequence,  one  can determine quicklF ahether it contains a 
word of length w that can pair wit! the q u e v  sequence to 
produce a word pair  with a score gkater than  or equal to 
the threshold T. Any such bit is enended to determine if 
it is contained within a v e n t  pair whose score is 
greater  than or equal to S. The lower the threshold T, the 
greater  the chance that a segment pair with a score of at 
least S will contain a word pair  with P score of at least T .  
A small  value for T. howerer. increases the  number of hits 
and therefore the execution time of the  algorithm. 
Random simulation prmits us to s e l e c t  a threshold T 
that balances  these  considerations. 
(c) implenzenLatbnt 
In  our implementations of this  approach,  details of the 
3 algorithmic steps (namely compiling a list of high- 
scoring words, scanning the database for  hits, and 
extending  hits)  vary  somewhat  depending  on  whether  the 
database  contains  proteins  or DXA ,squences. For pro- 
teins, the list consists of all words (u-mers) that score at 
least T when .-compared to some word in the query 
sequence. Thus, a query aord  may be represented by no 
words in the list (e.g. for common wmers using PAM-120 
scores) or by many.  (One mav. of course. insist that every 
wmer in the  quen. sequene be included in the word list. 
irrespective of whether  pairing  the a d  with itself yields 
a score of at least T.) For ralues of v and T that we have 
found.most useful (see below), there are typically of t h e  
order of 50 words in the list for eTec- residue in the  query 
sequence, e.g. 12.500 words for .a sequence of length 250. 
If a little  care is taken in programming, the list of words 
can be generated in time e n t i a l l ? -  proportional to  t h e  
length of the list. 
The scanning phase r a i s e d  a clasie algorithmic prob- 
lem, i.e. search a lopg y u e n c e  for all occurrences of 
certain short sequences. N e  investigated 2 approaches. 
Simplified, the first works as folloux Suppose that w = 3 
and  map each word to  an integer beheen  1 and 204, so a 
word can be used as an index into an array of size 
204 = 160,000. Let tb ith  entry of  Such an  array point to 
the list of all occurrences in the  query sequence of the  ith 
word. Thus, as we scan the  database, each database word 
I d s  us immediate+ to the corresponding hits. Typically, 
only a fen  thousand of the 20‘ possible words will be in 
this table. and it is e q  to modify the approach to use far 
fewer than 204 pointers. 
The second approach we explored  for the scanning 
phase was the use of a deterministic finite automaton or - 
finite state machine (Mealy, 1955; Hopcroft & Ullman, 
1979). An important feature of our construction was  to 
signal acceptance on transitions (hlealy paradigm) as 
opposed to on states (Moore  paradigm). In the automa- 
ton’s construction, this sard a factor in space and  time 
roughly p r o p o r t i d  to the  size of the underlying 
alphabet.  This  metbod yielded  a  program that ran faster 
and we prefer this  approach  for general use. With  typical 
query lengths and parameter settings, this version of 
BLAST  scans a protein database at approximately 
500,000 residue& 
Extending a hit. to iind a locally  maximal segment pair 
containing that  hit is straigbtfonvard. To economize time, 
we terminate the prowss of extending in one direction 
when we reach a w e n t  pair whose score falls a certain 
distance below the best score found for shorter extensions. 
This introduces a farther departure from the ideal of 
finding guaranteed JlSPs, but the added inaccuracy is 
negligible, as can be demonstrated by both experiment 
and analysis (e-g. for protein comparisons the default 
distance is 20, and the probability of missing a higher 
scoring extension is about 0-001). 
For DKA, we ase a simpler  word list, i.e. the list of all 
contiguous wmers in the query sequence, often with 
w = 12. Thus, a sequence of length n yields a list of 
n-w+ 1 words, a d ,  again there are commonly a few 
thousand words in the list. It is advantageous to compress 
the  database by paking 4 nucleotides into a single byte, 
using an  auxiliarr table to delimit  the boundaries between 
adjacent sequen- Assuming w 2 11, each hit must 
contain  an 8-mer hit that lies on a byte boundary. This 
observation allows us to scan the  databaee byte-wise and 
thereby increase speed &fold. For each 8-mer hit, we 
check for an endosing *mer hit; if found, we extend as 
before. Running on a SUX4, with a query of t y p i a l  
length (e.g. several thousand bases), BLAST  scans at 
approximately 2 x le bases/s. At facilities which run 
many such  searches a day, loading the compressed data- 
base into  rnemoq once in a shared memory scheme 
affords a substantid saving in subsequent search times. 
It should be noted that DNA sequences are highly non- 
random,  with I d y  biased base composition (e.g. 
A +T-rich regions), and  repeated sequence elements (e.g. 
A h  sequences) and this has important consequences for 
the design of a DSA database search tool. If a given 
query  sequence has, for  example,  an  A+T-rich  sub- 
sequence, or a commonly occurring repetitive element, 
then a database eearch mill produce a copious output of 
matches with little interest. We have designed a some- 
what & hoc but  dective means of dealing with these 2 
problems. The program tha t  produces the compressed 
version of the DSA database  tabulates  the frequencies of 
all &tuples.  Those  cxcurring much more frequently than 
expected by chance  [controllable by  parameter) are stored 
and used to filter “uninformative” words from the  query 
word list. Also, preceding full database searches,  a search 
of a sublibrary of repetitive  elements is performed, and 
the locations in tbe query of significant  matches are 
stored. Words genemted by these regions are removed 
from the  query word list for the full search. Matches to 
the  sublibrary, however, are reported in the final output. 
These 2 filters allow alignments to regions with biased 
composition, or to regions containing repetitive  elements 
to be reported, as long as adjacent regions not containing 
such features share significant similarity to the query 
sequence. 
The  BLAST  strategy  admits numerous variations. We 
implemented a version of BLAST that uses dynamic 
programming to extend hits so as to allow gaps in the 
resulting alignments. Keedless to say,  this  greatly slows 
the  extension process. While the sensitivity of amino  acid 
searches was improved in some cases, the selectivity was 
reduced as well. Given the trade-off of speed and selec- . 
tivity  for  sensitivity, it  is questionable whether the  gap , 
version of BLAST constitutes an improvement. We also 
implemented the alternative of making a table of all 
occurrences of the ro-mers in the  database,  then scanning 
the query sequence and processing hits. The disk space 
requirements  are considerable,  approximately 2 computer 
words for  every residue in the database. More damaging 
was that  for  query sequences of typical  length, the need 
for random access into the  database (as opposed to 
sequential access) made  the approach slower, on the 
computer  systems we used, than scanning the entire 
database. 
3. Results 
To evaluate the utility of our  method,  we describe 
theoretical results about the  statistical  significance 
of MSP scores, study the accuracy of the algorithm 
for random sequences at approximating MSP scores, 
compare the performance of the  approximation to  
the full calculation on a set of related  proEin 
sequences and; finally, demonstrate its  performance 
comparing long DKA sequences. 
(a) Performance of BLAST with random sequen-k 
Theoretical results on the distribution of MSP 
scores from the comparison of random sequences 
have  recently become available  (Karlin & Altschul, 
1990; Karlin et d.,. 1990). In brief, given a set of 
probabilities for the occurrence of individual 
residues, and a set of scores for aligning pairs of 
residues,  the theory provides  two parameters 1. a n d  
K for   evaluat ing the statistical  significance of hfSP 
scores. When two random sequences of lengths m 
and n are compared, the probability of finding a 
segment  pair   with a score  greater  than or equal  t o  
S is: 
1 - e-y, (1) 
where y = Kmn e-IS. More  generally, the prob- 
ability of finding c or more  distinct  segment  pairs, 
al l   with a score of at least S, is  given by the  formula: 
Using this formula,  two  sequences  that  share  several 
distinct  regions of similarity  can  sometimes be 
detected as significantly,  related,  even  when no 
segment pair is statistically  significant in isolation. 
\Chile  finding an JISP with a  p-value of0.001 may 
be snrprising when two specific sequences are 
compared, searching a  database of 10,000 sequences 
for similarity to a que? sequence is likely to  turn 
up ten such segment pairs simply by chance. 
Segment pair p-values must be discounted accord- 
ingly when the similar segments are  discorered 
through blind database searches.  Using formula (1). 
we can calculate the approximate score an JISP 
' must have to be distinguishable from chance 
similarities found in a  database. 
We are interested in finding only segment pairs 
d t h  a score above some  cutoff S .  The  central ides of 
the BLAST algorithm is to confine attention to 
segment  pairs that contain a word pair of length ZL' 
with a score of at  least 3". It is therefore of interest 
to know what proportion of segment pairs with a 
given score contain such a word pair.  ,This  question 
makes sense onl_v in the  contest of some distribution 
of high-scoring segment pairs. For MSPs arising 
from the comparison of random sequences, Dembo 
& Karlin (1991) provide such a limiting  distribution. 
Theory does 'not _vet exist to  calculate the prob- 
ability q that such a segment pair will fail to  contain 
a word pair with a score of at least T. However,  one 
argument suggests that q should depend  exponen- 
tially upon the score of the JISP. Because the 
frequencies of paired  letters in JISPs approaches  a 
limiting distribution (Knrlin Cy- Altschul, 1990), the 
expected  length of an JISP grows linearly with its 
score. Therefore, the longer an JISP, the  more  inde- 
pendent chances it effectively has for containing a 
word with a score of at least T, implying that q 
should decrease esponentially with increasing MSP 
score S. 
To test this  idea, we generated one million pairs 
of "random prott4n sequenws (using  typical  amino 
acid frut1ltcncic.s) of' lrnpth 250. sud found thc MST' 
for each using I 'XJI-I% SWIVS. I n  Fig1lt.c. 1 ,  wc plot 
the lognrithrn ( I f  ttrc'  f rac t ion  p o f  1ISl's witlr woru  S 
t h a t  [ l o  not contraill tt \ W N ~  pair of  ltwgtlr f o ~ ~ r  with 
s w r c  a k t  Iemt 1s. S i ~ w  thr v:dttt*s slrow~~ t lrc  suhjtrct 
t o  &tt,ist i d  varintiotr. erwr bnw rt!prr>setlt one 
.. 
Basic Local Alignment Search Tool 407 
Table 1 
The probabiZity of a hit ai various  settings of the parameters ur and T, and the 
proportion of random MSPs missed by BLAST 
Linear  regression 
-In (q) = aS+b Implied yo of MSPs missed by BLAST ahen S equals 
Probability of a 
W T  hit x 10' a b 45 50 55 60 65 io 
- -  
i J  
~ 
3 11 253 01236 - 1.005 
12 I47 008i5 
13 83 
-0.746 
m 2 5  
14 
-0.550 
48 00463  -0461 
15  26 00328 
16  14 00232 -0263 
- 0.353 
1; I 00158 
1s 
-0191 
4 00109 -0.137 
4 13 12i   01 I92 - 1.278 
14 7s 0.0904 - 1.012 
15 4 i  00686 
16 
-0802 
28  0.05 9 -e634 
If 16 00390 
18 9 
-0498 
19 5 
00290  -0387 
00215  -0298 
20 3 00159 - 0234 
5 15 64 01137 
16 40 0 8 8 2  
- 1.525 - 1.207 
17 25 00679 -0939 
18 15 00529 
19 
-0.754 
9 0-0413 - 0608 
20 
21 3 
5 00327 
00257 
-0.506 
- 0420 
22 - 9 00200  -0343 
Expected no. of random WPs with score at least S: 
1 
4 
11 
20 
33 
46 
59 
70 
2 
5 
10 
18 
28 
40 
51 
62 
3 
6 
12 
20 
29 
38 
4 s  
57 
50 
1 
3 
8 
16 
28 
41 
55 
67 
1 
3 
7 
23 
14 
35 
46 
57 
2 
4 
9 
15 
23 
32 
42 
52 
9 
0 0 0 
2 1 1 
6 4 3 
12 IO 8 
23 20 
36 
l i  
32 29 
51 47 43 
63 60 55 
1 0 0 
2 1 1 
5 4 3 
11 8 6 
19 16 13 
30 26 
41 
'2 
3i 33 
53 49 4.5 
1 1 0 
3 2 1 
6 4 3 
12 9 
19 15 13 
28 23 20 
37 32 
47 
99 
42 38 
2 0 3  0-06 
- 
I 
0 
0 
2 
6 
14 
40 
26 
54 
0 
0 
2 
5 
11 
19 
30 
41 
0 
1 
2 
10 
5 
17 
25 
35 
00  1 
0 
0 
'7 
23 
12 
37 
51 
0 
0 
1 
4 
9 
1; 
27 
38 
0 
0 
2 
4 
8 
14 
22 
31 
@002 
3 
chance of a hit. ;Examining Table 1, it is  apparent 
that  the  parameter pairs (w = 3, T = 14), (to = 4, 
T = 16) and (w = 5, T = 18) all have approximately 
equivalent sensitivity over the relevant range of 
cutoff scores. The probability of a hit yielded by 
these parameter  pairs is  seen to decrease for 
increasing tu; the same also holds for different levels 
of sensitivity. This makes intuitive sense, for the 
longer the word pair examined the more informa- 
tion gained about potential RZSPs. Maintaining a 
given  level  of sensitivity, we can therefore decrease 
the time spent on step (3), above,  by increasing the 
parameter tu. However, there are complementary 
problems created by large w. For proteins there  are 
20" possible words of length w, and for a given  level 
of sensitivity  the number of words generated by a 
query grows exponentially with w. (For example, 
using the 3 parameter pairs above, a 30 residue 
sequence wits found to generate word lists of size 
296, 3561 and 40,939 respectively.) This increases 
the time spent on step (l) ,  and the amount of 
memory required. In practice, we have found that 
for protein searches the best compromise between 
these considerations is  with a word  size of four; this 
is the  parameter  setting we use  in  all analyses that 
follow. 
Although reducing the threshold T improves the 
approximation of MSP scores by BLAST, i t  also 
increases execution  time because there will be more 
words generated  by  the query sequence and  there- 
fore more hits. What value of T provides a reason- 
able compromise between the considerations of 
sensitivity +nd time?  To provide nurnerica1 data, we 
compared a random 250 residue sequence against 
the  ntire PIR database (Release 23.0, 14,372 
entries and 3,977,903 residues) Kith T ranging from 
20 to  13. I n  Figure 2 we plot the execution time 
(user time on a SUN4-280) n e r m  the number of 
Figure 2. The  central  processing unit time  requited to 
execute BLAST on the PIR protein database (Release 
230) as a function of the size of the word list generated. 
Points correspond to values of the threshold  parameter T 
ranging from 13 to 20. Greater values of T imply fewer 
words in the list. 
405 S .  F .  Altschul et  al. 
Table 2 
T h e  central pmcessing unit time required  to ezecute 
BLAST as a function of the approximate probability 
q of missiltg an MSP zuith-score S 
q (Yo1 CF’U time (9) 
2 39 25 17 
5 
12 
25 17 12 9 
10 l i  12 9 
m 
i 
12 9 I 5 
S: !u 55 70 90 
p-value 1.0 0 8  0.01 10-s 
Times are for searching the PIR database (Release 23-0) with a 
random queT sequence of length 250 using 8 SW4-280. CPU, 
central processing unit. 
words generated  for each value of T. Although there 
is a linear  relationship between the number of words 
generated and execution time, the number of words 
generated increases exponentially  with  decreasing T 
over  this  range (as seen by the spacing of x values). 
This plot  and  a simple analysis  reveal that the 
expected-time  computational  complexity of BUST 
is approximately aW+bN+cNW/20”, where W is 
the  number of words generated, N is the  number of 
residues in  the  database  and a, b and c are 
constants. The W terrn accounts for compiling the 
ward list,  the N term coven the database scan, and 
thg N W term is for extending the hits.  Although the 
number of words  generated, W, increases  exponen- 
tially with decreasing T ,  i t  increases only linearly 
with the length of the query, so that  doubling  the 
query  length doubles the number of words. We  have 
found in  practice that T = 17 is a good choice for 
the threshold because, as discussed below, lowering 
the parameter further prondes little improvement 
in the  detection of actual homologies. 
3LAST’s direct tradeoff between accuracy and 
speed is best  illustrated by Table 2. Given a specific 
probability q of missing a chance MSP with  score S, 
one can calculate what threshold parameter T is 
required, and therefore the approximate execution 
time. Combining the  data of Table 1 and  Figure 2, 
Table 2 shows the central processing unit times 
required  (for  various values of q and S) to search the 
current PIR database with a random  query 
sequence of Iength 250. To have about. a 10% 
I chance of missing an MSP with  the  statistically 
significant score of 70 requires about  nine seconds of 
central processing unit time. To reduce the chance 
of missing such an MSP to 2% involves  lowering T, 
thereby  doubling the execution time. Table 2 illus- 
trates, furthermore, that the higher scoring (and 
more statistically significant) an MSP, the less time 
is required to find i t  with a given degree of 
certainty. 
(c) Performanee of BLAST with 
hmnoZogo2cs sequences 
To study  the performance of BLAST  on  real data, 
we compared a variety of proteins  with  other 
members of their respective superfamilies (Dayhoff, 
1978), computing the  true MSP scores as well as  the 
BLAST approximation with word length four and 
various settings of the  parameter T. Only with 
superfamilies containing many  distantly  related 
proteins could we obtain  results usefuIly comparable 
with the random model of the previous section. 
Searching the globins with woolly monkey myo- 
globin (PIR code MDfQW), we found 178 
sequences containing MSPs with scores between 50 
and 80. Using  word length four  and T parameter 17, 
the random model suggests BUST should miss 
about 24 of these MSPs; in fact, it misses 43. This 
poorer than expected performance is due to the 
uniform ‘pattern of conservation in the gIobins, 
resulting in a relatively small  number of high- 
scoring words between distantly related  proteins. A 
contrary example was provided by comparing the 
mouse immunoglobulin K chain precursor V region 
(PIR code KVXSTl) with immunoglobulin 
sequences, using the same parameters aa previously. 
Of the 33 MSPs with scores between 45 and 65, 
BLAST missed only two; the  random model 
suggests it should have missed eight. In general, the 
distribution of mutations  along sequences has been 
shown to be more clustered than predicted by a 
Poisson process (Uzzell & Corbin, 1971), and thus 
the BLAST approximation should, on average, 
perform better on real sequeny  than predicted  by 
the random model. 
BLAST’S great  utility is for &ding high-scoring 
MSPs quickly. In the examples above, the algo- 
rithm found all but one of the 89 globin MSPs with 
a score over 80, and all of the 12.5 immunoglobulin 
MSPs with a score over 50. The  orerall performance 
of BLAST depends upon the distribution of MSP 
scores for those sequences related to the  query. I n  
many instances, the  bulk of the XSPs that are 
distinguishable &om chance hare a high enough 
score to be found readily by B U S T ,  even using 
relatively high values of the T parameter.  Table 3 
shows the number of MSPs with a score above a 
given threshold found by BLAST when searching a 
variety of superfamilies using a Fariety of T para- 
meters. In each instance, the threshold S is chosen 
to include scores in the borderline region, which  in a 
full database search would include chance similar- 
ities as well as biologically significant relationships. 
Even with T equal to 18, virtually  all the  statisti- 
cally significant MSPs are found in most .instances. 
Comparing BLAST (with parameters w = 4, 
T = 17) to  the widely  used FASTP  program 
(Lipman & Pearson 1985; Pearson & Lipman, 19SS) 
in its most sensitive mode (kfup = I ) ,  we have  found 
that BLAST is of comparabIe sensitivity, generaiIy 
yields fewer false positives (high-scoring but unre- 
lated matches to the  query),  and is over an order of 
magnitude faster. 
(d) Comparison of two long D X A  sequences 
Sequence data exist for a 73,360 bp section of the 
human genome containing the blike globin gene 
I 
Basic Local Alignment Search Tool 409 
Table 3 
Th numb& of MSPs found by BLAST when searching various protein 
superfamilies in  the P I R  database (Release 22-0) 
PIR code of Superfamily 
query sequence searched 
mw Q w 
K\WSTl 
Giobin 
OKBOG 
Immunoglobulin 
Protein kinase 
ITHU 
KYBOA 
Serpia 
CCHU 
Serine protease 
FECF 
*borne c 
Fedox in  
Cutoff 
score S 
47 
45 
52 
50 
49 
46 
44 
Number of MSPs with score s t  least S 
found by BLAST with T parameter set to 
22 20 19 18 17  16 15 
115 169 178 222 238 25.5 281 
153 155 155 156 156 157 158 
9 42 47 59 60 60 60 
12 12 12 12 12 12 12 
59 59 59 59 59 59 59 
81 91 91 96 98 98 48 
22 23 23 24 2.4 24 24 
Sumber of MSPs 
in superfamily 
with score 
at least S 
285 
158 
60 
12 
59 
98 
24 
NIXQU‘, WOOIJ? monkey myoglobin; KVhlST1, mouse Ig K chain precursor V region; OKBOG. borine &?@-dependent protein 
k i n a s e ;  ITHU, hnman a-1-antitrlpsin precursor; KYBOA. bovine chymotrypsinogen A, CCHU. human cytochrome c; FECF, 
Chbrobium sp. ferredoxin. 
cluster  and for a  corresponding 44,595 bp section of 
the rabbit genome (Margot et al., 1989). The pair 
exhibits  three main  classes of locally similar regions, 
namely genes, long interspersed repeats  and  certain 
anticipated weaker similarities, as described below. 
We used the BL4ST algorithm to locate locally 
similar regions that can be aligned without intro- 
duction of gaps. 
The human gene cluster contains six globin  genes, 
denoted E ,  ‘ y ,  q,  6 and 8, while the rabbit cluster 
has only four, namely E ,  y, 6 and 8. (Actually,  rabbit 
6 is a pseudogek.)  Each of the 24 gene pais ,  one 
human gene and. one rabbit gene, constitutes a 
similar  pair. An alignment of such a pair requires 
insertion  and deletions, since the  three  exons of one 
gene generally differ somewhat in their  lengths  from 
the corresponding exons of the paired gene, and 
there  are even  more extensive  variations  among  the 
introns. Thus, a collection of the highest scoring 
alignments  between similar regions can be expected 
io have at least 24 alignments between gene pairs. 
Nammatian genomes contain large numbers of 
long interspersed repeat  sequences, abbreviated 
LINES. In particular,  the  human P-like globin 
cluster contains two overlapped L1 sequences (a 
type of LINE) and  the  rabbit cluster has  two 
t a ~ d e m  L1 sequences in the same  orientation,  both 
around 6000 bp in length. These  human and  rabbit 
L1 sequences are quite similar and their lengths 
make  them  highly visible in similarity  compu- 
tat.ions. In all, eight L1 sequences have been cited in 
the human cluster and five  in the  rabbit  cluster,  but 
because of their reduced length and/or reversed 
orientation, the other published L1 sequences do 
not affect the results discussed below.  Very recently, 
another piece of an L1 sequence  has been discovered 
in  the  rabbit cluster (Huang et al., 1990). 
Evolution  theory  suggests  that  an  ancestral  gene 
cluster arranged as 5’-c-y-q-&/l-3’ may  have  existed 
before the mammalian radiation. Consistent with 
this hypothesis, there are inter-gene similarities 
within  the #? clusters. For example,  there is a  region 
between human E and ‘y t,hat is similar to a region 
between rabbit E and y. 
We  applied a variant of the BLAST program to  
these  two  sequences,  with  match score 5, mismatch 
score -4  and, initially, w = 12. The program  found 
98 alignments scoring over 200, with 1301 being the 
highest score. Of the 57 alignments scoring over 350, 
45 paired  genes (with each of the 24 possible gene 
pairs  represented)  and  the  remaining 12 involved L1 
sequences.  Below 350, inter-gene similarities (as 
described above)  appear, along with  additional 
alignments of genes and of L1 sequences. Two align- 
ments  with -scores between. 200 and 350 do n8t fit 
the  anticipated  pattern. One reveals the newly dis- 
covered section of L1 sequence. The other aligns a 
region immediately 5’ from the human f l  gene with a 
region just 5‘ from rabbit 6. This last alignment 
may be the result of an intrachromosomal gene 
conversion between 6 and J in the  rabbit genome 
(Hardison & Margot, 1984). 
With smaller values of 20, more alignments are 
found. In particular,  with w = 8, an additional 32 
alignments ale found  with  a score above 200. Ail of 
these fall in one of the three classes  discussed above. 
Thus, use  of a  smaller w prorides no essentially new 
information. The dependence of various  values on u7 
is given in Table 4. Time is measured  in seconds on 
a SUN4 for a simple  variant of BLAST that  works 
with  uncompressed DNA  sequences. 
Table 4 
Tb time and sensitivity of BLAST on 
D N A  sqwnces as a fumtion of w 
W Time Words Hits hlatches 
8 159 44,587  118,941  130 
9 
10 
6.8 44,586 
4.3 44,585 
39.2 18 123 
15.3’1  114 
11 3 5  44.5& 7345 106 
12 3.2 44.583 4197 9s 
~~ ~ 
S. - F .  A 
4. Conclusion 
.The concept underlying  BLAST is simple and 
robust  and therefore can be implemented in a 
number of ways  and utilized  in a variety of 
contexts. As mentioned above, one variation is to 
allow for gaps in the extension step. For the  applica- 
tions we have had in mind, the tradeoff in speed 
proved unacceptable, but  this may not be true for 
ather  applications. We have implemented a shared 
memory version of BLAST that loads the 
compressed DNA file into memory once, allowing 
subsequent searches to  skip  this  step. We are imple- 
menting a similar algorithm for.comparing a DNA 
sequence to the protein database, allowing trans- 
lation in all six reading frames. This permits the 
detection of distant protein homologies even in the 
face of common DNA sequencing errors (replace- 
ments and frame shifts). C. B. Lawrence (personal 
communication) has fashioned  score matrices 
derived from consensus pattern matching methods 
(Smith & Smith, 1990), and different from the 
PAX-120 matrix used  here,  which  can greatly 
decrease the time of database searches for sequence 
motifs. 
The BLAST approach permits the construction of 
extremely  fast programs for database searching that 
have  the  further  advantage of amenability to 
mathema_tical analysis. Variations of the basic idea 
as well as alternative implementations, such as 
those described above, can adapt the method for 
different  contexts. Given the increasing size of 
sequence  databases, BLAST can be a valuable  tool 
for the molecular biologist. A rersion of BLAST in 
the C programming language is available from the 
authors upon request (write to W. Gish); it runs 
under  both 4 2  BSD and  the AT&T System V 
UNIX operating systems. 
W.M. is supported in part by SKH grant LMOS110, and 
E.W.Y. is supported in part by hXH grant LM04960. 
References 
Coulson, A. F. W., Collins, J. F. & Lyall, A. (1987). 
Comput. J .  30,420424. 
iltschul e t  ai. 
Dayhoff, >I. 0. (1978).  Editor of - 4 t h  of Profrin Sequence 
and Structure, vol. 3, mppl. 3, S a t .  Biomed. Res. 
Found., Washington. DC. 
Dayhoff, 31. O., Schwartz, R. 31. & Orcutt. E. C. (1975). 
In Allas of Protein Seqwnr~ and Stmture  (Dayhoff, 
SI. 0.. ed.), vol. 5, mppL 3,  pp. 34.5-352, Kat. 
Biomed.  Res.  Found.,  K’ajhington, D C .  
Dembo, X. & Karlin, S. (1991). Ann. Prob. in the  press. 
Goad, W. B. & Kanehisa, 31. I. (1952). ~Vucl.  Acid3 Rea. . 
Gotoh, 0. & Tagashira, I-. (1986). S u c I .  d c &  Rea. 14, 
Hardison, R. C. & Margot, J .  B. (19&). Nd. Bid. Evol. 1, 
Hopcroft, J. E. & Ullman. J. D. (1979). In Inlrductim to ’ 
10, 245-263. 
57-64. 
302-316. 
Avtomotd . T h e w ,  Lanpqea. and Compdatim; 
pp. 4245, Addison-We&?, Reading, MA: 
Huang, X.. Hardison, R. C. h 3liller. W. (1990). Compul. 
A w l .  Bwsci. In  the p m  
Karlin, S. & Altschul, S. F. (1990). Proc. Xat. d c a d .  Sci., 
Karlin, S., Dembo, A. & Kaaabata, T. (1990). dnn. Stat. 
Lipman,’ D. J. & Pearson. K. R. (1985). SciclLGe, 227, 
3Iargot. J. B., Demers, G .  K. & Hardison, R. C. (1989). 
Mealy, G. H. (1955). Bell Spim Te+ J .  34, lO.i?~-1079. 
Xeedleman, S. B. & Wunsch. C. D. (1950). J .  Yol. Biol. 
U.S.B. 87, 2264-2268. 
18, 571-581. 
1435-1441. 
J .  Y o l .  Biol. 205, l a .  
48, 443453. 
Pearson, W. R. & Lipman. D. J. (1988). PTCC. Xaf. Acad. 
Sci.,.U.S.A. 85, 244-2U8. 
Sankoff, D. & Kruskal, J. B. (1983) Time”Tlirp, String 
Edits and MacromolecuLcr.- The Theory and Practice of 
Sequence Comparimn. Addison-Wesley.  Reading, 
MA. 
Sellers, P. H. (1974). SIdV d .  dppl. Math. 2 6 .  T87-793. 
Sellers, P. H. (1984). Bull. H d h .  Bid. 46,501-514. 
Smith, R. F. & Smith, T. F. (1990). PTOC. Jut- d m d .  Sci., %$ 
USA. 87, 118-122. ‘9 -  r‘. 
Smith, T. F. & Waterman, 3f. S. (1981). Adran. Appl. ;$$ 
>lath. 2, 482489. 
Uzzell, T. & Corbin. K. ‘X. (1951). Science, 172, 
1089-1096. -.? 
Waterman, M. S. (19%). B d .  Y d h .  Biol. 46. 4773-500. -%. 
. .  
Edited by S. Brenner 

