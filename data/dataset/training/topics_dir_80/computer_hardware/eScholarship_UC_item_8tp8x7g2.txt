eScholarship provides open access, scholarly publishing
services to the University of California and delivers a dynamic
research platform to scholars worldwide.
Center for Embedded Network Sensing
University of California
Title:
SYS1: Avrora: Scalable Sensor Network Simulation with Precise Timing
Author:
Ben Titzer; Daniel K. Lee; Jens Palsberg
Publication Date:
01-01-2005
Series:
Posters
Permalink:
http://escholarship.org/uc/item/8tp8x7g2
Additional Info:
BibTex @misc{ title={SYS1: Avrora: Scalable Sensor Network Simulation with Precise Timing},
author={Ben Titzer, Daniel K. Lee and Jens Palsberg}, abstract={We present Avrora, a
cycle-accurate instruction-level sensor network simulator. Avrora scales to networks of up
to 10,000 nodes and performs as much as 20 times faster than previous simulators
with equivalent accuracy, handling as many as 25 nodes in real-time. Avrora emulates
sensor nodes based on the Mica2 hardware platform, including the AVR microcontroller,
its internal devices such as timers and serial port connections, and external devices such
as the CC1000 radio. Avrora provides a platform for simulating, analyzing, and debugging
sensor network programs in precise detail. }, url={http://research.cens.ucla.edu/pls/portal/url/item/
F9845531CAB74D22E0306180528D49C0}, year={2005}, }
Abstract:
We present Avrora, a cycle-accurate instruction-level sensor network simulator. Avrora scales
to networks of up to 10,000 nodes and performs as much as 20 times faster than previous
simulators with equivalent accuracy, handling as many as 25 nodes in real-time. Avrora emulates
sensor nodes based on the Mica2 hardware platform, including the AVR microcontroller, its
internal devices such as timers and serial port connections, and external devices such as the
CC1000 radio. Avrora provides a platform for simulating, analyzing, and debugging sensor network
programs in precise detail.
Copyright Information:
All rights reserved unless otherwise indicated. Contact the author or original publisher for any
necessary permissions. eScholarship is not the copyright owner for deposited works. Learn more
at http://www.escholarship.org/help_copyright.html#reuse
QuickTime™ and a
TIFF (Uncompressed) decompressor
are needed to see this picture.
Problem Description: Accurate simulation of sensor programs requires precise timing
Proposed Solution: Efficient, parallel, cycle-accurate simulation with Avrora 
Avrora: Scalable Simulation of Sensor Networks with 
Precise Timing
Ben L. Titzer and Jens Palsberg
UCLA Compilers Group - http://compilers.cs.ucla.edu/
Introduction: Sensor networks are hard to develop and test
Debugging microcontroller programs is hard
• Narrow debugging interface to hardware
– Interface to chip is narrow and does not allow complex interaction with 
the executing program in real time
– presence of debugging code influences results
• Intricate, low-level code
– Driver code for various hardware sensors and communications devices
• Subtle timing interactions
• Longer development cycles due to reprogramming
Distributed network behavior
• Behavior of code depends on environment
– Can depend on input to sensors and communication with outside world
• Distributed, multi-hop communications
– Routing algorithms
– Data mining
• Detailed network monitoring difficult
– Lots of sensors, lots of communication
– Microsecond level phenomenon
– Complex interactions
High Accuracy needed
Parallel machine-code simulation Results
UCLA – UCR – Caltech – USC – CSU – JPL – UC Merced
Center for Embedded Networked Sensing
Portability
Scalability
Parallelism
Perform
ance
A
ccuracy
Flexibility
Program
 
A
nalysis
R
equires
Avrora Excellent Good
High
Poor
Good High High Excellent Framework
Stack
CFG
Java
TOSSIM Poor None Excellent Fair Poor none Linux
X86
TinyOS
ncc
gcc
AtEmu Fair None Fair Excellent Good none GTK2
X
Libelf
gcc
libxml
Simulator
Environment
Interpreter
Monitor
(user)
Off-chip Devices
On-chip Devices
Fe = Fire EventFp = Fire ProbeFi = Fire InterruptWi = Write IO RegisterWp = Write PinRp = Read Pin
Fp
Fi Wi
Ip
S
S = Start
X = Stop
Pi = Post InterruptPe = Post EventIp = Insert Probe
WpRp
Pi
Pe
Event Queue
Pe
Fe
Simulator Organization
X
Asynchronou
s
Synchronous
Fe
Channel Utilization
0
500
1000
1500
2000
2500
3000
3500
4000
4500
5000
1 2 4 8 16 32 64 128 256 512
Number of Nodes
B
y
te
s 
p
e
r 
se
co
n
d
Attempts
Delivered
Corrupted
Channel Limit
CPU bound performance
0
5
10
15
20
25
30
Livermore Loop 1 Livermore Loop 2 Livermore Loop 5
benchmark
M
h
z
Avrora (-server)
Avrora
ATEMU
simulavr
Scalability
0
0.2
0.4
0.6
0.8
1
1.2
1 2 3 4 5 6 7 8
Number of processors
N
o
rm
a
li
z
e
d
 E
x
e
cu
ti
o
n
 T
im
1 node
4 nodes
32 nodes
Performance
0.1
1
10
100
1000
10000
1 2 4 8 16 32 64 128 256 512 1024
Number of nodes
S
e
co
n
d
s
ATEMU
Avrora
TOSSIM
•Map one thread per node
–Allows parallelism in simulation 
–Requires new solutions to Send-Receive and Sampling problems
•Synchronization Interval approach
–Periodically synchronize threads to preserve order and timing of 
communications
•Wait For Neighbors approach
–Node waits for all neighbors that can influence its operation to
pass a specific point in global simulation time
Core Problems Identified
• Cycle-level phenomenon
– Software control of radio hardware device
– Sleep behavior, interrupt behavior
– Measure time-dependent quantities such as channel 
utilization, access latency
• Previous approaches don’t scale well
– Synchronization of nodes every clock cycle
– Each device simulated adds work every clock cycle
– Poor performance for large networks
• Send-Receive Problem
– A receiver node must not proceed past a point in time 
at which it should receive a radio packet from a sender 
until the sender is beyond the point of transmission
– Time to send a byte on mica2: 6106 clock cycles
• Sampling Problem
– A node sampling the RSSI value of its own radio 
should not proceed past a point in time at which 
possible senders can influence the sampled value
– Time to sample RSSI on mica2: 832 clock cycles
•Cycle-accurate AVR simulator
–Efficient execution of program code 
–Accurate timing of program interaction 
with devices
•Device and Radio simulation
–Timers, UART, SPI, CC1000
–Important for correct program simulation
•Whole network simulation
–Nodes sense, compute, and communicate, 
with full monitoring capabilities
•Profiling and Monitoring
–Flexible extension points allow for 
detailed monitoring of program execution 
without changes to simulator
Node A
Node B
Node C
Node D
Node E
T=0 T=1 T=2 T=3
RSSI
Send E1
C1
RSSI
A
B
C
E
D
Network
Send C1 Send C2
RSSI
Synchronization Illustration
C2+E1
C1 C2
Delivery point
Synchronization point
Starting point
Avrora allows sophisticated program 
profiling to be performed during 
simulation without loss of precision, and 
with fully cycle-accurate results.
Simulator comparison

