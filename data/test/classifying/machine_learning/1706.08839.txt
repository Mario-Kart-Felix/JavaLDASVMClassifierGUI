Noname manuscript No.
(will be inserted by the editor)
Preserving Differential Privacy in Convolutional Deep
Belief Networks
NhatHai Phan · Xintao Wu · Dejing Dou
Received: 18 Nov 2016 / Accepted: 24 Jun 2017
Abstract The remarkable development of deep learning in medicine and health-
care domain presents obvious privacy issues, when deep neural networks are built
on users’ personal and highly sensitive data, e.g., clinical records, user profiles,
biomedical images, etc. However, only a few scientific studies on preserving pri-
vacy in deep learning have been conducted. In this paper, we focus on developing
a private convolutional deep belief network (pCDBN), which essentially is a con-
volutional deep belief network (CDBN) under differential privacy. Our main idea
of enforcing -differential privacy is to leverage the functional mechanism to per-
turb the energy-based objective functions of traditional CDBNs, rather than their
results. One key contribution of this work is that we propose the use of Cheby-
shev expansion to derive the approximate polynomial representation of objective
functions. Our theoretical analysis shows that we can further derive the sensitiv-
ity and error bounds of the approximate polynomial representation. As a result,
preserving differential privacy in CDBNs is feasible. We applied our model in a
health social network, i.e., YesiWell data, and in a handwriting digit dataset, i.e.,
MNIST data, for human behavior prediction, human behavior classification, and
handwriting digit recognition tasks. Theoretical analysis and rigorous experimental
evaluations show that the pCDBN is highly effective. It significantly outperforms
existing solutions.
Keywords Deep Learning · Differential Privacy · Human Behavior Prediction ·
Health Informatics · Image Classification
N. Phan
New Jersey Institute of Technology, USA
Tel.: +1-973-5966367
E-mail: phan@njit.edu
X. Wu
University of Arkansas, USA
Tel.: +1-479-5756519
E-mail: xintaowu@uark.edu
D. Dou
University of Oregon, USA
Tel.: +1-541-3464572
E-mail: dou@cs.uoregon.edu
ar
X
iv
:1
70
6.
08
83
9v
1 
 [
cs
.L
G
] 
 2
5 
Ju
n 
20
17
2 NhatHai Phan et al.
1 Introduction
Today, amid rapid adoption of electronic health records and wearables, the global
health care systems are systematically collecting longitudinal patient health in-
formation, e.g., diagnoses, medication, lab tests, procedures, demography, clinical
notes, etc. The patient health information is generated by one or more encoun-
ters in any healthcare delivery systems [34]. Healthcare data is now measured
in exabytes, and it will reach the zettabyte and the yottabyte range in the near
future [23]. Although appropriate in a variety of situations, many traditional meth-
ods of analysis do not automatically capture complex and hidden features from
large-scale and perhaps unlabeled data [52]. In practice, many health applications
depend on including domain knowledge to construct relevant features, some of
which are further based on supplemental data. This process is not straightforward
and time consuming. That may result in missing opportunities to discover novel
patterns and features.
This is where deep learning, which is one of the state-of-the-art machine learn-
ing techniques, comes in to take advantage of the potential that large-scale health-
care data holds, especially in the age of digital health. Deep neural networks can
discover novel patterns and dependencies in both unlabeled and labeled data by ap-
plying state-of-the-art training algorithms, e.g., greedy-layer wise [31], contrastive
divergent algorithm [30], etc. That makes it easier to extract useful information
when building classifiers and predictors [38].
Deep learning has applications in a number of healthcare areas, e.g., phenotype
extraction and health risk prediction [16], prediction of the development of various
diseases including schizophrenia, a variety of cancers, diabetes, heart failure, etc.
[17, 44, 52, 65, 73], prediction of risk of readmission [73], Alzheimer’s diagnosis
[46, 54], risk prediction for chronic kidney disease progression [56], physical activity
prediction [57, 58, 59, 61], feature learning from fMRI data [62], diagnosis code
assignment [25, 55], reconstruction of brain circuits [29], prediction of the activity
of potential drug molecules [47], the effects of mutations in non-coding DNA on
gene expressions [43, 75], and many more.
The development of deep learning in the domain of medicine and healthcare
presents obvious privacy issues, when deep neural networks are built based on
patients’ personal and highly sensitive data, e.g., clinical records, user profiles,
biomedical images, etc. To convince individuals to allow that their data be included
in deep learning projects, principled and rigorous privacy guarantees must be
provided. However, only a few deep learning techniques have yet been developed
that incorporate privacy protections. In clinical trials, such lack of protection and
efficacy may put patient data at high risk and expose healthcare providers to
legal action based on HIPAA/HITECH law [2, 3]. Motivated by this, we aim to
develop an algorithm to preserve privacy in fundamental deep learning models in
this paper.
Releasing sensitive results of statistical analyses and data mining while protect-
ing privacy has been studied in the past few decades. One state-of-the-art privacy
model is -differential privacy [21]. A differential privacy model ensures that the
adversary cannot infer any information about any particular data record with high
confidence (controlled by a privacy budget ) from the released learning models.
This strong standard for privacy guarantees is still valid, even if the adversary
possesses all the remaining tuples of the sensitive data. The privacy budget  con-
Accepted by Machine Learning, 2017 (Journal Track of ECML-PKDD) 3
trols the amount by which the output distributions induced by two neighboring
databases may differ. We say that two databases are neighboring if they differ in
a single data record, that is, if one data record is present in one database and ab-
sent in the other. It is clear that the smaller values of  enforce a stronger privacy
guarantee. This is because it is more difficult to infer any particular data record by
distinguishing any two neighboring databases from the output distributions. Dif-
ferential privacy research has been studied from the theoretical perspective, e.g.,
[14, 27, 35, 40]. Different types of mechanisms (e.g., the Laplace mechanism [21],
the smooth sensitivity [53], the exponential mechanism [50], and the perturbation
of objective function [14]) have been studied to enforce differential privacy.
Combining differential privacy and deep learning, i.e., the two state-of-the-
art techniques in privacy preserving and machine learning, is timely and crucial.
This is a non-trivial task, and therefore only a few scientific studies have been
conducted. In [67], the authors proposed a distributed training method, which
directly injects noise into gradient descents of parameters, to preserve privacy
in neural networks. The method is attractive for applications of deep learning
on mobile devices. However, it may consume an unnecessarily large portion of the
privacy budget to ensure model accuracy, as the number of training epochs and the
number of shared parameters among multiple parties are often large. To improve
this, based on the composition theorem [20], Abadi et al. [4] proposed a privacy
accountant, which keeps track of privacy spending and enforces applicable privacy
policies. The approach is still dependent on the number of training epochs. With
a small privacy budget , only a small number of epochs can be used to train
the model. In practice, that could potentially affect the model utility, when the
number of training epochs needs to be large to guarantee the model accuracy.
Recently, Phan et al. [61] proposed deep private auto-encoders (dPAs), in which
differential privacy is enforced by perturbing the objective functions of deep auto-
encoders [9]. It is worthy to note that the privacy budget consumed by dPAs is
independent of the number of training epochs. A different method, named Cryp-
toNets, was proposed in [19] towards the application of neural networks to en-
crypted data. A data owner can send their encrypted data to a cloud service that
hosts the network, and get encrypted predictions in return. This method is dif-
ferent from our context, since it does not aim at releasing learning models under
privacy protections.
Existing differential privacy preserving algorithms in deep learning pose major
concerns about their applicability. They are either designed for a specific deep
learning model, i.e., deep auto-encoders [61], or they are affected by the number of
training epochs [4, 67]. Therefore, there is an urgent demand for the development
of a privacy preserving framework, such that: (1) It is totally independent of the
number of training epochs in consuming privacy budget; and (2) It has the poten-
tial to be applied in typical energy-based deep neural networks. Such frameworks
will significantly promote the application of privacy preservation in deep learning.
Motivated by this, we aim at developing a private convolutional deep belief net-
work (pCDBN), which essentially is a convolutional deep belief network (CDBN)
[39] under differential privacy. CDBN is a typical and well-known deep learning
model. It is an energy-based model. Preserving differential privacy in CDBNs is
non-trivial, since CDBNs are more complicated compared with other fundamental
models, such as auto-encoders and Restricted Boltzmann Machines (RBM) [68],
in terms of structural designs and learning algorithms. In fact, there are multiple
4 NhatHai Phan et al.
groups of hidden units in each of which parameters are shared in a CDBN. In-
appropriate analysis might result in consuming too much of a privacy budget in
training phases. The privacy consumption also must be independent of the number
of training epochs to guarantee the potential to work with large datasets.
Our key idea is to apply Chebyshev Expansion [64] to derive polynomial ap-
proximations of non-linear objective functions used in CDBNs, such that the de-
sign of differential privacy-preserving deep learning is feasible. Then, we inject
noise into these polynomial forms, so that the -differential privacy is satisfied in
the training phases of each hidden layer by leveraging functional mechanism [76].
Third, hidden layers now become private hidden layers, which can be stacked on
each other to produce a private convolutional deep belief network (pCDBN).
To demonstrate the effectiveness of our framework, we applied our model for
binomial human behavior prediction and classification tasks in a health social
network. A novel human behavior model based on the pCDBN is proposed to
predict whether an overweight or obese individual will increase physical exercise
in a real health social network. To illustrate the ability to work with large-scale
datasets of our model, we also conducted additional experiments on the well-
known handwriting digit dataset (MNIST data) [37]. We compare our model with
the private stochastic gradient descent algorithm, denoted pSGD, from Albadi et
al. [4], and the deep private auto-encoders (dPAs) [61]. The pSGD and dPAs are
the state-of-the-art algorithms in preserving differential privacy in deep learning.
Theoretical analysis and rigorous experimental evaluations show that our model
is highly effective. It significantly outperforms existing solutions.
The rest of the paper is organized as follows. In Section 2, we introduce prelimi-
naries and related works. We present our private convolutional deep belief network
in Section 3. The experimental evaluation is in Section 4, and we conclude the pa-
per in Section 5.
2 Preliminaries and Related Works
In this section, we briefly revisit the definition of differential privacy, functional
mechanism [76], convolutional deep belief networks [39], and the Chebyshev Ex-
pansion [64]. Let D be a database that contains n tuples t1, t2, . . . , tn and d+1
attributes X1, X2, . . . , Xd, Y . For each tuple ti = (xi1, xi2, . . . , xid, yi), we assume,
without loss of generality,
√∑d
j=1 x
2
ij ≤ 1 where xij ≥ 0, yi follows a binomial
distribution. Our objective is to construct a deep neural network ρ from D that
(i) takes xi = (xi1, xi2, . . . , xid) as input and (ii) outputs a prediction of yi that
is as accurate as possible. ti and xi are used exchangeably to indicate the data
tuple i. The model function ρ contains a model parameter vector W . To evaluate
whether W leads to an accurate model, a cost function fD(W ) is often used to
measure the difference between the original and predicted values of yi. As the re-
leased model parameter W may disclose sensitive information of D, to protect the
privacy, we require that the model training should be performed with an algorithm
that satisfies -differential privacy.
Differential privacy [21] establishes a strong standard for privacy guarantees
for algorithms, e.g., training algorithms of machine learning models, on aggregate
databases. It is defined in the context of neighboring databases. We say that two
Accepted by Machine Learning, 2017 (Journal Track of ECML-PKDD) 5
databases are neighboring if they differ in a single data record. That is, if one
data record is present in one database and absent in the other. The definition of
differential privacy is as follows:
Definition 1 (-Different Privacy [21]). A randomized algorithm A fulfills -
differential privacy, iff for any two databases D and D′ differing at most one
tuple, and for all O ⊆ Range(A), we have:
Pr[A(D) = O] ≤ ePr[A(D′) = O] (1)
where the privacy budget  controls the amount by which the distributions induced
by two neighboring datasets may differ. Smaller values of  enforce a stronger
privacy guarantee of A.
A general method for computing an approximation to any function f (on D)
while preserving -differential privacy is the Laplace mechanism [21], where the
output of f is a vector of real numbers. In particular, the mechanism exploits
the global sensitivity of f over any two neighboring databases (differing at most
one record), which is denoted as GSf (D). Given GSf (D), the Laplace mechanism
ensures -differential privacy by injecting noise η into each value in the output of
f(D) as
pdf(η) =

2GSf (D)
exp(−|η| · 
GSf (D)
) (2)
where η is drawn i.i.d. from Laplace distribution with zero mean and scale
GSf (D)/.
Research in differential privacy has been significantly studied, from both the
theoretical perspective, e.g., [15, 35], and the application perspective, e.g., data
collection [22], data streams [13], stochastic gradient descents [69], recommenda-
tion [49], regression [15], online learning [33], publishing contingency tables [74],
and spectral graph analysis [72]. The mechanisms of achieving differential privacy
mainly include the classic approach of adding Laplacian noise [21], the exponential
mechanism [51], and the functional perturbation approach [15].
2.1 Functional Mechanism Revisited
Functional mechanism [76] is an extension of the Laplace mechanism. It achieves -
differential privacy by perturbing the objective function fD(W ) and then releasing
the model parameter W that minimizes the perturbed objective function fD(W )
instead of the original one. The functional mechanism exploits the polynomial
representation of fD(W ). The model parameter W is a vector that contains d
values W1, . . . ,Wd. Let φ(W ) denote a product of W1, . . . ,Wd, namely, φ(W ) =
W c11 ·W
c2
2 · · ·W
cd
d for some c1, . . . , cd ∈ N. Let Φj(j ∈ N) denote the set of all
products of W1, . . . ,Wd with degree j, i.e., Φj =
{
W c11 ·W
c2
2 · · ·W
cd
d
∣∣∣∑dl=1 cl = j}.
By the Stone-Weierstrass Theorem, any continuous and differentiable f(ti,W )
can always be written as a polynomial of W1, . . . ,Wd, for some J ∈ [0,∞], i.e.,
f(ti,W ) =
∑J
j=0
∑
φ∈Φj λφtiφ(W ) where λφti ∈ R denotes the coefficient of φ(W )
in the polynomial. Note that ti and xi are used exchangeably to indicate the data
tuple i.
6 NhatHai Phan et al.
For instance, the polynomial expression of the loss function in the linear
regression is as follows: f(xi,W ) = (yi − xTi W )2 = y2i −
∑d
j=1(2yixij)Wj +∑
1≤j,l≤d(xijxil)WjWl. We can see that it only involves monomials in Φ0 =
{1}, Φ1 = {W1, . . . ,Wd}, and Φ2 = {WiWj
∣∣i, j ∈ [1, d]}. Each φ(W ) has its own
coefficient, e.g., forWj , its polynomial coefficient λφti = −2yixij . Similarly, fD(W )
can also be expressed as a polynomial of W1, . . . ,Wd.
fD(W ) =
J∑
j=0
∑
φ∈Φj
∑
ti∈D
λφtiφ(W ) (3)
Lemma 1 [76] Let D and D′ be any two neighboring datasets. Let fD(W ) and
fD′(W ) be the objective functions of regression analysis on D and D
′, respectively.
The following inequality holds
∆ =
J∑
j=1
2∑
φ∈Φj
∥∥∥ ∑
ti∈D
λφti −
∑
t′i∈D′
λφt′i
∥∥∥
1
≤ 2 max
t
J∑
j=1
∑
φ∈Φj
‖λφt‖1
where ti, t
′
i or t is an arbitrary tuple.
Fig. 1 Convolutional Restricted Boltz-
mann Machine (CRBM).
To achieve -differential privacy,
fD(W ) is perturbed by injecting Laplace
noise Lap(∆ ) into its polynomial co-
efficients λφ, and then the model pa-
rameter W is derived to minimize the
perturbed function fD(W ), where ∆ =
2 maxt
∑J
j=1
∑
φ∈Φj‖λφt‖1, according to
the Lemma 1.
2.2 Convolutional Deep Belief Networks
The basic Convolutional Restricted
Boltzmann Machine (CRBM) [39] con-
sists of two layers: an input layer V and a hidden layer H (Figure 1). The layer
of hidden units consists of K groups, each of which is an NH × NH array of bi-
nary units. There are N2HK hidden units in total. Each group (in K groups) is
associated with a NW ×NW filter, where NW = NV −NH + 1. The filter weights
are shared across all the hidden units within the group. In addition, each group
of hidden units has a bias bk, and all visible units share a single bias c. Training
a CRBM is to minimize the following energy function E(v, h) as:
E(v, h) = −
K∑
k=1
NH∑
i,j=1
NW∑
r,s=1
hkijW
k
rsvi+r−1,j+s−1−
K∑
k=1
bk
NH∑
i,j=1
hkij−c
NV∑
i,j=1
vij (4)
Gibbs sampling can be applied using the following conditional distributions:
P (hkij = 1|v) = σ
(
(W̃ k ∗ v)ij + bk
)
(5)
P (vij = 1|h) = σ
(
(
∑
k
W k ∗ hk)ij + c
)
(6)
Accepted by Machine Learning, 2017 (Journal Track of ECML-PKDD) 7
where σ is the sigmoid function.
The energy function given the dataset D is as follows:
E(D,W ) = −
∑
t∈D
K∑
k=1
NH∑
i,j=1
NW∑
r,s=1
hk,tij W
k
rsv
t
i+r−1,j+s−1
−
∑
t∈D
K∑
k=1
bk
NH∑
i,j=1
hk,tij − c
∑
t∈D
NV∑
i,j=1
vtij (7)
The max-pooling layer plays the role of a signal filter. By stacking multiple
CRBMs on top of each other, we can construct a convolutional deep belief network
(CDBN) [39]. Regarding the softmax layer, we use the cross-entropy error function
for a binomial prediction task. Let YT be a set of labeled data points used to train
the model, the cross-entropy error function is given by
C(YT , θ) = −
|YT |∑
i=1
(
yi log ŷi + (1− yi) log(1− ŷi)
)
(8)
where ‘T ’ in YT is used to denote “training” data.
We can use the layer-wise unsupervised training algorithm [11] and back-
propagation to train CDBNs.
2.3 Chebyshev Polynomials
In principle, many polynomial approximation techniques, e.g., Taylor Expansion,
Bernoulli polynomial, Euler polynomial, Fourier series, Discrete Fourier trans-
form, Legendre polynomial, Hermite polynomial, Gegenbauer polynomial, La-
guerre polynomial, Jacobi polynomial, and even the state-of-the-art techniques
in the 20th century, including spectral methods and Finite Element methods [26],
can be applied to approximate non-linear energy functions used in CDBNs. How-
ever, figuring out an appropriate way to use each of them is non-trivial. First,
estimating the lower and upper bounds of the approximation error incurred by
applying a particular polynomial in deep neural networks is not straightforward;
it is very challenging. It is significant to have a strong guarantee in terms of ap-
proximation errors incurred by the use of any approximation approach to ensure
model utility in deep neural networks. In addition, the approximation error bounds
must be independent of the number of data instances to guarantee the ability to
be applied in large datasets without consuming excessive privacy budgets.
With these challenging issues, Chebyshev polynomial really stands out. The
most important reason behind the usage of Chebyshev polynomial is that the upper
and lower bounds of the error incurred by approximating activation functions
and energy functions can be estimated and proved, as shown in the next section.
Furthermore, these error bounds do not depend on the number of data instances,
as we will present in Section 3.4. This is a substantial result when working with
complex models, such as deep neural networks on large-scale datasets. In addition,
Chebyshev polynomials are well-known, efficient, and widely used in many real-
world applications [48]. Therefore, we propose to use Chebyshev polynomials in
our work to preserve differential privacy in deep convolution belief networks.
8 NhatHai Phan et al.
The four kinds of Chebyshev polynomials can be generated from the two-term
recursion formula:
Tk+1(x) = 2xTk(x)− Tk−1(x), T0(x) = 1 (9)
with different choices of initial values T1(x) = x, 2x, 2x− 1, 2x+ 1.
According to the well-known result [64], if a function f(x) is the Riemann
integrable on interval [−1, 1], f(x) can be presented in a Chebyshev polynomial
approximation as follows:
f(x) =
∞∑
k=0
AkTk(x) = A
′X
(
T (x)
)
(10)
where Ak =
2
π
∫ 1
−1
f(x)Tk(x)√
1−x2 dx, k ∈ N, A
′ = [12A0, . . . , Ak, . . .], Tk(x) is Chebyshev
polynomial of degree k, X
(
T (x)
)
= [T0(x) . . . Tk(x) . . .].
The closed form expression for Chebyshev polynomials of any order is:
Ti(x) =
[i/2]∑
j=0
(−1)j
(
i
2j
)
xi−2j(1− x2)j (11)
where [i/2] is the integer part of i2 .
3 Private Convolutional Deep Belief Network
In this section, we formally present our framework (Alg. 1) to develop a convolu-
tional deep belief network under -differential privacy. Intuitively, the algorithm
used to develop dPAs can be applied to CDBNs. However, the main issue is that
their approximation technique has been especially designed for cross-entropy error-
based objective functions [9]. There are many challenging issues in adapting their
technique in CDBNs. The cross entropy error-based objective function is very dif-
ferent from the energy-based objective function (Eq. 7). As such: (1) It is difficult
to derive its global sensitivity used in the functional mechanism, and (2) It is
difficult to identify the approximation error bounds in CDBNs. To achieve private
convolutional deep belief networks (pCDBNs), we figure out a new approach of
using the Chebyshev Expansion [64] to derive polynomial approximations of non-
linear energy-based objective functions (Eq. 7), such that differential privacy can
be preserved by leveraging the functional mechanism.
Our framework to construct the pCDBN includes four steps (Alg. 1).
– First, we derive a polynomial approximation of energy-based function E(D,W )
(Eq. 7), using the Chebyshev Expansion. The polynomial approximation is
denoted as Ê(D,W ).
– Second, the functional mechanism is used to perturb the approximation func-
tion Ê(D,W ); the perturbed function is denoted as E(D,W ). We introduce a
new result of sensitivity computation for CDBNs. Next, we train the model to
obtain the optimal perturbed parameters W by using gradient descent. That
results in private hidden layers, which are used to produce max-pooling layers.
Note that we do not need to enforce differential privacy in max-pooling layers.
This is because max-pooling layers play roles as signal filters only.
Accepted by Machine Learning, 2017 (Journal Track of ECML-PKDD) 9
Algorithm 1: Private Convolutional Deep Belief Network
1: Derive a polynomial approximation of the energy function E(D,W ) (Eq. 7), denoted
as Ê(D,W )
2: The function Ê(D,W ) is perturbed by using functional mechanism (FM) [76], the
perturbed function is denoted as E(D,W )
3: Stack the private hidden and pooling layers
4: By using the technique in [61], we derive and perturb the polynomial approximation
of the softmax layer Ĉ(θ) (Eq. 17), the perturbed function is denoted as C(θ), Return
θ = arg minθ C(θ)
– Third, we stack multiple pairs of a private hidden layer and a max-pooling
layer (H,P ) on top of each other to construct the private convolutional deep
belief network (pCDBN).
– Finally, we apply the technique presented in [61] to enforce differential privacy
in the softmax layer for prediction and classification tasks.
Let us first derive the polynomial approximation form of E(D,W ) by applying
Chebyshev Expansion, as follows.
3.1 Polynomial Approximation of the Energy Function
There are two challenges in the energy function E(D,W ) that prevent us from
applying it for private data reconstruction analysis: (1) Gibbs sampling is used
to estimate the value of every hkij ; and (2) The probability of every h
k
ij equal to
1 is a sigmoid function which is not a polynomial function with parameters W k.
Therefore, it is difficult to derive the sensitivity and error bounds of the approx-
imation polynomial representation of the energy function E(D,W ). Perturbing
Gibbs sampling is challenging. Meanwhile, injecting noise in the results of Gibbs
sampling will significantly affect the properties of hidden variables, i.e., values of
hidden variables might be out of their original bounds, i.e., [0, 1].
To address this, we propose to preserve differential privacy in the model before
applying Gibbs sampling. The generality is still guaranteed since Gibbs sampling is
applied for all hidden units. In addition, we need to derive an effective polynomial
approximation of the energy function, so that differential privacy preserving is
feasible. First, we propose to consider the probability P (hkij = 1|v) = σ
(
(W k∗v)ij+
bk
)
instead of hkij in the energy function E(D,W ). The main goal of minimizing the
energy function, i.e., “the better the reconstruction of v is, the better the parameters
W are,” remains the same. Therefore, the generality of our proposed approach is
still guaranteed. The energy function can be rewritten as follows:
Ẽ(D,W ) =
∑
t∈D
[
−
K∑
k=1
NH∑
i,j=1
NW∑
r,s=1
σ
(
(W k ∗ vt)ij + bk
)
×W krsvti+r−1,j+s−1
−
K∑
k=1
bk
NH∑
i,j=1
σ
(
(W k ∗ vt)ij + bk
)
− c
NV∑
i,j=1
vtij
]
(12)
As the sigmoid function σ(·) in neural networks satisfies the Reimann integrable
condition [71], it can be approximated by the Chebyshev series. We propose to
10 NhatHai Phan et al.
derive a Chebyshev polynomial approximation function for the σ
(
(W k ∗vt)ij+bk
)
that results in a polynomial approximation function for our energy function Ẽ(·).
To make our sigmoid function satisfy the Riemann integrable condition on [−1, 1],
we rewrite it as: σ
( (Wk∗vt)ij+bk
Zkij
)
where Zkij is a local response normalization (LRN)
term which can be computed as follows: Zkij = max
(∣∣(W k ∗ vt)ij + bk∣∣, [q +
α
∑min(K−1,k+l/2)
m=max(0,k−l/2)
(
(Wm ∗ vt)ij + bm
)2]β)
, where the constants q, l, α, and β are
hyper-parameters, K is the total number of feature maps. As in [36], we used
q = 2, l = 5, α = 10−4, and β = 0.75 in our experiments.
From Eq. 10, the Chebyshev polynomial approximation of our sigmoid function
is as follows:
σ
( (W k ∗ vt)ij + bk
Zkij
)
=
∞∑
l=0
AlTl(
(W k ∗ vt)ij + bk
Zkij
) (13)
where Al and Tl can be computed using Eqs. 10 and 11.
Now, there is still a challenge that prevents us from applying the functional
mechanism to preserve differential privacy in applying Eq. 13: The equation in-
volves an infinite summation. To address this problem, we remove all orders greater
than L. Based on the Chebyshev series, the polynomial approximation of the en-
ergy function Ẽ(·) can be written as:
Ê(D,W ) =
∑
t∈D
[
−
K∑
k=1
NH∑
i,j=1
NW∑
r,s=1
( L∑
l=0
AlTl(
(W k ∗ vt)ij + bk
Zkij
)
)
×W krsvti+r−1,j+s−1
−
K∑
k=1
bk
NH∑
i,j=1
L∑
l=0
AlTl(
(W k ∗ vt)ij + bk
Zkij
)− c
NV∑
i,j=1
vtij
]
(14)
Ê(·) is a polynomial approximation function of the original energy function
E(·) in Eq. 7. Furthermore, the term
∑L
l=0AlTl(
(Wk∗vt)ij+bk
Zkij
) can be rewritten
as:
∑L
l=0 αl(
(Wk∗vt)ij+bk
Zkij
)l, where α are the Chebyshev polynomial coefficients.
For instance, given L = 7, we have
∑L=7
l=0 AlTl(X) =
1
25 (−5X
7 + 21X5 − 35X3 +
35X + 16), where X =
(Wk∗vt)ij+bk
Zkij
.
3.2 Perturbation of Objective Functions
We employ the functional mechanism [76] to perturb the objective function Ê(·) by
injecting Laplace noise into its polynomial coefficients. The hidden layer contains
K groups of hidden units. Each group is trained with a local region of input neu-
rons, which will not be merged with each other in the learning process. Therefore,
it is not necessary to aggregate sensitivities of the training algorithm in K groups
to the sensitivity of the function Ê(·). Instead, the sensitivity of the function Ê(·)
can be considered the maximal sensitivity given any single group. As a result, the
sensitivity of the function Ê(·) can be computed in the following lemma.
Accepted by Machine Learning, 2017 (Journal Track of ECML-PKDD) 11
Lemma 2 Let D and D′ be any two neighboring datasets. Let Ê(D,W ) and
Ê(D′,W ) be the objective functions of regression analysis on D and D′, respec-
tively. α are Chebyshev polynomial coefficients. The following inequality holds:
∆ ≤ 2 max
t,k
NH∑
i,j=1
L∑
l=0
|αl|
[
(
∑NW
r,s=1 v
t,k
ij,rs + 1
Zkij
)l+
NW∑
r,s=1
(
∑NW
r′,s′=1 v
t,k
ij,r′s′ + 1
Zkij
)l|vt,kij,rs|
]
+
NV∑
i,j=1
|vtij | (15)
Proof By replacing W trs (i.e., ∀r, s), bk, and c in Ê(D,W ) with 1, we have the
function with only polynomial coefficients of Ê(D,W ), denoted λφD. We have
that
λφD =
∑
t∈D
λφt
where
λφt = −
K∑
k=1
NH∑
i,j=1
NW∑
r,s=1
( L∑
l=0
αl(
∑NW
r′,s′=1 v
t
ij,r′s′ + 1
Zkij
)l
)
vtij,rs
−
K∑
k=1
bk
NH∑
i,j=1
L∑
l=0
αl(
∑NW
r,s=1 v
t
ij,rs + 1
Zkij
)l −
NV∑
i,j=1
vtij
The Ê(·)’s sensitivity can be computed as follows:
∆ =
∥∥∥ ∑
ti∈D
λφti −
∑
t′i∈D′
λφt′i
∥∥∥
1
≤ 2 max
t
‖λφt‖1
≤ 2 max
t
K∑
k=1
NH∑
i,j=1
L∑
l=0
|αl|
[
(
∑NW
r,s=1 v
t,k
ij,rs + 1
Zkij
)l+
NW∑
r,s=1
(
∑NW
r′,s′=1 v
t,k
ij,r′s′ + 1
Zkij
)l|vt,kij,rs|
]
+
NV∑
i,j=1
|vtij | (16)
The current sensitivity is an aggregation of sensitivities from all K groups of
hidden units. However, each of them is trained with a local region of input neurons,
which will not be merged with the others in the learning process. Therefore, the
sensitivity of the function Ê(·) can be considered the maximal sensitivity given any
single group of hidden units in a hidden layer. From Eq. 16, the final sensitivity
of the function Ê(·) is as follows:
∆ ≤ 2 max
t,k
NH∑
i,j=1
L∑
l=0
|αl|
[
(
∑NW
r,s=1 v
t,k
ij,rs + 1
Zkij
)l+
NW∑
r,s=1
(
∑NW
r′,s′=1 v
t,k
ij,r′s′ + 1
Zkij
)l|vt,kij,rs|
]
+
NV∑
i,j=1
|vtij |
Consequently, the Eq. 15 holds.
12 NhatHai Phan et al.
We use gradient descent to train the perturbed model E(·). That results in
private hidden layers. To construct a private convolutional deep belief network
(pCDBN), we stack multiple private hidden layers and max-pooling layers on top
of each other. The pooling layers only play the roles of signal filters of the private
hidden layers. Therefore, there is no need to enforce privacy in max-pooling layers.
3.3 Perturbation of Softmax Layer
On top of the pCDBN, we add an output layer, which includes a single binomial
variable to predict Y . The output variable ŷ is fully linked to the hidden variables
of the highest hidden (pooling) layer, denoted p(o), by weighted connections W(o),
where o is the number of hidden (pooling) layers in the CDBNs. We use the logistic
function as an activation function of ŷ, i.e., ŷ = σ(W(o)p(o)). Cross-entropy error,
which is a typical objective function in deep learning [9], is used as a loss function.
The cross-entropy error function has been widely used and applied in real-world
applications [9]. Therefore, it is critical to preserve differential privacy under the
use of the cross-entropy error function. However, other loss functions, e.g., square
errors, can be applied in the softmax layer as well. Let YT be a set of labeled data
points used to train the model, the cross-entropy error function is given by:
C(YT , θ) = −
|YT |∑
i=1
(
yi log(1 + e
−W(o)pi(o)) + (1− yi) log(1 + eW(o)pi(o))
)
(17)
By applying the technique in [61], based on Taylor Expansion [5], we can derive
the polynomial approximation of the cross-entropy error function as follows:
Ĉ(YT , θ) =
|YT |∑
i=1
2∑
l=1
2∑
R=0
f
(R)
l (0)
R!
(
W(o)pi(o)
)R
(18)
where
g1(ti,W(o)) = W(o)pi(o) , g2(ti,W(o)) = W(o)pi(o)
f1(z) = yi log(1 + e
−z) , f2(z) = (1− yi) log(1 + ez)
To preserve the differential privacy, the softmax layer is perturbed by using
the functional mechanism [61, 76]. The sensitivity of the softmax layer, ∆C , is
estimated as ∆C = |p(o)|+ 14 |p(o)|
2 [61].
3.4 Approximation Error Bounds
The following lemma shows how much error our approximation approaches incur.
The average error of the approximations is always bounded, as presented in the
following lemma:
Lemma 3 Approximation Error bounds. Let SL(E) = ‖E(D,W ) − Ê(D,W )‖,
UL(E) = ‖E(D,W )−E∗(D,W )‖ where E(D,W ) is the target function, Ê(D,W )
is the approximation function learned by our model, and E∗(D,W ) is the best
Accepted by Machine Learning, 2017 (Journal Track of ECML-PKDD) 13
uniform approximation. The lower and upper bounds of the sum square error are
as follows:(
4 +
4
π2
logL
)
N2HK × UL(E) > SL(E) ≥ UL(E) ≥
π
4
N2HK|AL+1| (19)
Proof As the well-known results in [64], given a target sigmoid function σ, a poly-
nomial approximation function σ̂ learned by the model, and the best uniform
approximation of σ, SL(σ) = ‖σ − σ̂‖, UL(σ) = ‖σ − σ∗‖, we have that:
SL(σ) ≥ UL(σ) ≥
π
4
|AL+1| (20)
Since there are N2HK hidden units in our pCDBN model, we have SL(E) ≥
UL(E) ≥ π4N
2
HK|AL+1|. Similarly, in [64], we also have
UL(σ) ≤ SL(σ) <
(
4 +
4
π2
logL
)
UL(σ) (21)
Since there are N2HK hidden units in our pCDBN model, we have(
4 +
4
π2
logL
)
N2HK × UL(E) > SL(E) ≥ UL(E) (22)
Therefore, the Eq. 19 holds.
The approximation error depends on the structure of the energy function
E(D,W ), i.e., the number of hidden neurons N2HK and |AL+1|, and the number
of attributes of the dataset. Lemma 3 can be used to determine when it should
stop learning the approximation model. For each group of N2H hidden units, the
upper bound of the sum square error is only π4N
2
H |AL+1|, i.e., |AL+1| is tiny when
L is large enough.
Importantly, Lemmas 2 and 3 show that the sensitivity ∆ and the approxi-
mation error bounds of the energy-based function are entirely independent of the
number of data instances. This sufficiently guarantees that our differential pri-
vacy preserving framework can be applied in large datasets without consuming
excessive privacy budgets. This is a substantial result when working with complex
models, such as deep neural networks on large-scale datasets. It is worth noting
that non-linear activation functions, which are continuously differentiable (Stone-
Weierstrass Theorem [66]) and satisfy the Riemann-integrable condition, can be
approximated by using Chebyshev Expansion. Therefore, our framework can be
applied given such activation functions as, e.g., tanh, arctan, sigmoid, softsign,
sinusoid, sinc, Gaussian, etc. [1]. In the experiment section, we will show that our
approach leads to accurate results.
Note that the proofs of Lemmas 2 and 3 do not depend on the assumption of
the data features being non-negative, and that the target follows by a binomial
distribution. The proofs are generally applicable for inputs and the target, which
are not restricted by any constraint. As shown in the next section, our approach
efficiently works with a multi-class classification task on the MNIST dataset [37].
The cross-entropy error function is applied in the softmax layer.
14 NhatHai Phan et al.
4 Experiments
To validate our approach, we have conducted an extensive experiment on well-
known and large-scale datasets, including a health social network, YesiWell data
[61], and a handwriting digit dataset, MNIST [37]. Our task of validation focuses
on four key issues: (1) The effectiveness and robustness of our pCDBN model;
(2) The effects of our model and hyper-parameter selections, including the use
of Chebyshev polynomial, the impact of the polynomial degree L, and the effect
of probabilities P (hkij = 1|v) in approximating the energy function; (3) The abil-
ity to work on large-scale datasets of our model; and (4) The benefits of being
independent of the number of training epochs in consuming privacy budget.
We carry out the validation through three approaches. One is by conducting
the human behavior prediction with various settings of data cardinality, privacy
budget , noisy vs. noiseless models, and original vs. approximated models. By this
we rigorously examine the effectiveness of our model compared with the state-of-
the-art algorithms, i.e., [4, 61]. The second approach is to discover gold standards
in our model configuration by examining various settings of hyper-parameters.
The third approach is to access the benefits of being independent of the number
of training epochs in terms of consuming privacy budget of our pCDBN model. In
fact, we present the prediction accuracies of our pCDBN and existing algorithms
as a function of the number of training epochs.
4.1 Human Behavior Modeling
In this experiment, we have developed a private convolutional deep belief network
(pCDBN) for human behavior prediction and classification tasks in the YesiWell
health social network [61].
Health Social Network Data. To be able to compare our model with the
state-of-the-art deep private auto-encoders for human behavior prediction (dPAH),
we use the same dataset used in Phan et al. [61]. Data were collected from Oct
2010 to Aug 2011 as a collaboration between PeaceHealth Laboratories, SK Tele-
com Americas, and the University of Oregon to record daily physical activities,
social activities (text messages, competitions, etc.), biomarkers, and biometric
measures (cholesterol, BMI, etc.) for a group of 254 overweight and obese indi-
viduals. Physical activities, including information about the number of walking
and running steps, were reported via a mobile device carried by each user. All
users enrolled in an online social network, allowing them to friend and commu-
nicate with each other. Users’ biomarkers and biometric measures were recorded
via daily/weekly/monthly medical tests performed at home individually or at our
laboratories.
In total, we consider three groups of attributes:
– Behaviors: #competitions joined, #exercising days, #goals set, #goals
achieved,
∑
(distances), avg(speeds);
– #Inbox Messages: Encouragement, Fitness, Followup, Competition, Games,
Personal, Study protocol, Progress report, Technique, Social network, Mee-
tups, Goal, Wellness meter, Feedback, Heckling, Explanation, Invitation, No-
tice, Technical fitness, Physical;
Accepted by Machine Learning, 2017 (Journal Track of ECML-PKDD) 15
– Biomarkers and Biometric Measures: Wellness Score, BMI, BMI slope, Wellness
Score slope.
pCDBN for Human Behavior Modeling. Our starting observation is
that a human behavior is the outcome of behavior determinants such as self-
motivation, social influences, and environmental events. This observation is rooted
in human agency in social cognitive theory [8]. In our model, these human be-
havior determinants are combined together to model human behaviors. Given
a tuple ti, xi1, . . . , xid are the personal attributes and yi is a binomial param-
eter that indicates whether a user increases or decreases his/her exercises. To
describe the pCDBN model, we adjust the notations xi1 and yi a little bit to
denote the temporal dimension, and our social network information. Specifically,
xtu = {xt1u, . . . , xtdu} is used to denote the d attributes of user u at time point t.
Meanwhile, ytu is used to denote the status of the user u at time point t. y
t
u = 1
denotes u increases exercises at time t; otherwise ytu = 0.
In fact, the current behavior at time-stamp t of a user u is conditional on
his/her behavior in the past N time-stamps, i.e., t − N, . . . , t − 1. To model this
effect (i.e., also considered as a form of self-motivation in social cognitive theory
[8]), we first aggregate his personal attributes in the last N timestamps into a
d ×N matrix, which will be considered the visible input V . Then, to model self-
motivation and social influence, we add an aggregation of his/her attributes and
the effects from his/her friends at the current timestamp t into the dynamic biases,
i.e., b̂tk and ĉ
t, of the hidden and visible units (Eqs. 23 - 26). The hidden and visible
variables at time t are
hki,j,t = σ
(
(W̃ k ∗ vt)ij + b̂tk
)
(23)
vi,j,t = σ
(
(
∑
k
W k ∗ hk)tij + ĉt
)
(24)
where
b̂tk = bk +
d∑
e=1
Bkex
t
eu +
ηk
|Fu|
∑
v∈Fu
ψt(v, u) (25)
ĉt = c+
d∑
e=1
Aex
t
eu +
η
|Fu|
∑
v∈Fu
ψt(v, u) (26)
where b̂tk and ĉ
t are dynamic biases, Bke is a matrix of weights which connects x
t
u
with hidden variables in the group k. ψt(v, u) is the probability that v influences
u on physical activity at time t. ψt(v, u) is derived from the TaCPP model [60].
Fu is a set of friends of u in the social network. η and ηk are parameters which
present the ability to observe the explicit social influences from neighboring users.
The model includes two hidden layers. We trained 10 first layer bases, each
4 × 12 variables v, and 10 second layer bases, each 2 × 6. The pooling ratio was
2 for both layers. In our work, contrastive divergent algorithm [30] was used to
optimize the energy function, and back-propagation was used to optimize the
cross-entropy error function in the softmax layer. The implementations of our
models using Tensorflow1 and Python were made publicly available on GitHub2.
1 https://www.tensorflow.org
2 https://github.com/haiphanNJIT/PrivateDeepLearning/releases/tag/V1.0
16 NhatHai Phan et al.
The results and algorithms can be reproduced on either a single workstation or a
Hadoop cluster. To examine the effectiveness of our pCDBN, we established two
experiments, i.e., prediction and classification, as follows.
4.1.1 Human Behavior Prediction
Experimental Setting. Our pCDBN model is used to predict the statuses of all
the users in the next time point t+1 givenM past time points t−M+1,..., t. The
model has been trained on daily and weekly datasets. Both datasets contain 300
time points, 30 attributes, 254 users, 2,766 messages, 1,383 friend connections,
11,458 competitions, etc. For each dataset, we have, in total, 254 users ×300
timestamps = 76, 200 data points.
The number of previous time intervals N is set to 4. N is used as a time window
to generate training samples. For instance, given 10 days of data (M = 10), a time
window of 4 days N = 4, and d data features, e.g., BMI, #steps, etc., a single
input V will be a d×N(= d× 4) matrix. A single input V is considered as a data
sample to model human behavior in our prediction model. If we move the window
N on 10 days of data, i.e., M, we will have M−N + 1 training samples for each
individual, i.e., 10− 4 + 1 = 7 in this example. So, we have, in total, 254(M - N
+ 1) = 254× 7 = 1, 778 training samples for every 10 days of data M to predict
whether an individual will increase physical activity in the next day t+ 1.
The Chebyshev polynomial approximation degree L and learning rates are
set to 7 and 10−3. To avoid over-fitting, we apply the L1-regularization and the
dropout technique [70], i.e., the dropout probability is set to 0.5. Regarding K-fold
cross-validation or bootstrapping, it is either unnecessary or impractical to apply
them in deep learning, and particularly in our study [10, 63]. This is because: (1)
It is too expensive and time consuming to train K deep neural networks, each
of which usually has a large number of parameters, e.g., hundreds of thousands
of parameters [10]; and (2) Bootstrapping is only used to train neural networks
when class labels may be missing, objects in the image may not be localized, and
in general, the labeling may be subjective, noisy, and incomplete [63]. This is out
of the scope of our focus. Our models were trained on a graphic card NVIDIA
GTX TITAN X, 12 GB RAM with 3072 CUDA cores.
Competitive Models. We compare our pCDBN with two types of state-of-
the-art models, as follows:
a) Deep learning models for human behavior prediction, including: (1)
The original convolutional deep neural network (CDBN) for human behavior
prediction without enforcing differential privacy; (2) The truncated version of
the CDBNs, in which the energy function is approximated without injecting
noise to preserve differential privacy, denoted TCDBN; and (3) The condi-
tional Restricted Boltzmann Machine, denoted SctRBM [45]. None of these
models enforces -differential privacy.
b) Deep Private Auto-Encoder (dPAH) [61], which is the state-of-the-art
deep learning model under differential privacy for human behavior prediction.
The dPAH model outperforms general methods for regression analysis under
-differential privacy, i.e., functional mechanism [76], DPME [42], and filter-
priority [18]. Therefore, we only compare our model with the dPAH.
Accepted by Machine Learning, 2017 (Journal Track of ECML-PKDD) 17
(a) Weekly Dataset (b) Daily Dataset
Fig. 2 Prediction accuracy vs. dataset cardinality.
(a) Weekly Dataset (b) Daily Dataset
Fig. 3 Prediction accuracy vs. privacy budget .
• Accuracy vs. Dataset Cardinality. Fig. 2 shows the prediction accuracy
of each algorithm as a function of the dataset cardinality. We vary the size of M,
which also can be considered as the sampling rate of the dataset.  is 1.0 in this
experiment. In both datasets, there is a gap between the prediction accuracy of
pCDBN and the original convolutional deep belief network (CDBN). However, the
gap dramatically gets smaller with the increase of the dataset cardinality (M). In
addition, our pCDBN outperforms the state-of-the-art dPAH in most of the cases,
and the results are statistically significant (p = 5.3828e-05, performed by paired
t-test). It also is significantly better than the SctRBM when the sampling rate
goes just a bit higher, i.e., > 0.2 or > 0.3 (p = 8.8350e-04, performed by paired
t-test). Either 0.2 or 0.3 is a small sampling rate; thus, this is a remarkable result.
• Accuracy vs. Privacy Budget. Fig. 3 illustrates the prediction accuracy
of each model as a function of the privacy budget . M is set to 12 ≈ 0.32%.
The prediction accuracies of privacy non-enforcing models remain unchanged for
all . Since a smaller  requires a larger amount of noise to be injected, pri-
vacy enforcing models incur higher inaccurate prediction results when  decreases.
pCDBN outperforms dPAH in all cases, and the results are statistically significant
(p = 2.7266e-12, performed by paired t-test). In addition, it is relatively robust
against the change of . In fact, the pCDBN model is competitive even with privacy
non-enforcing models, i.e., SctRBM.
• Probabilities P (hkij = 1|v) and Gibbs Sampling. To approximate the
energy function E(D,W ), we propose to use the probabilities P (hkij = 1|v) in-
stead of the values of hkij , which are estimated by applying Gibbs Sampling on the
18 NhatHai Phan et al.
P (hkij = 1|v). To illustrate the effect of our approach, we conducted both theo-
retical analysis and experimental evaluations as follows. Let’s use hkij to estimate
the sensitivity ∆ of the energy function E(D,W ) (Eq. 7) by following Lemma 1
as follows:
∆ = 2 max
t,k
NH∑
i,j=1
NW∑
r,s=1
∣∣hk,tij vti+r−1,j+s−1∣∣ + NH∑
i,j=1
∣∣hk,tij ∣∣ + NV∑
i,j=1
∣∣vtij∣∣ (27)
There are several issues in the Eq. 27 that prevent us from applying it. First, hkij
cannot be considered an observed variable, since its value can only be estimated
by applying Gibbs sampling from observed variables v and parameters W . In
other words, the value of ∆ is significantly dependent on Gibbs sampling given
P (hkij = 1|v). Therefore, ∆ can be uncertain in every sampling step. That may lead
to a violation of the guarantee of privacy protection under a differential privacy
mechanism. To address this issue, one may set all the hidden variables hkij to 1.
That leads to the use of a maximal value of the sensitivity ∆ as follows:
∆ = 2 max
t,k
NH∑
i,j=1
NW∑
r,s=1
∣∣vti+r−1,j+s−1∣∣+N2H + NV∑
i,j=1
∣∣vtij∣∣ (28)
The maximal value of ∆ (Eq. 28) is huge and is not an optimal bound. In
other words, the model efficiency will be affected, since too much noise will be
unnecessarily injected into the model.
To tackle this challenge, our solution is to consider the probabilities P (hkij =
1|v) instead of hkij . As a result, the sensitivity ∆ in Lemma 2 is only dependent on
observed variables v instead of Gibbs samplings. That leads to a smaller amount of
noise injected into the model. To demonstrate the effect of this approach, our model
is compared with its truncated version, in which the energy function is approxi-
mated without injecting noise to preserve differential privacy, denoted TCDBN.
Experimental results illustrated in Figs. 2 and 3 show that the impact of our ap-
proach on the original model CDBN is marginal in terms of prediction accuracy.
On average, the prediction accuracy is only less than 1% lower compared with the
original model. This is a practical result.
4.1.2 Human Behavior Classification
In this experiment, we aim to examine: (1) The robustness of our approach when
it is trained with a large number of epochs at different noise levels; and (2) The
effectiveness of different approximation approaches, including Chebyshev, Taylor,
and Piecewise approximations. Our experiment setting is as follows:
We consider every pair (u, t) is a data point. Given t is a week, we have, in total,
9,652 data points (254 users × 38 weeks). We randomly select 10% data points
as a testing set, and the remaining data points are used as a training set. At
each training step, the model is trained with 111 randomly selected data points,
i.e., batch size = 111. To avoid the imbalance in the data, each training batch
consists of a balanced number of data samples from different data classes. With this
technique, data points in the under-represented class can be incidentally sampled
more than the others [12]. The model is used to classify the statuses of all the users
Accepted by Machine Learning, 2017 (Journal Track of ECML-PKDD) 19
(a)  = 0.1 (Large noise) (b)  = 2 (Medium noise)
(c)  = 8 (Small noise)
Fig. 4 Results of classification accuracy for different noise levels, different approximation
approaches, and the number of training epochs.
given their features. In this experiment, we compare our model with state-of-the-
art polynomial approximation approaches in digital implementations, including
truncated Taylor Expansion: σ(x) = tanhx ≈ x− x
3
3 +
2x5
15 [41, 71] (pCDBN TE),
and linear piecewise approximation: σ(x) ≈ c1x + c2 [6] (pCDBN PW). Other
baseline models, i.e., dPAH and SctRBM, cannot be directly applied to this task;
so, we do not include them in this experiment.
• Fig. 4 shows classification accuracies for different levels of privacy budget .
Each plot illustrates the evolution of the testing accuracy of each algorithm and
its power fit curve as a function of the number of epochs. After 600 epochs, our
pCDBN can achieve 88% with  = 0.1, 92% with  = 2, and 94% with  = 8.
In addition, our model outperforms baseline approaches, i.e., pCDBN TE and
pCDBN PW, and the results are statistically significant (p = 4.4293e-07, per-
formed by paired t-test). One of the important observations we acquire from this
result is that: The Chebyshev polynomial approximation is more effective than
the competitive approaches in preserving differential privacy in convolutional deep
belief networks. One of the reasons is that Chebyshev polynomial approximation
incurs fewer errors than the other two approaches [26, 71]. Similar to Layer-wise
Relevance Propagation [7], the approximation errors will propagate across neural
layers. Therefore, the smaller the error, the more accurate the models will be.
Note that our observations (i.e., data points) in the YesiWell data are not
strictly independent. Therefore, the simple use of paired t-test may not give rigor-
ous conclusions. However, the very small p-values under the paired t-test can still
indicate the significant improvement of our approach over baselines.
20 NhatHai Phan et al.
(a) accuracy vs.  (b)  = 0.5 (large noise)
Fig. 5 Accuracy for different noise levels on the MNIST dataset.
Fig. 6 The impact of different values of L on the MNIST dataset.
4.2 Handwriting Digit Recognition
To further demonstrate the ability to work on large-scale datasets, we conducted
additional experiments on the well-known MNIST dataset [37]. The MNIST
database of handwritten digits consists of 60,000 training examples, and a test
set of 10,000 examples [37]. Each example is a 28 × 28 size gray-level image. The
MNIST dataset is completely balanced, with 6,000 images for each category, with
10 categories in total.
We compare our model with the private stochastic gradient descent algorithm,
denoted pSGD, from Albadi et al. [4]. The pSGD is the state-of-the-art algorithm
in preserving differential privacy in deep learning. pSGD is an advanced version of
[67]; therefore, there is no need to include the work proposed by Shokri et al. [67] in
our experiments. The two approaches, i.e., our proposed algorithm and the pSGD,
are built on the same structure of a convolutional deep belief network. As in prior
work [4], two convolution layers, one with 32 features and one with 64 features,
and each hidden neuron which connects with a 5x5 unit patch are applied. On top
of the convolution layers, there are a fully-connected layer with 1,024 units, and a
softmax of 10 classes (corresponding to the 10 digits) with cross-entropy loss.
• Fig. 5a illustrates the prediction accuracies of each algorithm as a function of
the privacy budget . We can see that our model pCDBN outperforms the pSGD
in terms of prediction accuracies with small values of the privacy budget , i.e.,
 ≤ 1.0. This is a substantial result, since smaller values of  enforce a stronger
Accepted by Machine Learning, 2017 (Journal Track of ECML-PKDD) 21
privacy guarantee of the model. With higher values of  (> 1.0), i.e., small injected
noise, the two models converge to similar prediction accuracies.
• Fig. 5b demonstrates the benefit of being independent of the number of
training epochs in consuming the privacy budget of our mechanism. In this ex-
periment,  is set to 0.5, i.e., large injected noise. The pSGD achieves higher
prediction accuracies after using a small number of training epochs, i.e., 88.75%
after 18 epochs, compared with the pCDBN. More epochs cannot be used to train
the pSGD, since it will violate the privacy protection guarantee. Meanwhile, our
model, the pCDBN, can be trained with an unlimited number of epochs. After a
certain number of training epochs, i.e., 162 epochs, the pCDBN outperforms the
pSGD in terms of prediction accuracy, with 91.71% compared with 88.75%.
Our experimental results clearly show the ability to work with large-scale
datasets using our mechanism. In addition, it is significant to be independent
of the number of training epochs in consuming privacy budget . Our mechanism
is the first of its kind offering this distinctive ability.
• The Impact of Polynomial Degree L. Fig. 6 shows the prediction ac-
curacies of our model by using different values of L on the MNIST dataset [37].
After a certain number of training epochs, it is clear that the impact of L is not
significant when L is larger than or equal to 3. In fact, the models with L ≥ 3
converge to similar prediction accuracies after 162 training epochs. The difference
is notable with small numbers of training epochs. With L larger than 7, the predic-
tion accuracies are very much the same. Therefore we did not show them in Fig. 6.
Our observation can be used as a gold standard in selecting L when approximating
energy functions based on Chebyshev polynomials.
• Computational Performance. Given the MNIST dataset, it takes an aver-
age of 761 seconds to train our model, after 162 epochs, by using a GPU (NVIDIA
GTX TITAN X, 12 GB RAM with 3,072 CUDA cores). Meanwhile, training the
pSGD is faster than our model, since only a small number of training epochs is
needed to train the pSGD. On average, training the pSGD takes 86 seconds, after
18 training epochs. For the YesiWell dataset, training our pCDBN model takes an
average of 2,910 seconds, after 600 epochs, compared with 2,141 seconds of the
dPAH model.
5 Conclusions and Discussions
In this paper, we propose a novel framework for developing convolutional deep
belief networks under differential privacy. Our approach conducts both sensitivity
analysis and noise insertion on the energy-based objective functions. Distinctive
characteristics offered by our model include: (1) It is totally independent of the
number of training epochs in consuming privacy budget; (2) It has the potential to
be applied in typical energy-based deep neural networks; (3) Non-linear activation
functions, which are continuously differentiable (Stone-Weierstrass Theorem [66])
and satisfy the Riemann-integrable condition, e.g., tanh, arctan, sigmoid, softsign,
sinusoid, sinc, Gaussian, etc. [1], can be applied; and (4) It has the ability to
work with large-scale datasets. With these fundamental abilities, our framework
could significantly improve the applicability of differential privacy preservation in
deep learning. To illustrate the effectiveness of our framework, we propose a novel
model based on our private convolutional deep belief network (pCDBN), for human
22 NhatHai Phan et al.
behavior modeling. Experimental evaluations on a health social network, YesiWell
data, and a handwriting digit dataset, MNIST data, validate our theoretical results
and the effectiveness of our approach.
In future work, it is worthwhile to study how we might be able to extract
private information from deep neural networks. We will also examine potential
approaches to preserve differential privacy in more complex deep learning models,
such as Long Short-Term Memory (LSTM) [32]. Another open direction is how
to adapt our framework to multiparty computational settings, in which multiple
parties can jointly train a deep learning model under differential privacy. Innovative
multiparty computational protocols for deep learning under differential privacy
must have the ability to work with large-scale datasets.
In principle, our mechanism can be applied on rectified linear units (ReLUs)
[24] and on parametric rectified linear units (PReLUs) [28]. The main difference
is that we do not need to approximate the energy function. This is because the
energy function is a polynomial function when applying ReLU units. However,
we need to add a local response normalization (LRN) layer [36] to bound the
values of hidden neurons. This is a common step when dealing with ReLU units.
The implementation of this layer and ReLU units under differential privacy is an
exciting opportunity for other researchers in future work.
Another challenging problem is identifying the exact risk of re-identification/re-
construction of the data under differential privacy. In [40], the authors proposed
differential identifiability to link individual identifiability to  differential privacy.
However, this is still a non-trivial question. A fancy solution is to design innovative
approaches to reconstruct original models from noisy deep neural networks. Then,
one could use the original models to infer sensitive information in the training
data. However, how to reconstruct the original models from differentially private
deep neural networks is an open question. Of course, it is very challenging and will
require a significant effort of the whole community to answer.
Acknowledgements This work is supported by the NIH grant R01GM103309 to the SMASH
project. Wu is also supported by NSF grant 1502273 and 1523115. Dou is also supported by
NSF grant 1118050. We thank Xiao Xiao and Rebeca Sacks for their contributions.
References
1. (2016) Activation function. https://en.wikipedia.org/wiki/Activation_
function.
2. (2016) Health information technology for economic and clinical health (hitech)
act. https://www.hhs.gov/hipaa/for-professionals/special-topics/
HITECH-act-enforcement-interim-final-rule/.
3. (2016) Health insurance portability and accountability act of 1996. http://
www.hhs.gov/hipaa/.
4. Abadi M, Chu A, Goodfellow I, McMahan HB, Mironov I, Talwar K, Zhang
L (2016) Deep learning with differential privacy. arXiv:160700133
5. Arfken G (1985) In: Mathematical Methods for Physicists (Third Edition),
Academic Press
Accepted by Machine Learning, 2017 (Journal Track of ECML-PKDD) 23
6. Armato A, Fanucci L, Pioggia G, Rossi DD (2009) Low-error approximation
of artificial neuron sigmoid function and its derivative. Electronics Letters
45(21):1082–1084
7. Bach S, Binder A, Montavon G, Klauschen F, Müller KR, Samek W (2015)
On pixel-wise explanations for non-linear classifier decisions by layer-wise rel-
evance propagation. PLoS ONE 10(7):e0130,140
8. Bandura A (1989) Human agency in social cognitive theory. The American
Psychologist
9. Bengio Y (2009) Learning deep architectures for ai. Found Trends Mach
Learn 2(1):1–127, DOI 10.1561/2200000006, URL http://dx.doi.org/10.
1561/2200000006
10. Bengio Y (2017) Is cross-validation heavily used in deep learning or is it too ex-
pensive to be used? Quora, https://wwwquoracom/Is-cross-validation-heavily-
used-in-Deep-Learning-or-is-it-too-expensive-to-be-used
11. Bengio Y, Lamblin P, Popovici D, Larochelle H, Montreal UD, Quebec M
(2007) Greedy layer-wise training of deep networks. In: NIPS
12. Brownlee J (2015) 8 tactics to combat imbalanced classes in your
machine learning dataset. http://machinelearningmastery.com/
tactics-to-combat-imbalanced-classes-in-your-machine-learning-dataset/
13. Chan THH, Li M, Shi E, Xu W (2012) Differentially private continual moni-
toring of heavy hitters from distributed streams. In: PETS’12, pp 140–159
14. Chaudhuri K, Monteleoni C (2008) Privacy-preserving logistic regression. In:
NIPS, pp 289–296
15. Chaudhuri K, Monteleoni C (2008) Privacy-preserving logistic regression. In:
NIPS’08, pp 289–296
16. Cheng Y, Wang F, Zhang P, Hu J (2016) Risk prediction with electronic health
records: A deep learning approach. In: SDM’16
17. Choi E, Schuetz A, Stewart WF, Sun J (2016) Using recurrent neural network
models for early detection of heart failure onset. Journal of the American
Medical Informatics Association DOI 10.1093/jamia/ocw112
18. Cormode G (2011) Personal privacy vs population privacy: learning to attack
anonymization. In: KDD’11, pp 1253–1261
19. Dowlin N, Gilad-Bachrach R, Laine K, Lauter K, Naehrig M, Wernsing J
(2016) Cryptonets: Applying neural networks to encrypted data with high
throughput and accuracy. In: Proceedings of The 33rd International Confer-
ence on Machine Learning, PMLR, Proceedings of Machine Learning Research,
vol 48, pp 201–210
20. Dwork C, Lei J (2009) Differential privacy and robust statistics. In: STOC’09,
pp 371–380
21. Dwork C, McSherry F, Nissim K, Smith A (2006) Calibrating noise to sensi-
tivity in private data analysis. Theory of Cryptography pp 265–284
22. Erlingsson U, Pihur V, Korolova A (2014) Rappor: Randomized aggregatable
privacy-preserving ordinal response. In: CCS’14, pp 1054–1067
23. Fang R, Pouyanfar S, Yang Y, Chen SC, Iyengar SS (2016) Computa-
tional health informatics in the big data age: A survey. ACM Comput Surv
49(1):12:1–12:36, DOI 10.1145/2932707
24. Glorot X, Bordes A, Bengio Y (2011) Deep sparse rectifier neural networks.
In: Aistats, vol 15, p 275
24 NhatHai Phan et al.
25. Gottlieb A, Stein GY, Ruppin E, Altman RB, Sharan R (2013) A method for
inferring medical diagnoses from patient similarities. BMC Medicine 11(1):194,
DOI 10.1186/1741-7015-11-194
26. Harper T (2012) A comparative study of function approximators involving
neural networks (thesis, master of science). University of Otago DOI \url{http:
//hdl.handle.net/10523/2397}
27. Hay M, Rastogi V, Miklau G, Suciu D (2010) Boosting the Accuracy of Differ-
entially Private Histograms Through Consistency. Proceedings of the VLDB
Endowment 3(1)
28. He K, Zhang X, Ren S, Sun J (2015) Delving deep into rectifiers: Surpassing
human-level performance on imagenet classification. CoRR abs/1502.01852,
URL http://arxiv.org/abs/1502.01852
29. Helmstaedter M, Briggman KL, Turaga SC, Jain V, Seung HS, Denk W (2013)
Connectomic reconstruction of the inner plexiform layer in the mouse retina.
Nature 500(7461):168–174
30. Hinton G (2002) Training products of experts by minimizing contrastive di-
vergence. Neural Comput 14(8):1771–1800
31. Hinton GE, Osindero S, Teh YW (2006) A fast learning algorithm for deep be-
lief nets. Neural Comput 18(7):1527–1554, DOI 10.1162/neco.2006.18.7.1527,
URL http://dx.doi.org/10.1162/neco.2006.18.7.1527
32. Hochreiter S, Schmidhuber J (1997) Long short-term memory. Neural Com-
putation 9(8):1735–1780, DOI 10.1162/neco.1997.9.8.1735
33. Jain P, Kothari P, Thakurta A (2012) Differentially private online learning.
In: COLT’12, pp 24.1–24.34
34. Jamoom EW, Yang N, Hing E (2016) Adoption of certified electronic health
record systems and electronic information sharing in physician offices: United
states, 2013 and 2014. NCHS data brief (236)
35. Kifer D, Machanavajjhala A (2011) No free lunch in data privacy. In: SIG-
MOD’11, pp 193–204
36. Krizhevsky A, Sutskever I, Hinton GE (2012) Imagenet classification with deep
convolutional neural networks. In: Advances in neural information processing
systems, pp 1097–1105
37. Lecun Y, Bottou L, Bengio Y, Haffner P (1998) Gradient-based learning ap-
plied to document recognition. Proceedings of the IEEE 86(11):2278–2324,
DOI 10.1109/5.726791
38. LeCun Y, Bengio Y, Hinton G (2015) Deep learning. Nature 521(7553):436–
444, DOI 10.1038/nature14539
39. Lee H, Grosse R, Ranganath R, Ng AY (2009) Convolutional deep belief net-
works for scalable unsupervised learning of hierarchical representations. In:
ICML’09, pp 609–616
40. Lee J, Clifton C (2012) Differential identifiability. In: The 18th ACM SIGKDD
International Conference on Knowledge Discovery and Data Mining, KDD ’12,
Beijing, China, August 12-16, 2012, pp 1041–1049
41. Lee T, Jeng J (1998) The chebyshev-polynomials-based unified model neural
networks for function approximation. IEEE Trans Systems, Man, and Cyber-
netics, Part B 28(6):925–935
42. Lei J (2011) Differentially private m-estimators. In: NIPS, pp 361–369
43. Leung MKK, Xiong HY, Lee LJ, Frey BJ (2014) Deep learning of the
tissue-regulated splicing code. Bioinformatics 30(12):i121–i129, DOI 10.1093/
Accepted by Machine Learning, 2017 (Journal Track of ECML-PKDD) 25
bioinformatics/btu277
44. Li H, Li X, Ramanathan M, Zhang A (2015) Prediction and informative risk
factor selection of bone diseases. IEEE/ACM Trans Comput Biol Bioinfor-
matics 12(1):79–91, DOI 10.1109/TCBB.2014.2330579
45. Li X, Du N, Li H, Li K, Gao J, Zhang A (2014) A deep learning approach to
link prediction in dynamic networks. In: SIAM’14, pp 289–297
46. Liu S, Liu S, Cai W, Pujol S, Kikinis R, Feng D (2014) Early diagnosis of
alzheimer’s disease with deep learning. In: IEEE 11th International Sympo-
sium on Biomedical Imaging, ISBI 2014, Beijing, China, pp 1015–1018, DOI
10.1109/ISBI.2014.6868045
47. Ma J, Sheridan RP, Liaw A, Dahl GE, Svetnik V (2015) Deep neural nets as a
method for quantitative structure-activity relationships. Journal of Chemical
Information and Modeling 55(2):263–274, DOI 10.1021/ci500747n
48. Mason J, Handscomb D (2002) Chebyshev Polynomials. CRC Press, URL
https://books.google.com/books?id=8FHf0P3to0UC
49. McSherry F, Mironov I (2009) Differentially Private Recommender Systems.
In: KDD’09, ACM
50. McSherry F, Talwar K (2007) Mechanism design via differential privacy. In:
48th Annual IEEE Symposium on Foundations of Computer Science (FOCS
2007), October 20-23, 2007, Providence, RI, USA, Proceedings, pp 94–103
51. McSherry F, Talwar K (2007) Mechanism design via differential privacy. In:
FOCS ’07, pp 94–103
52. Miotto R, Li L, Kidd BA, Dudley JT (2016) Deep Patient: An Unsupervised
Representation to Predict the Future of Patients from the Electronic Health
Records. Scientific Reports 6, DOI 10.1038/srep26094
53. Nissim K, Raskhodnikova S, Smith A (2007) Smooth sensitivity and sam-
pling in private data analysis. In: Proceedings of the thirty-ninth annual ACM
Symposium on Theory of Computing, ACM, pp 75–84
54. Ortiz A, Munilla J, Grriz JM, Ramrez J (2016) Ensembles of deep learning
architectures for the early diagnosis of the alzheimers disease. International
Journal of Neural Systems 26(07):1650,025, DOI 10.1142/S0129065716500258
55. Perotte A, Pivovarov R, Natarajan K, Weiskopf N, Wood F, Elhadad N
(2014) Diagnosis code assignment: models and evaluation metrics. Jour-
nal of the American Medical Informatics Association 21(2):231–237, DOI
10.1136/amiajnl-2013-002159
56. Perotte A, Ranganath R, Hirsch JS, Blei D, Elhadad N (2015) Risk prediction
for chronic kidney disease progression using heterogeneous electronic health
record data and time series analysis. Journal of the American Medical Infor-
matics Association 22(4):872–880, DOI 10.1093/jamia/ocv024
57. Phan N, Dou D, Piniewski B, Kil D (2015) Social restricted boltzmann ma-
chine: Human behavior prediction in health social networks. In: ASONAM’15,
pp 424–431
58. Phan N, Dou D, Wang H, Kil D, Piniewski B (2015) Ontology-based deep
learning for human behavior prediction in health social networks. In: Proceed-
ings of the 6th ACM Conference on Bioinformatics, Computational Biology
and Health Informatics, pp 433–442, DOI 10.1145/2808719.2808764
59. Phan N, Dou D, Piniewski B, Kil D (2016) A deep learning approach for hu-
man behavior prediction with explanations in health social networks: social re-
stricted boltzmann machine (SRBM+). Social Netw Analys Mining 6(1):79:1–
26 NhatHai Phan et al.
79:14, DOI 10.1007/s13278-016-0379-0
60. Phan N, Ebrahimi J, Kil D, Piniewski B, Dou D (2016) Topic-aware physi-
cal activity propagation in a health social network. IEEE Intelligent Systems
31(1):5–14
61. Phan N, Wang Y, Wu X, Dou D (2016) Differential privacy preservation
for deep auto-encoders: an application of human behavior prediction. In:
AAAI’16, pp 1309–1316
62. Plis SM, Hjelm DR, Salakhutdinov R, Allen EA, Bockholt HJ, Long JD,
Johnson HJ, Paulsen JS, Turner JA, Calhoun VD (2014) Deep learning
for neuroimaging: a validation study. Frontiers in Neuroscience 8:229, DOI
10.3389/fnins.2014.00229
63. Reed SE, Lee H, Anguelov D, Szegedy C, Erhan D, Rabinovich A (2014)
Training deep neural networks on noisy labels with bootstrapping. CoRR
abs/1412.6596
64. Rivlin TJ (1990) Chebyshev Polynomials Form Approximation Theory to Al-
gebra and Number Theory, 2nd ed. New York: Wiley
65. Roumia M, Steinhubl S (2014) Improving cardiovascular outcomes using elec-
tronic health records. Current Cardiology Reports 16(2):451, DOI 10.1007/
s11886-013-0451-6
66. Rudin W (1976) Principles of Mathematical Analysis. McGraw-Hill
67. Shokri R, Shmatikov V (2015) Privacy-preserving deep learning. In: CCS’15,
pp 1310–1321
68. Smolensky P (1986) Information processing in dynamical systems: Founda-
tions of harmony theory. chap Parallel Distributed Processing: Explorations
in the Microstructure of Cognition, Vol. 1, pp 194–281
69. Song S, Chaudhuri K, Sarwate AD (2013) Stochastic gradient descent with
differentially private updates. In: GlobalSIP, pp 245–248
70. Srivastava N, Hinton G, Krizhevsky A, Sutskever I, Salakhutdinov R (2014)
Dropout: A simple way to prevent neural networks from overfitting. Journal
of Machine Learning Research 15:1929–1958, URL http://jmlr.org/papers/
v15/srivastava14a.html
71. Vlcek M (2012) Chebyshev polynomial approximation for activation sigmoid
function. Neural Network World 4:387–393
72. Wang Y, Wu X, Wu L (2013) Differential privacy preserving spectral graph
analysis. In: PAKDD (2), pp 329–340
73. Wu J, Roy J, Stewart WF (2010) Prediction modeling using EHR data: chal-
lenges, strategies, and a comparison of machine learning approaches. Medical
care 48(6 Suppl), DOI 10.1097/mlr.0b013e3181de9e17
74. Xiao X, Wang G, Gehrke J (2010) Differential privacy via wavelet transforms.
In: ICDE’10, pp 225–236
75. Xiong HY, Alipanahi B, Lee LJ, Bretschneider H, Merico D, Yuen RKC, Hua
Y, Gueroussov S, Najafabadi HS, Hughes TR, Morris Q, Barash Y, Krainer
AR, Jojic N, Scherer SW, Blencowe BJ, Frey BJ (2015) The human splicing
code reveals new insights into the genetic determinants of disease. Science
347(6218), DOI 10.1126/science.1254806
76. Zhang J, Zhang Z, Xiao X, Yang Y, Winslett M (2012) Functional mechanism:
regression analysis under differential privacy. PVLDB 5(11):1364–1375

