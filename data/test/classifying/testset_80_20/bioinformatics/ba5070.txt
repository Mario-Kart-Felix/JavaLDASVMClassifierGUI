research papers
2126 doi:10.1107/S0907444904019158 Acta Cryst. (2004). D60, 2126±2132
Acta Crystallographica Section D
Biological
Crystallography
ISSN 0907-4449
Coot: model-building tools for molecular graphics
Paul Emsley* and Kevin Cowtan
York Structural Biology Laboratory, University of
York, Heslington, York YO10 5YW, England
Correspondence e-mail:
emsley@ysbl.york.ac.uk
# 2004 International Union of Crystallography
Printed in Denmark ± all rights reserved
CCP4mg is a project that aims to provide a general-purpose
tool for structural biologists, providing tools for X-ray
structure solution, structure comparison and analysis, and
publication-quality graphics. The map-®tting tools are avail-
able as a stand-alone package, distributed as `Coot'.
Received 26 February 2004
Accepted 4 August 2004
1. Introduction
Molecular graphics still plays an important role in the deter-
mination of protein structures using X-ray crystallographic
data, despite on-going efforts to automate model building.
Functions such as side-chain placement, loop, ligand and
fragment ®tting, structure comparison, analysis and validation
are routinely performed using molecular graphics. Lower
resolution (dmin worse than 2.5 AÊ ) data in particular need
interactive ®tting.
The introduction of FRODO (Jones, 1978) and then O
(Jones et al., 1991) to the ®eld of protein crystallography was in
each case revolutionary, each in their time breaking new
ground in demonstrating what was possible with the current
hardware. These tools allowed protein crystallographers to
enjoy what is widely held to be the most thrilling part of their
work: giving birth (as it were) to a new protein structure. The
CCP4 program suite (Collaborative Computational Project,
Number 4, 1994) is an integrated collection of software for
macromolecular crystallography, with a scope ranging from
data processing to structure re®nement and validation. Until
recently, molecular graphics had not been part of the suite.
With the recent computational and graphical performance of
relatively cheap hardware, the time had arrived for CCP4 to
provide graphical functionality for knowledge-based (semi-)-
automatic building using powerful modern languages in a
¯exible extendible package. CCP4mg (Potterton et al., 2004) is
an initiative by CCP4 to provide libraries and a molecular
graphics application that is a popular system for represent-
ation, modelling, structure determination, analysis and
validation. The aim is to provide a system that is easy to use
and a platform for developers who wish to integrate macro-
molecular computation with a molecular-graphics interface.
There are several modules to such graphical functionality; the
protein model-building/map-®tting tools described here are
only a part. These tools are available as a stand-alone software
package, Coot.
A map-®tting program has to provide certain functionality,
which is not required by a molecular-display program. These
functions include symmetry coordinates, electron-density map
contouring and the ability to move the coordinates in various
ways, such as model idealization or according to side-chain
rotamer probabilities.
The map-®tting and model-building functions described
here have a functionality broadly similar to that of programs
such as O, Xtalview from X®t (McRee, 1999) or QUANTA
(Accelrys, San Diego, CA, USA). However, in the spirit of the
CCP4 program suite, it is possible for others to read and
modify the program.
Coot attempts (generally speaking) to provide more trans-
parency, ease of use, better extendability, (semi-)automated
model-building methods and convenient integration with
programs of the CCP4 suite.
2. Program functions
Coot has been substantially built around two major libraries:
mmdb (Krissinel et al., 2004), a library for the handling of
macromolecular coordinates, and Clipper (Cowtan, 2002,
2003), a library for crystallographic objects and computation
thereof. The various functions of Coot are split into `stand-
alone' classes in the sense that an attempt has been made to
minimize the dependence of the classes on anything other
than the above libraries. With portability in mind, special
effort was made not to introduce GUI dependences into the
interface to Coot's library of tools.
Coot is event-driven; functions are only run as a result of
user action (typically moving or clicking the mouse).
2.1. Symmetry
Coordinate symmetry is recomputed and redisplayed at
every recentre event. For each molecule for which the user
wishes to display symmetry, symmetry atoms are displayed
within a particular distance criterion of the display centre. By
using a set of pre-computed guide points that mark the extents
of the molecule and applying the symmetry operators and cell
shifts to these guide points, a set of operator indexes and cell
shifts are generated that may contain symmetry-related atoms
close to the screen centre (where `close' is de®ned by a user-
settable parameter). For each of these sets, all atoms in the
molecule are transformed and a check is made for each to see
if it is within the symmetry display radius of the position at the
centre of the screen. Thus, symmetry is kept current and
relevant to the current display centre.
2.2. Electron density
Because Coot is based on the Clipper libraries, it is easy to
generate maps by reading a ®le of structure factors that
contain phase information (typically an MTZ ®le). Density is
not limited to any particular part of the unit cell; the relevant
symmetry-related density is generated (and then contoured)
automatically using Clipper functionality. The electron-
density maps can be simply recontoured (provoked by script
or keyboard or mouse events) at a different level using a
predetermined increment. Every map (displayed or un-
displayed) is regenerated and contoured: this process is not
optimally fast but simpli®es the user interface.
2.3. Interface to REFMAC
On reading an MTZ ®le one can optionally assign para-
meters for running REFMAC (Murshudov et al., 1997).
REFMAC is a program of the CCP4 suite for maximum-
likelihood-based macromolecular re®nement. After a period
of interactive model building, the user can choose to use
REFMAC to re®ne the current coordinates (in combination
with MTZ parameters). Coot blocks until REFMAC has
terminated and then automatically reads the newly generated
(re®ned) coordinates and MTZ ®le, from which a map is
generated (and displayed).
2.4. Rigid-body refinement
Clipper library functions provide easy access to the map
gradients. For a selected coordinate set, the map gradients at
the atom centres are averaged. A shift is applied (to all the
selected atoms) that is some simple fraction of the average
gradient. The rotational component of the rigid-body re®ne-
ment is generated in the following manner: the rotations to be
calculated (x, y and z) are (small) rotations around the
coordinate axes, the centre of rotation (V) being the centre of
the rotating atoms. Let Vpi be the projection on to the XY
plane of the vector between the position of atom i and V, the
unit vector being cVpi . The dot product of the gradient with cVpi
provides dVpi
.
The required angle is arctandVpi =jVj. These angles are
available for each atom and they are averaged to obtain three
perpendicular rotations: x, y and z. These angle transfor-
mations are applied to the coordinates. The application of
transformations continues until the average shift length is less
than 0.0005 AÊ .
This is a reasonable approach for much of a protein's
structure, but could behave badly where there is a combina-
tion of relatively heavy and light atoms, such as sulfates or
methionines. This problem could be countered by weighting
the atom-density score by the atomic weight.
2.5. Rotamers
The rotamer library used in Coot is the backbone-
independent library of Dunbrack & Cohen (1997). It is formed
from a reasonably large sample set (850 chains), is reasonably
up to date (May 2002) and provides a more accurate estima-
tion of the population of rare rotamers.
The Coot function `Auto-®t Rotamer' takes a set of most
likely rotamers for a particular side chain and generates
coordinates for each rotamer. Each test rotamer is then rigid-
body re®ned and the ®nal position is scored according to the
®t to the density (the residue's backbone atoms are included in
the set of re®ned atoms). The best ®t rotamer is chosen and
replaces the previous coordinates.
2.6. Regularization and refinement
Molecular-graphics model building requires the ability to
regularize (`idealize') the coordinates of the model. In order to
do so, the ideal values of the geometry of the macromolecule
research papers
Acta Cryst. (2004). D60, 2126±2132 Emsley & Cowtan  Model-building tools for molecular graphics 2127
should be known. These ideal values can come in various
forms. The interface in Coot reads the mmCIF dictionaries of
REFMAC, which de®ne idea values and estimated standard
deviations for bond lengths, angles, torsions planes and chiral
centres. Coot uses the Polak±Ribiere variant of the BFGS
(Broyden±Fletcher±Goldfarb±Shanno) conjugate-gradient
multi-variable function minimizer to optimize the coordinates.
The analytical gradient derivations are described in
Appendix A.
2.6.1. Fitting to the map. As described above, the map
gradients are provided by a Clipper function. These map
gradients (at the positions of the atom centres) are simply
multiplied by a (user-changeable) scaling factor and added to
the geometric terms to de®ne the target function (this is called
`Re®nement' in Coot).
2.7. Finding ligands
A map can be masked by a set of coordinates (typically
those of the currently determined atoms of the protein
model). This approach leaves a map that has positive density
at places where there are no atoms to represent that density
(similar, in fact, to an Fo ÿ Fc map). This masked map is
searched for `clusters' of density above a particular level. The
clustering of the grid points of the asymmetric unit into
potential ligand sites is performed conveniently using a
recursive neighbour search of the map. The clusters are sorted
according to size and electron-density value. Eigenvalues and
eigenvectors are calculated for each cluster of grid points.
Similarly, the eigenvalues and eigenvectors of the search
ligands (there can of course be just one search ligand) are
computed (the parameters being the positions of the atom
centres). The eigenvalues of the ligands are compared with the
eigenvalues of each of the electron-density clusters and if they
are suf®ciently similar the ligand is placed into the cluster by
matching the centre of the test ligand and the centre of the
cluster. The ligand is oriented in each of the four different
orientations that provide coinciding eigenvectors and then
rigid-body re®ned and scored. The score is simply the sum of
the electron density at the atom centres. The score at each site
for each different ligand is compared and the best ®t (highest
score with suf®cient fraction of atoms in positive density after
the rigid-body re®nement) is chosen. This last check ensures
that oversized ligands are not ®tted into small clusters.
2.7.1. Flexible ligands. Instead of having a series of
different ligand compounds, the search ligands can be gener-
ated from a single ligand that has rotatable bonds. The ligand
dictionary provides a description of the geometry of the ligand
including torsions. These torsions are randomly sampled for a
number of trials (by default 1000) to provide coordinates that
can be checked against the potential ligand sites as described
above. An enhancement would be to allow the determination
of the number of trials to depend on the number of torsions.
2.7.2. Finding water molecules. The electron density is
clustered as described for ligands. For clusters that have a
volume below a certain upper limit (4.2 AÊ 3, which stops water
molecules being placed in multi-atom ligand sites) a starting
position is determined from the mean position of the grid
coordinates of the cluster. This position is then optimized by
re®ning the position to the local maximum as determined by
cubic interpolation of the map. A map sphericity test is then
applied; the variance of the cubic interpolated electron density
at points 0.3, 0.6 and 0.9 AÊ from the local maximum in positive
and negative offsets along the x, y and z axes are determined.
The variances are summed and must be lower than a user-
changeable cutoff (default 0.07 e2 AÊ ÿ6). The successful posi-
tions are then compared with the coordinates of the protein's
O and N atoms. If the distance is between user-changeable
criteria (default 2.4±3.4 AÊ ) then the position is accepted as a
solvent O atom and (optionally) added to the protein model.
2.8. Add terminal residue
Given the selection of a terminal residue (which also could
merely be the start of a gap of unplaced residues), two residue-
type independent randomly selected '/ pairs are made from
Clipper's Ramachandran distribution of '/ pairs. These
angles are used to generate positions of C, C, O and N main-
chain atoms for the neighbouring two residues using the
peptide geometry. This set of atoms then undergo rigid-body
re®nement to optimize the ®t to the map. The score of the ®t
and the positions of the atoms are recorded. This procedure is
then repeated a number of times (by default 100). The main-
chain atoms of the neighbouring residue's best-®t atoms are
then offered as a position of the neighbouring residue (the
atoms of the next neighbouring residue are discarded).
2.9. Skeletonization and Ca building
Coot uses a Clipper map to generate and store the skeleton.
This approach is convenient because, like electron-density
maps, the skeleton can be displayed `on the ¯y' anywhere in
the crystal (i.e. it is not limited to a precalculated region). The
Clipper skeletonization algorithm is similar to that employed
in DM from CCP4 (Cowtan, 1994). A skeleton `bond' (bone)
is drawn between neighbouring map grid points if both parts
are marked as skeleton points.
The skeleton can be further trimmed by recursive tip
removal (a tip being a grid point with one or zero neighbours).
This process removes side chains and, potentially, parts of the
termini, but provides an easy means of identifying the fold and
non-crystallographic symmetry.
Like some validation (Kleywegt, 1997) and other attempts
at automated model building (Morris et al., 2002; Old®eld &
Hubbard, 1994; Old®eld, 2001), a likelihood distribution for
the pseudo-torsion angle C(n)ÐC(n + 1)ÐC(n + 2)Ð
C(n + 3) versus the angle C(n + 1)ÐC(n + 2)ÐC(n + 3)
has been generated from high-resolution structures in the
PDB (Berman et al., 2000) (Fig. 1). Once at least three C
atoms have been placed, this is used as prior knowledge in the
placement of the next C position in the following manner.
Skeleton points between 2.4 and 3.4 AÊ from the current C
position (which has an associated nearby skeleton point) are
selected. These skeleton points are tested for direct connec-
tivity to the current skeleton point. Skeleton points that are
research papers
2128 Emsley & Cowtan  Model-building tools for molecular graphics Acta Cryst. (2004). D60, 2126±2132
directly connected are assigned a score of 100; those that are
unconnected are assigned a score of 0.1. For each selected
skeleton point, a test point is then generated 3.8 AÊ from the
current C position in the direction of skeleton point. A C
pseudo-torsion angle and angle pair are generated from the
position of the test point, the current C position and the two
previously assigned C positions. This pseudo-torsion angle
and angle pair are used to generate a score by looking up the
value in the internal representation of Fig. 1 using cubic
interpolation. This value is combined with the skeleton-based
score for this particular test point. This procedure is then
repeated in a `look-ahead' manner, assuming that the test
point is a member of the set of four C positions generating
the C pseudo-torsion/angle pair. The most likely solution for
the look-ahead is combined with the score for the current test
point. The test points are then sorted by combined score and
interactively offered as potential positions for the next C
atom, the positions with the best score being offered ®rst.
Occasionally (usually as a result of a positional error in the
current C position), 3.8 AÊ is the wrong distance to the next
correct C position; thus the user is allowed to change the
length to something other than 3.8 AÊ .
The depth of the look-ahead in the current implementation
is at level 1 but could trivially be extended (in tests, a level 2
look-ahead was better but took too long to be considered
pleasantly interactive).
This algorithm has room for improvement: for example, by
considering the value of the density at the test point and along
the C pseudo-bond, one-third and two-thirds of the way
along the bond (corresponding to positions that are close to
the peptide C and N atoms; Old®eld, 2003).
C coordinates are converted to main-chain coordinates in a
manner similar to that previously described (Jones & Thirup,
1986; Esnouf, 1997).
APPENDIX A
Regularization and refinement derivatives
The function that we are trying to minimize is S, where
S  Sbond  Sangle  Storsion  Splane:
Let us take these four parts in turn.
A1. Bonds
Sbond 
PNbonds
i1
bi ÿ b0i 2;
where b0i is the ideal length (from the dictionary) of the ith
bond, bi is the bond vector and bi is its length.
@Si
@xm
 @Si
@bi
@bi
@xm
 2bi ÿ b0i 
@bi
@xm
;
bi  xm ÿ xk2  ym ÿ yk2  zm ÿ zk21=2:
Therefore
@bi
@xm
 1
2
1
bi
 
2xm ÿ xk 
xm ÿ xk
bi
and
@Si
@xm
 2bi ÿ b01 
xm ÿ xk
bi
:
A2. Angles
We are trying to minimize Sangle, where (for simplicity, the
weights have been omitted)
Sangle 
PNangles
i1
i ÿ 0i2:
Angle  is contributed to by atoms k, l and m:
cos   a  b=ab;
where a is the bond of atoms k and l [(xk ÿ xl), (yk ÿ yl),
(zk ÿ zl)] and b is the bond of atoms l and m [(xm ÿ xl),
(ymÿ yl), (zmÿ zl)]. Note that the vectors point away from the
middle atom l.
Therefore,
  a cosP; 1
where
P  a  b=ab:
Using the chain rule,
research papers
Acta Cryst. (2004). D60, 2126±2132 Emsley & Cowtan  Model-building tools for molecular graphics 2129
Figure 1
C pseudo-torsion angle versus opening angle for proteins in the PDB
used in the likelihood assignment of potential C positions.
@
@xk
 @
@P
@P
@xk
: 2
Given that we are only interested in  in the range 0! ,
@
@P
 ÿ 1
sin 
: 3
Again using the chain rule,
@P
@xk
 Q @R
@xk
 R @Q
@xk
; 4
where
Q  a  b; 5
R  1=ab: 6
A3. Angles: the middle atom
A middle atom is somewhat more tricky than an end atom
because the derivatives of ab and a  b are not so trivial. Let us
change the indexing so that we are actually talking about the
middle atom, l.
Differentiating (6) gives
@R
@xl
 ÿ 1ab2 b
@a
@xl
ÿ 1ab2 a
@b
@xl
: 7
@a=@xl here is exactly the same as for bonds,
@a
@xl
 xl ÿ xk
a
:
Similarly,
@b
@xl
 xl ÿ xm
a
:
Therefore, substituting these equations into (7) gives
@R
@xl
 ÿ xl ÿ xk
a3b
ÿ xl ÿ xm
ab3
:
Turning to Q, recall (5); therefore
Q  xk ÿ xlxm ÿ xl  yk ÿ ylym ÿ yl
 zk ÿ zlzm ÿ zl

and hence
@Q
@xl
 ÿxk ÿ xl ÿ xm ÿ xl:
Substituting all the above into (4) gives
@P
@xl
 a  b ÿ xl ÿ xk
a3b
ÿ xl ÿ xm
ab3
 
ÿxk ÿ xl ÿ xm ÿ xl
ab
:
Combining this expression and (3) into (2) we obtain
@
@xl
 1
sin 
@P
@xl
:
A4. Angles: an end atom (atoms k or m)
This case is simpler because there are no cross-terms in
@R=@xk and @Q=@xk.
@R
@xk
 xk ÿ xl
ab
:
and
@Q
@xk
 xm ÿ xl;
and so
@
@xk
 ÿ 1
sin 
xl ÿ xk
a2
cos   xm ÿ xl
ab
 
: 8
A5. Torsion angles
The torsion angle is the angle between a  b and b  c
(Fig. 2) and this can be written as
arctan a  b̂ c= ÿa  c a  b̂b̂  c  	; 9
where b̂ is a unit vector in the direction of b, b̂  b=b.
This de®nition of the torsion angle is used rather than the
more common de®nition, which uses three cross-products,
because our version and its derivatives are faster to calculate.
Let us split the expression up into tractable portions; the
evaluation of  in the program will combine these expressions,
starting at the end (the most simple).
From the primatives,
ax  P2x ÿ P1x ; bx  P3x ÿ P2x ; cx  P4x ÿ P3x;
ay  P2y ÿ P1y ; by  P3y ÿ P2y ; cy  P4y ÿ P3y;
az  P2z ÿ P1z ; bz  P3z ÿ P2z ; cz  P4z ÿ P3z;
  arctanD;
where
D  a  b c=bÿa  c a  bb  c=b2 :
So
research papers
2130 Emsley & Cowtan  Model-building tools for molecular graphics Acta Cryst. (2004). D60, 2126±2132
Figure 2
Nomenclature used for torsion angles.
@
@xP1
 @
@D
@D
@xP1
; 10
@
@xP1
 1
1D2
@D
@xP1
: 11
Let
E  a  b c=b;
F  ÿa  c a  bb  c=b ÿ1;
F  1=G; 12
G  ÿa  c a  bb  c=b2;
H  ÿa  c;
J  a  b;
K  b  c;
L  1=b2:
Differentiating (12) gives
@F
@xP1
 ÿ 1
G2
@G
@xP1
:
Substituting for the derivative in (10),
@
@xP1
 1
1D2 F
@E
@xP1
 E @F
@xP1
 !
:
We also have
G  H  JKL:
Differentiating this gives
@G
@xP1
 @H
@xP1
 JL @K
@xP1
 KL @J
@xP1
 JK @L
@xP1
:
The H, J, K and L derivatives are
H  ÿa  c  ÿaxcx ÿ ayby ÿ azcz;
@H
@xP1
 cx;
@H
@xP2
 ÿcx;
@H
@xP3
 ax;
@H
@xP4
 ÿax;
@K
@xP1
 0; @K
@xP2
 ÿcx;
@K
@xP3
 cx  bx;
@K
@xP4
 bx;
@J
@xP1
 ÿbx;
@J
@xP2
 bx ÿ ax;
@J
@xP3
 ax;
@J
@xP4
 0:
The @b=@x terms are just like the bond derivatives,
@L
@xP1
 @L
@b
@b
@xP1
;
i.e.
@L
@xP3
 ÿ 2
b3
xP3 ÿ xP2
b
 ÿ 2xP3 ÿ xP2 
b4
:
The derivative with respect to xP2 has the opposite sign.
Notice that b involves only atoms P2 and P3, so that the
derivates of L with respect to the P1 and P4 coordinates are
zero.
A6. Torsion angles: @E/@x terms
Recall that
E  a  b c=b:
Let
M  a  b c;
i.e.
E  M=b:
Differentiating gives
@E
@xP3
 ÿM
b2
@b
@xP3
 1
b
@M
@xP3
;
where, as for bonds,
@b
@xP3
 xP3 ÿ xP2
b
:
However, note again that the derivative of b is zero for atoms
P1 and P4, i.e. for atoms P2 and P3
@E
@xP3
 ÿMxP3 ÿ xP2 
b3
 1
b
@M
@xP3
;
but for atoms P1 and P4
@E
@xP1
 1
b
@M
@xP1
;
M  axbycz ÿ bzcy  aybzcx ÿ bxcz  azbxcy ÿ bycx:
So here are the primitives of M  a  b c
@M
@xP1
 ÿbycz ÿ bzcy;
@M
@xP2
 bycz ÿ bzcy  aycz ÿ azcy;
@M
@xP3
 azcy ÿ aycz  byaz ÿ bzay;
@M
@xP4
 aybz ÿ azby;
@M
@yP1
 ÿbzcx ÿ bxcz;
@M
@yP2
 bzcx ÿ bxcz  azcx ÿ axcz;
research papers
Acta Cryst. (2004). D60, 2126±2132 Emsley & Cowtan  Model-building tools for molecular graphics 2131
@M
@yP3
 ÿazcx ÿ axcz  bzax ÿ bxaz;
@M
@yP4
 ÿbzax ÿ bxaz;
@M
@zP1
 ÿbxcy ÿ bycx;
@M
@zP2
 bxcy ÿ bycx  axcy ÿ aycx;
@M
@zP3
 ÿaxcy ÿ aycx  aybx ÿ axby;
@M
@zP4
 ÿaybx ÿ axby:
A7. Combining terms
Combining, we obtain the following expression for the
derivative of torsion angle  in terms of the primitive deri-
vates,
@
@xP1
 11 tan2 
@D
@xP1
;
where
@D
@xP1
 F @E
@xP1
ÿ E
G2
@H
@xP1
 JL @K
@xP1
 KL @J
@xP1
 JK @L
@xP1
 !" #
:
A8. Planes
Splane 
PNplanes
i1
PNatomsi
j1
e2ij;
where eij is the distance of the ith plane restraint's jth atom
from the ith plane restraint's least-squares plane.
Recall the equation of a plane: ax + by + cz + d = 0. Firstly,
the centres of the sets of atoms, xcen, ycen, zcen, are determined.
The plane is moved so that it crosses the origin and therefore
d = 0 (it is moved back later). The problem then involves three
equations, three unknowns and an eigenvalue problem, with
the smallest eigenvalue corresponding to the best-®t plane.
The least-squares planes of the plane restraints are recal-
culated at every iteration.
The authors thank Garib Murshudov, Eleanor J. Dodson,
Jack Quine and the many Coot testers. KC is supported by The
Royal Society (grant No. 003R05674). PE is funded by
BBSRC grant No. 87/B17320.
References
Berman, H. M., Westbrook, J., Feng, Z., Gilliland, G., Bhat, T. N.,
Weissig, H., Shindyalov, I. N. & Bourne, P. E. (2000). Nucleic Acids
Res. 28, 235±242.
Collaborative Computational Project, Number 4 (1994). Acta Cryst.
D50, 760±766.
Cowtan, K. (1994). Jnt CCP4/ESF±EACBM Newsl. Protein Crystal-
logr. 31, 34±38.
Cowtan, K. (2002). Jnt CCP4/ESF±EACBM Newsl. Protein Crystal-
logr. 40.
Cowtan, K. (2003). Crystallogr. Rev. 9, 73±80.
Dunbrack, R. L. Jr & Cohen, F. E. (1997). Protein Sci. 6, 1661±1681.
Esnouf, R. M. (1997). Acta Cryst. D53, 665±672.
Jones, T. A. (1978). J. Appl. Cryst. 11, 268±272.
Jones, T. A., Cowan, S., Zou, J.-Y. & Kjeldgaard, M. (1991). Acta
Cryst. A47, 110±119.
Jones, T. A. & Thirup, S. (1986). EMBO J. 5, 891±822.
Kleywegt, G. J. (1997). J. Mol. Biol. 273, 371±376.
Krissinel, E. B, Winn, M. D., Ballard, C. C., Ashton, A. W., Patel, P.,
Potterton, E. A., McNicholas, S. J., Cowtan, K. D. & Emsley, P.
(2004). Acta Cryst. D60, 2250±2255.
McRee, D. E. (1999). J. Struct. Biol. 125, 156±165.
Morris, R. J., Perrakis, A. & Lamzin, V. S. (2002). Acta Cryst. D58,
968±975.
Murshudov, G. N., Vagin, A. A. & Dodson, E. J. (1997). Acta Cryst
D53, 240±255.
Old®eld, T. J. (2001). Acta Cryst. D57, 82±94.
Old®eld, T. J. (2003). Acta Cryst. D59, 483±491.
Old®eld, T. J. & Hubbard, R. E. (1994). Proteins Struct. Funct. Genet.
18, 324±337.
Potterton, L., McNicholas, S., Krissinel, E., Gruber, J., Cowtan, K.,
Emsley, P., Murshudov, G. N., Cohen, S., Perrakis, A. & Noble, M.
(2004). Acta Cryst. D60, 2288±2294.
research papers
2132 Emsley & Cowtan  Model-building tools for molecular graphics Acta Cryst. (2004). D60, 2126±2132

