Directed Diffusion: A Scalable and Robust Communication 
Paradigm for Sensor Networks- 
Chalermek 
Intanagonwiwat 
USC/Inforrnation Sciences Institute 
intanago@isi.edu 
Ramesh Govindan 
USC/Information Sciences Institute 
govindan@isi.edu 
Deborah Estrin 
USC/Information Sciences Institute 
and University of California, Los 
Angeles 
destrin@cs.ucla.edu 
ABSTRACT 
Advances in processor, memory and radio technology will 
enable small arid cheap nodes capable of sensing, communi- 
cation and computation. Networks of such nodes can coor- 
dinate to perform distributed sensing of environmental phe- 
nomena. In this paper, we explore the directed diffusion 
paradigm for such coordination. Directed diffusion is data- 
centric in that all communication is for named data. All 
nodes in a directed diffusion-based network are application- 
aware. This enables diffusion to achieve energy savings by 
selecting empirically good paths and by caching and pro- 
cessing data in-network. We explore and evaluate the use 
of directed diffusion for a simple remote-surveillance sensor 
network. 
1. INTRODUCTION 
In the near future, advances in processor, memory and ra- 
dio technology will enable small and cheap nodes capable of 
wireless communication and significant computation. The 
addition of sensing capability to such devices will make dis- 
tr ibuted microsensing--an activity in which a collection of 
nodes coordinate to achieve a larger sensing task---possible. 
Such technology can revolutionize information gathering and 
processing in many situations. Large scale, dynamically 
changing, and robust sensor networks can be deployed in in- 
hospitable physical environments such as remote geographic 
regions or toxic urban locations. They will also enable low 
maintenance sensing in more benign, but less accessible, en- 
vironments: large industrial plants, aircraft interiors etc. 
To motivate our research, consider this simplified model of 
how such a sensor network will work (we refine this model in 
*This work was supported by the Defense Advanced Re- 
search Projects Agency under grant DABT63-99-1-0011. 
Any opinions, findings, and conclusions or recommendations 
expressed in this material are those of the authors and do 
not necessarily reflect the views of the Defense Advanced 
Research Projects Agency. 
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies 
are not made or distributed for profit or commercial advantage and that 
copies bear this notice and the lull citation on the first page. To copy 
otherwise, to republish, to post on servers or to redistribute to lists, 
requires prior specific permission and/or a fee. 
MOBICOM 2000 Boston MA USA 
Copyright ACM 2000 1-58113-197-6/00/08...$5.00 
Section 2). One or more human operators pose, to any node 
in the network, questions of the form: "How many pedestri- 
ans do you observe in the geographical region X?", or "Tell 
me in what direction that vehicle in region Y is moving". 
These queries result in sensors within the specified region be- 
ing tasked to start collecting information (Section 2). Once 
individual nodes detect pedestrians or vehicle movements, 
they might collaborate with neighboring nodes to disam- 
biguate pedestrian location or vehicle movement direction. 
One of these nodes might then report the result back to the 
human operator. 
Motivated by robustness, scaling, and energy efficiency re- 
quirements, this paper examines a new data dissemination 
paradigm for such sensor networks. This paradigm, which 
we call directed diffusion I, is data-centric. Data generated 
by sensor nodes is named by attribute-value pairs. A node 
requests data by sending interests for named data. Data 
matching the interest is then "drawn" down towards that  
node. Intermediate nodes can cache, or transform data, and 
may direct interests based on previously cached data (Sec- 
tion 3). 
Using this communication paradigm, our example might 
be implemented as follows. The human operator's query 
would be transformed into an interest that  is diffused to- 
wards nodes in regions X or Y. When a node in that  region 
receives an interest, it activates its sensors which begin col- 
lecting information about pedestrians. When the sensors 
report the presence of pedestrians, this information returns 
along the reverse path of interest propagation. Intermediate 
nodes might aggregate the data, e.g., more accurately pin- 
point the pedestrian's location by combining reports from 
several sensors. An important  feature of directed diffusion 
is that  interest and data propagation and aggregation are 
determined by localized interactions (message exchanges be- 
tween neighbors or nodes within some vicinity). 
Directed diffusion is significantly different from IP-style com- 
munication where nodes are identified by their end-points, 
and inter-node communication is layered on an end-to-end 
delivery service provided within the network. In this paper, 
we describe directed diffusion and illustrate one instantia- 
tion of this paradigm for sensor query dissemination and 
processing. We show that  using directed diffusion one can 
1 
V a n  J a c o b s o n  s u g g e s t e d  s o m e  o f  t h e  i n i t i a l  i d e a s  t h a t  l a t e r  l e d  t o  t h e  d e s i g n  of  
d i r e c t e d  d i f f u s i o n .  
5 6  
realize robust multi-path delivery, empirically adapt to a 
small subset of network paths, and achieve significant en- 
ergy savings when intermediate nodes aggregate responses 
to queries (Section 4). 
2. DISTRIBUTED SENSOR NETWORKS 
Before we describe directed diffusion, we must describe the 
expected architectures of sensor networks. To do this, we 
first describe the expected capabilities of sensor nodes. It 
is not unreasonable to expect the following features in a fu- 
ture sensor node: A matchbox sized form factor, battery 
power source, an power-conserving processor clocked at sev- 
eral hundred Mhz, program and data memory amounting to 
several tens of MBytes, a radio modem that employs some 
form of diversity coding [10], and an energy efficient MAC 
layer based on, for example, TDMA [22]. As such, this node 
would be capable of running a possibly stripped-down ver- 
sion of a modern operating system; examples of such oper- 
ating systems include Windows CE and #CLinux. 
Such a node could have one or more sensors. Examples of 
such sensors include seismic geophones, infrared dipoles and 
electret microphones for acoustic sensing. The analog-to- 
digital conversion system on such nodes might produce upto 
70 ksamples per second, at upto 12 bit resolution. For rea- 
sons of power conservation, some of the common signal pro- 
cessing functions may be offioaded into a low-power ASIC. 
In this way, the main processor need be woken up only when 
events of interest occur. Finally, a sensor node may possess 
a fully-functional GPS receiver. 
Because of their compact form factor and their potential 
low cost, it might be possible for a densely--within tens of 
feet of each other--packed cluster of such sensor nodes to 
be deployed, in a possibly unplanned fashion, near the phe- 
nomena to be sensed--e.g., at busy intersections, or in the 
interior of large machinery. The advantage of such sensor 
networks is that,  even with relatively cheap sensors, these 
nodes can obtain high SNR (given that  the signal gener- 
ated by any physical phenomena rapidly attenuates with 
distance). Furthermore, given the spatial density of these 
deployments, an individual sensor node may not have to 
frequently perform multi-target resolution (i.e. distinguish 
between different targets such as individuals and vehicles). 
Such multi-target resolution can involve complex deconvo- 
lution algorithms requiring non-trivial processing capability 
[21]. 
By contrast, today's sensor deployments fall into two cate- 
gories. Large, complex sensor systems are usually deployed 
very far away from the phenomena to be sensed, and em- 
ploy complex signal processing algorithms to separate tar- 
gets from environmental noise. Alternately, a carefully en- 
gineered network of sensors is deployed in the field, but in- 
dividual sensors do not possess computation capability, in- 
stead transmitt ing t ime series of the sensed phenomena to 
one or more nodes which perform the data reduction and 
filtering. 
Should future sensor networks resemble sensor deployments 
of old? In particular, should sensor nodes transmit time 
series of data to some central node which performs the tar- 
get resolution? One key consideration in sensor networks--  
energy efficiency--dictates otherwise. Because sensors are 
likely to be battery-powered, and because sensor networks 
will be expected to have lifetimes of several days (with possi- 
bly prolonged lulls in activity), conserving battery resources 
is a crucial requirement. This means that  short-range hop- 
by-hop communication is preferred over direct long-range 
communication to the destination. Coincidentally, such hop- 
by-hop communication also provides a form of communica- 
tion diversity in helping communicate around obstacles [21]. 
Energy efficiency also implies that it is infeasible to trans- 
mit time-series data across the network, even hop-by-hop. 
As [21] shows, performing local computation to reduce data 
before transmission can obtain orders of magnitude energy 
savings. 
These energy efficiency considerations, coupled with the likely 
availability of processing power and communication capa- 
bility in sensor nodes, argues for a different organization 
of a sensor network. In this organization, individual nodes 
reduce the sampled waveform generated by a target (e.g., 
a pedestrian or a vehicle) into a relatively coarse-grained 
"event" description. This description usually contains a 
"codebook v a l u e ' - - a n  event code--for the target, a times- 
tamp, a signal amplitude, and a degree of confidence in the 
estimate. Nodes can then exchange these event descriptions 
with their neighbors--who are also likely to have observed 
the ta rget - - to  refine the estimation, t ransmitt ing only a 
short description back to a human operator. 
Informally, with such an organization, a sensor network be- 
gins to look like a distributed computing system. What  com- 
munication primitives can be employed in such unat tended 
sensor networks? While it is not infeasible to design these 
sensor networks using IP and ad-hoc routing, the central 
thesis of this paper is that  a different set of communication 
primitives can lead to more efficient sensor data dissemina- 
tion. 
Consider a simple sensor network for remote surveillance of 
a region. In practice, such a network might consist of sev- 
eral hundreds or thousands of sensor nodes deployed within 
that region. In some cases, the sensor field may be deployed 
in a regular fashion (e.g. a 2-dimensional lattice, or a linear 
array) within that  region. More generally, however, commu- 
nication and networking protocols cannot assume structured 
sensor fields. 
A user of this remote surveillance network would be able to 
contact (using, perhaps a long-range radio link) one of the 
sensors in the field, and pose the following task: "Every I 
ms for the next T seconds, send me a location estimate of 
any four-legged animal in subregion R of the sensor field". 
In general, the network may support a variety of task types. 
However, sensor networks are task-specific--unlike general 
purpose communication networks, the task types are known 
at the time the sensor network is deployed 2. We leverage 
this important  observation in our design. 
Using hop-by-hop wireless communication and routing mech- 
anisms described in Section 3, this task is conVeyed to sensor 
nodes in the subregion R of the sensor field. Each node then 
2 
More accurately, sensor networks may be reprogrammable and the tasks they 
support may change slowly over time. 
57 
tasks its sensors to collect samples, and matches the sam- 
pled waveform against a locally-stored library. If the node 
detects a waveform typical of a four-legged animal, it gen- 
erates 1/ I  event descriptions a millisecond, each of which 
contains the following items: its own location, a codebook 
• value corresponding to the animal, the intensity of the sig- 
nal, and a degree of confidence in its estimation. Sensors 
within region R may coordinate to pick the best estimate. 
This estimate "packet" is then routed back towards the task 
originator. 
The focus of this paper is the design of dissemination mech- 
anisms for tasks and events. We describe this dissemination 
mechanism in the context of the sensor network described 
above, but  with support for multiple concurrent task ini- 
tiations of the type specified above. We later argue tha t  
our overall approach, directed diffusion, applies more gener- 
ally to other kinds of distributed sensor coordination. We 
face several challenges in designing these mechanisms. First, 
these mechanisms must scale to several thousands of sensor 
nodes in the sensor field. Second, sensor nodes may fail, 
may lose battery power, or may be temporarily unable to 
communicate due to environmental factors. The dissemina- 
tion mechanisms must be robust to such failures. Finally, 
wireless communication even over relatively short distances 
consumes significant energy. The dissemination mechanisms 
must minimize energy usage. 
3. DIRECTED DIFFUSION 
Directed diffusion consists of several elements. Data is named 
using attribute-value pairs. A sensing task (or a subtask 
thereof) is disseminated throughout the sensor network as 
an interest for named data. This dissemination sets up gra- 
dients within the network designed to "draw" events (i.e., 
data  matching the interest). Events start flowing towards 
the originators of interests along multiple paths. The sensor 
network reinforces one, or a small number of these paths. 
Figure 1 illustrates these elements. 
In this section, we describe these elements of diffusion with 
specific reference to a particular kind of sensor network--  
one that supports the task described in Section 2. Such a 
network performs location tracking. As we shall see, sev- 
eral design choices present themselves even in the context 
of this specific instantiation of diffusion. We elaborate on 
these design choices while describing the design of our sen- 
sor network. Our initial evaluation (Section 4) focuses only 
a subset of these design choices. 
3.1 Naming 
In directed diffusion, task descriptions are named by, for 
example, a list of attribute-value pairs that  describe a task. 
The animal tracking task described in Section 2 might be 
described as (this is a simplified description, see Section 3.2 
for more details): 
type = four-legged animal // detect animal location 
interval = 20 ms // send back events every 20 ms 
duration = I0 seconds II .. for the next 10 seconds 
rect = [-100, i00, 200, 400] // from sensors within rectangle 
For ease of exposition, we choose the subregion representa- 
tion to be a rectangle defined on some coordinate system; 
in practice, this might be based on GPS coordinates. 
Intuitively, the task description specifies an interest for data  
matching the attributes. For this reason, such a task de- 
scription is called an interest. The data sent in response 
to interests are also named using a similar naming scheme. 
Thus, for example, a sensor that  detects an animal might 
generate the following data (see Section 3.3 for an explana- 
tion of some of these attributes): 
t y p e  = f o u r - l e g g e d  animal  / /  
i n s t a n c e  = e l e p h a n t  / /  
location = [125, 220] // 
intensity = 0.6 // 
confidence = 0.85 // 
timestamp = 01:20:40 // 
t ype  of animal seen 
instance of this type 
node location 
signal amplitude measure 
confidence in the match 
event generation time 
Given a set of tasks supported by a sensor network, then, 
selecting a naming scheme is the first step in designing di- 
rected diffusion for the network. For our sensor network, we 
have chosen a simple attribute-value based interest and data  
naming scheme. In general, each at t r ibute has an associated 
value range. For example, the range of the type at tr ibute is 
the set of codebook values representing mobile objects (vehi- 
cles, animal, humans). The value of an at tr ibute can be any 
subset of its range. In our example, the value of the type 
at tr ibute in the interest is that  corresponding to four-legged 
animals. 
There are other choices for at tr ibute value ranges (e.g., hi- 
erarchical) and other naming schemes (such as intentional 
names [1]). To some extent, the choice of naming scheme 
can affect the expressivity of tasks, and may impact perfor- 
mance of a diffusion algorithm. In this paper, our goal is 
to gain an initial understanding of the diffusion paradigm. 
For this reason, we defer the exploration of possible naming 
schemes to future work. 
3.2 Interests and Gradients 
The named task description of Section 3.1 constitutes an 
interest. An interest is usually injected into the network at 
some (possibly arbitrary) node in the network. We use the 
term sink to denote this node. 
Given our choice of naming scheme, we now describe how 
interests are diffused through the sensor network. Suppose 
tha t  a task, with a specified type and r ec t ,  a d u r a t i o n  
of 10 minutes and an i n t e r v a l  of 10ms, is instantiated at 
a particular node in the network. The i n t e r v a l  parame- 
ter specifies an event data rate; thus, in our example, the 
specified data rate is 100 events per second. This sink node 
records the task; the task state is purged from the node after 
the time indicated by the d u r a t i o n  attribute. 
For each active task, the sink periodically broadcasts an in- 
terest message to each of its neighbors. This initial interest 
contains the specified r e c t  and d u r a t i o n  attributes, but 
contains a much larger i n t e r v a l  attribute. Intuitively, this 
initial interest may be thought of as exploratory; it tries 
to determine if there indeed are any sensor nodes that de- 
tect the four-legged animal. To do this, the initial interest 
specifies a low data rate (in our example, 1 event per sec- 
58 
.Eyg .n t . . .  ~ p . ~ . .  
:' source .~"  "" 
~. ":© s,.k 
(a) Interest propagation 
•. ey~..t., ~/~ 
(b) Initial gradients set up 
.- E~.t. @ 
/ 
,, souee Z @ 
@ U Sink 
® 
(c) Data delivery along re- 
inforced path 
Figure 1: A s impl i f i ed  s c h e m a t i c  for d i r e c t e d  di f fus ion.  
ond) a. In Section 3.4, we describe how the desired data rate 
is achieved by reinforcement. Then, the initial interest takes 
the following form: 
type = four-legged animal 
interval = is 
rect = [-i00, 200, 200, 400] 
timestamp = 01:20:40 
expiresAt = 01:30:40 
/ /  hh:n:sg 
Before we describe how interests are processed, we empha- 
size that the interest is periodically refreshed by the sink. 
To do this, the sink simply re-sends the same interest with 
a monotonically increasing timestamp attribute. This is nec- 
essary because interests are not reliably transmitted through- 
out the network. The refresh rate is a protocol design pa- 
rameter that trades off overhead for increased robustness to 
lost interests. 
Every node maintains an interest cache. Each item in the 
cache corresponds to a distinct interest. Two interests are 
distinct, in our example, if their type attr ibute differs, their 
i n t e r v a l  attribute differs, or their r e c t  attributes are (pos- 
sibly partially) disjoint. Interest entries in the cache do 
not contain information about the sink. Thus, interest state 
scales with the number of distinct active interests. Our def- 
inition of distinct interests also allows interest aggregation. 
Two interests 11 and /2, with identical types, completely 
overlapping r e c t  attributes, can, in some situations, be rep- 
resented with a single interest entry. 
An entry in the interest cache has several fields. A timestamp 
field indicates the timestamp of the last received matching 
interest. The interest entry also contains several g r a d i e n t  
fields, up to one per neighbor. Each gradient contains a data  
r a t e  field requested by the specified neighbor, derived from 
the i n t e r v a l  at tr ibute of the interest. It also contains a 
duration field, derived from the timestamp and exp i r e sh t  
attributes of the interest, and indicating the approximate 
lifetime of the interest. 
3 
T h i s  is  n o t  t h e  o n l y  c h o i c e ,  b u t  r e p r e s e n t s  a p e r f o r m a n c e  t r a d e o f f .  S i n c e  t h e  
l o c a t i o n  o f  t h e  s o u r c e s  is  n o t  p r e c i s e l y  k n o w n ,  i n t e r e s t s  m u s t  n e c e s s a r i l y  b e  d i f -  
f u s e d  o v e r  a b r o a d e r  s e c t i o n  o f  t h e  s e n s o r  n e t w o r k  t h a n  t h a t  c o v e r e d  b y  t h e  
p o t e n t i a l  8 o u r c e s .  A s  a r e s u l t ,  i f  t h e  s i n k  h a d  c h o s e n  a h i g h e r  i n i t i a l  d a t a  r a t e ,  a 
h i g h e r  e n e r g y  c o n s u m p t i o n  m i g h t  h a v e  r e s u l t e d  f r o m  t h e  w i d e r  d i s s e m i n a t i o n  o f  
s e n s o r  d a t a .  H o w e v e r ,  w i t h  a h i g h e r  i n i t i a l  d a t a  r a t e ,  t h e  t i m e  t o  a c h i e v e  h i g h  
f i d e l i t y  t r a c k i n g  is  r e d u c e d .  
When a node receives an interest, it checks to see if the in- 
terest exists in the cache. If no matching entry exists (where 
a match is determined by the definition of distinct interests 
specified above), the node creates an interest entry. The 
parameters of the interest entry are instantiated from the 
received interest. This entry has a single gradient towards 
the neighbor from which the interest was received, with the 
specified event data rate. In our example, a neighbor of the 
sink will set up an interest entry with a gradient of 1 event 
per second towards the sink. For this, it must be possible to 
distinguish individual neighbors. Any locally unique neigh- 
bor identifier may be used for this purpose. Examples of 
such identifiers include 802.11 MAC addresses [7], or Blue- 
tooth [10] cluster addresses. If there exists an interest entry, 
but  no gradient for the sender of the interest, the node adds 
a gradient with the specified value. It also updates the en- 
try's timestamp and d u r a t i o n  fields appropriately. Finally, 
if there exists both an entry and a gradient, the node simply 
updates the timestamp and d u r a t i o n  fields. 
In Section 3.3, we describe how gradients are used. When a 
gradient expires, it is removed from its interest entry. Not 
all gradients will expire at the same time. For example, if 
two different sinks express indistinct interests with different 
expiration times, some node in the network may have an in- 
terest entry with different gradient expiration times. When 
all gradients for an interest entry have expired, the interest 
entry itself is removed from a cache. 
After receiving an interest, a node may decide to re-send the 
interest to some subset of its neighbors. To its neighbors, 
this interest appears to originate from the sending node, al- 
though it might have come from a distant sink. This is 
an example of a local interaction. In this manner, interests 
diffuse throughout the network. Not all received interests 
are re-sent. A node may suppress a received interest if it 
recently re-sent a matching interest. 
Generally speaking, there are several possible choices for 
neighbors (Figure 3). The simplest alternative is to re- 
broadcast the interest to all neighbors. This is equivalent 
to flooding the interest throughout the network; in the ab- 
sence of information about which sensor nodes are likely to 
be able to satisfy the interest, this is the only choice. This 
is also the alternative that we simulate in Section 4. In our 
example sensor network, it may also be possible to perform 
59  
geographic routing, using some of the techniques described 
in the literature [14]. This can limit the topological scope 
for interest diffusion, thereby resulting in energy savings. 
Finally, in an immobile sensor network, a node might use 
cached data (see Section 3.3) to direct interests. For exam- 
ple, if in response to an earlier interest, a node heard from 
some neighbor A data sent by some sensor within the region 
specified by the r e c t  attribute, it can direct this interest to 
,4, rather than broadcasting to all neighbors. 
Figure 2(a) shows the gradients established in the case where 
interests are flooded through a sensor field. Unlike the sim- 
plified description in Figure l(b),  notice that  every pair of 
neighboring nodes establishes a gradient towards each other. 
This is a crucial consequence of local interactions. When a 
node receives an interest from its neighbor, it has no way of 
knowing whether that  interest was in response to one it sent 
out earlier, or is an identical interest from another sink on 
the "other side" of that  neighbor. Such two-way gradients 
can cause a node to receive one copy of low data rate events 
from each of its neighbors. However, as we show later, this 
technique can enable fast recovery from failed paths or re- 
inforcement of empirically better paths (Section 3.4), and 
does not incur persistent loops (Section 3.3). 
Note that  for our sensor network, a gradient specifies both 
a data rate and a direction in which to send events. More 
generally, a gradient specifies a value and a direction. The 
directed diffusion paradigm gives the designer the freedom 
to attach different semantics to gradient values. We have 
shown two examples of gradient usage. Figure 1 (c) implicitly 
depicts binary valued gradients. In our sensor networks, 
gradients have two values that  determine event reporting 
rate. In other sensor networks, gradient values might be 
used to, for example, probabilistically forward data along 
different paths, achieving some measure of load balancing 
(Figure 3). 
In summary, interest propagation sets up state in the net- 
work (or parts thereof) to facilitate "pulling down" data 
towards the sink. The interest propagation rules are local, 
and bear some resemblance to join propagation in some In- 
ternet multicast routing protocols [9]. One crucial difference 
is that  join propagation can leverage unicast routing tables 
to direct joins towards sources, whereas interest propagation 
cannot. 
In this section, we have described interest propagation rules 
for a particular type of task. More generally, a sensor net- 
work may support many different task types. Interest prop- 
agation rules may be different for different task types. For 
example, a task type of the form "Count the number of dis- 
t inct four-legged animals in rectangle R seen over the next T 
seconds" cannot leverage the event data rate as our example 
does. However, some elements of interest propagation are 
similar to both: the form of the cache entries, the interest 
re-distribution rules etc.. As part of our future research, we 
hope to cull these similarities into a diffusion substrate at 
each node, so that  sensor network designers can use a library 
of interest propagation techniques (or, for that  matter, rules 
discussed in the subsequent sections for data processing and 
reinforcement) for different task types. 
3.3 Data Propagation 
A sensor node that is within the specified r e c t  processes 
interests as described in the previous section. In addition, 
the node tasks its local sensors to begin collecting samples. 
In this paper, we do not discuss the details of target recog- 
nition algorithms. Briefly, these algorithms simply match 
sampled waveforms against a library of pre-sampled, stored 
waveforms. This is based on the observation that  a four- 
legged animal has a different acoustic or seismic footprint 
than, for example, a human being. The sampled waveform 
may match the stored waveform to varying extents; the al- 
gorithms usually associate a degree of confidence with the 
match. Furthermore, the intensity of the sampled waveform 
may roughly indicate distance of the signal origin, though 
perhaps not direction. 
A sensor node that  detects a target searches its interest 
cache for a matching interest entry. In this case, a matching 
entry is one whose r e c t  encompasses the sensor location, 
and the type of the entry matches the detected target type. 
When it finds one, it computes the highest requested event 
rate among all its outgoing gradients. The node tasks its 
sensor subsystem to generate event samples at this highest 
data rate. In our example, this data rate is initially 1 event 
per second (until reinforcement is applied, Section 3.4). The 
source then sends to each neighbor for whom it has a gradi- 
ent, an event description every second of the form: 
type = four-legged animal // type of animal seen 
instance = elephant /I instance of this type 
location = [125, 220] / /  node location 
intensity = 0.6 // signal amplitude measure 
confidence = 0.85 // confidence in the match 
timestamp = 01:20:40 // local time when event was generated 
This data message is, in effect 4, unicast individually to the 
relevant neighbors. 
A node that  receives a data message from its neighbors at- 
tempts to find a matching interest entry in its cache. The 
matching rule is as described in the previous paragraph. If 
no match exists, the data message is silently dropped. If 
a match exists, the node checks the data cache associated 
with the matching interest entry. This cache keeps track of 
recently seen data items. It has several potential uses, one 
of which is loop prevention. If a received data message has 
a matching data cache entry, the data message is silently 
dropped. Otherwise, the received message is added to the 
data cache and the data message is re-sent to the node's 
neighbors. 
By examining its data cache, a node can determine the data 
rate of received events s. To re-send a received data mes- 
sage, a node needs to examine the matching interest entry's 
gradient list. If all gradients have a data rate that  is greater 
than or equal to the rate of incoming events, the node may 
simply send the received data message to the appropriate 
neighbors. However, if some gradients have a lower data 
rate than others (caused by selectively reinforcing paths, 
4 
T h e  e x a c t  m e c h a n i s m  u s e d  ia a f u n c t i o n  of  t h e  r a d i o ' s  M A C  l a y e r  a n d  c a n  h a v e  
a s i g n i f i c a n t  i m p a c t  o n  p e r f o r m a n c e  ( S e c t i o n  4 . 4 ) .  
5 
I n  o u r  s i m u l a t i o n s  in  S e c t i o n  4,  a s  a s i m p l i f i c a t i o n ,  w e  i n c l u d e  t h e  d a t a  r a t e  in  
t h e  e v e n t  d e s c r i p t i o n s .  
60 
(a) Gradient estab- (b) Reinforcement (c) Multiple sources (d) Multiple sinks (e) Repair  
lishment 
Figure 2: I l lustrating different aspects  o f  diffusion. 
Section 3.4), then the node may downconvert to the appro- 
priate gradient. For example, consider a node that  has been 
receiving da ta  at 100 events per second, but  one of its gradi- 
ents (e.g., set up by a second sink originating an indistinct 
task with a larger i n t e r v a l )  is at 50 events per second. In 
this case, the node may only t ransmit  every al ternate event 
towards the corresponding neighbor. Alternately, it might 
interpolate two successive events in an application-specific 
way (in our example, it might choose the sample with the 
higher confidence match). 
Loop prevention and downconversion illustrate the power of 
embedding application semantics in all nodes (Figure 3). Al- 
though this design is not pert inent  to tradit ional  networks, 
it is feasible with application-specific sensor networks. In- 
deed, as we show in Section 4.4, it can significantly improve 
network performance. 
3.4 Reinforcement 
In the scheme we have described so far, the sink initially 
diffuses an interest for a low event-rate notification (1 event 
per second). Once sources detect a matching target,  they 
send low-rate events, possibly along multiple paths,  towards 
the sink. After the sink star ts  receiving these low da ta  
rate events, it reinforces one part icular  neighbor in order 
to "draw down" higher quality (higher da ta  rate) events. In 
general, this novel feature of directed diffusion is achieved by 
data driven local rules. One example of such a rule is to re- 
inforce any neighbor from which a node receives a previously 
unseen event. To reinforce this neighbor, the sink re-sends 
the original interest message but  with a smaller i n t e r v a l  
(higher da ta  rate): 
t y p e  = f o u r - l e g g e d  a n i m a l  
i n t e r v a l  = lOms  
r e c t =  [ - 1 0 0 ,  2 0 0 ,  2 0 0 ,  4 0 0 ]  
timestamp = 01:22:35 
expiresAt = 01:30:40 
When the neighboring node receives this interest, it no- 
tices that  it already has a gradient towards this neighbor. 
Furthermore, it notices tha t  the sender's interest specifies 
a higher da ta  rate than before. If this new da ta  rate is 
also higher than that  of any existing gradient (intuitively, if 
the "outflow" from this node has increased), the node must 
also reinforce at least one neighbor. How does it do this? 
The node uses its da t a  cache for this purpose. Again, the 
same local rule choices apply. For example, this node might 
choose that  neighbor from whom it first received the latest  
event matching the interest. Alternatively, it might choose 
all neighbors from which new events 6 were recently received 
(this is the alternative we evaluate in Section 4). Through 
this sequence of local interactions, a pa th  is established from 
source to sink transmission for high da ta  rate events. 
The local rule we described above, then, selects an empir- 
ically low delay path (Figure 2(b) shows the path  tha t  can 
result when the sink reinforces the path).  It is very reac- 
tive to changes in pa th  quality; whenever one path  deliv- 
ers an event faster than others, the sink a t tempts  to use 
this pa th  to draw down high quality data.  However, be- 
cause it is triggered by receiving one new event, this could 
be wasteful of resources. More sophisticated local rules are 
possible (Figure 3), including choosing tha t  neighbor from 
which the most events have been received, or tha t  neigh- 
bor which consistently sends events before other neighbors. 
These choices t rade off reactivity for increased stability; ex- 
ploring this tradeoff requires significant experimentation and 
is the subject  of future work. 
The algorithm described above can result in more than one 
pa th  being reinforced. For example, if the sink reinforces 
neighbor A,  but  then receives a new event from neighbor B,  
it will reinforce the pa th  through B 7. If the pa th  through B 
is consistently bet ter  (i. e., B sends events before A does), we 
need a mechanism to negatively reinforce the path  through 
A. 
One mechanism for negative reinforcement is to t ime out all 
high da ta  rate gradients in the network unless they are ex- 
plicitly reinforced. Wi th  this approach, the sink would peri- 
odically reinforce neighbor B, and cease reinforcing neighbor 
A. The path  through A would eventually degrade to the low 
data  rate. Another approach, and one tha t  we evaluate in 
this paper,  is to explicitly degrade the path  through A by 
re-sending the interest with the lower da ta  rate. When A re- 
ceives this interest, it degrades its gradient towards the sink. 
Furthermore, if all its gradients are now low da ta  rate, A 
6 
T h e  s t a t e m e n t  " r e in fo rce  a n e i g h b o r  f r o m  w h i c h  n e w  e v e n t s  a r e  r ece ived"  i m -  
p l ies  t h a t  we r e in fo rce  t h a t  n e i g h b o r  o n l y  if i t  is s e n d i n g  l o w  d a t a  r a t e  e v e n t s .  
O b v i o u s l y ,  we do n o t  n e e d  to  r e i n f o r c e  n e i g h b o r s  t h a t  a r e  a l r e a d y  s e n d i n g  t r a f f i c  
a t  t h e  h i g h e r  d a t a  r a t e .  
7 
T h i s  p a t h  m a y  or  m a y  n o t  b e  c o m p l e t e l y  d i s j o i n t  f r o m  t h e  p a t h  t h r o u g h  n e i g h -  
b o r  A.  
61 
Diffusion element Design Choices 
• Flooding 
Interest Propagation * Constrained or directional flooding based on location 
• Directional propagation based on previously cached data 
• Reinforcement to single path delivery 
Data Propagation • Multipath delivery with selective quality along different paths 
• Multipath delivery with probabilistic forwarding 
• For robust data delivery in the face of node failure 
Data caching and aggregation • For coordinated sensing and data reduction 
• For directing interests 
• Rules for deciding when to reinforce 
Reinforcement • Rules for how many neighbors to reinforce 
• Negative reinforcement mechanisms and rules 
F i g u r e  3: D e s i g n  Space  for Di f fus ion  
negatively reinforces those neighbors that  have been send- 
ing data to it at a high data rate. This sequence of local 
interactions ensures that  the path through A is degraded 
rapidly, but at the cost of increased resource utilization. 
To complete our description of negative reinforcement, we 
need to specify what local rule a node uses in order to de- 
cide whether to negatively reinforce a neighbor or not. Note 
that this rule is orthogonal to the choice of mechanism for 
negative reinforcement. One plausible choice for such a rule 
is to negatively reinforce that  neighbor from which no new 
events have been received (i.e., other neighbors have consis- 
tently sent events before this neighbor) within a window of 
N events or time T. The local rule we evaluate in Section 4 
is based on a time window of T, chosen to be 2 seconds in 
our simulations. Such a rule is a bit conservative and en- 
ergy inefficient. For example, even if one event in ten was 
received first from neighbor A, the sink will not negatively 
:reinforce that  neighbor. Other variants include negatively 
reinforcing that  neighbor from which fewer new events have 
been received. Significant experimentation is required be- 
fore deciding which local rule achieves an energy efficient 
global behavior. 
In describing reinforcement so far, we may have appeared 
to implicitly describe a single-source scenario. In fact, the 
rules we have described work with multiple sources. To see 
this, consider Figure 2(c). Assume initially that all initial 
gradients are low data rate. According to this topology, data 
from both sources reaches the sink via both of its neighbors 
C and D. If one of the neighbors, say C has consistently 
lower delay, our rules will only reinforce the path through 
C (this is depicted in the figure). However, if the sink hears 
B's  events earlier via D, but  A's  events s earlier via C, the 
sink will a t tempt to draw down high quality data streams 
from both neighbors (not shown). In this case, the sink gets 
both sources' data from both neighbors, a potential source 
of energy inefficiency. Reinforcement rules that  avoid this is 
the subject of future work. 
Similarly, if two sinks express identical interests, our interest 
propagation, gradient establishment and reinforcement rules 
work correctly. Without  loss of generality, assume that  sink 
Y in Figure 2(d) has already reinforced a high quality path 
S N o t e  t h a t  in  d i r e c t e d  d i f f u s i o n ,  t h e  8 ink  w o u l d  n o t  b e  a b l e  t o  a ~ s o c i a t e  a s o u r c e  
w i t h  a n  e v e n t .  T h u s ,  t h e  p h r a s e  " A ' s  e v e n t s "  is  s o m e w h a t  m i s l e a d i n g .  W h a t  w e  
r e a l l y  m e a n  is  t h a t  d a t a  g e n e r a t e d  b y  A t h a t  iv d i s t i n g u i s h a b l e  in  c o n t e n t  f r o m  
d a t a  g e n e r a t e d  b y  B .  
to the source. Note however, that other nodes continue to 
receive low data rate events. When a human operator tasks 
the network at sink X with an identical interest, X can 
use the reinforcement rules to achieve the path shown. To 
determine the empirically best path, X need not wait for 
data--rather ,  it can use its data cache to immediately draw 
down high quality data towards itself. 
So far, we have described situations in which reinforcement 
is triggered by a sink. However, in directed diffusion, inter- 
mediate nodes on a previously reinforced path can apply the 
reinforcement rules. This is useful to enable local repair of 
failed or degraded paths. Causes for failure or degradation 
include node energy depletion, and environmental factors af- 
fecting communication (e.g., obstacles, rain fade). Consider 
Figure 2(e), in which the quality of the link between the 
source and node C degrades and events are frequently cor- 
rupted. When C detects this degradation--either by notic- 
ing that the event reporting rate from its upstream neigh- 
bor (the source) is now lower, or by realizing that  other 
neighbors have been transmitt ing previously unseen loca- 
tion est imates-- i t  can apply the reinforcement rules to dis- 
cover the path shown in the figure. Eventually, C negatively 
reinforces the direct link to the source (not shown in the fig- 
ure). Our description so far has glossed over the fact that  a 
straightforward application of reinforcement rules will cause 
all nodes downstream of the lossy link to also initiate re- 
inforcement procedures. This will eventually lead to the 
discovery of one empirically good path, but  may result in 
wasted resources. One way to avoid this is for C to inter- 
polate location estimates from the events that  it receives so 
that  downstream nodes still perceive high quality tracking. 
We are currently investigating other approaches. 
3.5 Discussion 
In introducing the various elements of directed diffusion, we 
also implicitly described a particular usage--interests set 
up gradients drawing down data. The directed diffusion 
paradigm itself does not limit the designer to this particular 
usage. Other usages are also possible, such as the one in 
which nodes may propagate data in the absence of interests, 
implicitly setting up gradients when doing so. This is useful, 
for example, to spontaneously propagate an important  event 
to some section of the sensor field. A sensor node can use 
this to warn other sensor nodes of impending activity. 
Our description points out several key features of diffusion, 
62 
and how it differs from traditional networking. First, diffu- 
sion is data-centric; all communication in a diffusion-based 
sensor network uses interests to specify named data. All 
communication in diffusion is neighbor-to-neighbor, unlike 
the end-to-end communication in traditional data networks. 
In other words, every node is an "end" in a sensor net- 
work. Second, there are no "routers" in a sensor network. 
Each sensor node can interpret data and interest messages. 
This design choice is justified by the task-specificity of sen- 
sor networks. Sensor networks are not general-purpose com- 
munication networks. Third, sensor nodes do not need to 
have globally unique identifiers or globally unique addresses. 
Nodes, however, do need to distinguish between neighbors. 
Finally, in an IP-based sensor network, for example, sensor 
data collection and processing might be performed by a col- 
lection of specialized servers which may, in general, be far 
removed from the sensed phenomena. In our sensor network, 
because every node can cache, aggregate, and more gener- 
ally, process messages, it is possible to perform coordinated 
sensing close to the sensed phenomena. 
Diffusion is clearly related to traditional network data rout- 
ing algorithms. In some sense, it is a reactive routing tech- 
nique, since "routes" are established on demand. However, 
it differs from other ad-hoc reactive routing techniques in 
several ways. First, no at tempt is made to find one loop- 
free path between source and sink before data transmission 
commences. Instead, constrained or directional flooding is 
used to set up a multiplicity of paths, and data messages 
are initially sent redundantly along these paths. Second, 
soon thereafter, reinforcement attempts to reduce this mul- 
tiplicity of paths to a small number, based on empirically 
observed path performance. Finally, a message cache is used 
to perform loop avoidance. The interest and gradient setup 
mechanisms themselves do not guarantee loop-free paths be- 
tween source and sink. 
Why this peculiar choice of design? At the outset of this 
research, we consciously chose to explore path setup al- 
gorithms that establish network paths using strictly local 
(neighbor-to-neighbor) communication. The intuition be- 
hind this choice is the observation that physical systems 
(e.g., ant colonies [5]) that build up transmission paths us- 
ing such communication scale well and are extraordinarily 
robust. However, using strictly local communication im- 
plies that path setup cannot use global topology metrics; 
local communication implies that, as far as a node knows, 
the data that it received from a neighbor came from that 
neighbor 9. This can be energy efficient in highly dynamic 
networks when changes in topology need not be propagated 
across the network. Of course, the resulting communication 
paths may be sub-optimal. However, the energy inefficiency 
due to path sub-optimality can be countered by carefully 
designed in-network aggregation techniques. Overall, we be- 
lieve that this approach trades off some energy efficiency for 
increased robustness and scale. 
Finally, it might appear that the particular instantiation 
that we chose, location tracking, has limited applicability. 
We believe, however, that such location tracking captures 
many of the essential features of a large class of remote 
9 
T h e  l o c a t i o n  i n f o r m a t i o n  in a d a t a  m e s s a g e  m i g h t  r e v e a l  o t h e r w i s e ,  h u t  t h a t  
information still doesn't contain topology metrics. 
surveillance sensor networks. We emphasize that, even though 
we have discussed our tracking network in some detail, much 
experimentation and evaluation of the various mechanisms is 
necessary before we fully understand the robustness, scale 
and performance implications of diffusion in general, and 
some of our mechanisms in particular. The next section 
takes an initial step in this direction. 
4. EVALUATING DIRECTED DIFFUSION 
In this section, we report on some results from a prelimi- 
nary performance evaluation of our location tracking sen- 
sor network. We use packet-level simulation to explore, in 
some detail, the implications of some of our design choices. 
This section describes our methodology, compares the per- 
formance of diffusion against some idealized schemes, then 
explores impact of network dynamics on simulation. 
4.1 Goals, Metrics, and Methodology 
We implemented our animal tracking instance of directed 
diffusion in the ns-2 [2] simulator. Our goals in conducting 
this evaluation study were four-fold: First, place the per- 
formance of diffusion in the context of idealized schemes, 
such as flooding and omniscient multicast (described be- 
low). This serves as a sanity check for the intuition be- 
hind directed diffusion. Second, understand the impact of 
dynamics--such as node fa i lu res -~n  diffusion. Third, ex- 
plore the influence of the radio MAC layer on diffusion per- 
formance. Finally, study the sensitivity of directed diffusion 
performance to the choice of parameters. 
We choose two metrics to analyze the performance of di- 
rected diffusion and to compare it to other schemes: Av-  
e rage  d i s s ipa t ed  e n e r g y  measures the ratio of total dis- 
sipated energy per node in the network to the number of 
distinct events seen by sinks. This metric computes the 
average work done by a node in delivering useful tracking 
information to the sinks. The metric also indicates the over- 
all lifetime of sensor nodes. A v e r a g e  de lay  measures the 
average one-way latency observed between transmitt ing an 
event and receiving it at each sink. This metric defines the 
temporal accuracy of the location estimates delivered by the 
sensor network. We study these metrics as a function of sen- 
sor network size. 
In all our experiments, we operate the sensor network in a 
regime far from overload. Thus, our sensor nodes do not 
experience congestion. We do this to simplify our under- 
standing of the results. Exploring the behavior of diffu- 
sion under congestion is the subject of future research. In 
passing, we note that there exist plausible approaches (such 
as in-network data rate downconversion or aggressive data 
quality reduction through aggregation) for dealing with con- 
gestion in diffusion-based sensor networks. 
Despite this focus on uncongested operating regimes, di- 
rected diffusion can incur event losses, particularly under 
dynamics. In these situations, another metric for the per- 
formance of diffusion, is the event delivery ratio. This is the 
ratio of the number of distinct events received to the number 
originally sent. A similar metric was used in earlier work to 
compare ad-hoc routing schemes [4]. 
To completely specify our experimental methodology, we 
63 
need to describe the sensor network generation procedure~ 
our choice of radio parameters, and our workload. The fol- 
:[owing paragraphs do this. 
:In order to study the performance of diffusion as a func- 
tion of network size, we generate a variety of sensor fields 
of different sizes. In each of our experiments, we study five 
different sensor fields, ranging from 50 to 250 nodes in in- 
crements of 50 nodes. Our 50 node sensor field generated 
by randomly placing the nodes in a 160m by 160m square. 
Each node has a radio range of 40m. Other sizes are gen- 
erated by scaling the square and keeping the radio range 
constant in order to approximately keep the average density 
of sensor nodes constant. For each network size, our results 
are averaged over three different generated fields. 
The ns-P simulator implements a 1.6 Mbps 802.11 MAC 
layer. Our simulations use this MAC layer. This is not a 
completely satisfactory choice of MAC layer, since there are 
compelling energy efficiency reasons for selecting a TDMA- 
style MAC for sensor networks rather than one based on 
channel acquisition using RTS/CTS [21]. Briefly, these rea- 
sons have to do with energy consumed by the radio during 
idle intervals; with a TDMA-style MAC, it is possible to 
put the radio in standby mode during such intervals. By 
contrast, an 802.11 radio consumes as much power when it 
is idle as when it receives transmissions. To more closely 
mimic realistic sensor network radios [13], we altered the 
ns-2 radio energy model such that the idle time power dissi- 
pation was about 35mW, or nearly 10% of its receive power 
dissipation (395mW), and about 5% of its transmit  power 
dissipation (660mW). In Section 4.4, we analyze the impact 
of a MAC energy model in which listening for transmissions 
dissipates as much energy as receiving them. 
Finally, in most of our simulations, we use a fixed workload 
which consists of five sources and five sinks. All sources 
are randomly selected from nodes in a 70m by 70m square 
within the sensor field. Sinks are uniformly scattered across 
the sensor field. Each source generates two events per sec- 
ond. The low data rate for directed diffusion was chosen 
to be one event in 50 seconds. Events were modeled as 64 
byte packets, interests as 36 byte packets. Interests were 
periodically generated every 5 seconds, and the interest du- 
ration was 15 seconds. We chose the window for negative 
reinforcement to be 2 seconds. 
4.2 Comparative Evaluation 
Our first experiment compares diffusion to two idealized 
schemes for data dissemination in networks. In the f lood- 
ing  scheme, sources flood all events to every node in the 
network. Flooding is a watermark for directed diffusion; 
if the latter is not significantly more energy efficient than 
flooding, it cannot be considered viable for sensor networks. 
In the o m n i s c i e n t  m u l t i c a s t  scheme, each source trans- 
mits its events along a shortest-path multicast tree to all 
sinks. We do not simulate the tree construction protocols. 
Rather, we centrally compute the distribution trees and do 
not assign energy costs to this computation. Omniscient 
multicast approximately indicates the performance achiev- 
able in an IP-based sensor network. We use this scheme 
to give the reader some intuition for how our mechanism 
choices impact performance. 
Figure 4(a) shows the average dissipated energy per packet 
as a function of network size. Omniscient multicast dissi- 
pates a little less than a half as much energy perpacke t  
per node than flooding. It achieves such energy efficiency 
by delivering events along a single path from each source 
to every sink. Directed diffusion has noticeably better en- 
ergy efficiency than omniscient multicast. For some sensor 
fields, its dissipated energy is only 60% that of omniscient 
multicast. As with omniscient multicast, it also achieves 
significant energy savings by reducing the number of paths 
over which redundant  data is delivered. In addition, diffu- 
sion benefits significantly from in-network aggregation. In 
our experiments, the sources deliver identical location esti- 
mates, and intermediate nodes suppress duplicate location 
estimates. This corresponds to the situation where there is, 
for example, a single four-legged animal within the specified 
sub-region. 
Why then, given that  there are five sources, is diffusion not 
nearly five times more energy efficient than omniscient mul- 
ticast? First, both schemes expend comparable--and non- 
negligible---energy listening for transmissions. Second, our 
choice of reinforcement and negative reinforcement results 
in directed diffusion frequently drawing down high quality 
data along multiple paths, thereby expending additional en- 
ergy. Specifically, our reinforcement rule that reinforces a 
neighbor who sends a new (i.e., previously unseen) event 
is very aggressive. Conversely, our negative reinforcement 
rule, which negatively reinforces neighbors who only consis- 
tently send duplicate (i.e., previously seen) events, is very 
conservative. 
Figure 4(b) plots the average delay observed as a function 
of network size. Directed diffusion has a delay comparable 
to omniscient multicast. This is encouraging. To a first ap- 
proximation, in an uncongested sensor network and in the 
absence of obstructions, the shortest path is also the lowest 
delay path. Thus, our reinforcement rules seem to be find- 
ing the low delay paths. However, the delay experienced by 
flooding is almost an order of magnitude higher than other 
schemes. This is an artifact of the MAC layer: to avoid 
broadcast collisions, a randomly chosen delay is imposed on 
all MAC broadcasts. Flooding uses MAC broadcasts exclu- 
sively. Diffusion only uses such broadcasts to propagate the 
initial interests. On a sensor radio that  employs a TDMA 
MAC-layer, we might expect flooding to exhibit a delay com- 
parable to the other schemes. 
4.3 Impact of Dynamics 
To study the impact of dynamics on directed diffusion, we 
simulated node failures as follows. For each sensor field, 
repeatedly turned off a fixed fraction of nodes for 30 sec- 
onds. These nodes were uniformly chosen from the sensor 
field, with the additional constraint that  an equal fraction 
of nodes on the sources to sinks shortest path trees was 
also turned off for the same duration. The intent was to 
create node failures in the paths diffusion is most likely to 
use, and to create random failures elsewhere in the network. 
Furthermore, unlike the previous experiment, each source 
sends different location estimates (corresponding to the sit- 
uation in which each source "sees" different animals). We 
did this because the impact of dynamics is less evident when 
diffusion suppresses identical location estimates from other 
64 
o o , i  
oo,e  
! oo14 
[°~ 
]°- 
(a) Average dissipated energy 
| "  
0~ 
o ~  
J 
(b) Average delay 
F i g u r e  4: D i r e c t e d  d i f fus ion  c o m p a r e d  t o  f l o o d i n g  and  o m n i s c i e n t  m u l t i c a s t .  
o ~  
~ o ~  
t: 
! ~°- 
(a) Average dissipated energy 
oT 
o6  
a s  
o l  
o 
(b) Average delay 
o*  
o *  
oT 
o e  
| 
03 
OZ 
O ,  
0 
w ,a *m  *m  
(c) Event Delivery Ratio 
F i g u r e  5: I m p a c t  o f  n o d e  fa i lures  o n  d i r e c t e d  di f fus ion.  
sources. We could also have studied the impact of dynamics 
on other protocols, but,  because omniscient multicast  is an 
idealized scheme tha t  doesn' t  factor in the cost of route re- 
computation,  it is not entirely clear tha t  such a comparison 
is meaningful. 
Our dynamics experiment imposes fairly adverse conditions 
for a da ta  dissemination protocol. At any instant,  10 or 
20 percent of the nodes in the network are unusable. Fur- 
thermore, we do not permit  any "settling time" between 
node failures. Even so, diffusion is able to maintain reason- 
able, if not stellar, event delivery (Figure 5(c)) while incur- 
ring less than 20% additional average delay (Figure 5(b)). 
Moreover, the average dissipated energy actually improves, 
in some cases, in the presence of node failures. This is a 
bit counter-intuitive, since one would expect tha t  directed 
diffusion would expend energy to find alternative paths. As 
it turns out, however, our negative reinforcement rules axe 
conservative enough that  several high-quality paths are kept 
alive in normal operation. Thus, at the levels of dynam- 
ics we simulate, diffusion doesn' t  need to do extra  work. 
The lower energy dissipation results from the failure of some 
high-quality paths. 
We take these results to indicate that  the mechanisms in 
diffusion are relatively stable at the levels of dynamics we 
have explored. By this we mean tha t  diffusion does not, 
under dynamics, incur remarkably higher energy dissipation 
or event delivery delays. 
4.4 Impact of Various Factors 
To explain what contributes to directed diffusion's energy 
efficiency, we now describe two separate experiments.  In 
both of these experiments, we do not simulate node failures. 
First,  we compute the energy efficiency of diffusion with and 
without aggregation. Recall from Section 4.2 tha t  in our 
simulations, we implement a simple aggregation strategy, 
in which a node suppresses identical da ta  sent by different 
sources. As Figure 6(b) shows, diffusion expends nearly 5 
times as much energy, in smaller sensor fields, as when it 
can suppress duplicates. In larger sensor fields, the ratio 
is 3. Our conservative negative reinforcement rule accounts 
for the difference in the performance of diffusion without 
suppression as a function of network size. Wi th  the same 
number of sources and sinks, the larger network has longer 
al ternate paths. These al ternate paths  axe t runcated by neg- 
ative reinforcement because they consistently deliver events 
with higher latency. As a result, the larger network expends 
less energy without suppression. We believe tha t  suppres- 
sion also exhibits the same behavior, but  the energy differ- 
ence is relatively small. 
The second mechanism whose benefits we quantify is neg- 
ative reinforcement. This mechanism prunes off higher la- 
65 
tency paths, and can contribute significantly to energy sav- 
ings. In this experiment, we selectively turn off negative re- 
inforcement and compare the performance of directed diffu- 
sion with and without reinforcement. Intuitively, one would 
expect negative reinforcement to contribute significantly to 
energy savings. Indeed, as Figure 6(a) shows, diffusion with- 
out negative reinforcement expends nearly twice as much 
energy as when negative reinforcement is employed. This 
suggests that  even our conservative negative reinforcement 
rules prune off paths which deliver consistently higher la- 
tency. 
In the absence of negative reinforcement or suppression, dif- 
fusion's delay increases by factors of three to eight (the 
graphs are not included for lack of space). This is an ar- 
tifact of the 802.11 MAC layer. In diffusion, da ta  traffic is 
t ransmit ted  using MAC unicast. As more paths are used 
(in the absence of negative reinforcement), or more copies 
of da ta  axe sent (without suppression), MAC-layer channel 
contention increases, resulting in backoffs and subsequent 
delays. 
Finally, we evaluate the sensitivity of our comparisons (Sec- 
tion 4.2) to our choice of energy model. Sensitivity of diffu- 
sion to other factors (numbers of sinks, size of source region) 
is discussed in greater detail  in [11]. 
In our comparisons, we selected radio power dissipation pa- 
rameters to more closely mimic realistic sensor radios [13]. 
We re-ran the comparisons of Section 4.2, but  with power 
dissipation comparable to the AT~zT Wavelan: 1.6W trans- 
mission, 1.2W reception and 1.15W idle. In this case, as 
Figure 6(c) shows, the distinction between the schemes dis- 
appears. In this regime, we are bet ter  off flooding all events. 
This is because idle t ime energy utilization completely dom- 
inates the performance of all schemes. This is the reason 
why sensor radios t ry  very hard to minimize listening for 
transmissions. 
5. RELATED WORK 
To our knowledge, dis t r ibuted sensor networks have not been 
extensively studied in the networking literature. However, 
our work has been informed and influenced by a variety of 
other research efforts, which we now describe. 
Distr ibuted sensor networks are a specific instance of ubiq- 
uitous computing as envisioned by Weiser [24]. Early ubiq- 
uitous computing efforts, however, did not approach the is- 
sues of scalable node coordination, focusing more on issues 
in the design and packaging of small, wireless devices. More 
recent efforts, such as WINS [22] and Piconet [3] have be- 
gun to consider networking and communication issues for 
small wireless devices. The WINS project has made signifi- 
cant progress in identifying feasible radio designs for low- 
power environmental sensing. Their project has focused 
also on low-level network synchronization necessary for net- 
work self-assembly. Our directed diffusion primitives pro- 
vide inter-node communication once network self-assembly 
is complete. Although the Piconet project  is more focused 
on enabling home and office information discovery, their ap- 
plication designs have some similarity to the da ta  caching 
and aggregation tha t  diffusion employs. 
In addition, recent work has pointed out some of the advan- 
tages of diffusion-like application-specificity in the context of 
sensor networks [15]. Specifically, this work showed how em- 
bedding application semantics in flooding can help achieve 
energy-efficiency. Directed diffusion explores some of these 
same ideas in the context of more sophisticated dis t r ibuted 
sensing algorithms. 
Some of the inspiration for directed diffusion comes from 
biological metaphors,  such as reaction-diffusion models for 
morphogenesis [23], and models of ant colony behavior [5]. 
Directed diffusion borrows heavily from the l i terature on ad- 
hoc unicast routing. Specifically, it is a close kin of the class 
of several reactive routing protocols proposed in the litera- 
ture [12, 20, 19]. Of these, it is possibly closest to [19] in 
its a t tempt  to localize repair of node failures, and its deem- 
phasis of optimal routes. The differences between ad-hoc 
routing and directed diffusion have already been discussed 
in Section 3.5. 
Many of the techniques developed for improving ad hoc rout- 
ing performance can be directly applied to directed diffusion. 
In this class, we include techniques tha t  reduce the impact  of 
broadcast  storms [17], techniques that  localize route queries 
based on geographical information [14] or based on route 
history [6]. Directed diffusion has the addit ional degree of 
freedom in being able to use application semantics to achieve 
further efficiency 
Directed diffusion is influenced by the design of mult icast  
routing protocols. In particular,  propagation of reinforce- 
ments and negative reinforcements are similar to joins and 
prunes in shared-tree construction [9]. The initial interest 
dissemination and gradient setup is similar to data-driven 
shortest-path tree setup [8]. The difference, of course, is tha t  
where Internet protocols rely on underlying unicast routing 
to aid tree setup, diffusion cannot. Diffusion can, however, 
do in-network processing of da ta  (caching and aggregation) 
unlike existing multicast  routing schemes. 
The in-network processing feature of directed diffusion bears 
some resemblance to router assist for localized error recov- 
ery in reliable multicast  [16, 18]. These schemes allow min- 
imal router functionality tha t  allows specialized forwarding 
modes for certain kinds of data. Directed diffusion carries 
this idea further, leveraging the task specificity of sensor 
networks to embed application knowledge in network nodes. 
Finally, interest dissemination, da ta  propagation and caching 
in directed diffusion are all similar to some of the ideas used 
in adaptive Web caching [25]. In these schemes, caches self- 
organize themselves into a hierarchy of cooperative caches 
through which requests for pages are effectively diffused. 
6. CONCLUSIONS AND FUTURE WORK 
In this paper,  we described the directed diffusion paradigm 
for designing dis t r ibuted sensing algorithms. There are sev- 
eral lessons we can draw from our preliminary evaluation of 
diffusion. First ,  directed diffusion has the potential  for sig- 
nificartt energy efficiency. Even with relatively unoptimized 
pa th  selection, it outperforms an idealized tradi t ional  da t a  
dissemination scheme like omniscient multicast.  Second, dif- 
66 
o,4. 0o~ 
_ o ~  
0 ~ s  
iil 
va~  s~ 
(a) Negative reinforcement 
z 
t ~°~ 
~°~ 
(b) Duplicate suppression (c) High idle radio power 
F i g u r e  6: I m p a c t  o f  var ious  factors  o n  d i r e c t e d  di f fus ion.  
fusion mechanisms are stable under the ranges of network 
dynamics considered in this paper. Finally, for directed dif- 
fusion to achieve its full potential, however, careful attention 
has to be paid to the design of sensor radio MAC layers. 
Directed diffusion has some novel features--data-centric dis- 
semination, reinforcement-based adaptation to the empiri- 
cally best path, and in-network data aggregation and caching. 
To our knowledge, no previous networking work has de- 
signed and evaluated a data distribution mechanism incor- 
porating these features. There is a good reason for th i s - -  
these features may not be justifiable in the context of tra- 
ditional networks. However, as we show here, these features 
can enable highly energy-efficient and robust dissemination 
in dynamic sensor networks, while at the same time mini- 
mizing the per-node configuration that is characteristic of 
today's networks. 
As we have emphasized before, this work represents an ini- 
tim foray into the design of diffusion mechanisms. Our 
remote surveillance network represents a non-trivial explo- 
ration of this design space. Even for this network, we have 
not explored the entire space of alternative designs. To draw 
a simple analogy, we are with sensor networks where we were 
with the Internet about 3 decades ago. 
Acknowledgements 
The authors would like to thank members of the SCADDS 
and SCOWR groups at USC and ISI, and John Heidemann, 
in particular, for their contributions to this work. 
7. REFERENCES 
[1] W i l l i a m  A d j i e - W i n o t o ,  E l l i o t  S c h w a r t z ,  PIari  B a l a k r i s h n a n ,  a n d  J e r e m y  
Li l ley.  T h e  D e s i g n  a n d  I m p l e m e n t a t i o n  of  an  I n t e n t i o n a l  N a m i n g  S y s t e m .  
I n  Proceedings of the ACM Symposium on Ope~latlng Systems Principles, p a g e s  
1 8 6 - 2 0 1 ,  C h a r l e s t o n ,  SC ,  1999. 
[2] S a n d e e p  B a j a j ,  Lee B r e s l a u ,  D e b o r a h  E s t r l n ,  K e v l n  Fa l l ,  Sa l ly  F l o y d ,  
P a d m a  H a l d a r ,  M a r k  H a n d l e y ,  A h m e d  H e l m y ,  J o h n  H e i d e m a n n ,  P o l l y  
H u a n g ,  S a t i s h  K u m a r ,  S t e v e n  i c C a n n e ,  R e z a  R e j a i e ,  P u n e e t  S h a r m a ,  
K a n n a n  V a r a d h a n ,  Ya X u ,  H a o b o  Yu,  a n d  D a n i e l  Z a p p a l a .  I m p r o v i n g  
s i m u l a t i o n  for  n e t w o r k  r e sea rch .  T e c h n i c a l  H e p o r t  9 9 - 7 0 2 b ,  U n i v e r s i t y  of  
S o u t h e r n  C a l i f o r n i a ,  M a r c h  1999. rev i sed  S e p t e m b e r  1999,  t o  a p p e a r  in  
IEEE C o m p u t e r .  
[2] F .  B e n n e t t ,  D. C l a r k e ,  J .  E v a n s ,  A. H o p p e r ,  A. J o n e s ,  a n d  D. Leask .  
P l c o n e t :  E m b e d d e d  Mob i l e  N e t w o r k i n g .  IBEE Personal CoTnTnunicationa, 4 ( 5 ) ,  
O c t o b e r  1997. 
[4] J .  B r o t h ,  D. A. M a l t z ,  D. B. J o h n s o n ,  Y . -C .  H u ,  a n d  J .  J e t c h e v a .  A 
P e r f o r m a n c e  C o m p a r i s o n  of  M u l t i - H o p  W i r e l e s s  A d - H o c  N e t w o r k  R o u t i n g  
P r o t o c o l s .  I n  P*'oceedings of the Fout'~h Annual A C M / I E E E  International 
Conference on Mobile Computing and Networking (Mobieom'98), D a l l a s ,  T X ,  1998. 
[5] G i a n n i  Di  C a r o  a n d  M a r c o  D o r i g o .  A n t N e t :  A M o b i l e  A g e n t s  A p p r o a c h  to  
A d a p t i v e  R o u t i n g .  T e c h n i c a l  R e p o r t  97-12 ,  I R I D I A ,  U n l v e r s i t e '  L i b r e  de  
B r u x e I l e s ,  1997. 
[6] R o b e r t  C a s t a n e d a  a n d  S a m i r  R.  Dan.  Q u e r y  L o c a l i z a t i o n  T e c h n i q u e s  fo r  
O n - d e m a n d  R o u t i n g  P r o t o c o l s  in  A d  Hoe  N e t w o r k s .  I n  Proceedings of the 
Fifth Annual A C M / I E E E  InteTmational Conference on Mobile Computing and 
Networking (MobiCom'99), S e a t t l e ,  WA,  1999. 
[7] I E E E  C o m p u t e r  S o c i e t y  L A N  M A N  S t a n d a r d s  C o m m i t t e e .  W i r e l e s s  L A N  
M e d i u m  Access  C o n t r o l  ( M A C )  a n d  P h y s i c a l  L a y e r  ( P H Y )  S p e c i f i c a t i o n s .  
T e c h n i c a l  R e p o r t  802 .11 -1997 ,  I n s t i t u t e  o f  E l e c t r i c a l  a n d  E l e c t r o n i c s  
E n g i n e e r s ,  N e w  York ,  NY,  1997. 
[8] S. D e e r i n g .  M u l t l c a s t  R o u t i n g  in  I n t e r n e t w o r k s  a n d  E x t e n d e d  L A N s .  In  
proceedings of the A C M  SIGCOMM, pages  5 5 - 6 4 ,  A u g u s t  1988. 
[9] S. E .  D e e r i n g ,  D.  E s t r i n ,  D.  F a r l n a c e i ,  V. J a c o b s o n ,  C. L i u ,  a n d  L. Wei .  
T h e  P I M  A r c h i t e c t u r e  for  W i d e - A r e a  M u l t i c a s t  R o u t i n g .  IEEE Transactions 
on Networking, 4 ( 2 ) ,  A p r i l  1996. 
[10] T h e  B l u e t o o t h  Spec ia l  I n t e r e s t  G r o u p .  B l u e t o o t h  v l . O B  S p e c i f i c a t i o n .  
h t t p : / / w w w . b l u e t o o t h . c o m ,  1999. 
[11] C h ~ l e r m e k  I n t a n a g o n w i w a t ,  R a m e s h  G o v i n d a n ,  a n d  D e b o r a h  E s t r i n .  
D i r e c t e d  d i f fu s ion :  A s c a l a b l e  a n d  r o b u s t  c o m m u n i c a t i o n  p a r a d i g m  for  
s e n s o r  n e t w o r k s .  T e c h n i c a l  R e p o r t  00 -732 ,  U n i v e r s i t y  o f  S o u t h e r n  
C a l i f o r n i a ,  M a r c h  2000.  
[12] D. B.  J o h n s o n  a n d  D.  A. M a l t z .  D y n a m i c  Source  R o u t i n g  in  A d - h o c  
W i r e l e s s  N e t w o r k s .  In  T.  I m i e l i n k s i  a n d  H. K o r t h ,  e d i t o r s ,  Mobile 
Computing, p a g e s  1 5 3 - 1 8 1 .  K l u w e r  A c a d e m i c  P u b l i s h e r s ,  1996. 
[13] W i l l i a m  J .  K a i s e r .  W I N S  N G  1.0 T r a n s c e i v e r  P o w e r  D i s s i p a t i o n  
S p e c i f i c a t i o n s .  S e n s o r l a  C o r p .  
[14] Y o n g - B a e  K o  a n d  N i t i n  H. V a i d y a .  L o c a t i o n - A i d e d  R o u t i n g  ( L A R )  in  
M o b i l e  Ad  H o e  N e t w o r k s .  I n  Proceedings of the Fourth Annual A C M / I E B E  
International Conference on Mobile Comp~ting and Networking (Mobieom '98), 
D a l l a s ,  T X ,  1998. 
[15] J o a n n a  K u l i k ,  W e n d i  R a b i n e r ,  a n d  H a r i  B a l a k r i s h n a n ,  A d a p t i v e  P r o t o c o l s  
fo r  I n f o r m a t i o n  D i s s e m i n a t i o n  in  W i r e l e s s  S e n s o r  N e t w o r k s .  I n  Proceedings 
of the Fifth Annual A C M / I E E B  International Conference on Mobile Co.tputing and 
Networking (MobiCom'99), S e a t t l e ,  W A ,  1999. 
[16] J .  C. L i n  a n d  S. P a u l .  A R e l i a b l e  M u l t i c a s t  T r a n s p o r t  P r o t o c o l .  I n  
Proceedlngs o~ the IEEE ln/ocom, S a n  F r a n c i s c o ,  C A ,  M a r c h  1990. 
[17] S z e - Y a o  Ni ,  Y u - C h e e  T s e n g ,  Y u h - S h y a n  C h e n ,  a n d  J a n g - P i n g  S h e u .  T h e  
B r o a d c a s t  S t o r m  P r o b l e m  in  a M o b i l e  Ad  Hoc  N e t w o r k .  In  Proceedings of the 
Fifth Annual A C M / I E E E  Inte~atlonal Co~tferenee on Mobile Computing and 
Networking (MobiCom'99), S e a t t l e ,  W A ,  1999. 
[18] C. P a p a d o p o u l o s ,  G. P a r u l k a r ,  a n d  G. V e r g h e s e .  An  E r r o r  C o n t r o l  S c h e m e  
for  L a r g e - s c a l e  M u l t l c a s t  A p p l i c a t i o n s .  I n  P~eeedings of the IEEE Infoeom, 
S a n  F r a n c i s c o ,  M a r c h  1998. 
[19] V.  D. P a r k  a n d  M. S. C o r s o n .  A H i g h l y  A d a p t i v e  D i s t r i b u t e d  R o u t i n g  
A l g o r i t h m  for  M o b i l e  W i r e l e s s  N e t w o r k s .  I n  proceedings of INFOCOM 97, 
p a g e s  1 4 0 5 - 1 4 1 3 ,  A p r i l  1997. 
[20] C h a r l e s  P e r k i n s .  A d - H o c  O n  D e m a n d  D i s t a n c e  V e c t o r  R o u t i n g  ( A O D V ) .  
I n t e r n e t - D r a f t ,  N o v e m b e r  1997. d r a f t - i e t f - m a n e t - a o d v - 0 0 . t x t .  
[21] G. P o t t l e  a n d  W.  K a i s e r .  W i r e l e s s  S e n s o r  N e t w o r k s .  Communication8 of the 
ACM, 2000.  To a p p e a r .  
[22] G. P o t t l e ,  W .  K a i s e r ,  L.  C l a r e ,  a n d  H.  Marcy .  W i r e l e s s  I n t e g r a t e d  N e t w o r k  
S e n s o r s .  s u b m i t t e d  for  p u b l i c a t i o n ,  1998. 
[23] A. M. T u r i n g .  T h e  C h e m i c a l  Bas i s  o f  M o r p h o g e n e s i s .  Phil. Transaction of the 
Royal Society of London, Series (B): Biological Sciences, ( 2 3 7 ) : 3 7 - 7 2 ,  1952. 
[24] M.  Weise r .  T h e  C o m p u t e r  for  t h e  21s t  C e n t u r y .  Scientific American, 
S e p t e m b e r  1991. 
[25] L. Z h a n g ,  S. M i c h e l ,  S. F l o y d ,  V.  J a c o b s o n ,  K.  N g u y e n ,  a n d  A. R o s e n s t e l n .  
A d a p t i v e  W e b  C a c h i n g :  T o w a r d s  a N e w  G l o b a l  C a c h i n g  A r c h i t e c t u r e .  In  
Proceedings of the Third lntet~ational Caching Workshop, J u n e  1999. 
67  

