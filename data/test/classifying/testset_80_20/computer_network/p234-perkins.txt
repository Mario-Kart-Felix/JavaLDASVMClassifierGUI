Highly Dynamic Destination-Sequenced Distance-Vector Routing
(DSDV) for Mobile Computers
Charles E. Perkins
IBM, T.J. Watson Research Center
Hawthorne, NY 10562
Abstract
An ad-hoc network is the cooperative engagement of
a collection of Mobile Hosts without the required inter-
vention of any centralized Access Point. In this paper
we present an innovative design for the operation of such
ad-hoc networks. The basic idea of the design is to op-
erate each Mobile Host as a specialized router, which
periodically advertises its view of the interconnection
topology with other Mobile Hosts within the network.
This amounts to a new sort of routing protocol. We
have investigated modifications to the basic Bellman-
Ford routing mechanisms, as specified by RIP [5], to
make it suitable for a dynamic and self-starting network
mechanism as is required by users wishing to utilize ad-
hoc networks. Our modifications address some of the
previous objections to the use of Bellman-Ford, related
to the poor looping properties of such algorithms in the
face of broken links and the resulting time dependent
nature of the interconnection topology describing the
links between the Mobile Hosts. Finally, we describe
the ways in which the basic network-layer routing can
be modified to provide MAC-layer support for ad-hoc
networks.
1 Introduction
Recently, there has been tremendous growth in the
sales of laptop and portable computers. These smaller
computers, nevertheless, can be equipped with hun-
dreds of megabytes of disk storage, high resolution color
displays, pointing devices, and wireless communications
adapters. Moreover, since many of these small (in size
only) computers operate for hours with battery power,
Permission to copy without fee all or part of this material is
granted provided that the copies are not made or distributed for
direct commercial advantage, the ACM copyright notice and the
title of the publication and its date appear, and notice is given
that copying is by permission of the Association of Computing
Machinery. To copy otherwise, or to republish, requires a fee
and/or specific permission.
SIGCOMM 94 -8/94 London England UK
@ 1994 ACM 0-89791 -682-4/94/0008..$3.50
Pravin Bhagwat
Computer Science Department
University of Maryland
College Park, MD 20742
users are free to move about at their convenience with-
out being constrained by wires.
This is a revolutionary development in personal com-
puting. Battery powered, untethered computers are
likely to become a pervasive part of our computing in-
frastructure. As people begin to have mobile computers
handy, for whatever purposes, sharing information be-
tween the computers will become a natural requirement.
Currently, such sharing is made difficult by the need for
users to perform administrative tasks and set up static,
bidirectional links between their computers. However,
if the wireless communications systems in the mobile
computers support a broadcast mechanism, much more
flexible and useful ways of sharing information can be
imagined. For instance, any number of people could
conceivably enter a conference room and agree to sup-
port communications links between themselves, with-
out necessarily engaging the services of any pre-existing
equipment in the room (i.e, without requiring any pre-
existing communications infrastructure). Thus, one of
our primary motivations is to allow the construction of
temporary networks with no wires and no administra-
tive intervention required. In this paper, such a inter-
connection between the mobile computers will be called
an ad-hoc network, in conformance with current. usage
within the IEEE 802.11 subcommittee [4].
Ad-hoc networks differ significantly from existing
net works. First of all, the topology of interconnections
may be quite dynamic. Secondly, most users will not
wish to perform any administrative actions to set up
such a network. In order to provide service in the most
general situation, we do not assume that every computer
is within communication range of every other computer.
This lack of complete connectivity would certainly be a
reasonable characteristic of, say, a population of mo-
bile computers in a large room which relied on infrared
transceivers to effect their data communications.
Currently, there is no method available which enables
mobile computers with wireless data communications
equipment to freely roam about while still maintaining
234
connections with each other, unless special assumptions
are made about the way the computers are situated with
respect to each other. One mobile computer may often
be able to exchange data with two other mobile comput-
ers which cannot themselves directly exchange data. As
a result, computer users in a conference room may be
unable to predict which of their associates’ computers
could be relied upon to maintain network connection,
especially as the users moved from place to place within
the room.
Routing protocols for existing networks have not
been designed specifically to provide the kind of dy-
namic, self-starting behavior needed for ad-hoc net-
works. Most protocols exhibit their least desirable be-
havior when presented with a highly dynamic inter-
connection topology. Although we thought that mo-
bile computers could naturally be modeled as routers,
it was also clear that existing routing protocols would
place too heavy a computational burden on each mobile
computer. Moreover, the convergence characteristics of
existing routing protocols did not seem good enough
to fit the needs of ad-hoc networks. Lastly, the wire-
less medium differs in important ways from wired me-
dia, which would require that we make modifications to
whichever routing protocol we might choose to exper-
iment with. For instance, mobile computers may well
have only a single network interface adapter, whereas
most existing routers have network interfaces to connect
two separate networks together, Besides, wireless media
are of limited and variable range, in distinction to exist-
ing wired media. Since we had to make lots of changes
anyway, we decided to follow our ad-hoc network model
as far aa we could and ended up with a substantially
new approach to the classic distance-vector routing.
2 Overview of Routing Methods
In our environment, the problem of routing is essen-
tially the distributed version of the shortest path prob-
lem [11]. Each node in the network maintains for each
destination a preferred neighbor. Each data packet con-
tains a destination node identifier in its header. When
a node receives a data packet, it forwards the packet
to the preferred neighbor for its destination. The for-
warding process continues until the packet reaches its
destination. The manner in which routing tables are
constructed, maintained and updated differs from one
routing method to another. Popular routing methods,
however, attempt to achieve the common objective of
routing packets along the optimal path. The next-hop
routing methods can be categorized into two primary
classes: link-state and distance-vector.
Link-State The link-state approach is closer to the
centralized version of the shortest path computation
method. Each node maintains a view of the network
topology with a cost for each link. To keep these views
consistent, each node periodical y broadcasts the link
costs of its outgoing links to all other nodes using a
protocol such as flooding. As a node receives this in-
formation, it updates its view of the network topology
and applies a shortest-path algorithm to choose its next
hop for each destination. Some of the link costs in a
node’s view can be incorrect because of long propaga-
tion delays, partitioned network, etc. Such inconsistent
views of network topologies might lead to formation of
routing loops. These loops, however, are short-lived,
because they disappear in the time it takes a message
to traverse the diameter of the network [8].
Distance-Vector In distance-vector algorithms,
every node i maintains, for each destination z, a set
of distances {d~j } where j ranges over the neighbors of
i. Node i treats neighbor k as a next-hop for a packet
destined for x if d~h equals minj {d~i }. The succession
of next hops chosen in this manner lead to x along the
shorest path. In order to keep the distance estimates
up-to-date, each node monitors the cost of its outgo-
ing links and periodically broadcasts, to each one its
neighbors, its current estimate of the shortest distance
to every other node in the network.
The above distance-vector algorithm is the classical
Distributed Bellman-Ford (DBF) algorithm [2]. Com-
pared to link-state method, it is computationally more
efficient, easier to implement and requires much less
storage space, However, it is well known that this algo-
rithm can cause the formation of both short-lived and
long-lived loops [3]. The primary cause for formation
of routing loops is that nodes choose their next-hops in
a completely distributed fashion based on information
which can possibly be stale and, therefore, incorrect.
Almost all proposed modifications to DBF algorithm
[6, 7, 9] eliminate the looping problem by forcing all
nodes in the network to participate in some form of in-
ternodal coordination protocol. Such internodal coordi-
nation mechanisms might be effective when topological
changes are rare. However, within an ad-hoc mobile en-
vironment enforcing any such internodal coordination
mechanism will be difficult due to the rapidly changing
topology of the underlying routing network.
Simplicity is one of the primary attributes which
makes any routing protocol preferred over others for
implement ation within operational networks. RIP [5]
is a classical example. Despite the counting-to-infinity
problem it has proven to be very successful within small
size internetworks. The usefulness of RIP within ad-hoc
environment, however, is limited as it was not designed
to handle rapid topological changes. Furthermore, the
techniques of split-horizon and poisoned-reverse [5] are
235
not useful within the wireless environment due to the
broadcast nature of the transmission medium. Our de-
sign goal therefore has been to design a routing method
for ad-hoc networks which preserves the simplicity of
RIP, yet at the same time avoids the looping problem.
Our approach is to tag each route table entry with a
sequence number so that nodes can quickly distinguish
stale routes from the new ones and thus avoid formation
of routing loops.
3 Destination-Sequenced Distance Vec-
tor (DSDV) Protocol
Our proposed routing method allows a collection of
mobile computers, which may not be close to any base
station and can exchange data along changing and arbi-
trary paths of interconnection, to afford all computers
among their number a (possibly multi-hop) path along
which data can be exchanged. In addition, our solution
must remain compatible with operation in cases where
a base station is available. By the methods outlined in
this paper, not only will routing be seen to solve the
problems associated with ad-hoc networks, but in ad-
dition we will describe ways to perform such routing
functions at Layer 2, which traditionally has not been
utilized as a protocol level for routing,
Packets are transmitted between the stations of the
network by using routing tables which are stored at
each station oft he network. Each routing table, at each
of the stations, lists all available destinations, and the
number of hops to each. Each route table entry is tagged
with a sequence number which is originated by the des-
tination station. To maintain the consistency of routing
tables in a dynamically varying topology, each station
periodically transmits updates, and transmits updates
immediately when significant new information is avail-
able. Since we do not assume that the mobile hosts
are maintaining any sort of time synchronizat ion, we
also make no assumption about the phase relationship
of the update periods between the mobile hosts. These
packets indicate which stations are accessible from each
station and the number of hops necessary to reach these
accessible stat ions, as is often done in dist ante-vector
routing algorithms. It is not the purpose of this paper to
propose any new metrics for route selection other than
the freshness of the sequence numbers associated with
the route; cost or other metrics might easily replace the
number of hops in other implementations. The packets
may be transmitted containing either layer 2 (MAC)
addresses or layer 3 (network) addresses.
Routing information is advertised by broadcasting or
multicasting the packets which are transmitted period-
ically and incrementally as topological changes are de-
tected – for instance, when stations move within the
network. Data is also kept about the length of time be-
tween arrival of the jkt and the arrival of the best route
for each particular destination. Based on this data, a
decision may be made to delay advertising routes which
are about to change soon, thus damping fluctuations
of the route tables. The advertisement of routes which
may not have stabilized yet is delayed in order to reduce
the number of rebroadcasts of possible route entries that
normally arrive with the same sequence number.
The DSDV protocol requires each mobile station to
advertise, to each of its current neighbors, its own rout-
ing table (for instance, by broadcasting its entries). The
entries in this list may change fairly dynamically over
time, so the advertisement must be made often enough
to ensure that every mobile computer can almost al-
ways locate every other mobile computer of the collec-
tion. In addition, each mobile computer agrees to relay
data packets to other computers upon request. This
agreement places a premium on the ability to deter-
mine the shortest number of hops for a route to a desti-
nation; we would like to avoid unnecessarily disturbing
mobile hosts if they are in sleep mode. In this way a mo-
bile computer may exchange data with any other mobile
computer in the group even if the target of the data is
not within range for direct communication. If the noti-
fication of which other mobile computers are accessible
from any particular computer in the collection is done
at layer 2, then DSDV will work with whatever higher
layer (e.g., Network Layer) protocol might be in use.
All the computers interoperating to create data paths
between themselves broadcast the necessary data pe-
riodically, say once every few seconds. In a wireless
medium, it is important to keep in mind that broad-
casts are limited in range by the physical characteris-
tics of the medium. This is different than the situation
with wired media, which usually have a much more well-
defined range of reception. The data broadcast by each
mobile computer will contain its new sequence number
and the following information for each new route:
● The destination’s address;
● The number of hops required to reach the destina-
tion; and
. The sequence number of the information received
regarding that dest inat ion, as originally stamped
by the destination;
The transmitted routing tables will also contain the
hardware address, and (if appropriate) the network ad-
dress, of the mobile computer transmitting them, within
the headers of the packet. The routing table will also
include a sequence number created by the transmitter.
Routes with more recent sequence numbers are always
preferred as the basis for making forwarding decisions,
236
but not necessarily advertised. Of the paths with the
same sequence number, those with the smallest metric
will be used. By the natural way in which the routing
tables are propagated, the sequence number is sent to all
mobile computers which may each decide to maintain a
routing entry for that originating mobile computer.
Routes received in broadcasts are also advertised by
the receiver when it subsequently broadcasts its routing
information; the receiver adds an increment to the met-
ric before advertising the route, since incoming pack-
ets will require one more hop to reach the destination
(namely, the hop from the transmitter to the receiver).
Again, we do not explicitly consider here the changes
required to use metrics which do not use the hop count
to _the destination.
One of the most important parameters to be chosen is
the time between broadcasting the routing information
packets. However, when any new or substantially modi-
fied route information is received by a Mobile Host, the
new information will be retransmitted soon (subject to
constraints imposed for damping route fluctuations), ef-
fecting the most rapid possible dissemination of routing
information among all the cooperating Mobile Hosts.
This quick re-broadcast introduces a new requirement
for our protocols to converge as soon as possible. It
would be calamitous if the movement of a Mobile Host
caused a storm of broadcasts, degrading the availability
of the wireless medium.
Mobile Hosts cause broken links as they move from
place to place, The broken link may be detected by
the layer-2 protocol, or it may instead be inferred if no
broadcasts have been received for a while from a for-
mer neighbor. A broken link is described by a metric of
00 (i.e., any value greater than the maximum allowed
metric). When a link to a next hop has broken, any
route through that next hop is immediately assigned an
00 metric and assigned an updated sequence number.
Since this qualifies as a substantial route change, such
modified routes are immediately disclosed in a broad-
cast rout ing information packet. Building information
to describe broken links is the only situation when the
sequence number is generated by any Mobile Host other
than the destination Mobile Host. Sequence numbers
defined by the originating Mobile Hosts are defined to
be even numbers, and sequence numbers generated to
indicate cm metrics are odd numbers. In this way any
‘) real” sequence numbers will supersede an m metric.
When a node receives an co metric, and it has a later
sequence number with a finite metric, it triggers a route
update broadcast to disseminate the important news
about that destination.
In a very large population of Mobile Hosts, adjust-
ments will likely be made in the time between broad-
casts oft he routing information packets. In order to re-
duce the amount of information carried in these packets,
two types will be defined. One will carry all the avail-
able routing information, called a “full dump”. The
other type will carry only information changed since
the last full dump, called an “incremental”. By design,
an incremental routing update should fit in one net-
work protocol data unit (NPDU). The full dump will
most likely require multiple NPDUS, even for relatively
small populations of Mobile Hosts. Full dumps can be
transmitted relatively infrequently when no movement
of Mobile Hosts is occurring, When movement becomes
frequent, and the size of an incremental approaches the
size of a NPDU, then a full dump can be scheduled (so
that the next incremental will be smaller). It is expected
that mobile nodes will implement some means for de-
termining which route changes are significant enough to
be sent out with each incremental advertisement. For
instance, when a stabilized route shows a different met-
ric for some destination, that would likely constitute
a significant change that needed to be advertised after
stabilization. If a new sequence number for a route is
received, but the metric stays the same, that would be
unlikely to be considered as a significant change.
When a Mobile Host receives new routing informa-
tion (usually in an incremental packet as just described),
that information is compared to the information al-
ready available from previous routing information pack-
ets. Any route with a more recent sequence number
is used. Routes with older sequence numbers are dis-
carded. A route with a sequence number equal to an
existing route is chosen if it has a “better” metric, and
the existing route discarded, or stored as less prefer-
able. The metrics for routes chosen from the newly
received broadcast information are each incremented
by one hop. Newly recorded routes are scheduled for
immediate advertisement to the current Mobile Host’s
neighbors. Routes which show an improved metric are
scheduled for advertisement at a time which depends
on the average settling time for routes to the particular
destination under consideration.
Timing skews between the various Mobile Hosts are
expected. The broadcasts of routing information by the
Mobile Hosts are to be regarded as somewhat asyn-
chronous events, even though some regularity is ex-
pected. In such a population of independently trans-
mitting agents, some fluctuation could develop using the
above procedures for updating routes. It could turn out
that a particular Mobile Host would receive new routing
information in a pattern which causes it to consistently
change routes from one next hop to another, even when
the destination Mobile Host has not moved. This hap-
pens because there are two ways for new routes to be
chosen; they might have a later sequence number, or
237
they might have a better metric. A Mobile Host could
conceivably always receive two routes to the same des-
tination, with a newer sequence number, one after an-
other (via different neighbors), but always get the route
with the worse metric first. Unless care is taken, this
will lead to a continuing burst of new route transmittals
upon every new sequence number from that destination.
Each new metric is propagated to every Mobile Host in
the neighborhood, which propagates to their neighbors
and so on.
One solution is to delay the advertisement of such
routes, when a Mobile Host can determine that a route
with a better metric is likely to show up soon. The
route with the later sequence number must be available
for use, but it does not have to be advertised imme-
diately unless it is a route to a destination which was
previously unreachable. Thus, there will be two rout-
ing tables kept at each Mobile Host; one for use with
forwarding packets, and another to be advertised via
incremental routing information packets. To determine
the probability of imminent arrival of routing informa-
tion showing a better metric, the Mobile Host has to
keep a history of the weighted average time that routes
to a particular destination fluctuate until the route with
the best metric is received. We hope that such a pro-
cedure will allow us to predict how long to wait before
advertising new routes.
Operating DSDV at Layer 2
The addresses stored in the routing tables will cor-
respond to the layer at which this ad-hoc networking
protocol is operated. That is, operation at Layer 3 will
use network layer addresses for the next hop and des-
tination addresses, and operation at Layer 2 will use
Layer 2 Media Access Control (MAC) addresses.
Using MAC addresses for the forwarding table does
introduce a new requirement, however. The difficulty
is that Layer 3 network protocols provide communica-
tion based on network addresses, and a way must be
provided to resolve these Layer 3 addresses into MAC
addresses. Otherwise, a multiplicity of different address
resolution mechanisms would be put into place, and a
corresponding loss of bandwidth in the wireless medium
would be observed whenever the resolution mechanisms
were utilized. This could be substantial since such
mechanisms would require broadcasts and retransmit-
ted broadcasts by every Mobile Host in the ad-hoc net-
work. Thus, unless special care is taken, every address
resolution might look like a glitch in the normal oper-
ation of the network, which may well be noticeable to
any active users.
The solution proposed here, for operation at Layer 2,
is to include Layer 3 protocol information along with the
Layer 2 information. Each destination host would ad-
vertise which Layer 3 protocols it supports, and each
Mobile Host advertising reachability to that destina-
tion would include along, with the advertisement, the
information about the Layer 3 protocols supported at
that destination. This information would only have to
be transmitted when it changes, which occurs rarely.
Changes would be transmitted as part of each incremen-
tal dump. Since each Mobile Host could support several
Layer 3 protocols (and many will), this list would have
to be variable in length.
Extending Base Station Coverage
Mobile computers will frequently be used in conjunc-
tion with base stations, which allow them to exchange
data with other computers connected to the wired net-
work. By participating in the DSDV protocol, base
stations can extend their coverage beyond the range
imposed by their wireless transmitters. When a base
station participates in DSDV, it is shown as a default
route in the tables transmitted by a mobile station. In
this way, mobile stations within range of a base station
can cooperate to effectively extend the range of the base
station to serve other stations outside the range of the
base station, as long as those other mobile stations are
close to some other mobile station that is within range.
4 Examples of DSDV in operation
Qy@(#@>
MH
o
\
M HI
o
M H,
-.. .
-... ....... ,.
....
‘G....a
3
--- (MH1 .
..... .....* -----..... .........
....... .. ........ .... . ...... .....- .. ........-
Figure 1: Movement in an ad-hoc network
Consider J41fA in Figure 1. Table 1 shows a possible
structure of the forwarding table which is maintained
at ikfH4. Suppose the addressl. of each Mobile Host is
represented as MHi Suppose further that all sequence
numbers are denoted SNNN_MHi, where MHi spec-
ifies the computer that created the sequence number
and SNNN is a sequence number value. Also suppose
that there are entries for all other Mobile Hosts, with se-
quence numbers SNNN.MHi, before MH1 moves away
from MH2. The install time field helps determine when
1If DSDV is operated at level 2 then MHi denotes the MAC
address, otherwise it denotes a level 3 address
238
Destination NextHop Metric Sequence number Install Flags Stable.data
MHI MHZ 2 S406_MH1 TOO1.MH4 Ptrl-MH1
MH2 MHZ 1 S128_MHz TO01.MH4 Ptrl-MH2
MH3 MHZ 2 S564_MH3 TOO1-MH4 Ptrl-MH3
MH4 MH4 o S71O-MH4 TOO1-MH4 Ptrl-MH4
MH5 MH6 2 S392_MH5 TO02-MH4 Ptrl.MH5
MH6 MHfj 1 S076_MHtj TO01-MH4 ptrl-MHG
MH7 MH,5 2 S128_MHT TO02-MH4 Ptrl_Mlf7
MH&-1 MH6 3 so50_MH13 TO02-MH4 Ptrl-MHa
Table 1: Structure of the MH4 forwarding table
to delete stale routes. With our protocol, the deletion
of stale routes should rarely occur, since the detection
of link breakages should propagate through the ad-hoc
network immediately. Nevertheless, we expect to con-
tinue to monitor for the existence of stale routes and
take appropriate action.
From table 1, one could surmise, for instance, that
all the computers became available to MH4 at about
the same time, since its install-time for most of them is
about the same. One could also surmise that none of the
links between the computers were broken, because all of
the sequence number fields have times with even digits
in the units place. Ptrl-MHi would all be pointers
to null structures, because there are not any routes in
Figure 1 which are likely to be superseded or compete
with other possible routes to any particular destination.
Table 2 shows the structure of the advertised route
table of MH4.
Destination Metric Sequence number
MH1 2 S406_MHl
MHZ 1 S128-MHz
MH3 2 S564_MHs
MH4 o S71O-MH4
MH5 2 S392-MH5
MH6 1 S076-MH6
MH7 2 S128-MH7
MH8 3 so50-MH13
Table 2: Advertised route table by MH4
Now suppose that MH1 moves into the general vicin-
ity of MH5 and MH7, and away from the others (es-
pecially MH2). The new internal forwarding tables at
MH4 might then appear as shown in table 3.
Only the entry for MH1 shows a new metric, but in
the intervening time, many new sequence number en-
tries have been received. The first entry thus must be
advertised in subsequent incremental routing informa-
tion updates until the next full dump occurs. When
MH1 moved into the vicinity of MH5 and MH7, it
triggered an immediate incremental routing informa-
tion update which was then broadcast to MH6. MH6,
having, determined that significant new routing infor-
mation had been received, also triggered an immediate
update which carried along the new routing informa-
tion for MH1. MH4, upon receiving this information,
would then broadcast it at every interval until the next
full routing information dump. At MH4, the incremen-
tal advertised routing update would have the form as
shown in table 4.
In this advertisement, the information for MH4
comes first, since it is doing the advertisement. The
information for MH1 comes next, not because it has a
lower address, but because MH1 k the only one which
has any significant route changes affecting it. As a gen-
eral rule, routes with changed metrics are first included
in each incremental packet. The remaining space is used
to include those routes whose sequence numbers have
changed.
In this example, one node has changed its routing in-
formation, since it is in a new location. All nodes have
transmitted new sequence numbers recently. If there
were too many updated sequence numbers to fit in a
single packet, only the ones which fit would be trans-
mitted. These would be selected with a view to fairly
transmitting them in their turn over several incremental
update intervals. There is no such required format for
the transmission of full routing information packets. As
many packets are used as are needed, and all available
information is transmitted. The frequency of transmit-
ting full updates would be reduced if the volume of data
began to consume a significant fraction of the available
capacity of the medium.
Damping Fluctuations
The following describes how the settling time table is
used to prevent fluctuations of routing table entry ad-
vertisements. The general problem arises because route
updates are selected according to the following criteria:
239
●
●
Destination NextHop
MHI MH6
MHZ MH2
MH3 MH2
MH4 MH4
MH5 MH6
MH6 MH6
MH7 MH6
MH8 MH6
Destination
MH4
MH1
MHZ
MH3
MH5
MHfj
MH7
MH8
Metric
3
1
2
0
2
1
2
3
Sequence number Install
S516.MHI T810-MH4
S238.MH2 TOO1.MH4
s674_MH3 TOO1-MH4
S820.MH4 TOO1-MH4
S502-.MH5 TO02.MH4
s186_MH6 TOO1-MH4
S238-.MH7 T002-MH4
s160_MH.g T002-MH4 I
Flags Stable.data
M Ptrl-MHl
Ptrl-MH2
Ptrl-MH3
Ptrl-MH4
Ptrl-MH5
ptrl-MHe
Ptrl-MH7
ptrl-MHs
Table 3: MH4 forwarding table (updated)
pose that MH4 receives the higher metric next hop first,
Metric Sequence number
o S820-MH4
3 S516_MHl
1 S238_MHz
2 s674_MH3
2 S502_MHS
1 S186.-MH6
2 S238-MH7
3 s160_MH8
Table 4: MH4 advertised table (updated)
Routes are always preferred if the sequence num-
bers are newer;
Otherwise, routes are preferred if the sequence
numbers are the same and yet the metric is bet-
ter (lower).
MH ~-.,
... %........’ ........ ....
....” %.....
-.
@g
Mobile Host
Collection I I
MH2 MH6
------- ......-.,....
.... ...-”
.... ....””
.-.. MH ‘.
4
Figure 2: Receiving fluctuating routes
To see the problem, suppose that two routes with
identical sequence numbers are received by a Mobile
Host, but in the wrong order. In other words, sup-
and soon after gets another next hop with a lower met-
ric but the same sequence number. This could happen
when there are a lot of Mobile Hosts, transmitting their
updates not quite regularly. Alternatively, if the Mo-
bile Hosts are acting independently and with markedly
different transmission intervals, the situation could oc-
cur with correspondingly fewer hosts. Suppose, in any
event, in Figure 2 that there are enough Mobile Hosts to
cause the problem, in two separate collections of Mobile
Hosts both connected to a common destination MH9,
but with no other Mobile Hosts in common. Suppose
further that all Mobile Hosts are transmitting updates
approximately every 15 seconds, that Mobile Host MH2
has a route to MH9 with 12 hops, and Mobile Host
MH6 has a route to MH9 with 11 hops, Moreover, sup-
pose that the routing information update from MHZ
arrives at MH4 approximate ely 10 seconds before the
rout ing information update from MH6. This will occur
every time that a new sequence number is issued from
Mobile Host MH9. In fact, the time differential can be
drastic if any Mobile Host in collection II begins to is-
sue its sequence number updates in multiple incremental
update intervals, as would happen, for instance, when
there are too many hosts with new sequence number
updates for them all to fit within a single incremental
packet update. In general, the larger the number of
hops, the more drastic differentials between delivery of
the updates can be expected in Figure 2.
The settling time data is stored in a table with the
following fields, keyed by the first field:
● Destination address
● Last settling time
● Average settling time
The settling time is calculated by maintaining a run-
ning, weighted average over the most recent updates of
the routes, for each destination.
240
Suppose a new routing information update arrives
at MH4. The sequence number in the new entry is
the same as the sequence number in the currently used
entry, and the newer entry has a worse (i.e., higher)
metric. Then MH4 must use the new entry in making
subsequent forwarding decisions. However, MH4 does
not have to advertise the new route immediately and
can consult its route settling time table to decide how
long to wait before advertising it. The average settling
time is used for this determination. For instance, MH4
may decide to delay (average.settling_time x 2) before
advertising a route.
This can be quite beneficial, because if the possi-
bly unstable route were advertised immediately, the ef-
fects would ripple through the network, and this bad
effect would probably be repeated every time Mobile
Host MHg’s sequence number updates rippled through
the ad-hoc network. On the other hand, if a link via
Mobile Host MHIj truly does break, the advertisement
of a route via MH2 should proceed immediately. To
achieve this when there is a history of fluctuations at
Mobile Host MH4, the link breakage should be detected
fast enough so that an intermediate host in Collection II
finds out the problem and begins a triggered incremen-
tal update showing an oo metric for the path along the
way to Mobile Host M Hg. Rout es with an 00 metric are
required by this protocol to be advertised immediately,
without delay.
In order to bias the damping mechanism in favor of
recent events, the most recent measurement of the set-
tling time of a particular route must be counted with
a higher weighting factor than are less recent measure-
ments. And, importantly, a parameter must be selected
which indicates how long a route has to remain stable
before it is counted as truly stable. This amounts to
specifying a maximum value for the settling time for
the destination in the settling time table. Any route
more stable than this maximum value will cause a trig-
gered update if it is ever replaced by another route with
a different next hop or metric.
When a new routing update is received from a neigh-
bor, during the same time that the updates are applied
to the table, processing also occurs to delete stale en-
tries. Stale entries are defined to be those for which
no update has been applied within the last few update
periods. Each neighbor is expected to send regular up-
dates; when no updates are received for a while, the
receiver may make the determination that the corre-
sponding computer is no longer a neighbor. When that
occurs, any route using that computer as a next hop
should be deleted, including the route indicating that
computer as the actual (formerly neighboring) destina-
tion. Increasing the number of update periods that may
transpire before entries are determined would result in
more stale rout ing entries, but would also allow for more
transmission errors. Transmission errors are likely to
occur when a CSMA-type broadcast medium is used,
as may well be the case for many wireless implementa-
tions. When the link breaks, an cm metric route should
be advertised for it, as well as for the routes that depend
on it.
There are additional data fields, other than those
stated above, which might be transmitted as part of
each entry in the routing tables which are broadcast by
each participating computer (mobile or base station).
These fields may depend, for instance, on higher level
protocols or other protocols depending on the operation
of layer 2. For instance, to enable correct ARP opera-
tion, each routing table entry must also contain an asso-
ciation between the Internet Protocol (1P) address and
the MAC address of the destination. This would also
enable an intermediate computer, when serving a rout-
ing function for its neighbors, to also issue proxy ARP
replies instead of routing ARP broadcasts around. How-
ever, if packet forwarding is based on MAC addresses,
hopefully such techniques will be unnecessary. And, if
forwarding is done based on 1P addresses, no ARP is
strictly necessary, as long as neighboring nodes keep
track of associations gleaned from route table broad-
casts. Note also that layer 3 operation violates the nor-
mal subnet model of operation, since even if two Mobile
Hosts share the same subnet address there is no guar-
antee they will be directly connected – in other words,
within range of each other. This is compatible with the
model of operation offered by the mobile-IP working
group of the IETF [12, 10].
The new routing algorithm was particularly devel-
oped for enabling the creation of ad-hoc networks, which
are most specifically targeted for the operation of mo-
bile computers. However, the routing algorithm itself,
and the operation of an ad-hoc network, can be bene-
ficially used in situations which do not include mobile
computers. For instance, the routing algorithm could be
applied in any situation where reduced memory require-
ments are desired (compared to link-state routing algo-
rithms). The operation of an ad-hoc network could be
applied to wired as well as wireless mobile computers. In
general, then, we provide a new destination-sequenced
routing algorithm, and this algorithm is supplemented
by a technique for damping fluctuations.
5 Properties of the DSDV Protocol
At all instants, the DSDV protocol guarantees loop-
free paths to each destination. To see why this property
holds, consider a collection of IV mobile hosts forming
an instance of an ad-hoc style network. Further assume
that the system is in steady-state, i.e. routing tables
of all nodes have already converged to the actual short-
241
est paths. At this instant, the next node indicators to
each destination induce a tree rooted at that destina-
tion. Thus, routing tables of all nodes in the network
can be collectively visualized as forming IV trees, one
rooted at each destination. In the following discussion,
we’ll focus our attention on one specific destination x
and follow the changes occurring on the directed graph
G(a) defined by nodes i and arcs (i, p; ) where p: de-
notes the next-hop for destination x at node i. Oper-
ation of DSDV algorithm ensures that at every instant
G(z) is loop-free, or rather, it is a set of disjoint di-
rected trees. Each such tree is rooted either at z or at
a node whose next-hop is nil. Since this property holds
with respect to each destination z, all paths induced by
routing tables of DSDV algorithm are indeed loop free
at all instants.
Potentially a loop may form each time node i changes
its next-hop. This can happen in two cases. First, when
node i detects that the link to its next-hop is broken, the
node resets p? to nil. Clearly, this action cannot form
a loop involving 2. The second scenario occurs when
node i receives, from one of its neighbors k, a route
to z, with sequence number s; and metric m, which is
selected to replace the current route it has through p:.
Let s: denote the value of the sequence number stored
at node i and d: denote the distance estimate from i to
z just prior to receiving route from k. i will change its
next-hop from p; to k only if either of the following two
happens.
1.
2.
the new route contains a newer sequence number,
i.e., s; > s:
the sequence number s: is same as S$, but the new,.
route offers a shorter path to z, i.e, m < diz
In the first case, by choosing k as its new next-hop
node i cannot close a loop. This can be easily deduced
from the following observation. A node i propagates se-
quence number s: to its neighbors only after receiving
it from its current next-hop. Therefore, at all times the
sequence number value stored at the next-hop is always
greater or equal to the value stored at i. Starting from
node i, if we follow the chain of next-hop pointers, the
sequence number values stored at visited nodes would
form a nondecreasing sequence. Now suppose node i
forms a loop by choosing k as its next-hop. This would
imply that St s s:. But this contradicts our initial
assumption that s: > s?. Hence, loop-formation can-
not occur if nodes use newer sequence numbers to pick
routes.
The loop-free property holds in the second scenario
due to the theorem proved in [6], which states that in
presence of static or decreasing link weights distance-
vector algorithms always maintain loop-free paths.
6 Comparison with other Methods
The table 5 presents a quick summary of some of the
main features of a few chosen routing protocols. The
chosen set, although small, is representative of a vari-
ety of routing techniques most commonly employed in
operational data networks. Except for the link-state
approach, all routing methods shown in the table are
a variant of the basic distance-vector approach. The
comparison criteria reflects some of the most desirable
features that a routing algorithm should possess for it
be useful in a dynamic ad-hoc style environment. In
wireless medium, communication bandwidth is the most
precious and scarce resource. The formation of any kind
of routing loops, therefore, is highly undesirable. In
case of infrared LANS which employ pure CSMA pro-
tocol, looping packets can not only consume the com-
munication bandwidth but they can further degrade the
performance by causing more collisions in the medium.
A common technique employed for loop-prevention is
what we call internodal- coordination whereby strong
constraints on the ordering of the updates among nodes
is imposed. The resulting internode protocols tend to be
complex. Furthermore, their update coordination may
restrict a node’s ability to obtain alternate paths quickly
in an environment where topology changes are relatively
frequent. The last criteria used for comparison is the
space requirement of the routing method. Nodes in
an ad-hoc network may be battery powered lap-tops,
or even hand-held notebooks, which do not have the
kind of memory that NSFNET dedicated routers are
expected to have. Therefore, economy of space is of
import ante.
The primary concern with using a Distributed Bell-
man Ford algorithm in ad-hoc environment is its suscep-
tibility towards forming routing loops and counting-to-
infinity problem. RIP [5], which is very similar to DBF
algorithm, also suffers from the same problem. Unlike
DBF, RIP only keeps track of the best route to each
destination, which results in some space saving at no
extra performance hit. RIP also employs techniques
known as split-horizon and poisoned-reverse to avoid a
ping-pong style of looping, but these techniques are not
powerful enough to avoid loops involving more than two
hops. The primary cause of loop formation in BF style
algorithms is that nodes make uncoordinated modifica-
tions to their routing tables based on some information
which could be incorrect. This problem is alleviated
by employing an internodal coordination mechanism as
proposed by Merlin and Segall in [9]. A similar tech-
nique, but with better convergence results, is developed
by Jaffe and Moss in [6]. However, we do not know of
any operational routing protocols which employ these
complex coordination methods to achieve loop-freedom,
which leads us to the conclusion that from a practical
242
Routing Method
Bellman Ford [2]
Link State [8]
Loop-free BF [3]
RIP [5]
Merlin Segall [9]
Jaffe Moss [6]
DSDV --
Looping
s/1
s
s
s/1
loop free
loop free
loop free
Internodal
Coordination
Required
Required
.
1
Space
Complexity
O(nd)
O(n2)
O(nd)
O(n)
O(nd)
2!LJ
s - short term loop, 1- long term loop
n - number of nodes, d - maximum degree of a node
Table 5: Comparison of various routing methods
point of view the usefulness of such complex methods is
diminished.
Link-state [8] algorithms are also free of the counting-
i!o-infinity problem. However, they need to maintain
the up-to-date version of the entire network topology
at every node, which may constitute excessive storage
and communication overhead in a highly dynamic net-
work. Besides, link-state algorithms proposed or imple-
mented to date do not eliminate the creation of tempo-
rary routing-loops.
It is evident that within ad-hoc environment design
tradeoffs and the constraints under which a routing
method has to operate are quite different. The pro-
posed DSDV approach offers a very attractive combi-
nation of desirable features. Its memory requirement is
very moderate O(n). It guarantees loop-free paths at all
instants, and it does so without requiring nodes to par-
ticipate in any complex update coordination protocol.
The worst case convergence behavior of the DSDV pro-
tocol is certainly non-optimal but, in the average case,
it is expected that convergence will be quite rapid. We
are in the process of conducting simulation studies to
verify this claim.
7 Current Status and Future Work
We have implemented a preliminary version of this
protocol for use with mobile computers in our lab. Cur-
rently we are making necessary modifications to the
MARS simulator [1] for use in creating the appropria-
tion simulation environment for our needs. We hope to
discover good operational values via simulation for the
following quantities:
●
●
●
Average convergence times
Incremental update period
Settling time averaging method
o Full update period
o Settling time applied to triggered updates
Note that the measurement of the convergence times
may depend heavily on many interesting parameters,
such as the average velocity of the mobile hosts, update
periods, size of the mobile host population, geographical
placement of mobile hosts, existence of base stations,
and average processing loads at the mobile computers.
8 Summary
Providing convenient connectivity for mobile com-
puters in ad-hoc computers is a challenge that is only
now being met. We have presented an innovative ap-
proach, DSDV, which models the mobile computers as
routers, which are cooperating to forward packets as
needed to each other. We make good use of the prop-
erties of the wireless broadcast medium. Our approach
can be utilized at either the network layer (layer 3), or
below the network layer but still above the MAC layer
software in layer 2. In the latter case certain additional
information should be included along with the routing
tables for the most convenient and efficient operation.
The information in the routing tables is similar to what
is found in routing tables with today’s distance vec-
tor (Bellman-Ford) algorithms, but includes a sequence
number, as well as settling-time data useful for damping
out fluctuations in route table updates.
All sequence numbers are generated by the destina-
tion computer in each route table entry, except for the
cases when a link has been broken; the latter case is de-
scribed by an co metric and a sequence number which
cannot be correctly generated by any destination com-
puter. We have specified that co metric route entries
have sequence numbers which are odd numbers, and
sequence numbers generated by each destination com-
puter is an even number. By the natural operation of
the protocol, the sequence numbers chosen to represent
243
broken links will be superseded by real routes propa-
gated from the newly located destination as soon as
possible. Anynewly propagated routes will necessarily
use a sequence number greater than what was used for
the broken link since the latter sequence number is cho-
sen to be one more than the last valid route’s sequence
number. This allows real route data to quickly super-
sede temporary link outages when a mobile computer
moves from one place to another.
We have borrowed the existing mechanism of trig-
gered updates to make sure that pertinent route table
changes can be propagated throughout the population
of mobile hosts as quickly as possible whenever any
topology changes are noticed. This includes movement
from place to place, as well as the disappearance of a
mobile host from the interconnect topology (perhaps as
a result of turning off its power).
In order to combat problems arising with large pop-
ulations of mobile hosts, which can cause route updates
to be received in an order delaying the best metrics until
after poorer metric routes are received, we have sepa-
rated the route tables into two distinct structures. The
actual routing is done according to information kept
in the internal route table, but this information is not
always advertised immediately upon receipt. We have
defined a mechanism whereby routes are not advertised
until it is likely, based upon past history, that they are
stable. This measurement of the settling time for each
route is be biased towards the most recent measure-
ments for the purposes of computing an average.
We have found that mobile computers, modeled
as routers, can effectively cooperate to build ad-hoc
networks. We hope to explore further the necessary
application-level support needed to automatically en-
able use of the network-layer route capabilities to pro-
vide simple access to conferencing and workplace tools
for collaboration and information sharing.
9 Acknowledgment
We thank the reviewers for their many valuable com-
ments; also, thanks to Arvind Krishna and Josh Knight
for their suggestions and improvements.
References
[1]
[2]
[3]
C. Alaettino~l~, K. Dussa-Zieger, 1. Matta, A. U.
Shankar, and O. Gudmundsson. Introducing mars,
a routing testbed. ACM C’omputer Communication
Review, 1992.
D. Bertsekas and R. Gallager. Data IVetwonks,
pages 297–333. Prentice-Hall, Inc., 1987.
C. Cheng, R. Riley, S. P. R. Kumar, and J. J.
Garcia-Luna-Aceves. A loop-free Bellman-Ford
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
[12]
routing protocol without bouncing effect. In ACM
SIGCOMM ’89, pages 224-237, September 1989.
Wim Diepstraten, Greg Ennis, and Phil Be-
langer. DF WMAC - Distributed Foundation Wire-
less Medium Access Control. IEEE Document
P802.11-93/190, Nov 1993.
C. Hedrick. Routing Information Protocol. RFC
1058, June 1988.
J. M. Jaffe and F.H. Moss. A responsive dis-
tributed routing algorithm for computer networks.
IEEE Transactions on Communications, COM-
30(7):1758-1762, July 1982.
J. J. Garcia Luna-Aceves. A unified approach
to loop-free routing using distance vectors or link
states. In ACM SIGCOMM, pages 2 12–223, 1989.
J. M. McQuillan, 1. Richer, and E. C. Rosen.
The new routing algorithm for the ARPANET.
IEEE Transactions on Communications, COM-
28(5):711-719, May 1980.
P. M. Merlin and A. Segall. A failsafe distributed
routing protocol. IEEE ‘llansadions on Commu-
nications, COM-27(9):1280–1287, September 1979.
Charles Perkins. Mobile 1P as seen by the IETF.
Connezions, pages 2-20, Mar 1994.
M. Schwartz and T.E. Stern. Routing tech-
niques used in computer communication networks.
IEEE Transactions on Communications, COM-
28(4):539-552, April 1980.
Bill Simpson. draft-ietf-mobileip-protocol-03.txt.
Draft RFC - work in progress, May 1994.
244

