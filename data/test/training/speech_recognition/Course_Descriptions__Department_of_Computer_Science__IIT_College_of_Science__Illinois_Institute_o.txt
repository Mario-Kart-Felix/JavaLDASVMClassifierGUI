Course Descriptions | Department of Computer Science | IIT College of Science | Illinois Institute of Technology Skip to main content Menu Search Audiences Illinois Institute of Technology Alumni Give to Illinois Tech Directories Media myIIT About Academics Admission Research Resources Apply Now Search About Illinois Tech Quick Facts Accreditation History Office of the President Office of the Provost Senior Administration Administrative Offices Diversity at IIT Strategic Plan Directories Employment At IIT Contact Us Colleges & Institutes Armour College of Engineering Chicago-Kent College of Law College of Architecture College of Science Institute of Design Institute for Food Safety and Health Lewis College of Human Sciences Pritzker Institute of Biomedical Science and Engineering School of Applied Technology Stuart School of Business Wanger Institute for Sustainable Energy Research (WISER) Campuses & Tech Park Campus Locations Mies (Main) Campus Downtown Campus Institute of Design IFSH Rice Campus University Technology Park Student Life Office of Campus Life Residence & Greek Life Career Services Student Employment Public Safety Athletics International Center Office of Student Affairs Colleges & Institutes Armour College of Engineering Chicago-Kent College of Law College of Architecture College of Science Institute of Design Institute for Food Safety and Health Lewis College of Human Sciences Pritzker Institute of Biomedical Science and Engineering School of Applied Technology Stuart School of Business Wanger Institute for Sustainable Energy Research (WISER) Academics Undergraduate Programs Graduate Programs Undergraduate Bulletin (Course Catalog) Graduate Bulletin (Course Catalog) Academic Calendar Registrar Academics (cont.) Class Schedules Course Search Graduate College Graduate Academic Affairs Undergraduate Academic Affairs Research Distinguished Lectures IIT Online Undergraduate Apply Undergraduate Admission Programs Finances Housing Campus Visit Admitted Students For Families Graduate Apply Graduate Admission Programs Finances Visit Admitted Students Colleges & Institutes Armour College of Engineering Chicago-Kent College of Law College of Architecture College of Science Institute of Design Institute for Food Safety and Health Lewis College of Human Sciences Pritzker Institute of Biomedical Science and Engineering School of Applied Technology Stuart School of Business Wanger Institute for Sustainable Energy Research (WISER) Student Services One Stop for Student Services Financial Aid Student Accounting Office of Campus Life Residence & Greek Life Athletics Public Safety Center for Disability Resources Career Services International Center Access, Card & Parking Services Office of Event Services Registrar Research Services Research at Illinois Tech Research Institutes & Centers Funding Opportunities Sponsored Research & Programs Research Compliance & Proposal Development Technology Commercialization Office University Technology Park Research News IIT Magazine Nayar Prize Research Institutes IIT Research Institute (IITRI) IIT Pritzker Institute of Biomedical Science and Engineering IIT Wanger Institute for Sustainable Energy Research (WISER) Institute for Food Safety and Health Robert W. Galvin Center for Electricity Innovation Services Phonebook One Stop for Student Services Financial Aid Student Accounting Residence & Greek Life Bookstore Career Services Corporate Relations Academic Resource Center Entrepreneurship Academy Registrar Services (cont.) International Center Center for Disability Resources Public Safety Office of Technology Services OTS Support Access, Card, and Parking Services Shuttle Bus IIT Online Editorial Style Guide Student Health and Wellness Center Jules F. Knapp Entrepreneurship Center Libraries Paul V. Galvin Library Graham Resource Center (Architecture) Center for the Study of Ethics in the Professions Library Downtown Campus Library IFSH Library IIT Archives News & Events IIT Today IIT Magazine Media Room University Calendar Academic Calendar Close Menu IIT College of Science College of Science About People Programs News Events Contact Apply Science Computer Science Course Descriptions Links IIT Undergraduate Bulletin IIT Graduate Bulletin CS Course Overviews (Undergraduate) CS Course Prerequisites (Cross Reference) Recently Offered CS Courses: Spring 2013 - Fall 2016 Tentative Future Offerings Undergraduate CS: Fall 2014 - Spring 2017 Graduate CS: Not available Undergraduate CS 100 Introduction to the Profession An introduction to science and engineering as a profession. Examines the problem-solving process used in engineering and science. Emphasizes the interdisciplinary and international nature of problem-solving and the need to evaluate solutions in terms of a variety of constraints: computational, financial, and social. 1-2-2 (C) » Sample Syllabus CS 104 Introduction to Computer Programming for Engineers Introduces the use of high-level programming language as a problem-solving tool in engineering including basic data structures and algorithms, structured programming techniques, and software documentation. Designed for students who have had little or no prior experience with computer programming. 2-1-2 CS 105 Introduction to Computer Programming Introduces the use of high-level programming language as a problem-solving tool, including basic data structures and algorithms, structured programming techniques, and software documentation. Designed for students who have had little or no prior experience with computer programming. 2-1-2 CS 110 Computing Principles An introduction to the following "big ideas" of computer science: (1) computing is a creative activity; (2) abstraction reduces information and detail to facilitate focus on relevant concepts; (3) data and information facilitate the creation of knowledge; (4) algorithms are used to develop and express solutions to computational problems; (5) programming enables problem solving, human expression, and creation of knowledge; (6) the internet pervades modern computing; and (7) computing has global impacts. 2-1-2 CS 115 Object-Oriented Programming I Introduces the use of a high-level object-oriented programming language as a problem-solving tool, including basic data structures and algorithms, object-oriented programming techniques, and software documentation. Designed for students who have had little or no prior experience with computer programming. For students in CS and CS-related degree programs. 2-1-2 » Sample Syllabus CS 116 Object-Oriented Programming II Introduces more advanced elements of object-oriented programming, including dynamic data structures, recursion, searching and sorting, and advanced object-oriented programming techniques. For students in CS and CS-related degree programs. Prerequisite: CS 115 (minimum grade of C). 2-1-2 » Sample Syllabus CS 201 Accelerated Introduction to Computer Science Problem-solving and design using an object-oriented programming language. Introduces a variety of problem-solving techniques, algorithms, and data structures in object-oriented programming. Prerequisite: (CS 104 or CS 105 or CS 115) with minimum grade of C. 3-2-4 CS 330 Discrete Structures Introduction to the use of formal mathematical structures to represent problems and computational processes. Topics covered include Boolean algebra, first-order logic, recursive structures, graphs, and abstract language models. Credit will not be granted for both CS 330 and MATH 230. Prerequisite: CS 116 or CS 201. 3-1-3 CS 331 Data Structures and Algorithms Implementation and application of the essential data structures used in computer science. Analysis of basic sorting and searching algorithms and their relationship to these data structures. Particular emphasis is given to the use of object-oriented design and data abstraction in the creation and application of data structures. Prerequisite: CS 116 or CS 201. 3-1-3 CS 350 Computer Organization and Assembly Language Programming Introduction to the internal architecture of computer systems-including micro-, mini-, and mainframe computer architectures. Focuses on the relationship among a computer's hardware, its native instruction set, and the implementation of high-level languages on that machine. Uses a set of assembly language programming exercises to explore and analyze a microcomputer architecture. Credit will not be granted for both CS 350 and ECE 242. Corequisite (may be taken concurrently): CS 116 or CS 201. 3-1-3 (C) CS 351 Systems Programming Examines the components of sophisticated multilayer software systems, including device drivers, systems software, applications interfaces, and user interfaces. Explores the design and development of interrupt-driven and event-driven software. Prerequisites: CS 331 and (CS 350 or ECE 242). 3-1-3 CS 397 Special Projects Instructor permission required. Credit: 1 to 6 hours. CS 401 Introduction to Advanced Studies I First course in a two-course sequence that is designed to prepare students for graduate study in computer science. Explores the implementation and application of fundamental data structures and algorithms with an emphasis on object-oriented programming in Java. Examines the relationship between these elements and the mathematical structures that form the foundation of computer science. This course does not apply toward master's or Ph. D. credit in Computer Science. Prerequisite: CS 200 or CS 201. 2-2-3 » Sample Syllabus CS 402 Introduction to Advanced Studies II Second course in a two-course sequence that is designed to prepare students for graduate study in computer science. Explores the development of the multiple layers of software that form a sophisticated software system, from device drivers to application interfaces to user interfaces. Examines how computer architecture influences software development. Emphasizes the design and implementation of interrupt-driven/event-driven software. This course does not apply toward master's or Ph. D. credit in Computer Science. Prerequisite: CS 401. 2-2-3 CS 411 Computer Graphics Overview of display devices and applications. Vector graphics in two and three dimensions. Image generation, representation, and manipulation. Homogeneous coordinates. Modeling and hidden line elimination. Introduction to raster graphics. Perspective and parallel projections. Prerequisite: CS 331 or CS 401 or CS 403. 3-0-3 (T) CS 422 Data Mining This course will provide an introductory look at concepts and techniques in the field of data mining. After covering the introduction and terminologies to Data Mining, the techniques used to explore the large quantities of data for the discovery of meaningful rules and knowledge such as market basket analysis, nearest neighbor, decision trees, and clustering are covered. The students learn the material by implementing different techniques throughout the semester. Prerequisites: CS 331 or CS 401 or CS 403. 3-0-3 (C) (T) CS 425 Database Organization Overview of database architectures, including the Relational, Hierarchical, Network, and Object Models. Database interfaces, including the SQL query language. Database design using the Entity-Relationship Model. Issues such as security, integrity, and query optimization. Prerequisite: CS 331 or CS 401 or CS 403. 3-0-3 (C) (T) CS 429 Information Retrieval Overview of fundamental issues of information retrieval with theoretical foundations. The information-retrieval techniques and theory, covering both effectiveness and run-time performance of information-retrieval systems are covered. The focus is on algorithms and heuristics used to find documents relevant to the user request and to find them fast. The course covers the architecture and components of the search engine such as parser, stemmer, index builder, and query processor. The students learn the material by building a prototype of such a search engine. Requires strong programming knowledge. Prerequisites: CS 331 or CS 401  3-0-3 (C) (T) CS 430 Introduction to Algorithms Introduction to the design, behavior, and analysis of computer algorithms. Searching, sorting, and combinatorial algorithms are emphasized. Worst case, amortized, and expected bounds on time and space usage. Prerequisites: (CS 330 and CS 331) or (CS 331 and MATH 230) or CS 401 or CS 403. 3-1-3 (C) (T) CS 440 Programming Languages and Translators Study of commonly used computer programming languages with an emphasis on precision of definition and facility in use. Scanning, parsing, and introduction to compiler design. Use of compiler generating tools. Prerequisites: CS 331 and (CS 330 or MATH 230) or CS 401 or CS 403. 3-0-3 (T) CS 442 Mobile Applications Development Students will learn a variety of software engineering techniques and design patterns to assist in the rapid development and prototyping of applications, leveraging frameworks and APIs provided by current mobile development platforms (such as Android and iOS). Application lifecycles, data management and persistence mechanisms, and user interface design, among other topics, will be covered. Industry speakers will be invited to speak about best practices. Students (individually or in teams) will take ideas from concept to final implementation and will present their work at the end of the semester. When appropriate, students may take the additional step of deploying their work on the appropriate application marketplace(s). Prerequisites: (CS 331 or CS 401) and (CS 351 or CS 402). (CS 351 and CS 402 may be taken concurrently.) 3-0-3 (T) CS 443 Compiler Construction This course covers the design and implementation of a compiler for modern languages by implementing the following: abstract syntax trees, intermediate representations, static analysis, fix-point operations, symbol tables and type checking, and first-order and high-order function implementation. Students will incrementally create a series of compilers. Prerequisite: CS 440. 3- 0- 3. CS 445 Object-Oriented Design and Programming Introduction to methodologies for object-oriented design and programming. Examines the object model and how it is realized in various object-oriented languages. Focuses on methods for developing and implementing object-oriented systems. Prerequisite: CS 331 or CS 401 or CS 403. 3-0-3 (T) CS 447 Distributed Objects This course provides an introduction to architecture, analysis, design, and implementation of distributed, multi-tier applications using distributed object technology. The course focuses on the services and facilities provided by an Object Request Broker (ORB). Students will use a commercially available ORB and Database Management System to develop distributed object applications. Prerequisite: CS 445. 3-0-3 (C) (T) CS 450 Operating Systems Introduction to operating system concepts-including system organization for uniprocessors and multiprocessors, scheduling algorithms, process management, deadlocks, paging and segmentation, files and protection, and process coordination and communication. Prerequisites: CS 351 or (CS 401 and CS 402) or CS 403. 3-0-3 (T) CS 451 Introduction to Parallel and Distributed Computing This course covers general introductory concepts in the design and implementation of parallel and distributed systems, covering all the major branches such as Cloud Computing, Grid Computing, Cluster Computing, Supercomputing, and Many-Core Computing. Prerequisite: CS 450. 3-0-3. CS 455 Data Communications Introduction to data communication concepts and facilities with an emphasis on protocols and interface specifications. Focuses on the lower four layers of the ISO-OSI reference model. Prerequisite: CS 450. 3-0-3 (T) CS 456 Introduction to Wireless Networks and Performance This class provides an opportunity for students to obtain a fundamental understanding of the nature and operation of the full range of wireless networks (personal, local area, wide area, and satellite) and their performance characteristics, future potential, and challenges through class lectures, assigned readings, homework, projects, and various hands-on experiences. Prerequisites: CS 350 or (CS 401 and CS 402) or CS 403 or ECE 242. 3-0-3 (T)   CS 458 Introduction to Information Security An introduction to the fundamentals of computer and information security. This course focuses on algorithms and techniques used to defend against malicious software. Topics include an introduction to encryption systems, operating system security, database security, network security, system threats, and risk avoidance procedures. Prerequisites: CS 425 or CS 450 or CS 455. 3-0-3 (C) (T) CS 470 Computer Architecture Introduction to the functional elements and structures of digital computers. Detailed study of specific machines at the register transfer level illustrates arithmetic, memory, I/O and instruction processing. Prerequisites: (CS 350 or ECE 242) and ECE 218. 2-2-3 (T) (C) CS 480 Artificial Intelligence: Planning and Control Introduction to computational methods for intelligent control of autonomous agents, and the use of programming paradigms that support development of flexible and reactive systems. These include heuristic search, knowledge representation, constraint satisfaction, probabilistic reasoning, decision-theoretic control, and sensor interpretation. Particular focus will be places on real-world application of the material. Prerequisite: (CS 331 and MATH 474) or (CS 401 and CS 402).  MATH 474 may be taken concurrently. 3-0-3 (T) CS 481 Artificial Intelligence: Language Understanding Theory and programming paradigms that enable systems to understand human language texts and extract useful information and knowledge. For example, extraction of structured event representations from news stories or discovering new research hypotheses by analyzing thousands of medical research articles. the course covers a variety of text analysis and text mining methods, with an emphasis on building working systems. Connections to information retrieval, data mining, and speech recognition will be discussed. Prerequisites: (CS 331 or CS 401 or CS 403) and MATH 474. 3-0-3 (T) CS 482 Information and Knowledge Management Systems This capstone course is designed as a project course whose purpose is to enable students to see how the various algorithms and systems they have learned about in their prerequisite courses can be used in context to create useful knowledge management tools. Class periods will be divided among discussion of design of information and knowledge management systems, lectures on effective project management techniques, and hands-on advising of student project group meetings. Prerequisites: (CS 422 and CS 425 and CS 429) or (CS 422 and CS 425 and CS 481) or (CS 425 and CS 429 and CS 481). 3-0-3 (C) (T) CS 485 Computers and Society Discussion of the impact of computer technology on present and future society. Historical development of the computer. Social issues raised by cybernetics. Prerequisites: COM 421 or COM 424 or COM 425 or COM 428 or COM 435. 3-0-3 (C) CS 487 Software Engineering I Study of the principles and practices of software engineering. Topics include software quality concepts, process models, software requirements analysis, design methodologies, software testing and software maintenance. Hands-on experience building a software system using the waterfall life cycle model. Students work in teams to develop all life cycle deliverables: requirements document, specification and design documents, system code, test plan, and user manuals. Prerequisites: (CS 331 or CS 401 or CS 403) and CS 425. 3-0-3 (C) (T) » Sample Syllabus CS 491 Undergraduate Research Instructor permission required. Credit: 1 to 6 hours. CS 495 Topics in Computer Science This course will treat a specific topic, varying from semester to semester, in which there is particular student or staff interest. Prerequisite: Instructor consent. Credit: 1 to 6 hours. CS 497 Special Projects Credit: 1 to 20 hours. Graduate CS 511 Topics in Computer Graphics Covers advanced topics in computer graphics. The exact course contents may change based on recent advances in the area and the instructor teaching it. Possible topics include: Geometric modeling, Subdivision surfaces, Procedural modeling, Warping and morphing, Model reconstruction, Image based rendering, Lighting and appearance,Texturing, Natural phenomena, Nonphotorealistic rendering Particle systems, Character animation, Physically based modeling and animation. Prerequisite: CS 411. 3-0-3 CS 512 Computer Vision Introduction to fundamental topics in computer vision and the application of statistical estimation techniques to this area. Intended to give the student a good basis for work in this important field. Topics include: Feature extraction, Probabilistic modeling, Camera calibration, Epipolar geometry, Statistical estimation, Model reconstruction, Statistical filtering, Motion estimation, Recognition, Shape from single image cues. Prerequisite: CS 430. 3-0-3 » Sample Syllabus CS 513 Geospatial Vision and Visualization Geospatial information has become ubiquitous in everyday life as evidenced by on-line mapping services such as NOKIA Here Map, Microsoft Bing Map, the “place” features on social network websites such as Facebook, and navigation apps on smart phones. Behind the scenes is digital map content engineering that enables all types of location-based services. Course material will be drawn from the instructor's research and development experience at NOKIA Location and Commerce (formerly NAVTEQ), the Chicago-based leading global provider of digital map, traffic, and location data. This course will provide a comprehensive treatment of computer vision, image processing and visualization techniques in the context of digital mapping, global positioning and sensing, next generation map making, and three-dimensional map content creations. Real world problems and data and on-site industry visits will comprise part of the course curriculum. 3-0-3 » Sample Syllabus CS 520 Data Integration, Warehousing, and Provenance This course introduces the basic concepts of data integration, data warehousing, and provenance. We will learn how to resolve structural heterogeneity through schema matching and mapping. The course introduces techniques for querying several heterogeneous datasources at once (data integration) and translating data between databases with different data representations (data exchange). Furthermore, we will cover the data-warehouse paradigm including the Extract-Transform-Load (ETL) process, the data cube model and its relational representations (such as snowflake and star schema), and efficient processing of analytical queries. This will be contrasted with Big Data analytics approaches that (besides other differences) significantly reduce the upfront cost of analytics. When feeding data through complex processing pipelines such as data exchange transformations or ETL workflows, it is easy to lose track of the origin of data. Therefore, in the last part of the course we cover techniques for representing and keeping track of the origin and creation process of data (its provenance). The course emphasizespractical skills through a series of homework assignments that help students develop a strong background in data integration systems and techniques. At the same time, it also addresses the underlying formalisms. For example, we will discuss the logic based languages used for schema mapping and the dimensional data model as well as their practical application (e.g., developing an ETL workflow with rapid miner and creating a mapping between two example schemata). The literature reviews will familiarize students with data integration and provenance research.  Prerequisite: CS 425. 3-0-3. » Sample Syllabus CS 521 Object-Oriented Analysis and Design This course describes a methodology that covers a wide range of software engineering techniques used in system analysis, modeling and design. These techniques integrate well with software process management techniques and provide a framework for software engineers to collaborate in the design and development process. The methodology features the integration of concepts, including software reusability, frame works, design patterns, software architecture, software component design, use-case analysis, event-flow analysis, event-message analysis, behavioral-life cycle analysis, feature, multiple-product, risk and rule analysis, and automatic code generation. (Credit will not be given for CS 521 if CS 751 is taken.) Prerequisite: CS 445 or CS 487. 3-0-3 » Sample Syllabus CS 522 Data Mining Continued exploration of data mining algorithms. More sophisticated algorithms such as support vector machines will be studied in detail. Students will continuously study new contributions to the field. A large project will be required that encourages students to push the limits of existing data mining techniques. Prerequisite: CS 422. 3-0-3 » Sample Syllabus CS 525 Advanced Database Organization Compre
