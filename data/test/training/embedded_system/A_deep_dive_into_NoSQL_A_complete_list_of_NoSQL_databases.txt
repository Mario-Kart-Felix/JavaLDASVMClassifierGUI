A deep dive into NoSQL: A complete list of NoSQL databases Sectors Banking / Finance Retail / eCom Travel / Hospitality Telecommunication Media / FMCG Crime / Law Health / Pharma Marketing Sports Education Human Resource Privacy / Security Environment Funding Tech & Tools Analytics Data Science Business Intelligence Digital Personalization Machine Learning Artificial Intelligence Visualisation Hadoop Data Mining SQL NoSQL Events Resources Video Books e-Books My Favourites Write For Us Big Data - Made Simple Login Privacy / Security 10 biggest cyber crimes and data breaches till date (Infographic) Marketing How B2B ecosystems & (Big) Data can transform Sales and Marketing Practices Health / Pharma 6 Artificial Intelligence developments revolutionizing health care Banking / Finance No silver bullet in innovation Digital Personalization All you need to know about business models in Digital Transformation SQL 5 common SQL query design mistakes to avoid at all costs Digital Personalization Ali Baba’s magic – open sesame and Digital Transformation Banking / Finance The power of one sigma Artificial Intelligence How to teach an artificial brain to understand right and wrong Artificial Intelligence See this simple introduction to Natural Language Processing (NLP) Analytics 5 big data analytics trends that will change businesses in 2017 Travel / Hospitality 4 ways big data helps airline operations run smoothly NoSQL Partha Sarathi Follow A deep dive into NoSQL: A complete list of NoSQL databases 21st Jul `14, 05:50 PM in NoSQL Wide Column Stores/Column Family databases: Hadoop/Hbase Use Apache HBase when you need random, real-time read/write access to your… Comments Share Favorite Partha Sarathi Contributor Follow Wide Column Stores/Column Family databases : Hadoop/Hbase Use Apache HBase when you need random, real-time read/write access to your Big Data. This project’s goal is the hosting of very large tables billions of rows X millions of columns atop clusters of commodity hardware. Apache HBase is an open-source, distributed, versioned, non-relational database modeled after Google’s Bigtable: A Distributed Storage System for Structured Data by Chang et al. Just as Bigtable leverages the distributed data storage provided by the Google File System, Apache HBase provides Bigtable-like capabilities on top of Hadoop and HDFS. Cassandra The Apache Cassandra database is the right choice when you need scalability and high availability without compromising performance. Linear scalability and proven fault-tolerance on commodity hardware or cloud infrastructure make it the perfect platform for mission-critical data. Cassandra’s support for replicating across multiple datacentres is best-in-class, providing lower latency for your users and the peace of mind of knowing that you can survive regional outages. Cassandra’s data model offers the convenience of column indexes with the performance of log-structured updates, strong support for denormalization and materialized views, and powerful built-in caching. Hypertable Hypertable is a high performance, open source, massively scalable database modeled after Bigtable, Google’s proprietary, massively scalable database.  This page provides a brief overview of Hypertable, comparing it with a relational database, highlighting some of its unique features, and illustrating how it scales. Accumulo Accumulo is based on Google’s BigTable design and is built on top of Apache Hadoop, Zookeeper, and Thrift. Apache Accumulo features a few novel improvements on the BigTable design in the form of cell-based access control and a server-side programming mechanism that can modify key/value pairs at various points in the data management process. Amazon SimpleDB Amazon SimpleDB is a highly available and flexible non-relational data store that offloads the work of database administration. Developers simply store and query data items via web services requests and Amazon SimpleDB does the rest. Unbound by the strict requirements of a relational database, Amazon SimpleDB is optimized to provide high availability and flexibility, with little or no administrative burden. Behind the scenes, Amazon SimpleDB creates and manages multiple geographically distributed replicas of your data automatically to enable high availability and data durability. The service charges you only for the resources actually consumed in storing your data and serving your requests. You can change your data model on the fly, and data is automatically indexed for you. With Amazon SimpleDB, you can focus on application development without worrying about infrastructure provisioning, high availability, software maintenance, schema and index management, or performance tuning. Cloud Data Cloud Data is Distributed Large scale Structured Data Storage, and open source project implementing Google’s Bigtable. It can be found on Github. It appears to be the project of a Korean developer named YKKwon. HPCC HPCC (High-Performance Computing Cluster), also known as DAS (Data Analytics Supercomputer), is an open source, data-intensive computing system platform developed by LexisNexis Risk Solutions. The HPCC platform incorporates a software architecture implemented on commodity computing clusters to provide high-performance, data-parallel processing for applications utilizing big data. The HPCC platform includes system configurations to support both parallel batch data processing (Thor) and high-performance online query applications using indexed data files (Roxie). The HPCC platform also includes a data-centric declarative programming language for parallel data processing called ECL Flink Apache Flink is an open source system for expressive, declarative, fast, and efficient data analysis. Flink combines the scalability and programming flexibility of distributed MapReduce-like platforms with the efficiency, out-of-core execution, and query optimization capabilities found in parallel databases. Splice Splice Machine is essentially a Hadoop implementation of the Java-powered Apache Derby database project. Hadoop was built to run Java apps across clusters of machines, and so Splice Machine simply applies the Hadoop distributed-application method to Derby database workloads. The resulting system runs standard ANSI SQL-99 queries, but Splice Machine provides services for handling specific flavors of SQL, such as Oracle PL/SQL or Microsoft T-SQL Document Store Database : MongoDB MongoDB is an open-source database used by companies of all sizes, across all industries and for a wide variety of applications. It is an agile database that allows schemas to change quickly as applications evolve, while still providing the functionality developers expect from traditional databases, such as secondary indexes, a full query language and strict consistency. MongoDB is built for scalability, performance and high availability, scaling from single server deployments to large, complex multi-site architectures. By leveraging in-memory computing, MongoDB provides high performance for both reads and writes. MongoDB’s native replication and automated failover enable enterprise-grade reliability and operational flexibility Elastic Search Elasticsearch is a search server based on Lucene. It provides a distributed, multitenant-capable full-text search engine with a RESTful web interface and schema-free JSON documents. Elasticsearch is developed in Java and is released as open source under the terms of the Apache License. Couchbase Server Couchbase Server originally known as Membase, is an open source, distributed (shared-nothing architecture) NoSQL document-oriented database that is optimized for interactive applications. These applications must service many concurrent users; creating, storing, retrieving, aggregating, manipulating and presenting data. In support of these kinds of application needs, Couchbase is designed to provide easy-to-scale key-value or document access with low latency and high sustained throughput. It is designed to be clustered from a single machine to very large scale deployments. CouchDB CouchDB is a database that completely embraces the web. Store your data with JSON documents. Access your documents and query your indexes with your web browser, via HTTP. Index, combine, and transform your documents with JavaScript. CouchDB works well with modern web and mobile apps. You can even serve web apps directly out of CouchDB. And you can distribute your data, or your apps, efficiently using CouchDB’s incremental replication. CouchDB supports master-master setups with automatic conflict detection. RethinkDB RethinkDB is an open-source, distributed database built to store JSON documents and scale to multiple machines with very little effort. It’s easy to set up and learn, and it has a pleasant query language that supports really useful queries like table joins, groupings, and aggregations RavenDB RavenDB is also a 2nd generation document database. What we mean by saying that is that a lot of thought has been put on making sure it it does everything right. Features like Includes, Live Projections and Multi-map, and design decisions like making it Safe-By-Default, are all in to make sure RavenDB provides a real added value, and is not just yet another NoSQL solution MarkLogic Server MarkLogic Server is an Enterprise NoSQL Database It fuses together database internals, search-style indexing, and application server behaviors into a unified system. It uses XML documents as its data model, and stores the documents within a transactional repository. It indexes the words and values from each of the loaded documents, as well as the document structure. And, because of its unique Universal Index, MarkLogic doesn’t require advance knowledge of the document structure (its “schema”) nor complete adherence to a particular schema. Through its application server capabilities, it’s programmable and extensible. MarkLogic Server (referred to from here on as just “MarkLogic”) clusters on commodity hardware using a shared-nothing architecture and differentiates itself in the market by supporting massive scale and fantastic performance customer deployments have scaled to hundreds of terabytes of source data while maintaining sub-second query response time. Clusterpoint Server Clusterpoint Server is a database software for high-speed storage and large-scale processing of XML and JSON data on clusters of commodity hardware. It works as a schema free document-oriented DBMS platform with an open source API. Clusterpoint solves the problem of latency in Big data. End-users can instantly search billions of documents and do fast analytics in structured and unstructured data. NeDB NeDB is not intended to be a replacement of large-scale databases such as MongoDB! Its goal is to provide you with a clean and easy way to query data and persist it to disk, for web applications that do not need lots of concurrent connections, for example a continuous integration and deployment server and desktop applications built with Node Webkit. NeDB was benchmarked against the popular client-side database TaffyDB and NeDB is much, much faster. Terrastore Terrastore is a modern document store which provides advanced scalability and elasticity features without sacrificing consistency. Terrastore is based on Terracotta, so it relies on an industry-proven, fast (and cool) clustering technology. Terrastore is accessed through the universally supported HTTP protocol. Terrastore is a distributed document store supporting single-cluster and multi-cluster deployments. Terrastore automatically scales your data: documents are partitioned and distributed among your nodes, with automatic and transparent re-balancing when nodes join and leave. JasDB JasDB is a NoSQL database using a document-based storage mechanism. It was developed with ease of use and minimal configuration in mind to provide an alternative to current document-based implementations out there, to add something new to the industry and give users more choices. JasDB can be installed and configured in almost no time at all. RaptorDB RaptorDB is a JSON based, NoSQL document store database that offers automatic hybrid bitmap indexing and LINQ query filters. This document-store can be used for the back-end store of forums, Blogs, Wikis, Content Management systems and websites. Users only need to know C# programming language to start using RaptorDB. Djondb A document-oriented database is a computer program designed for storing, retrieving, and managing document-oriented information, also known as semi-structured data. DjonDB is one type of document DB. All the documents in Djondb are stored in files and organized by namespace in the data folder and stored in JSON format. EDB EDB is an embedded database engine that provides core functionality for a Microsoft Windows CE application. By using EDB, a developer can create an object store called a volume that can contain multiple databases. The volume is file-based and therefore can be easily copied or moved. EDB is an updated and enhanced version of CEDB and provide support for: 1. Transactions, 2. Access by multiple users, 3. Multiple sort orders, key properties, and databases, 4. Enhanced performance, especially with larger databases Amisa Server Amisa Server is a high performance general purpose database management system (DBMS) built from the ground up to power the next generation of data storage and retrieval applications. Amisa Server outperforms every workload optimized system currently available so completely eliminates the need to deploy multiple specialized systems for a single development initiative. Amisa Server saves money by reducing time to market, administration time and overall deployment costs. Amisa server implements the AQL programming language to manage and manipulate data. AQL is identical to SQL syntactically and functionally. Amisa server fully integrates a distributed search engine with a declarative query language to completely erase the query limitations on current search systems. DensoDB DensoDB is a new NoSQL document database. Written for .Net environment in c# language. It’s simple, fast and reliable. No need of service installation and communication protocol. The fastest way to use it. You have direct access to the DataBase memory and you can manipulate objects and data in a very fast way. It gives you the power of a distributed scalable fast database, in a server or server-less environment. SisoDB SisoDB is a schemaless document-oriented provider for SQL-Server. Using JSON and key-value storage, it lets you persist object graphs without specifying any mappings or extending any base classes interfaces etc. It lets you perform queries against SQL-server, using lambda expressions. It syncs schemachanges on the fly and can assist you to handle more complex model updates. Basically, it is a simple data access tool SDB SDB works as persistent triple stores using relational databases. SDB uses an SQL database for the storage and query of RDF data. Many databases are supported, both Open Source and proprietary. An SDB store can be accessed and managed with the provided command line scripts and via the Jena API. UnQLite UnQLite is an in-process software library which implements a self-contained, serverless, zero-configuration, transactional NoSQL database engine. UnQLite is a document store database similar to MongoDB, Redis, CouchDB etc. as well a standard Key/Value store similar to BerkeleyDB, LevelDB. UnQLite is an embedded NoSQL (Key/Value store and Document-store) database engine. Unlike most other NoSQL databases, UnQLite does not have a separate server process. UnQLite reads and writes directly to ordinary disk files. A complete database with multiple collections, is contained in a single disk file. The database file format is cross-platform, you can freely copy a database between 32-bit and 64-bit systems or between big-endian and little-endian architectures ThruDB ThruDB is a set of simple services built on top of the Facebook Apache Thrift framework that provides indexing and document storage services for building and scaling websites. Its purpose is to offer web developers flexible, fast and easy-to-use services that can enhance or replace traditional data storage and access layers. Key Value / Tuple Store databases : Amazon DynamoDB DynamoDB is a fast, fully managed NoSQL database service that makes it simple and cost-effective to store and retrieve any amount of data, and serve any level of request traffic. Its reliable throughput and single-digit millisecond latency make it a great fit for gaming, ad tech, mobile and many other applications. Azure Table storage Azure Table services provides the potential to store enormous amounts of data, while enabling efficient access and persistence. The services simplify storage, saving you from jumping through all the hoops required to work with a relational database—constraints, views, indices, relationships and stored procedures. You just deal with data, data, data. Azure Tables use keys that enable efficient querying, and you can employ one—the PartitionKey—for load balancing when the table service decides it’s time to spread your table over multiple servers. A table doesn’t have a specified schema. It’s simply a structured container of rows (or entities) that doesn’t care what a row looks like. You can have a table that stores one particular type, but you can also store rows with varying structures in a single table. Riak Riak uses a simple key/value model for object storage. Objects in Riak consist of a unique key and a value, stored in a flat namespace called a bucket. You can store anything you want in Riak: text, images, JSON/XML/HTML documents, user and session data, backups, log files, and more. Redis Redis is a “NoSQL” key-value data store. More precisely, it is a data structure server. Not like MongoDB (which is a disk-based document store), though MongoDB could be used for similar key/value use cases. The closest analog is probably to think of Redis as Memcached, but with built-in persistence (snapshotting or journaling to disk) and more datatypes. Those two additions may seem pretty minor, but they are what make Redis pretty incredible. Persistence to disk means you can use Redis as a real database instead of just a volatile cache. The data won’t disappear when you restart, like with memcached. Aerospike Aerospike is the world’s fastest, most reliable in-memory open source NoSQL database that operates with unprecedented speed at scale on just a handful of servers. Aerospike enables a new class of applications that combine transactions and hot analytics, and process billions of objects, 20K-2M+ transactions per second (TPS) and 100GB-100TB+ of data with predictable sub-millisecond latency and ACID reliability. The first flash-optimized in-memory NoSQL database, Aerospike can run in pure RAM with spinning disks or as a hybrid memory database with RAM and flash. This enables our customers reap the benefits of the highest price-to-performance ratio available today. Aerospike has been powering a wide range of context driven application – from web portals to universal profile stores for real-time bidding and cross-channel marketing platforms. FoundationDB FoundationDB supports ACID transactions with high performance while maintaining the NoSQL benefit of scalability with distributed processing. Most NoSQL databases make no attempt to support ACID transactions. Those that do usually make fundamental compromises, such as supporting only local transactions on a single key, document, etc. FoundationDB supports global transactions over any number of keys. Read more about the importance of global transactions in the Transaction Manifesto. LevelDB LevelDB is based on concepts from Google’s BigTable database system. The tablet implementation for the BigTable system was developed starting in about 2004, and is based on a different Google internal code base than the LevelDB code. That code base relies on a number of Google code libraries that are not themselves open sourced, so directly open sourcing that code would have been difficult. LevelDB stores keys and values in arbitrary byte arrays, and data is sorted by key. It supports batching writes, forward and backward iteration, and compression of the data via Google’s Snappy compression library. LevelDB is not a SQL database. Like other NoSQL and Dbm stores, it does not have a relational data model, it does not support SQL queries, and it has no support for indexes. Applications use LevelDB as a library, as it does not provide a server or command-line interface. Berkeley DB Berkeley DB (BDB) is a software library that provides a high-performance embedded database for key/value data. Berkeley DB is written in C with API bindings for C++, C#, PHP, Java, Perl, Python, Ruby, Tcl, Smalltalk, and many other programming languages. BDB stores arbitrary key/data pairs as byte arrays, and supports multiple data items for a single key. Berkeley DB is not a relational database. BDB can support thousands of simultaneous threads of control or concurrent processes manipulating databases as large as 256 terabytes, on a wide variety of operating systems including most Unix-like and Windows systems, and real-time operating systems. Berkeley DB is also used as the common name for three distinct products; Oracle Berkeley DB, Berkeley DB Java Edition, and Berkeley DB XML. These three products all share a common ancestry and are currently under active development at Oracle Corporation. Oracle NoSQL Database The Oracle NoSQL Database is a distributed key-value database. It is designed to provide highly reliable, scalable and available data storage across a configurable set of systems that function as storage nodes. Data is stored as key-value pairs, which are written to particular storage node(s), based on the hashed value of the primary key. Storage nodes are replicated to ensure high availability, rapid failover in the event of a node failure and optimal load balancing of queries. Customer applications are written using an easy-to-use Java/C API to read and write data. GenieDB GenieDB, a provider of distributed relational database technology, has launched a new database-as-a-service (DBaaS) offering, the GenieDB Globally Distributed MySQL-as-a-Service. The new GenieDB offering is a scalable DBaaS that enables enterprises to use the GenieDB automated platform to build Web-scale applications with the benefit of geographical database distribution. Geo-distribution provides enterprises with continuous availability during regional outages and better application response time for globally distributed users. Unlike many other database solutions, GenieDB enables developers to meet the challenges of cloud environments without having to give up critical database capabilities or abandoning investments in existing database infrastructure,” said Cary Breese, CEO of GenieDB, in a statement. “The technology provides an easy-to-use platform that overcomes the difficulties of managing a fully distributed database in the cloud, while allowing organizations to continue to use native MySQL.” BangDB Multiflavored, distributed, transactional, high performance NoSQL database written in C/C++ from scratch for scale out apps suitable for heavy lifting. BangDB is available as Embedded Datastore, Client Server Model, Data Grid / Elastic Data Store. Scalaris Scalaris is a scalable, transactional, distributed key-value store. It was the first NoSQL database, that supported the ACID properties for multi-key transactions. It can be used for building scalable Web 2.0 services. Scalaris uses a structured overlay with a non-blocking Paxos commit protocol for transaction processing with strong consistency over replicas. Scalaris is implemented in Erlang. Tokyo Cabnit/Tyrant Tokyo Cabinet is a library of routines for managing a database. The database is a simple data file containing records, each is a pair of a key and a value. Every key and value is serial bytes with variable length. Both binary data and character string can be used as a key and a value. There is neither concept of data tables nor data types. Records are organized in hash table, B+ tree, or fixed-length array. Tokyo Cabinet is developed as the successor of GDBM and QDBM on the following purposes. Voldemort Voldemort is a distributed data store that is designed as a key-value store used by LinkedIn for high-scalability storage. It is named after the fictional Harry Potter villain Lord Voldemort. Voldemort is still under development. It is neither an object database, nor a relational database. It does not try to satisfy arbitrary relations and the ACID properties, but rather is a big, distributed, fault-tolerant, persistent hash table. A 2012 study comparing systems for storing APM monitoring data reported that Voldemort, Cassandra, and HBase offered linear scalability in most cases, with Voldemort having the lowest latency and Cassandra having the highest throughput. Dynomite Dynomite currently provides integrated storage and distribution, requiring developers to adopt a simple, key/value data model to get the availability and scalability advantages. By separating these two functions, developers can take advantage of the sophisticated distribution and scaling techniques of Dynomite with great flexibility in the choice of data model. In this new architecture, Dynomite handles data partitioning, versioning, and read repair, and user-provided storage engines provide persistence and query processing. MemcacheDB MemcacheDB  is a persistence enabled variant of memcached, a general-purpose distributed memory caching system often used to speed up dynamic database-driven websites by caching data and objects in memory. The main difference between MemcacheDB and memcached is that MemcacheDB has its own key-value database system based on Berkeley DB, so it is meant for persistent storage rather than as a cache solution. MemcacheDB is accessed through the same protocol as memcached, so applications may use any memcached API as a means of accessing a MemcacheDB database c-treeACE database c-tree database is a cross-platform database engine developed by FairCom Corporation. Software developers typically embed the c-treeACE engine within the applications that they create and then deploy the application and engine together as an integrated solution. At its core, c-treeACE uses a record-oriented, Indexed Sequential Access Method (ISAM) structure offering high speed indexing mechanisms over those files. Developers can use these direct access methods to design the data and index structures that closely parallel the needs of their application. This paradigm is sometimes referred to as an application-specific database or an embedded database because of the tightly coupled nature of the application and database. KitaroDB KitaroDB is a free NoSQL database that runs natively in the WinRT, Win32, and .NET environments. KitaroDB is a fast, efficient data store that supports key-value pairs as well as intrusive keys, and can be used by developers across Microsoft’s platforms. Based on a commercial database driving enterprise applications for more than 25 years, KitaroDB brings NoSQL to WinRT, the new Windows 8 UI, and also supports Win32 and .NET applications. Capable of thousands of operations per second, KitaroDB is nevertheless small enough to fit on client devices leaving resources available for the rest of the application. The easy-to-use interface enables developers to spend their time programming application features, and not worrying about how to push their schemaless data into a rigid schema.” hamsterdb hamsterdb runs on a variety of platforms, including tablets and phones, desktop machines and cloud instances. All major operating systems are supported. Unlike other key-value databases, hamsterdb knows about the type of the keys and will use that information to optimize storage and algorithms. A database storing integer keys uses a completely different memory layout than variable length binary keys. This memory layout drastically reduces the file size, reduces I/O, increases performance and improves scalability. STSdb STSdb is an open-source, client/server and embedded NoSQL database and virtual file system in one. It is built up from scratch without using any third party components. Data is stored in a very flexible key-value format where the key consists of the combination of sub-keys and an associated value. The innovative design makes STSdb perfect for BigData and cloud applications. Tarantool Tarantool is a NoSQL database running inside a Lua program. It’s created to store and process the most volatile and highly accessible Web data. In Tarantool, all data is maintained in RAM. Data persistence is implemented using a Writ
