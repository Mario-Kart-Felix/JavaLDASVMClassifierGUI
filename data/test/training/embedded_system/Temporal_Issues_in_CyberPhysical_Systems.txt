Temporal Issues in CyberPhysical SystemsDavid Broman, Patricia Derler, John C. EidsonUniversity of California, Berkeley, CA, USALinkoping University, Swedenbroman, pd, eidsoneecs.berkeley.eduAbstractThis paper reviews the use of time, clocks, andclock synchronization protocols in cyberphysical systems CPS.Recent advances in the area of timing suggest avenues of researchand potential new application areas. We discuss how introducingtimestamps and clocks can help overcome issues such as latency,jitter, and determining correct execution order. Furthermore, weshow how system complexity can be reduced and distributionas well as parallelism can be done deterministically. We alsopoint to recent work in raising time to first class citizen status inmodeling and implementation. In particular, we describe designand execution environments of CPS and specialized hardwaresuch as predictable timing architectures where time plays a keyrole.Index TermsTimestamps, Clocks, Synchronization, Ordering, Simultaneity, Discrete event systems, Distributed control,Realtime systems, and PTIDESI. INTRODUCTIONThis paper discusses temporal issues in the design andimplementation of cyberphysical systems CPS. Increasinglysynchronized clocks and timestamps are being used to improveapplication performance in distributed CPS. We review thestate of the art in the underlying clock and synchronizationtechniques and illustrate how this technology helps overcomeissues such as latency, jitter, and determining correct executionorder. Recent research in the areas of design and executionenvironments and specialized hardware such as predictabletiming architectures raises time to first class citizen status inmodeling and implementation. Finally we suggest avenues offuture research and potential new application areas.Section II of this paper briefly reviews the traditional useof time and clocks in CPS. Section III reviews the currentstate of the art in distributed timing systems and notes recentimprovements and support available to designers of CPS. Section IV outlines existing and recent techniques for using timestamps and clocks to alleviate problems in ordering events andovercoming some issues related to latency, jitter and systemcomplexity. Section V discusses recent results in raising timingissues to first class citizen status in design and executionenvironments used to create CPS. Section VI reviews analysistechniques used in designing CPS and recent efforts to createThis work was supported in part by the iCyPhy Research Center IndustrialCyberPhysical Systems, supported by IBM and United Technologies, and theCenter for Hybrid and Embedded Software Systems CHESS at UC Berkeleysupported by the National Science Foundation, NSF awards 0720882 CSREHS PRET and 0931843 ActionWebs, the Naval Research LaboratoryNRL N0013121G015, and the following companies Bosch, NationalInstruments, and Toyota. The first author was funded by the SwedishResearch Council 6232011955.timecentric hardware support including the use of predictabletiming architectures. Finally we summarize and suggest newavenues of research suggested by the discussion.II. TRADITIONAL USES OF TIME AND CLOCKS IN CPSA cyberphysical system consists of a digital computationportion, the cyber portion, and whatever the cyber portioninteracts with, i.e., the physical portion. Here, physical isunderstood to cover not only artifacts modeled by the laws ofphysics but also artifacts modeled by the laws of chemistry,biology and increasingly manmade laws, e.g., telecommunication protocols.For our purposes it is convenient to divide CPS into twocategories, as the consideration of time and clocks is somewhatdifferent in each. The first category, data acquisition, consistsof systems where the primary focus is on observing the physical world. The second category, control, consists of systemsincorporating closed loop control with reasonably stringentloop requirements. Of course, there are many systems that donot fit cleanly into one of these categories, e.g., supervisorycontrol and data acquisition SCADA systems. However, webelieve the role of timing in these systems can be understoodbased on the characteristics of timing in each of the twocategories.A. Data Acquisition SystemsA data acquisition CPS consists of one or more computersthat acquire data from sensors that observe the physicalworld. Familiar examples are surveillance systems, test andmeasurement systems, and environmental monitoring systems.The purpose of a data acquisition system is to acquire,record, and display data describing the physical world foreventual evaluation by humans or computers. The raw data isoften correlated or otherwise subject to algorithmic processingprior to recording or display. However, any action taken basedon the data is delayed in time often due to a human in theloop, such that typically it is inappropriate to model it as acontrol system.It is important that data acquired from several sensors beindexed in such a way as to permit meaningful analysis. Forexample, we may need to order data to 1 help establish causalrelationships e.g., the flight data recorders for aircraft and datarecorders on military test ranges, 2 to enable identificationand tracking, e.g., surveillance, 3 to determine location e.g.,trilateration for gunshot location, or 4 in a test and measurement system to ensure that the device under tests meets itsspecifications.In almost all distributed CPS, data indexing is done usingtimestamps. The accuracy and precision of the timestampsis application dependent. For example, for gunshot detection,millisecond accuracy is sufficient, but for locating clandestineradio transmitters, submicrosecond accuracy is required. Inmost cases, timestamps are required to be based on wall clocktime, e.g., coordinated universal time UTC or internationalatomic time TAI. In complex or extended physical systemswith multiple computers this requires some sort of timedistribution protocol as discussed in Section III.Prior to the advent of digital computers, the global navigation satellite system GNSS, and networkbased time protocols, data acquisition systems typically recorded measurementson mechanical chart recorders, analog tape recorders or onfilm. The time of measurement was based either on the speedof the recording medium or in the case of film on recordedor photographed time codes such as IRIGB1 1. In theUnited States, wide area timing and reference to standardtime made use of WWV2 radio broadcasts 2. With theadvent of digital computers, the GNSS, and networkbasedtime protocols, the timestamping of acquired data can easily bedone with accuracies adequate for all but the most demandingapplications. Timestamps are associated with data either uponreceipt at a computer or, increasingly more common, at thesource using local clocks synchronized over a network asdiscussed in Sections III and VI.B. Control SystemsIn contrast to data acquisition systems, a control CPSconsists of one or more computers that 1 acquire data fromsensors that observe the physical world, 2 execute a controlstrategy, and 3 instantiate changes in the physical world viaactuators. Familiar examples are flybywire aircraft control,automotive cruise control, HVAC heating, ventilation, andair conditioning systems for buildings, and the control ofindustrial processes and machinery. Prior to the advent ofdigital computers and networks, control systems were basedon analog electronics, and mechanical, pneumatic, or hydrauliccomponents.Almost all modern control systems of appreciable size arebased on digital computers and networks, and fall into tworough categories safety critical and nonsafety critical.Safety critical systems are those where failure may result in loss of life, severe financial loss, or unacceptableinconvenience. In many cases, these systems are subject togovernment certification and required to be provably correct.Timing is invariably a major issue in the design of such1Interrange instrumentation group IRIG. IRIGB is one of the timecodes created by the TeleCommunications Working Group of the InterRangeInstrumentation Group, the standards body of the Range Commanders Councilof the US Department of Defense.2WWV is the call sign of the United States National Institute of Standardsand Technologys NIST shortwave radio station in Fort Collins, Colorado.systems which typically use a timeslotted control protocol toperform sensing, computation, networking, and actuation on aperiodic schedule. This is enforced by a local clock and, inthe case of a networked system, by local clocks synchronizedover the network or by basing time on the slot boundariesin a time division multiple access TDMA network protocol,i.e., the timetriggered model of computation 3. This fixedschedule provides a degree of composability and admits toformal verification procedures needed for certification 4. Thistype of system plays a critical role in the ARINC 5 andSAE 6 standards for aircraft.While nonsafety critical systems can use the timetriggeredapproach, many require different execution strategies often dueto the presence of highly asynchronous inputs. For example, atest and measurement system verifying the performance of aradar system requires careful temporal coordination betweenseveral instruments and the device being tested. However,the instrument system controllers invariably depend on acombination of code execution time and hardware triggers todetermine system timing. Adjusting such systems is difficultand the result is not robust in the face of system evolution orreplacement of devices or controllers with faster computers.Alternative techniques for designing these systems are discussed in Sections V and VI.C. Internet of ThingsIn recent years, mobile devices such as smart phones haveproliferated to the extent that there are few places on earthwithout mobile coverage. Furthermore, these devices increasingly incorporate sensors. For example, the Samsung GalaxyS4 smart phone reportedly incorporates an accelerometer, agyroscope, a hygrometer, a magnetometer, a light sensor,a thermometer, and a barometer as well as a camera. Theexistence of these devices in principle enables unprecedentedcapabilities for data acquisition and control. The paradigm ofconnecting such devices, usually termed the Internet of thingsIoT, has spawned lots of research on the many technicaland social issues involved 7, 8. Many, if not all potentialapplications or services of the IoT, will require the explicit useof a global or local timebase. However, the implementationof such a timebase in an ever changing, mobile and largelywireless environment presents new challenges. Except possiblyfor localized applications, the simplest way to provide sucha timebase is via the communications infrastructure, i.e., acombination of the Internet and mobile devices such as smartphones. Many wireless devices will have access to GNSSreceivers which can provide submicrosecond global time.However, GNSS has limitations as discussed in Section IIIB.In particular, most mobile devices using GNSS will exhibitworse time accuracy than fixed installations due to their poorerantennae and the requirement to compute location as well astime in solving the equations based on received satellite signals. Fixed devices not only have better antennae but can haveaccurate position information available, e.g., from a surveyor averaging spatial information over extended periods, thusincreasing the accuracy of computing time from the equations.Fig. 1. Diagram of China Mobile field trial. Photos courtesy of Huawei.Fortunately, the worlds telecommunication providers, whowill carry the bulk of the IoT traffic, are in the processof standardizing and deploying robust submicrosecond timeservices for the operation of their own networks 9, 10.They are therefore in a position to make time available to anyconnected device or application network. Figure 1 is a diagramof the topology of a field trial conducted by China Mobile thatdelivered better than 3s time transfer over each of the 4050km paths under normal traffic loads 10. The figure alsoshows the type of equipment used in the trial.III. STATE OF THE ART OF DISTRIBUTED TIMING SYSTEMSToday a device or system designer has a wide range ofoptions for implementing clocks within devices and establishing a common sense of time among devices. These optionsresult from advances during the last twenty years in oscillatortechnology, in GNSS, in network technology, and in time andfrequency distribution protocols.A. Oscillator TechnologyIn a centralized timing system, a remote device obtainsthe time by querying a central clock, a process that limitsthe accuracy to milliseconds due to communication latencyfluctuations. As discussed in Section IIIC, networkbased timedistribution protocols synchronize the local clocks of devicesin a distributed system. The principal oscillator limits onobtainable synchronization accuracy and precision of clocksare the temperature stability and the noise characteristics ofthe local oscillators driving the clocks. In most CPS devices,the oscillators will be quartz crystal oscillators.5071A CesiumAccuracy 5 1013Stability  8 1014 60KRubidiumAccuracy  5 1011Allandeviation101410131012101110101091081071015Day102 100 102 104 106 108Observation interval,  , in secondsSecond Minute HourHydrogen maser  250K10811D  120CTS CB3LV  1GPSRakon RFP040Fig. 2. Allan deviation of several oscillators.The oscillation frequency of a quartz crystal is temperaturedependent. Quartz crystal oscillators typically have a temperature fractional frequency dependence, ff , from  104 foran uncompensated crystal to  4  109 from 0C to 70Cfor an ovenized oscillator, OCXO, such as the HP 10811D.For example, a 1C temperature rise over a 1s interval usingan unsynchronized 100PPM oscillator results in a time errorof 100s over the 1s interval. Using an HP 10811D, the erroris reduced to 4ns.In addition to temperature dependence, ff is limited bynoise processes within the crystal. This dependence is shownin Figure 2 for a variety of oscillators. The Allan deviation is afunction of the observation interval,  , with short observationtimes limited by white phase noise, long observation timeslimited by random walk frequency noise and the noise floor byflicker frequency noise 11. The observation interval,  , limitsintegration times whether for data averaging or synchronizingto another clock. Once the noise floor is reached, increases inthe averaging time will decrease the temporal accuracy.Figure 2 shows plots of ff , the Allan deviation, fora typical uncompensated crystal, CTS CB3LV, and RakonRFP040 and HP 10811D OCXOs. Uncompensated oscillators,e.g., CTS CB3LV, commonly used in computers cost around1, while a high quality ovenized oscillator can cost more than100 forcing designers to carefully consider application timingrequirements in selecting an appropriate oscillator. Recentlyminiature OCXOs such as the Rakon RFP040 12 havereached the market with performance nearly equal to instrument grade oscillators such as the HP 10811D but with costs inthe range of 10. For applications requiring long observationintervals a variety of atomic clocks are available. Atomicclocks depend on a quartz oscillator for short observationinterval stability and on some atomic resonance for longer termstability. Atomic clocks most commonly used in CPS are therubidium and the cesium clocks whose properties are shownin Figure 2. Rubidium clocks are found in great numbersin telecommunications base stations, which has driven thecost down to around 700, while the more expensive cesiumclocks, 60000, are found in lesser numbers in the coreof telecommunications systems, military systems, and somescientific CPS.Recently, socalled chip scale cesium atomic clocks havebeen introduced into the market 13. These cesiumbasedoscillators currently have rubidium performance but in a17cm3, 35 grams, 120mW form factor. At a price of1500 they are used mostly in special circumstances suchas oil exploration sensors. However, the cost will no doubt begreatly reduced as larger numbers are used. These oscillatorspromise much longer averaging times, up to an hour, andtemperature stability  4  1010 from 0C to 70C whichshould eventually open up a new class of designs for CPSdevices.B. GNSS TechnologyOver the past twenty years, satellitebased time and location services have found their way into numerous CPS,e.g., military applications, telecommunications base stations,surveillance and tracking. Today these services are obtainableworldwide from the global positioning satellite GPS systemmaintained by the United States Department of Defense andthe Glonass system maintained by the Russian Defense Forces.The BeiDou system formerly known as Compass maintainedby the Chinese government is currently available only inChina and environs but is expected to provide global coveragein the next decade. Another regional system is the IndianRegional Navigational Satellite System. The Galileo systemis a similar project of the European community but is not yetfully operational. Collectively these systems are termed GlobalNavigation Satellite Systems GNSS.GNSS can be used as a source of time for a CPS either as thesource for a networked time distribution protocol or as a sourcefor individual devices. In either case the GNSS receiver musthave line of sight communication with a sufficient number ofsatellites. This is problematic in urban canyons and in theinterior of buildings. As noted, all of the existing systemsare controlled by a national government which has raisedconcern in some circles as to the availability during periodsof international tension. Each of the GNSS systems, e.g.,GPS, Glonass, derives its time from the national laboratoryof the host country. The consistency of UTC time betweenthese systems has been measured to be tens of nanosecondsat best 14. GNSS systems are also subject to inadvertent orintentional degradation either by spoofing of satellite signals orsimply raising the noise floor by jamming. These issues are amajor issue for safety critical and public infrastructure systemsas evidenced by discussions at recent telecommunicationsconferences 1518.GNSS timing accuracy over continental scale distance isunmatched by any other technology with the exception oftwoway satellite time transfer TWSTT which is practicalonly for national laboratories. A GNSS receiver synchronizesa local clock based on signals from the satellites. The accuracydepends on the quality of the quartz oscillator and the averaging time as noted in the discussion of Figure 2 in SectionIIIA. A cheap crystal is unlikely to do better than 100ns.With a welldesigned receiver and an oscillator permittingintegration times of 100s, 100ns accuracy can be achieved.With an oscillator permitting integration times of 24 hours,10ns accuracy can be achieved 19.C. Network Timing Distribution ProtocolsAs noted in Section IIA, time distribution prior to 1985was typically via WWV, IRIGB and proprietary methods. Thenetwork time protocol NTP became available around 1985and today is the dominant networkbased time distributionsystem and is implemented in essentially every PC in theworld. NTP accuracy is on the order of milliseconds and islimited by network and operating system latency jitter. GPShas been available worldwide since 1994 and can achieve submicrosecond accuracy as noted in Section IIIB.In recent years two additional networkbased time distribution protocols designed for CPS have been standardized. Thefirst, SAE6802 6, is designed for safetycritical systems andhas been implemented in several recently designed aircraft.SAE6802 is designed for reasonably compact systems such asan aircraft and achieves submicrosecond accuracy. SAE6802partitions IEEE 802.3 bandwidth using time slots allocatedto safetycritical and normal traffic thereby providing latencyguarantees for safetycritical traffic and best effort for normaltraffic.The second major protocol is the precision time protocolPTP, defined in standard IEEE 1588 20. IEEE 1588 specifies a masterslave synchronization hierarchy with the root, thegrandmaster, determining the time scale for the system. Thegrandmaster in turn can be synchronized to GNSS or othersources of time traceable to international time standards. IEEE1588 has achieved wide acceptance and implementation in theareas of telecommunications, data acquisition, industrial automation and power systems. Because it specifies specializednetwork bridges, socalled boundary and transparent clocks,that greatly reduce bridge timing jitter, IEEE 1588 can easilyachieve 100ns synchronization over a local area network andwith care 10ns 21, 22.In addition, recent work at CERN has achieved 100psaccuracy and 8ps precision across three 5km hops of fiberoptic cable using a combination of IEEE 1588 and layer 1Source SinkMessage 1Message 2t1t4t3t2D1D2Fig. 3. Two way time transfer.syntonization 23. This work will likely be incorporated intothe upcoming revision of IEEE 15882008.Other than oscillator characteristics discussed in SectionIIIA, the principal accuracy limitation in two way timetransfer techniques such as NTP and PTP is asymmetry inthe communication paths. Two way time transfer protocolswork via an exchange of signals which are timestamped asillustrated in Figure 3. The source and sink for the transferprocess exchange signals which are timestamped based onthe local clocks on transmission and receipt at shown. Theasymmetry is the difference in the propagation times of thetwo messages, i.e., D1 D2. In order to solve the equationsdescribing this process it is necessary to assume that D1  D2i.e., that the path is symmetric. With this assumption theequations for computing the offset between the two clocksand the mean path delay areoffset  t2  t1 t4  t32 1delay  t2  t1  t4  t32 2The error in the offset is one half of the asymmetry D1D2.Unfortunately the asymmetry cannot be measured using anexchange of signals but must be determined by some othermeans. There are three principal sources of this asymmetry The transceivers between digital representations and thesignals on the network media, i.e., the PHY3, typicallyhave different latencies on the transmit and receive paths.Depending on the media, the PHY asymmetry can beseveral tens of nanoseconds. These asymmetries are extremely difficult to measure and are best determined bythe PHY manufacturer. A recent standard, IEEE 802.3bf,provides an abstract interface designed for IEEE 1588based implementations that allows PHY manufacturersto provide these latency parameters 24. The communication medium itself may be asymmetric.For example the length of the forward and reverse fibersin an optical link, chromatic dispersion in a full duplexwave division multiplex fiber optic link, or the different3PHY is the term often used to designate a device implementing the physicalor lowest layer, i.e., layer 1, of the OSI seven layer computer network model.twist rates in Category 5 twisted pair copper cable allintroduce asymmetry. Asymmetry can be calibrated atinstallation. For some media it is possible to modelasymmetry as a function of mean path delay which canbe measured using two way protocols. In routed systems, such as the Internet, unless carefulattention is paid to network design, it is possible for theforward and reverse paths to take different routes throughthe system. This can produce very large asymmetry. Evenwith identical routes the differences in network traffic onthe forward and reverse paths may produce asymmetryunless onpath time support is provided, for example viaboundary or transparent clocks when using IEEE 1588.If the asymmetry is known then the appropriate correction canbe made to the clock offset.These protocols establish a global sense of precise time ina networked distributed system. Each node of the network hasa local clock synchronized to its peers that may be used for avariety of purposes as outlined in next section.IV. EXPLICIT TIME TECHNIQUES IN CPSUntil recently the principal uses of time in CPS were foundin safetycritical systems as the foundation for time triggeredarchitectures 3 and in data acquisition and SCADA applications where data was timestamped upon receipt at a centralprocessor. Barbara Liskov noted that NTP spurred interest inusing global time to improve mainstream computer sciencealgorithms and protocols by Examining the messages toidentify those that could be avoided by using timestamps 25.Given that accurate global time can now be implementedusing the protocols discussed in Section IIIC, it is appropriateto ask whether the techniques suggested by Liskov can beapplied to CPS. We believe that this is the case and suggestthe following examples as evidence.A. Replacing Messages with Reasoning About TimestampsRecently the Google Spanner project used NTP to enablebetter performance in a global database by Transformingcommit order reasoning to timestamp order reasoning 26.While not a CPS, Spanner is an example of using timestampsto enforce consistent global state which is a common requirement in many CPS.Rockwell reportedly uses timestamps in specifying motioncontrol trajectories of components in high speed machinery toreduce the message traffic between controllers and actuationdevices 27. The actuator is provided with trajectory specification which can replace controller pointbypoint commandto an initialization command and less frequent minor trajectorycorrections, thus saving bandwidth.B. Reducing Complexity, Signal Conditioning, and Calibration IssuesIn control systems with thousands of sensors and actuators,bringing dedicated analog wiring to a central point leads tocomplexity, signal conditioning, bandwidth, calibration andresponse time problems. Moving to a distributed system withFig. 4. General Electric MarkVIe distributed measurement device. Photocourtesy of General Electric.Fig. 5. Bridge vibration monitoring. Photo courtesy of Bruel  Kjaer.local processing ameliorates many of these issues but requiresglobal time to realize temporal control equivalent to thecentralized architecture. General Electric took this approachin their MarkVIe control system for power plants and windfarms 28. Figure 4 shows one of the MarkVIe distributeddevices. This device communicates via Ethernet, synchronizesa local clock using IEEE 1588, and includes both a smallcomputer as well as local signal conditioning for sensorsand actuators. General Electric uses these devices to managethe several thousand sensors and actuators used in a typicalthermal or nuclear power plants replacing long analog sensorcables with local processing and timestamping and usingEthernet communication to centralized supervisory control.Bruel  Kjaer 29 use global time in data acquisitionsystems for vibration monitoring to improve accuracy, and tosimplify wiring and calibration. For example, Figure 5 showsa bridge vibration monitoring application where a local dataacquisition device captures and timestamps sensor data andcommunicates the data to a central analysis computer viaEthernet. Boeing has developed a similar application for dataacquisition used in aircraft monitoring 30.Similar efforts are being investigated in the power industryfor substation automation and control of the grid 31, 32.Certainly the most exciting example of the use of timestamps and a distributed architecture to reduce complexity andFig. 6. CERN to Gran Sasso CNGS neutrino speed test. Photo courtesy ofCERN.address signal conditioning and calibration issues is the CERNWhite Rabbit project 23, 3335. Figure 6 illustrates asection of the accelerator that sends neutrinos from CERN toGran Sasso, a distance of 732km in an experiment to measurethe overall neutrino time of flight. The White Rabbit timingsystem was used to verify the timing of measurements crucialto determining that the neutrinos indeed traveled at less thanthe speed of light 23.V. DESIGN AND EXECUTION WITH TIME AS A FIRST CLASSCITIZENIn this section we discuss recent results in raising timingissues to first class citizen status in design and execution environments used to create CPS. In synchronous programmingmodels 36, logic ticks are part of the language semantics.These ticks are used to order events and is not necessarilyrelated to the actual physical time observed by the computingplatform.A. TimeTriggered Programming ModelsExplicit modeling of time becomes a fundamental part inthe timetriggered programming paradigm. In a timetriggeredsystem, certain actions such as IO operations take place atfixed, periodic time instances. Other actions such as performing computations and updating internal states can happenat any time between IO operations. Time determinism isachieved by specifying the timing behavior of the softwareexecution independent from the platform. At this point, timeis considered purely logical and used to define an order onthe computations. Functional correctness can be verified byexecuting the system in a way that obeys the order providedby the logical times. When deploying the software, the logicaltimes are mapped to physical times and a check must beperformed to ensure that the underlying hardware can meetthe timing requirements. In such timetriggered programmingmodels, software is typically separated into tasks. For eachtask, the release time, the time for reading inputs, and thetime for writing outputs, is strictly defined. Timetriggeredprogramming models have been used in PLC designs and laterformalized in languages such as Giotto 37, the hierarchicaltiming definition language HTL 38, the timing definitionlanguage TDL 39, and others. In general, timetriggeredsystems perform more computations than necessary since tasksare executed in every period, even when inputs to the taskremain unchanged. One can think of optimizations to suchsystems by buffering inputs for the next period and onlyexecuting if inputs changed. However, there is still someoverhead in the buffering and the reaction to input changesis delayed to the next period start.B. PTIDES, an EventTriggered Programming ModelPTIDES Programming Temporally Integrated DistributedEvent Systems 40 is a programming model that uses timestamps to perform deterministic distributed computations. Allinputs from the environment are received by sensors whichassign timestamps to each value. These timestamps are storedwith the values throughout the computation path from sensorsto actuators. Along the path, the timestamps are carefullymodified to meet application and system timing requirements.First, the desired fixed delay between sensing and actuationis modeled. Such a delay specification is usually given by thecontrol engineer who determines the controller performancebased on the given time delay. Delay requirements betweensensing and actuation can also come from the characteristicsof the physical environment. For instance, one can estimate thetime it takes between two events and use this information toperform an actuation on the second event. An example is givenin 41, where a controller for a printing press determines theexact time to exchange paper rolls on the fly.PTIDES is an eventtriggered programming model thatleverages discrete event simulation techniques for execution.In a PTIDES system, components communicate via timestamped events. Static as well as dynamic analysis leveraginginformation about the structure, the inputs, and the state ofother components in the system allow an efficient executionto be implemented. Unlike in typical discrete event DEsimulations, the relation of timing specification in terms oflogical time to physical time allows for out of timestamporder processing of unrelated events. Knowing which eventsare unrelated, allows not only out of timestamp order processing but also dynamic distribution over multiple coresand distribution over multiple platforms without changing theobservable behavior at the actuator outputs. Some results onmulticore execution of PTIDES programs are shown in Figure7. The upper trace plots the designed events using the Ptolemysimulation platform as a PTIDES design environment. Fromthis design, code was generated for execution on two differentplatforms one with a Renesas processor and the other witha multicore XMOS processor. The middle and bottom tracesare measured results on the two platforms. Note that theevent timing specified at design is reproduced in the executionplatform to a submicrosecond accuracy although this is notvisible on the timescale of the plots. The grey area indicatestimes when the processors were actually executing code and0.050.100.150.200.250.300.2 0.0 0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6 1.8event IDs200 0 200 400 600 800 1000 1200 1400 1600 1800101234200 0 200 400 600 800 1000 1200 1400 1600 1800101234200 0 200 400 600 800 1000 1200 1400 1600 1800101234Time0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2 sTime msa Simulationb Renesasc XMOStdcarmtapetdccontactcuttapeTime msinputs       output          output                      inputsProcessor busyProcessor busyFig. 7. Deterministic timing with different execution platforms.clearly shows that while the time occupied in instruction setexecution differed between the two processors, the externalactions at actuators was identical. Although not shown inthis figure, the code was compiled for single and multicoreexecution on the XMOS platform with no change in theexternal timing.In a distributed PTIDES systems, the different platformsneed to synchronize in order to reason about timestamps ofevents. Synchronization messages, such as null messages inChandy and Misras work 42, impose a great bandwidthoverhead. However, by analyzing timestamps and given someknowledge about the sending system, one can compute howlong to wait for new input and when input is safe to process.In particular when communication media is shared, reducingbandwidth is a desirable property.The entire workflow around the PTIDES programmingmodel including modeling, simulation, implementation, andanalysis is presented in Figure 8. A modeling and simulation environment has been implemented in Ptolemy II 43,a framework for heterogeneous systems. This tool allowsfor exploring designs of PTIDES models with different distribution of functions to components, scheduling strategiesand underlying architecture components. With this frameworkit is possible to research the interaction of PTIDESbasedmodels with models of other system components such asplant models and networks. A code generation framework isoutlined in 44 and an implementation of this approach hasbeen performed by extending the Ptolemy code generationfunctionality. PTIDES systems have been implemented onbare iron using a light weight operating system, PtidyOS,that uses an earliest deadline first EDF scheduling algorithmFig. 8. PTIDES workflow.to implement the PTIDES timing requirements 45. Recentresults show that the schedulability of PTIDES programs isdecidable. More precisely, the schedulability problem can bereduced to a reachability problem for timed automata.VI. TIMECRITICAL EMBEDDED SYSTEMSThe cyber part of CPS is inherently a realtime systemsensors and actuators are interacting with the physical environment at distinct point in time. These systems are often realizedas embedded systemscheap platforms with limited memoryand computation power. In this section we review differentaspects of implementing realtime applications on embeddedsystems.A. Tasks, Deadlines, and SchedulingA realtime system must react to external or internal timedevents according to specified timing constraints. These constraints are often defined as deadlines. A realtime programfragment, typically referred to as a task, must finish executingbefore its deadline is reached. As a consequence, the time ittakes for a realtime system to execute a task is not just aperformance factor it is also a correctness criterion.Missed deadlines may have different consequences depending on the type of the realtime application. Realtime tasksare often divided into three categories 46 Hard tasks must finish executing before its deadline,otherwise catastrophic consequences may occur. Exampleof such systems are sensory data acquisition, imageprocessing, and control systems. Firm tasks are tasks where missed deadlines do no harm,but there is no use of the computation result after missingthe deadline. Network and multimedia applications areexamples where firm tasks may be used. Soft tasks are tasks that still have some utility even if thedeadline is missed. Systemuser interactions are examplesof soft realtime tasks.If a single processor executes several concurrent tasks or if amulticore system executes more tasks than available cores thentasks must be scheduled. A scheduling algorithm determinesat what time, in which order, and on which cores differenttasks should be scheduled. Besides the timing constraints usedin forming deadlines, tasks may also have precedence andresource constraints. A schedule is said to be feasible if alltasks can be scheduled to meet all constraints. If there existsat least one algorithm that can generate a feasible schedule, aset of tasks are schedulable 46.Realtime scheduling theory is a mature but still veryactive area of research. Scheduling policies are commonlyimplemented in realtime operating systems RTOS and arefundamental for efficiently utilizing limited resources of embedded systems.B. Timing AnalysisIn realtime scheduling theory, the computation time ofspecific tasks are assumed to be known. In general, thecomputation time for a specific tasks is, however, not constantthe execution time depends highly on input data, system state,and timing behavior of the hardware.Figure 9 depicts the distribution of execution times for aspecific task. The upper bound is called worstcase executiontime WCET and the lower bound bestcase execution timeBCET. In general, it is very hard to compute exact numbersof WCET and BCET. Instead, the goal is to estimate safeupper and lower bounds of WCET and BCET, respectively. Asafe estimate of the WCET means that the estimated numberis equal to or larger than the real WCET. The upper boundof WCET should also be tight, meaning that the uncertaintybetween the real WCET and the estimated upper bound is assmall as possible.In industry, it is common to estimate the WCET by measuring the execution time for a set of test cases with differentinput data. Measured WCET cannot, however, be guaranteedto be safe in general 47. The drawback with this approach isthat measurements cannot be performed for all possible inputsand machine statesonly a small subset can in practice becovered. As a consequence, the estimated values are givenextra safety marginals, introducing overall pessimistic WCETbounds.An alternative approach is to perform static timing analysison a tasks code. Static WCET analysis typically consists ofthree distinct phases program flow analysis, microarchitectural analysis, and global bound analysis 48. The programdis tri bu tionexecution timeBCETlower timingbound WCETupper timingboundpossible execution timestiming predictabilityuncertaintyuncertaintyFig. 9. Probability distribution of execution time.flow analysis phase identifies loop bounds 49 and infeasiblepaths 50 of the program. Such constraints on the programscontrol flow are commonly referred to as flow facts. SomeWCET tools perform this analysis automatically, either onthe executable binary or on the source code, whereas othertools require users to specify these constraints manually. Themicroarchitectural analysis determines safe time bounds ofindividual basic blocks4. The microarchitectural analysis usesan abstract architectural model to estimate a safe upper boundfor each basic block. However, caches and pipelinesessentialfor achieving good average case performancemake statictiming analysis particularly challenging. Analysis techniquesbased on abstract interpretation 51 can be used for analyzingboth caches 52 and pipelines. The strength of these methodshighly depends on the complexity of the underlying hardware.Finally, the global bound analysis phase computes an upperbound of the WCET by combining the results from the twoprevious phases. This computation phase is typically solvedas an integer linear programming ILP problem, using theimplicit path enumeration technique 53.Although significant progress of timing analysis has beenachieved during the last two decades, several challenges remain. New methods for program flow analysis are needed toenable analysis of large complex programs. Complex hardware, including new multicore platforms with shared caches,introduces new analysis challenges.C. Precision Timed HardwareTiming analysis can be vastly simplified if the underlyinghardware has predictable timing behavior. By predictabletiming we mean that the size of the machine state is limited.The idea of precision timed PRET machines, a new eraof processors with predictable timing, was first advocated byEdwards and Lee 54 in 2007.One distinguished feature of a PRET machine is that theinstruction set architecture ISA is augmented with timinginstructions. For instance, PTARM 55 is an ARMbased processor developed at UC Berkeley. The ARM ISA is extendedwith several instructions for programming with realtime. Themain purpose of extending the ISA with timing instructions isto enable portability of realtime systems.Another desirable property of a realtime system is testability. Although formal verification of embedded systems isa very active area of research, testing is the predominateverification technique used by industry. However, if a system is executed several times with the same input data andreturns different output for each execution, testing becomesextremely difficult. As a consequence, repeatability of bothfunctional and timing behavior is vital for testability. A common way for PRET machines to achieve repeatability is to usethreadinterleaved pipelines 56 to remove pipeline hazardsand by replacing caches with scratchpad memories 57.Other predictable processor exists, based on different designchoices 58, 59.4A basic block is a sequence of instructions ending with a branch instruction.D. Precision Timed InfrastructureMany modern modeling environments for CPS 60, suchas Modelica 61, Simulink 62, Ptolemy II 43, and Modelyze 63, all include ways of precisely modeling and controlling time. Several of these environments can also compile thefunctional behavior of a model into C code, but few can giveany guarantees about timing correctness. In enabling correctbyconstruction of cyberphysical models, the challenge is tocompile or synthesize a models cyber parts so that the behavior of a simulated model and the real system coincide. Thekey challenge of this model fidelity problem is to guaranteethe correctness of timing 64.A recent research initiative, called precision timed infrastructure 65, addresses this problem. Besides PRET hardware, such an infrastructure should include both an PRETintermediate language and a PRET compiler. The purposeof an intermediate language is to act as an abstraction layerbetween the PRET hardware and the modeling language. Thekey advantage of this approach is that the intermediate language exposes timing constructs for expressing realtime, buthides machine dependent details of the platform. In particular,memory hierarchies and hardware threads must be abstractedaway, so that the modeling environments code generators donot need to consider platform dependent details. The benefitwith this approach is twofold Firstly, portability is improvedtiming is now part of the language semantics and is notjust an accidental consequence of implementation. Secondly,the PRET compilerwhich has the intermediate language assource language and an PRET ISA as target languagecannow perform timing dependent optimizations. In particular,scratchpad allocation schemes may be used to improve WCETfor specified timing constraints.VII. CONCLUSIONS AND FUTURE WORKIn this paper we have provided an overview of some ofthe more important issues and techniques related to timingissues in designing and implementing CPS. Oscillator andclock technology for CPS is well developed but further workis needed to reduce costs, particularly for future mobileapplications with demanding temporal accuracy requirements.GNSS systems play an important role in widely distributedCPS but are vulnerable to a variety of failures and attacks.Time transfer over networks is readily available from NTPat millisecond accuracy and with recent protocols such asIEEE 1588 to submicrosecond accuracy. However increasingthe accuracy of network time transfer will require additionalwork to resolve asymmetry problems in a way that is costeffective for use in CPS. The design and implementationof embedded controllers for CPS that ensure correct timingremains a difficult issue. Compact safetycritical systems arereasonably well understood but the design of systems withhighly asynchronous inputs, extensive spatial distribution, andsystems of systems remains problematic although significantprogress has been made in recent years. Additional workon design environments that allow better specification andverification of timing requirements is needed as well as morework in controlling processor instruction execution times.REFERENCES1 Timing Committee Telecommunications and Timing Group RangeCommanders Council, IRIG Serial time code formats, September,2004. Online. Available httpwww.irigb.compdfwpirig20004.pdf2 NIST, Radio station WWV. Online. Available httpwww.nist.govpmldiv688grp403 H. Kopetz, RealTime Systems  Design Principles for DistributedEmbedded Applications. Springer, 1997.4 J. Rushby and W. Steiner, TTA and PALS Formally veried designpatterns for distributed cyberphysical systems, in 30th IEEEAIAADigital Avionics Systems Conference DASC, Seattle, WA, 2011.5 ARINC, ARINC 653 family of standards, November, 2010. Online.Available httpswww.arinc.comcfstore6 As2d2 Deterministic Ethernet And Unified Networking, AS6820TimeTriggered Ethernet, SAE, Standard Specification, November 1,2011.7 L. Atzori, A. Iera, and G. Morabito, The internet of things A survey,Computer Networks, vol. 54, no. 15, pp. 27872805, 2010.8 M. Zorzi, A. Gluhak, S. Lange, and A. Bassi, From todays intranetof things to a future internet of things a wirelessand mobilityrelatedview, Wireless Communications, IEEE, vol. 17, no. 6, pp. 4451, 2010.9 ITU, Network synchronization and time distribution performance,2013. Online. Available httpwww.itu.intenITUTstudygroups2013201615Pagesq13.aspx10 M. Ouellette, K. Ji, S. Liu, and H. Li, Using IEEE 1588 and boundaryclocks for clock synchronization in telecom networks, CommunicationsMagazine, IEEE, vol. 49, no. 2, pp. 164171, 2011.11 J. Vig, Quartz crystal resonators and oscillators for frequency controland timing applications  a tutorial, April, 2012. Online. Availablehttpwww.ieeeuffc.orgfrequencycontrollearningvigtut.asp12 Rakon, RFPO40 SMD Oven Controlled Crystal Oscillator, 2013.Online. Available httpwww.rakon.comproductsfamiliesocxoocso13 Symmetricom, SA.45s CSAC, 2013. Online. Available httpwww.symmetricom.comproductsfrequencyreferences14 Circular T, BUREAU INTERNATIONAL DES POIDS ETMESURES, Tech. Rep. 303, April 10 2013.15 A. Gupta, Mitigation of GPS vulnerability using time transfer over microwave systems, Telcordia NIST  ATIS Workshop on Synchronizationin Telecommunication Systems, 2013.16 , GPS spoofing A brief survey of methods, effects and countermeasures, Telcordia NIST  ATIS Workshop on Synchronization inTelecommunication Systems, 2012.17 J. Merrill, GPS vulnerability and backing up critical infrastructure,Telcordia NIST  ATIS Workshop on Synchronization in Telecommunication Systems, 2012.18 C. Curry and G. Jolly, GPS jamming quantifying the threat interferenceof GPS antijam techniques with accurate time determination, Telcordia NIST  ATIS Workshop on Synchronization in TelecommunicationSystems, 2013.19 M. Weiss, One way GPS time transfer, 2013. Online. Availablehttptf.nist.govtimeoneway.htm20 IEEE Instrumentation and Measurement Society, 1588 IEEE standardfor a precision clock synchronization protocol for networked measurement and control systems, IEEE, Standard Specification, July 24, 2008.21 D. Vook, B. Hamilton, A. Fernandez, J. Burch, and V. Srikantam,Update on high precision time synchronization, in Proceedings of the2005 Conference on IEEE1588, Zurich, CH, 2005.22 D. Mohl and M. Renz, Improved synchronization behavior in highlycascaded networks, in International IEEE Symposium on PrecisionClock Synchronization for Measurement, Control and Communication,Vienna, AT, 2007.23 M. Lipinski, T. Wlostowski, J. Serrano, P. Alvarez, J. David, G. Cobas,A. Rubini, and P. Moreira, Performance results of the first white rabbitinstallation for cngs, in International IEEE Symposium on PrecisionClock Synchronization for Measurement, Control and Communication,San Francisco, CA, 2012.24 IEEE Computer Society, IEEE standard for information technologylocal and metropolitan area networks part 3 CSMACD access methodand physical layer specifications amendment 7 Media access controlmac service interface and management parameters to support timesynchronization protocols, IEEE, Standard Specification, 2011.25 B. Liskov, Practical uses of synchronized clocks in distributed systems,Distributed Computing, vol. 6, no. 4, pp. 211219, 1993.26 J. Corbett, J. Dean, M. Epstein, A. Fikes, C. Frost, J. Furman, S. Ghemawat, A. Gubarev, C. Heiser, P. Hochschild, W. Hsieh, S. Kanthak,E. Kogan, H. Li, A. Lloyd, S. Melnik, D. Mwaura, D. Nagle, S. Quinlan,R. Rao, L. Rolig, Y. Saito, M. Szymaniak, C. Taylor, R. Wang, andD. Woodford, Spanner Googles GloballyDistributed Database, in10th USENIX Symposium on Operating Systems Design and Implementation, Hollywood, CA, 2012.27 K. Harris, An application of IEEE 1588 to industrial automation, inPrecision Clock Synchronization for Measurement, Control and Communication, 2008. ISPCS 2008. IEEE International Symposium on. IEEE,2008, pp. 7176.28 M. Shepard, D. Fowley, R. Jackson, and D. King, Implementation ofIEEE Std.1588 in a Networked IO Node, in Proceedings of the 2003Workshop on IEEE1588, NIST publication NISTIR 7070, Gaithersburg,MD, 2003. Online. Available httpwww.nist.govpublicationportal.cfm29 Bruel  Kjaer, Features and specifications, 2013.Online. Available httpwww.bksv.comproductsfrontendslanxifeaturesandspecifications.aspx30 H. Mach, E. Grim, O. Holmeide, and C. Calley, PTP enabled networkfor flight test data acquisition and recording, in Precision ClockSynchronization for Measurement, Control and Communication, 2007.ISPCS 2007. IEEE International Symposium on. IEEE, 2007, pp. 110115.31 F. Steinhauser, C. Riesch, and M. Rudigier, IEEE 1588 for timesynchronization of devices in the electric power industry, in PrecisionClock Synchronization for Measurement Control and CommunicationISPCS, 2010 International IEEE Symposium on. IEEE, 2010, pp.16.32 M. Lixia, C. Muscas, and S. Sulis, Application of IEEE 1588 to themeasurement of synchrophasors in electric power systems, in PrecisionClock Synchronization for Measurement, Control and Communication,2009. ISPCS 2009. International Symposium on. IEEE, 2009, pp. 16.33 M. Antonello, B. Baibussinov, P. Benetti, F. Boffelli, E. Calligarich,N. Canci, S. Centro, A. Cesana, K. Cieslik, D. Cline et al., Precisionmeasurement of the neutrino velocity with the ICARUS detector in theCNGS beam, Journal of High Energy Physics, vol. 2012, no. 11, pp.121, 2012.34 P. Moreira, J. Serrano, T. Wlostowski, P. Loschmidt, and G. Gaderer,White rabbit Subnanosecond timing distribution over ethernet, inPrecision Clock Synchronization for Measurement, Control and Communication, 2009. ISPCS 2009. International Symposium on. IEEE,2009, pp. 15.35 G. Gaderer, P. Loschmidt, E. G. Cota, J. H. Lewis, J. Serrano, M. Cattin,P. Alvarez, P. M. Oliveira Fernandes Moreira, T. Wlostowski, J. Dedic,C. Prados, M. Kreider, R.Baer, S.Rauch, and T.Fleck, The white rabbitproject, in Int. Conf. on Accelerator and Large Experimental PhysicsControl Systems, Kobe, Japan, 2009.36 A. Benveniste and G. Berry, The synchronous approach to reactiveand realtime systems, Proceedings of the IEEE, vol. 79, no. 9, pp.12701282, 1991.37 T. A. Henzinger, B. Horowitz, and C. M. Kirsch, Giotto A timetriggered language for embedded programming, in EMSOFT 2001, vol.LNCS 2211. Tahoe City, CA SpringerVerlag, 2001, pp. 166184.38 A. Ghosal, T. A. Henzinger, D. Iercan, C. M. Kirsch, andA. SangiovanniVincentelli, A hierarchical coordination language forinteracting realtime tasks, in Sixth Annual Conference on EmbeddedSoftware EMSOFT. Seoul, Korea ACM, 2006.39 W. Pree and J. Templ, Modeling with the timing definition languageTDL, in Automotive Software Workshop San Diego ASWSD onModelDriven Development of Reliable Automotive Services, ser. LNCS.San Diego, CA Springer, 2006.40 Y. Zhao, J. Liu, and E. A. Lee, A programming model fortimesynchronized distributed realtime systems, in 13th IEEEReal Time and Embedded Technology and Applications Symposium,2007. RTAS 07, April 2007, pp. 259  268. Online. Availablehttpchess.eecs.berkeley.edupubs325.html41 P. Derler, J. Eidson, S. Goose, E. A. Lee, and M. Zimmer,Deterministic execution of ptides programs, EECS Department,University of California, Berkeley, Tech. Rep. UCBEECS201365,May 2013. Online. Available httpwww.eecs.berkeley.eduPubsTechRpts2013EECS201365.html42 K. M. Chandy and J. Misra, Distributed simulation A case studyin design and verification of distributed programs, IEEE Trans. onSoftware Engineering, vol. 5, no. 5, pp. 440452, 1979.43 J. Eker, J. W. Janneck, E. A. Lee, J. Liu, X. Liu, J. Ludvig,S. Neuendorffer, S. Sachs, and Y. Xiong, Taming heterogeneitythePtolemy approach, Proceedings of the IEEE, vol. 91, no. 2, pp.127144, 2003. Online. Available httpwww.ptolemy.eecs.berkeley.edupublicationspapers03TamingHeterogeneity44 P. Derler, J. Eidson, E. A. Lee, S. Matic, and M. Zimmer, Modelbased development of deterministic, eventdriven, realtime distributedsystems, in International Workshop on ModelBased Design witha Focus on ExtraFunctional Properties MBDEFP, 2011. Online.Available httpchess.eecs.berkeley.edupubs895.html45 J. Zou, S. Matic, and E. Lee, PtidyOS A lightweight microkernel forPtides realtime systems, in RealTime and Embedded Technology andApplications Symposium RTAS. IEEE, April 2012.46 G. C. Buttazzo, Hard realtime computing systems predictable scheduling algorithms and applications, 3rd ed. Springer, 2011.47 R. Wilhelm, J. Engblom, A. Ermedahl, N. Holsti, S. Thesing, D. Whalley, G. Bernat, C. Ferdinand, R. Heckmann, T. Mitra, F. Mueller,I. Puaut, P. Puschner, J. Staschulat, and P. Stenstrom, The WorstCaseExecutionTime Problem  Overview of Methods and Survey of Tools,ACM Transactions on Embedded Computing Systems, vol. 7, pp. 3613653, May 2008.48 R. Wilhelm, D. Grund, J. Reineke, M. Schlickling, M. Pister, andC. Ferdinand, Memory hierarchies, pipelines, and buses for futurearchitectures in timecritical embedded systems, IEEE Transactions onComputer Aided Design, vol. 28, no. 7, pp. 966  978, 2009.49 J. Knoop, L. Kovcs, and J. Zwirchmayr, Symbolic Loop Bound Computation for WCET Analysis, in Perspectives of Systems Informatics,ser. LNCS, E. Clarke, I. Virbitskaite, and A. Voronkov, Eds. Springer,2012, vol. 7162, pp. 227242.50 J. Gustafsson, A. Ermedahl, C. Sandberg, and B. Lisper, Automaticderivation of loop bounds and infeasible paths for WCET analysis usingabstract execution, in Proceedings of the 27th IEEE International RealTime Systems Symposium RTSS06. IEEE, 2006, pp. 5766.51 P. Cousot and R. Cousot, Abstract interpretation a unified lattice modelfor static analysis of programs by construction or approximation offixpoints, in Proceedings of the 4th ACM SIGACTSIGPLAN symposiumon Principles of programming languages, ser. POPL 77. New York,USA ACM Press, 1977, pp. 238252.52 C. Ferdinand and R. Wilhelm, Efficient and precise cache behaviorprediction for realtime systems, RealTime Systems, vol. 17, no. 2, pp.131181, 1999.53 Y.T. Li and S. Malik, Performance analysis of embedded softwareusing implicit path enumeration, IEEE Transactions on ComputerAidedDesign of Integrated Circuits and Systems, vol. 16, no. 12, pp. 14771487, 1997.54 S. A. Edwards and E. A. Lee, The case for the precision timed pretmachine, in Proceedings of the 44th annual conference on Designautomation, June 2007, pp. 264  265.55 I. Liu, J. Reineke, D. Broman, M. Zimmer, and E. A. Lee, A PRETMicroarchitecture Implementation with Repeatable Timing and Competitive Performance, in Proceedings of the 30th IEEE InternationalConference on Computer Design ICCD 2012. IEEE, 2012.56 E. Lee and D. Messerschmitt, Pipeline interleaved programmable dspsSynchronous data flow programming, Acoustics, Speech and SignalProcessing, IEEE Transactions on, vol. 35, no. 9, pp. 13341345, 1987.57 R. Banakar, S. Steinke, B. Lee, M. Balakrishnan, and P. Marwedel,Scratchpad memory A design alternative for cache onchip memoryin embedded systems, in In Tenth International Symposium on HardwareSoftware Codesign CODES, Estes Park. ACM, 2002, pp. 7378.58 S. Andalam, P. Roop, and A. Girault, Predictable multithreadingof embedded applications using PRETC, in Proceedings of the 8thIEEEACM International Conference on Formal Methods and Modelsfor Codesign MEMOCODE. IEEE, 2010, pp. 159168.59 M. Schoeberl, A Java processor architecture for embedded realtimesystems, Journal of Systems Architecture, vol. 54, no. 12, pp. 265 286, 2008.60 D. Broman, E. A. Lee, S. Tripakis, and M. Torngren, Viewpoints, formalisms, languages, and tools for cyberphysical systems, in Proceedings of the 6th International Workshop on MultiParadigm Modeling,2012.61 ModelicaA Unified ObjectOriented Language for Physical SystemsModelingLanguage Specification, 2012, httpwww.modelica.org.62 MathWorks, The Mathworks  Simulink  Simulation and ModelBasedDesign, httpwww.mathworks.comproductssimulink Last accessedMay 8, 2013.63 D. Broman and J. G. Siek, Modelyze a gradually typed host languagefor embedding equationbased modeling languages, EECS Department,University of California, Berkeley, Tech. Rep. UCBEECS2012173,June 2012.64 D. Broman, Highconfidence cyberphysical codesign, in Proceedingsof the WorkinProgress WiP session of the 33rd IEEE RealTimeSystems Symposium RTSS 2012, 2012, p. 12.65 D. Broman, M. Zimmer, Y. Kim, H. Kim, J. Cai, A. Shrivastava,S. A. Edwards, and E. A. Lee, Precision Timed Infrastructure DesignChallenges, in Proceedings of the Electronic System Level SynthesisConference to appear. IEEE, 2013.David Broman is currently a visiting scholarat UC Berkeley, USA, working in the Ptolemygroup at the Electrical Engineering  Computer Science department. He is an assistantprofessor at Linkping University in Sweden,where he also received his PhD in computerscience in 2010. Davids research interestsinclude programming and modeling language theory, compilertechnology, software engineering, and mathematical modelingand simulation of cyberphysical systems. He has worked fiveyears within the software security industry, cofounded theEOOLT workshop series, and is member of the ModelicaAssociation and the Modelica language design group.Patricia Derler received her Ph.D. inComputer Science from the Universityof Salzburg, Austria and she did herundergraduate studies at the University ofHagenberg, Austria. After she graduated,she started a postdoctoral position at theUniversity of California, Berkeley. Shecurrently holds this position and is a memberof the PTIDES group where she does research on the designand simulation of cyberphysical systems, deterministicmodels of computation and modeling of time in distributedsystems.John C. Eidson received his BS and MS degrees from Michigan State University and hisPhD. Degree from Stanford University all inelectrical engineering. He retired in 2009 aftera career in the central research laboratories ofVarian Associates, HewlettPackard and mostrecently, Agilent Technologies. He is a cochair of the IEEE 1588 standards committee. He is a lifefellow of the IEEE, the recipient of the 2007 Technical Awardof the IEEE IM Society, and a corecipient of the 2007Agilent Laboratories Barney Oliver Award for Innovation. Heis currently a visiting scholar in the PTIDES group at theUniversity of California at Berkeley and is interested in theapplication of synchronized clocks to cyberphysical systems.
