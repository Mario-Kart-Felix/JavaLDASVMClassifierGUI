RDBMS Storage Plugin - Apache Drill Menu Documentation Getting Started Architecture Tutorials Install Drill Configure Drill Connect a Data Source ODBC/JDBC Interfaces Query Data Performance Tuning Log and Debug SQL Reference Data Sources and File Formats Develop Custom Functions Troubleshooting Developer Information Release Notes Sample Datasets Project Bylaws Community Team Mailing Lists Community Resources FAQ Blog Download Getting Started Drill Introduction Why Drill Architecture Architecture Introduction Drill Query Execution Core Modules Performance Tutorials Tutorials Introduction Drill in 10 Minutes Analyzing the Yelp Academic Dataset Learn Drill with the MapR Sandbox About the MapR Sandbox Installing the Apache Drill Sandbox Getting to Know the Drill Sandbox Lesson 1: Learn about the Data Set Lesson 2: Run Queries with ANSI SQL Lesson 3: Run Queries on Complex Data Types Summary Analyzing Highly Dynamic Datasets Analyzing Social Media Analyzing Data Using Window Functions Install Drill Install Drill Introduction Migrating Parquet Data Installing Drill in Embedded Mode Embedded Mode Prerequisites Installing Drill on Linux and Mac OS X Starting Drill on Linux and Mac OS X Installing Drill on Windows Starting Drill on Windows Installing Drill in Distributed Mode Distributed Mode Prerequisites Installing Drill on the Cluster Starting Drill in Distributed Mode Starting the Web Console Configure Drill Configure Drill Introduction Configuring Drill Memory Configuring a Multitenant Cluster Configuring a Multitenant Cluster Introduction Configuring Multitenant Resources Configuring Resources for a Shared Drillbit Configuring User Impersonation Configuring Inbound Impersonation Configuring User Authentication Configuring User Impersonation with Hive Authorization Configuring Web Console and REST API Security Configuration Options Configuration Options Introduction Start-Up Options Planning and Execution Options Persistent Configuration Storage Ports Used by Drill Configuring the Drill Shell Connect a Data Source Connect a Data Source Introduction Storage Plugin Registration Storage Plugin Configuration Plugin Configuration Basics Workspaces Drill Default Input Format File System Storage Plugin HBase Storage Plugin Hive Storage Plugin RDBMS Storage Plugin MongoDB Storage Plugin MapR-DB Format S3 Storage Plugin ODBC/JDBC Interfaces Interfaces Introduction Using the JDBC Driver Using JDBC with SQuirreL on Windows Installing the ODBC Driver Installing the Driver on Linux Installing the Driver on Mac OS X Installing the Driver on Windows Configuring ODBC ODBC Configuration Reference Configuring ODBC on Linux Configuring ODBC on Mac OS X Configuring ODBC on Windows Testing the ODBC Connection Using Drill Explorer Drill Explorer Introduction Connecting Drill Explorer to Data Browsing Data and Defining Views Using Drill with BI Tools Using Drill with BI Tools Introduction Tableau Examples Using MicroStrategy Analytics with Apache Drill Using Tibco Spotfire Desktop with Drill Configuring Tibco Spotfire Server with Drill Using Qlik Sense with Drill Using Apache Drill with Tableau 9 Desktop Using Apache Drill with Tableau 9 Server Using Information Buildersâ€™ WebFOCUS with Apache Drill Configuring JReport with Drill Query Data Query Data Introduction Querying a File System Querying a File System Introduction Querying Avro Files Querying JSON Files Querying Parquet Files Querying Plain Text Files Querying Directories Querying Sequence Files Querying HBase Querying Complex Data Querying Complex Data Introduction Sample Data: Donuts Selecting Flat Data Using SQL Functions, Clauses, and Joins Selecting Nested Data for a Column Selecting Multiple Columns Within Nested Data Querying Hive Querying the INFORMATION SCHEMA Querying System Tables Monitoring and Canceling Queries in the Drill Web Console Performance Tuning Performance Tuning Introduction Partition Pruning Partition Pruning Introduction How to Partition Data Asynchronous Parquet Reader Optimizing Parquet Metadata Reading Parquet Filter Pushdown Hive Metadata Caching Choosing a Storage Format Query Plans and Tuning Query Plans and Tuning Introduction Join Planning Guidelines Guidelines for Optimizing Aggregation Modifying Query Planning Options Sort-Based and Hash-Based Memory-Constrained Operators Enabling Query Queuing Controlling Parallelization to Balance Performance with Multi-Tenancy Identifying Performance Issues Query Plans Query Profiles Performance Tuning Reference Query Profile Column Descriptions Physical Operators Monitoring Metrics Log and Debug Log and Debug Introduction Error Messages Modify logback.xml Review the Java Stack Trace Query Audit Logging SQL Reference SQL Reference Introduction Data Types Supported Data Types Date, Time, and Timestamp Handling Different Data Types Lexical Structure Operators SQL Functions About SQL Function Examples Math and Trig Data Type Conversion Date/Time Functions and Arithmetic String Manipulation Aggregate and Aggregate Statistical Functions for Handling Nulls SQL Window Functions SQL Window Functions Introduction Aggregate Window Functions Ranking Window Functions Value Window Functions SQL Window Functions Examples Nested Data Functions Nested Data Limitations FLATTEN KVGEN REPEATED_COUNT REPEATED_CONTAINS Query Directory Functions SQL Commands Supported SQL Commands SET RESET ALTER SYSTEM CREATE TABLE AS (CTAS) CREATE FUNCTION USING JAR PARTITION BY Clause CREATE VIEW DESCRIBE DROP FUNCTION USING JAR DROP TABLE DROP VIEW EXPLAIN SELECT SELECT List FROM Clause GROUP BY Clause HAVING Clause LIMIT Clause OFFSET Clause ORDER BY Clause UNION Set Operator WHERE Clause WITH Clause SHOW DATABASES and SHOW SCHEMAS SHOW FILES SHOW TABLES USE SQL Conditional Expressions CASE Reserved Keywords SQL Extensions Data Sources and File Formats Data Sources and File Formats Introduction Hive-to-Drill Data Type Mapping Deploying and Using a Hive UDF Parquet Format JSON Data Model Text Files: CSV, TSV, PSV Sequence Files Develop Custom Functions Develop Custom Functions Introduction Developing a Simple Function Tutorial: Develop a Simple Function Developing an Aggregate Function Adding Custom Functions to Drill Adding Custom Functions to Drill Introduction Manually Adding Custom Functions to Drill Dynamic UDFs Using Custom Functions in Queries Custom Function Interfaces Troubleshooting Developer Information REST API Develop Drill Compiling Drill from Source Contribute to Drill Apache Drill Contribution Guidelines Apache Drill Contribution Ideas Design Docs Drill Plan Syntax RPC Overview Query Stages Useful Research Value Vectors Release Notes Apache Drill 1.9.0 Release Notes Apache Drill 1.8.0 Release Notes Apache Drill 1.7.0 Release Notes Apache Drill 1.6.0 Release Notes Apache Drill 1.5.0 Release Notes Apache Drill 1.4.0 Release Notes Apache Drill 1.3.0 Release Notes Apache Drill 1.2.0 Release Notes Apache Drill 1.1.0 Release Notes Apache Drill 1.0.0 Release Notes Apache Drill 0.9.0 Release Notes Apache Drill 0.8.0 Release Notes Apache Drill 0.7.0 Release Notes Apache Drill 0.6.0 Release Notes Apache Drill M1 Release Notes (Apache Drill Alpha) Apache Drill M1 Release Notes (Apache Drill Alpha) Apache Drill 0.5.0 Release Notes Apache Drill 0.4.0 Release Notes Sample Datasets AOL Search Enron Emails Wikipedia Edit History Project Bylaws Docs Connect a Data Source RDBMS Storage Plugin RDBMS Storage Plugin Apache Drill supports querying a number of RDBMS instances. This allows you to connect your traditional databases to your Drill cluster so you can have a single view of both your relational and NoSQL datasources in a single system. As with any source, Drill supports joins within and between all systems. Drill additionally has powerful pushdown capabilities with RDBMS sources. This includes support to push down join, where, group by, intersect and other SQL operations into a particular RDBMS source (as appropriate). Using the RDBMS Storage Plugin Drill is designed to work with any relational datastore that provides a JDBC driver. Drill is actively tested with Postgres, MySQL, Oracle, MSSQL and Apache Derby. For each system, you will follow three basic steps for setup: Install Drill , if you do not already have it installed. Copy your database's JDBC driver into the jars/3rdparty directory. (You'll need to do this on every node.) Add a new storage configuration to Drill through the web ui. Example configurations for Oracle , SQL Server , MySQL and Postgres are provided below. Example: Working with MySQL Drill communicates with MySQL through the JDBC driver using the configuration that you specify in the Web Console or through the REST API . Note Verify that MySQL is running and the MySQL driver is in place before you configure the JDBC storage plugin. To configure the JDBC storage plugin: Start the Drill shell . Start the Web Console . On the Storage tab, enter a name in New Storage Plugin . For example, enter myplugin . Each configuration registered with Drill must have a distinct name. Names are case-sensitive. Note The URL differs depending on your installation and configuration. See the [example configurations](#Example-Configurations) below for examples. Click Create . In Configuration, set the required properties using JSON formatting as shown in the following example. Change the properties to match your environment. { "type": "jdbc", "driver": "com.mysql.jdbc.Driver", "url": "jdbc:mysql://localhost:3306", "username": "root", "password": "mypassword", "enabled": true } Click Create . You can use the performance_schema database, which is installed with MySQL to query your MySQL performance_schema database. Include the names of the storage plugin configuration, the database, and table in dot notation the FROM clause as follows: 0: jdbc:drill:zk=local> select * from myplugin.performance_schema.accounts; +--------+------------+----------------------+--------------------+ | USER | HOST | CURRENT_CONNECTIONS | TOTAL_CONNECTIONS | +--------+------------+----------------------+--------------------+ | null | null | 18 | 20 | | jdoe | localhost | 0 | 813 | | root | localhost | 3 | 5 | +--------+------------+----------------------+--------------------+ 3 rows selected (0.171 seconds) Example Configurations Example Oracle Configuration Download and install Oracle's Thin ojdbc7.12.1.0.2.jar driver and copy it to all nodes in your cluster. { type: "jdbc", enabled: true, driver: "oracle.jdbc.OracleDriver", url:"jdbc:oracle:thin:user/password@1.2.3.4:1521/ORCL" } Example SQL Server Configuration For SQL Server, Drill has been tested with Microsoft's sqljdbc41.4.2.6420.100.jar driver. Copy this jar file to all Drillbits. Note You'll need to provide a database name as part of your JDBC connection string for Drill to correctly expose MSSQL schemas. { type: "jdbc", enabled: true, driver: "com.microsoft.sqlserver.jdbc.SQLServerDriver", url:"jdbc:sqlserver://1.2.3.4:1433;databaseName=mydatabase", username:"user", password:"password" } Example MySQL Configuration For MySQL, Drill has been tested with MySQL's mysql-connector-java-5.1.37-bin.jar driver. Copy this to all nodes. { type: "jdbc", enabled: true, driver: "com.mysql.jdbc.Driver", url:"jdbc:mysql://1.2.3.4", username:"user", password:"password" } Example Postgres Configuration For Postgres, Drill has been tested with Postgres's 9.1-901-1.jdbc4 driver (any recent driver should work). Copy this driver file to all nodes. Note You'll need to provide a database name as part of your JDBC connection string for Drill to correctly expose Postgres tables. { type: "jdbc", enabled: true, driver: "org.postgresql.Driver", url:"jdbc:postgresql://1.2.3.4/mydatabase", username:"user", password:"password" } â† Hive Storage Plugin MongoDB Storage Plugin â†’ Copyright Â© 2012-2014 The Apache Software Foundation, licensed under the Apache License, Version 2.0. Apache and the Apache feather logo are trademarks of The Apache Software Foundation. Other names appearing on the site may be trademarks of their respective owners.
