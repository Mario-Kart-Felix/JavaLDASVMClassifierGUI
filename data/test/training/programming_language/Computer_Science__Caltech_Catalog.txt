Computer Science - Caltech Catalog Skip to main content Caltech Home > Catalog Home > Current Search Catalog Current Archive Contact Please Note Computer Science CS 1. Introduction to Computer Programming. 9 units (3-4-2); first term. A course on computer programming emphasizing the program design process and pragmatic programming skills. It will use the Python programming language and will not assume previous programming experience. Material covered will include data types, variables, assignment, control structures, functions, scoping, compound data, string processing, modules, basic input/output (terminal and file), as well as more advanced topics such as recursion, exception handling and object-oriented programming. Program development and maintenance skills including debugging, testing, and documentation will also be taught. Assignments will include problems drawn from fields such as graphics, numerics, networking, and games. At the end of the course, students will be ready to learn other programming languages in courses such as CS 11, and will also be ready to take more in-depth courses such as CS 2 and CS 4. Instructor: Vanier. CS 2. Introduction to Programming Methods. 9 units (2-6-1); second term. Prerequisites: CS 1 or equivalent. CS 2 is a demanding course in programming languages and computer science. Topics covered include data structures, including lists, trees, and graphs; implementation and performance analysis of common algorithms; algorithm design principles, in particular recursion and dynamic programming; concurrency and network programming; basic numerical computation methods. Heavy emphasis is placed on the use of compiled languages and development tools, including source control and debugging. The course includes weekly laboratory exercises and written homework covering the lecture material and program design. The course is intended to establish a foundation for further work in many topics in the computer science option. Instructors: Barr, Desbrun, Libeskind-Hadas. CS 3. Introduction to Software Engineering. 9 units (2-4-3); third term. Prerequisites: CS 2 or equivalent. CS 3 is a practical introduction to software engineering with an emphasis on understanding and minimizing risk in large software projects. Students will work in teams on a course-long project. Topics covered include revision control, code reviews, testing and testability, code readability, API design, refactoring, and documentation. The course provides opportunities to present your work to the class, and emphasizes working with other people's code, both that of classmates and pre-existing frameworks. Not offered 2016-17. CS 4. Fundamentals of Computer Programming. 9 units (3-4-2); second term. Prerequisite: CS 1 or instructor's permission. This course gives students the conceptual background necessary to construct and analyze programs, which includes specifying computations, understanding evaluation models, and using major programming language constructs (functions and procedures, conditionals, recursion and looping, scoping and environments, compound data, side effects, higher-order functions and functional programming, and object-oriented programming). It emphasizes key issues that arise in programming and in computation in general, including time and space complexity, choice of data representation, and abstraction management. This course is intended for students with some programming background who want a deeper understanding of the conceptual issues involved in computer programming. Instructor: Vanier. Ma/CS 6 abc. Introduction to Discrete Mathematics. 9 units (3-0-6). For course description, see Mathematics. CS 9. Introduction to Computer Science Research. 1 unit (1-0-0); first term. This course will introduce the research areas of the computer science faculty, through weekly overview talks by the faculty aimed at first-year undergraduates. Others may wish to take the course to gain an understanding of the scope of the field. Graded pass/fail. Instructor: Desbrun. CS 11. Computer Language Lab. 3 units (0-3-0); first, second, third terms. Prerequisites: CS 1 or instructor's permission. A self-paced lab that provides students with extra practice and supervision in transferring their programming skills to a particular programming language. The course can be used for any language of the student's choosing, subject to approval by the instructor. A series of exercises guide the student through the pragmatic use of the chosen language, building his or her familiarity, experience, and style. More advanced students may propose their own programming project as the target demonstration of their new language skills. This course is available for undergraduate students only. Graduate students should register for CS 111. CS 11 may be repeated for credit of up to a total of nine units. Instructors: Pinkston, Vanier. CS 21. Decidability and Tractability. 9 units (3-0-6); second term. Prerequisite: CS 2 (may be taken concurrently). This course introduces the formal foundations of computer science, the fundamental limits of computation, and the limits of efficient computation. Topics will include automata and Turing machines, decidability and undecidability, reductions between computational problems, and the theory of NP-completeness. Instructor: Umans. CS 24. Introduction to Computing Systems. 9 units (3-3-3); third term. Prerequisites: Familiarity with C equivalent to having taken the CS 11 C track. Basic introduction to computer systems, including hardware-software interface, computer architecture, and operating systems. Course emphasizes computer system abstractions and the hardware and software techniques necessary to support them, including virtualization (e.g., memory, processing, communication), dynamic resource management, and common-case optimization, isolation, and naming. Instructor: Pinkston. CS 38. Introduction to Algorithms. 9 units (3-0-6); third term. Prerequisites: CS 2; Ma/CS 6 a or Ma 121 a; and CS 21 or CS/EE/Ma 129 a. This course introduces techniques for the design and analysis of efficient algorithms. Major design techniques (the greedy approach, divide and conquer, dynamic programming, linear programming) will be introduced through a variety of algebraic, graph, and optimization problems. Methods for identifying intractability (via NP-completeness) will be discussed. Instructor: Schulman. EE/CS 51. Principles of Microprocessor Systems. 12 units (4-5-3). For course description, see Electrical Engineering. EE/CS 52 ab. Microprocessor Systems Laboratory. 9 units (3-6-0) second term; 6 units (1-5-0) third term; second, third terms. For course description, see Electrical Engineering. EE/CS 53. Microprocessor Project Laboratory. 12 units (0-12-0). For course description, see Electrical Engineering. CS/EE/ME 75 abc. Introduction to Multidisciplinary Systems Engineering. 3 units (2-0-1) , 6 units (2-0-4), or 9 units (2-0-7) first term; 6 units (2-3-1), 9 units (2-6-1), or 12 units (2-9-1) second term; 12 units (2-9-1), 15 units (2-12-1), or 18 units (2-15-1), with instructor's permission, third term. This course presents the fundamentals of modern multidisciplinary systems engineering in the context of a substantial design project. Students from a variety of disciplines will conceive, design, implement, and operate a system involving electrical, information, and mechanical engineering components. Specific tools will be provided for setting project goals and objectives, managing interfaces between component subsystems, working in design teams, and tracking progress against tasks. Students will be expected to apply knowledge from other courses at Caltech in designing and implementing specific subsystems. During the first two terms of the course, students will attend project meetings and learn some basic tools for project design, while taking courses in CS, EE, and ME that are related to the course project. During the third term, the entire team will build, document, and demonstrate the course design project, which will differ from year to year. Freshmen must receive permission from the lead instructor to enroll. Not offered 2016-17. CS 80 abc. Undergraduate Thesis. 9 units; first, second, third terms. Prerequisite: instructor's permission, which should be obtained sufficiently early to allow time for planning the research. Individual research project, carried out under the supervision of a member of the computer science faculty (or other faculty as approved by the computer science undergraduate option representative). Projects must include significant design effort. Written report required. Open only to upperclass students. Not offered on a pass/fail basis. Instructor: Staff. CS 81 abc. Undergraduate Projects in Computer Science. Units are assigned in accordance with work accomplished. Prerequisites: Consent of supervisor is required before registering. Supervised research or development in computer science by undergraduates. The topic must be approved by the project supervisor, and a formal final report must be presented on completion of research. This course can (with approval) be used to satisfy the project requirement for the CS major. Graded pass/fail. Instructor: Staff. CS 87. Computational Literature. 9 units (3-0-6); third term. For course description see EN 87. Instructor: Hadas. CS 90. Undergraduate Reading in Computer Science. Units are assigned in accordance with work accomplished. Prerequisites: Consent of supervisor is required before registering. Supervised reading in computer science by undergraduates. The topic must be approved by the reading supervisor, and a formal final report must be presented on completion of the term. Graded pass/fail. Instructor: Staff. CS 101 abc. Special Topics in Computer Science. Units in accordance with work accomplished; offered by announcement. Prerequisites: CS 21 and CS 38, or instructor's permission. The topics covered vary from year to year, depending on the students and staff. Primarily for undergraduates. CS 102 abc. Seminar in Computer Science. 3, 6, or 9 units as arranged with the instructor. Instructor's permission required. CS 103 abc. Reading in Computer Science. 3, 6, or 9 units as arranged with the instructor. Instructor's permission required. HPS/Pl/CS 110. Causation and Explanation. 9 units (3-0-6). For course description, see History and Philosophy of Science. CS 111. Programming Practicum. 3 units (0-3-0); first, second, third terms. Prerequisites: CS 1 or equivalent. A self-paced lab that provides students with extra practice and supervision in transferring their programming skills to a particular programming language. The course can be used for any language of the student's choosing, subject to approval by the instructor. A series of exercises guide the student through the pragmatic use of the chosen language, building his or her familiarity, experience, and style. More advanced students may propose their own programming project as the target demonstration of their new language skills. This course is available for graduate students only. Undergraduates should register for CS 11. Instructors: Pinkston, Vanier. ACM/CS 114. Parallel Algorithms for Scientific Applications. 9 units. For course description, see Applied and Computational Mathematics. CS 115. Functional Programming. 9 units (3-4-2); third term. Prerequisites: CS 1 and CS 4. This course is a both a theoretical and practical introduction to functional programming, a paradigm which allows programmers to work at an extremely high level of abstraction while simultaneously avoiding large classes of bugs that plague more conventional imperative and object-oriented languages. The course will introduce and use the lazy functional language Haskell exclusively. Topics include: recursion, first-class functions, higher-order functions, algebraic data types, polymorphic types, function composition, point-free style, proving functions correct, lazy evaluation, pattern matching, lexical scoping, type classes, and modules. Some advanced topics such as monad transformers, parser combinators, dynamic typing, and existential types are also covered. Instructor: Vanier. CS 116. Reasoning about Program Correctness. 9 units (3-0-6); first term. Prerequisite: CS 1 or equivalent. This course presents the use of logic and formal reasoning to prove the correctness of sequential and concurrent programs. Topics in logic include propositional logic, basics of first-order logic, and the use of logic notations for specifying programs. The course presents a programming notation and its formal semantics, Hoare logic and its use in proving program correctness, predicate transformers and weakest preconditions, and fixed-point theory and its application to proofs of programs. Instructor: Staff. Ma/CS 117 abc. Computability Theory. 9 units (3-0-6). For course description, see Mathematics. CS 118. Logic Model Checking for Formal Software Verification. 9 units (3-3-3); second term. An introduction to the theory and practice of logic model checking as an aid in the formal proofs of correctness of concurrent programs and system designs. The specific focus is on automata-theoretic verification. The course includes a study of the theory underlying formal verification, the correctness of programs, and the use of software tools in designs. Instructor: Holzmann. CS 119. Reliable Software: Testing and Monitoring. 9 units (3-3-3); third term. Prerequisites: CS 1 or equivalent; CS 116 and CS 118 are recommended. The class discusses theoretical and practical aspects of software testing and monitoring. Topics include finite state machine testing algorithms, random testing, constraint-based testing, coverage measures, automated debugging, logics and algorithms for runtime monitoring, and aspect-oriented approaches to monitoring. Emphasis is placed on automation. Students will be expected to develop and use software testing and monitoring tools to develop reliable software systems. Not offered 2016-17. CS/Ph 120. Quantum Cryptography. 9 units (3-0-6); first term. Prerequisites: Ma 1b, Ph 2b or Ph 12b, CS 21, CS 38 or equivalent recommended (or instructor's permission). This course is an introduction to quantum cryptography: how to use quantum effects, such as quantum entanglement and uncertainty, to implement cryptographic tasks with levels of security that are impossible to achieve classically. The course covers the fundamental ideas of quantum information that form the basis for quantum cryptography, such as entanglement and quantifying quantum knowledge. We will introduce the security definition for quantum key distribution and see protocols and proofs of security for this task. We will also discuss the basics of device-independent quantum cryptography as well as other cryptographic tasks and protocols, such as bit commitment or position-based cryptography. Instructor: Vidick. CS 121. Introduction to Relational Databases. 9 units (3-0-6); first term. Prerequisites: CS 1 or equivalent. Introduction to the basic theory and usage of relational database systems. It covers the relational data model, relational algebra, and the Structured Query Language (SQL). The course introduces the basics of database schema design and covers the entity-relationship model, functional dependency analysis, and normal forms. Additional topics include other query languages based on the relational calculi, data-warehousing and dimensional analysis, writing and using stored procedures, working with hierarchies and graphs within relational databases, and an overview of transaction processing and query evaluation. Extensive hands-on work with SQL databases. Instructor: Pinkston. CS 122. Database System Implementation. 9 units (3-3-3); second term. Prerequisites: CS2, CS38, CS 121 and familiarity with Java, or instructor's permission. This course explores the theory, algorithms, and approaches behind modern relational database systems. Topics include file storage formats, query planning and optimization, query evaluation, indexes, transaction processing, concurrency control, and recovery. Assignments consist of a series of programming projects extending a working relational database, giving hands-on experience with the topics covered in class. The course also has a strong focus on proper software engineering practices, including version control, testing, and documentation. Instructor: Pinkston. CS 123. Projects in Database Systems. 9 units (0-0-9); third term. Prerequisites: CS121 and CS122. Students are expected to execute a substantial project in databases, write up a report describing their work, and make a presentation. Instructor: Pinkston. CS 124. Operating Systems. 12 units (3-6-3); second term. Prerequisites: CS 24. This course explores the major themes and components of modern operating systems, such as kernel architectures, the process abstraction and process scheduling, system calls, concurrency within the OS, virtual memory management, and file systems. Students must work in groups to complete a series of challenging programming projects, implementing major components of an instructional operating system. Most programming is in C, although some IA32 assembly language programming is also necessary. Familiarity with the material in CS 24 is strongly advised before attempting this course. Instructor: Pinkston. EE/Ma/CS 126 ab. Information Theory. 9 units (3-0-6); first, second terms. Prerequisites: Ma 3. For course description, see Electrical Engineering. EE/Ma/CS 127. Error-Correcting Codes. 9 units (3-0-6); second term. For course description, see Electrical Engineering. CS/EE/Ma 129 abc. Information and Complexity. 9 units (3-0-6), first and second terms; (1-4-4) third term. Prerequisite: basic knowledge of probability and discrete mathematics. A basic course in information theory and computational complexity with emphasis on fundamental concepts and tools that equip the student for research and provide a foundation for pattern recognition and learning theory. First term: what information is and what computation is; entropy, source coding, Turing machines, uncomputability. Second term: topics in information and complexity; Kolmogorov complexity, channel coding, circuit complexity, NP-completeness. Third term: theoretical and experimental projects on current research topics. Not offered 2016-17. ME/CS 132 ab. Advanced Robotics: Navigation and Vision. 9 units (3-6-0). For course description, see Mechanical Engineering. EE/CS/EST 135. Power System Analysis. 9 units (3-3-3); second term. For course description, see Electrical Engineering. CS 138. Computer Algorithms. 9 units (3-0-6); third term. Prerequisites: CS 21 and CS 38, or instructor's permission. Design and analysis of algorithms. Techniques for problems concerning graphs, flows, number theory, string matching, data compression, geometry, linear algebra and coding theory. Optimization, including linear programming. Randomization. Basic complexity theory and cryptography. Instructor: Schulman. CMS/CS 139. Analysis and Design of Algorithms. 12 units (3-0-9); second term. For course description, see Computation and Mathematical Sciences. CS 141. Hack Society. 9 units (1-6-2); third term. Prerequisites: CS 1 and CS 2. There is a large gap between the public and private sectors' effective use of technology. This gap presents an opportunity for the development of innovative solutions to problems faced by society. Students will work with start-up, corporate, nonprofit, and government partners to develop and deploy technology based projects that address this gap. Course material will offer an introduction to the design, development, and analysis of digital technology with examples derived from services typically found in the public sector. Instructor: Ralph. CS 142. Distributed Computing. 9 units (3-0-6); third term. Prerequisites: CS 24, CS 38. Programming distributed systems. Mechanics for cooperation among concurrent agents. Programming sensor networks and cloud computing applications. Applications of machine learning and statistics by using parallel computers to aggregate and analyze data streams from sensors. Not offered 2016-17. CS/EE 143. Communication Networks. 9 units (3-3-3); first term. Prerequisites: Ma 2, Ma 3, CS 24 and CS 38, or instructor permission. This course focuses on the link layer (two) through the transport layer (four) of Internet protocols. It has two distinct components, analytical and systems. In the analytical part, after a quick summary of basic mechanisms on the Internet, we will focus on congestion control and explain: (1) How to model congestion control algorithms? (2) Is the model well defined? (3) How to characterize the equilibrium points of the model? (4) How to prove the stability of the equilibrium points? We will study basic results in ordinary differential equations, convex optimization, Lyapunov stability theorems, passivity theorems, gradient descent, contraction mapping, and Nyquist stability theory. We will apply these results to prove equilibrium and stability properties of the congestion control models and explore their practical implications. In the systems part, the students will build a software simulator of Internet routing and congestion control algorithms. The goal is not only to expose students to basic analytical tools that are applicable beyond congestion control, but also to demonstrate in depth the entire process of understanding a physical system, building mathematical models of the system, analyzing the models, exploring the practical implications of the analysis, and using the insights to improve the design. Instructor: Low. CMS/CS/EE 144. Networks: Structure Economics. 12 units (3-3-6); second term. For course description, see Computing and Mathematical Sciences. CS/EE 145. Projects in Networking. 9 units (0-0-9); third term. Prerequisites: Either CMS/CS/EE 144 or CS 142 in the preceding term, or instructor permission. Students are expected to execute a substantial project in networking, write up a report describing their work, and make a presentation. Instructor: Staff. CS/EE 146. Advanced Networking. 9 units (3-3-3); third term. Prerequisites: CS/EE 143 or instructor's permission. This is a research-oriented course meant for undergraduates and beginning graduate students who want to learn about current research topics in networks such as the Internet, power networks, social networks, etc. The topics covered in the course will vary, but will be pulled from current research topics in the design, analysis, control, and optimization of networks, protocols, and Internet applications. Usually offered in alternate years. Not offered 2016-17. EE/CS 147. Digital Ventures Design. 9 units (3-3-3); first term. Prerequisites: none. For course description, see Electrical Engineering. EE/CNS/CS 148. Selected Topics in Computational Vision. 9 units (3-0-6); third term. For course description, see Electrical Engineering. CS/SS/Ec 149. Introduction to Algorithmic Economics. 9 units (3-0-6); second term. This course will equip students to engage with active research at the intersection of social and information sciences, including: algorithmic game theory and mechanism design; auctions; matching markets; and learning in games. Instructors: Echenique and Pomatto. CS 150. Probability and Algorithms. 9 units (3-0-6); second term. Prerequisites: CS 38 a and Ma 5 abc. Elementary randomized algorithms and algebraic bounds in communication, hashing, and identity testing. Game tree evaluation. Topics may include randomized parallel computation; independence, k-wise independence and derandomization; rapidly mixing Markov chains; expander graphs and their applications; clustering algorithms. Instructor: Schulman. CS 151. Complexity Theory. 12 units (3-0-9); third term. Prerequisites: CS 21 and CS 38, or instructor's permission. This course describes a diverse array of complexity classes that are used to classify problems according to the computational resources (such as time, space, randomness, or parallelism) required for their solution. The course examines problems whose fundamental nature is exposed by this framework, the known relationships between complexity classes, and the numerous open problems in the area. Instructor: Umans. CS/SS 152. Introduction to Data Privacy. 9 units (3-0-6); first term. Prerequisites: Ma 3, CS 24 and CS 38, or instructor's permission. How should we define privacy? What are the tradeoffs between useful computation on large datasets and the privacy of those from whom the data is derived? This course will take a mathematically rigorous approach to addressing these and other questions at the frontier of research in data privacy. We will draw connections with a wide variety of topics, including economics, statistics, information theory, game theory, probability, learning theory, geometry, and approximation algorithms. Not offered 2016-17. CS 153. Current Topics in Theoretical Computer Science. 9 units (3-0-6); second term. Prerequisites: CS 21 and CS 38, or instructor's permission. May be repeated for credit, with permission of the instructor. Students in this course will study an area of current interest in theoretical computer science. The lectures will cover relevant background material at an advanced level and present results from selected recent papers within that year's chosen theme. Students will be expected to read and present a research paper. Not offered 2016-17. CMS/CS/CNS/EE 155. Machine Learning Data Mining. 12 units (3-3-6); second term. For course description see Computing and Mathematical Sciences. CS/CNS/EE 156 ab. Learning Systems. 9 units (3-0-6); first, third terms. Prerequisites: Ma 2 and CS 2, or equivalent. Introduction to the theory, algorithms, and applications of automated learning. How much information is needed to learn a task, how much computation is involved, and how it can be accomplished. Special emphasis will be given to unifying the different approaches to the subject coming from statistics, function approximation, optimization, pattern recognition, and neural networks. Instructor: Abu-Mostafa. ACM/CS 157. Introduction to Statistical Inference. 9 units (3-2-4); second term. For course description, see Applied and Computational Mathematics. ACM/CS/EE 158. Introduction to Mathematical Statistics. 9 units (3-0-6); third term. For course description, see Applied and Computational Mathematics. CS/CNS/EE 159. Advanced Topics in Machine Learning. 9 units (3-0-6); third term. Prerequisites: CS 155; strong background in statistics, probability theory, algorithms, and linear algebra; background in optimization is a plus as well. This course focuses on current topics in machine learning research. This is a paper reading course, and students are expected to understand material directly from research articles. Students are also expected to present in class, and to do a final project. Instructors: Yue. CS/CNS 171. Introduction to Computer Graphics Laboratory. 12 units (3-6-3); first term. Prerequisites: Ma 2 and extensive programming experience. This course introduces the basic ideas behind computer graphics and its fundamental algorithms. Topics include graphics input and output, the graphics pipeline, sampling and image manipulation, three-dimensional transformations and interactive modeling, basics of physically based modeling and animation, simple shading models and their hardware implementation, and fundamental algorithms of scientific visualization. Students will be required to perform significant implementations. Instructor: Barr. CS/CNS 174. Computer Graphics Projects. 12 units (3-6-3); third term. Prerequisites: Ma 2 and CS/CNS 171 or instructor's permission. This laboratory class offers students an opportunity for independent work covering recent computer graphics research. In coordination with the instructor, students select a computer graphics modeling, rendering, interaction, or related algorithm and implement it. Students are required to present their work in class and discuss the results of their implementation and any possible improvements to the basic methods. May be repeated for credit with instructor's permission. Instructor: Barr. CS 176. Introduction to Computer Graphics Research. 9 units (3-3-3); second term. Prerequisite: CS/CNS 171, or 173, or 174. The course will go over recent research results in computer graphics, covering subjects from mesh processing (acquisition, compression, smoothing, parameterization, adaptive meshing), simulation for purposes of animation, rendering (both photo- and nonphotorealistic), geometric modeling primitives (image based, point based), and motion capture and editing. Other subjects may be treated as they appear in the recent literature. The goal of the course is to bring students up to the frontiers of computer graphics research and prepare them for their own research. Instructor: Desbrun. CS 177 ab. Discrete Differential Geometry: Theory and Applications. 9 units (3-3-3); first, second terms. Working knowledge of multivariate calculus and linear algebra as well as fluency in some implementation language is expected. Subject matter covered: differential geometry of curves and surfaces, classical exterior calculus, discrete exterior calculus, sampling and reconstruction of differential forms, low dimensional algebraic and computational topology, Morse theory, Noether's theorem, Helmholtz-Hodge decomposition, structure preserving time integration, connections and their curvatures on complex line bundles. Applications include elastica and rods, surface parameterization, conformal surface deformations, computation of geodesics, tangent vector field design, connections, discrete thin shells, fluids, electromagnetism, and elasticity. Instructor: Schroeder. CS 179. GPU Programming. 9 units (3-3-3); third term. Prerequisites: Working knowledge of C. Some experience with computer graphics algorithms preferred, but not required. The use of Graphics Processing Units for computer graphics rendering is well known, but their power for general parallel computation is only recently being explored. Parallel algorithms running on GPUs can often achieve up to 100x speedup over similar CPU algorithms. This course covers programming techniques for the Graphics processing unit, focusing on visualization and simulation of various systems. Labs will cover specific applications in graphics, mechanics, and signal processing. The course will introduce the OpenGL Shader Language (GLSL) and nVidia's parallel computing architecture, CUDA. Labwork will require extensive programming. Instructor: Barr. CS 180. Master's Thesis Research. Units (total of 45) are determined in accordance with work accomplished. CS/EE 181 abc. VLSI Design Laboratory. 12 units (3-6-3); first, second terms. Digital integrated system design, with projects involving the design, verification, and testing of high-complexity CMOS microcircuits. First-term lecture and homework topics emphasize disciplined design, and include CMOS logic, layout, and timing; computer-aided design and analysis tools; and electrical and performance considerations. Each student is required in the first term to complete individually the design, layout, and verification of a moderately complex integrated circuit. Advanced topics second and third terms include self-timed design, computer architecture, and other topics that vary year by year. Projects are large-scale designs done by teams. Not offered 2016-17. CNS/Bi/EE/CS/NB 186. Vision: From Computational Theory to Neuronal Mechanisms. 12 units (4-4-4). For course description, see Computation and Neural Systems. CNS/Bi/Ph/CS/NB 187. Neural Computation. 9 units (3-0-6). For course description, see Computation and Neural Systems. BE/CS/CNS/Bi 191 ab. Biomolecular Computation. 9 units. For course description, see Bioengineering. BE/CS 196 ab. Design and Construction of Programmable Molecular Systems. 12 units ; a (3-6-3) second term; b (2-8-2) For course description, see Bioengineering. Ph/CS 219 abc. Quantum Computation. 9 units (3-0-6); first, second, third terms. For course description, see Physics. SS/CS 241. Topics in Algorithmic Economics. 9 units (3-0-6). For course description, see Social Science. Bi/BE/CS 271 a. Special Topics in Computational Biology - Introduction to Sequence Analysis and Motif Discovery. 9 units (3-0-6); first term. For course description, see Biology. CS 274 abc. Topics in Computer Graphics. 9 units (3-3-3); first, second, third terms. Prerequisite: instructor's permission. Each term will focus on some topic in computer graphics, such as geometric modeling, rendering, animation, human-computer interaction, or mathematical foundations. The topics will vary from year to year. May be repeated for credit with instructor's permission. Not offered 2016-17. CS 280. Research in Computer Science. Units in accordance with work accomplished. Approval of student's research adviser and option adviser must be obtained before registering. CS 282 abc. Reading in Computer Science. 6 units or more by arrangement; first, second, third terms. Instructor's permission required. CS 286 abc. Seminar in Computer Science. 3, 6, or 9 units, at the instructor's discretion. Instructor's permission required. GO TO THE 2016-2017 PAGE log in Caltech - Catalog 1200 E California Blvd, Pasadena CA 91125
