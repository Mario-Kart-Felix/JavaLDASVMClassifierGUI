1 Applications of Intelligent AgentsN. R. Jennings and M. WooldridgeQueen Mary  Westfield CollegeUniversity of London1.1 IntroductionIntelligent agents are a new paradigm for developing software applications. Morethan this, agentbased computing has been hailed as the next significant breakthrough in software development Sargent, 1992, and the new revolution insoftware Ovum, 1994. Currently, agents are the focus of intense interest on thepart of many subfields of computer science and artificial intelligence. Agents arebeing used in an increasingly wide variety of applications, ranging from comparatively small systems such as email filters to large, open, complex, missioncritical systems such as air traffic control. At first sight, it may appear that suchextremely different types of system can have little in common. And yet this is notthe case in both, the key abstraction used is that of an agent. Our aim in this articleis to help the reader to understand why agent technology is seen as a fundamentally important new tool for building such a wide array of systems. Moreprecisely, our aims are fivefold to introduce the reader to the concept of an agent and agentbased systems, to help the reader to recognize the domain characteristics that indicate theappropriateness of an agentbased solution, to introduce the main application areas in which agent technology has beensuccessfully deployed to date, to identify the main obstacles that lie in the way of the agent system developer,and finally to provide a guide to the remainder of this book.We begin, in this section, by introducing some basic concepts such as, perhapsmost importantly, the notion of an agent. In Section 1.2, we give some generalguidelines on the types of domain for which agent technology is appropriate. InSection 1.3, we survey the key application domains for intelligent agents. InSection 1.4, we discuss some issues in agent system development, and finally, inSection 1.5, we outline the structure of this book.Before we can discuss the development of agentbased systems in detail, wehave to describe what we mean by such terms as agent and agentbased system.Unfortunately, we immediately run into difficulties, as some key concepts in agentbased computing lack universally accepted definitions. In particular, there is no realagreement even on the core question of exactly what an agent is see Franklin andGraesser 1996 for a discussion. However, we believe that most researchers4   Jennings and Wooldridgewould find themselves in broad agreement with the following definitionsWooldridge and Jennings, 1995.First, an agent is a computer system situated in some environment, and that iscapable of autonomous action in this environment in order to meet its designobjectives. Autonomy is a difficult concept to pin down precisely, but we mean itsimply in the sense that the system should be able to act without the directintervention of humans or other agents, and should have control over its ownactions and internal state. It may be helpful to draw an analogy between the notionof autonomy with respect to agents and encapsulation with respect to objectoriented systems. An object encapsulates some state, and has some control over thisstate in that it can only be accessed or modified via the methods that the objectprovides. Agents encapsulate state in just the same way. However, we also think ofagents as encapsulating behavior, in addition to state. An object does notencapsulate behavior it has no control over the execution of methods  if an objectx invokes a method m on an object y, then y has no control over whether m isexecuted or not  it just is. In this sense, object y is not autonomous, as it has nocontrol over its own actions. In contrast, we think of an agent as having exactly thiskind of control over what actions it performs. Because of this distinction, we do notthink of agents as invoking methods actions on agents  rather, we tend to think ofthem requesting actions to be performed. The decision about whether to act uponthe request lies with the recipient.Of course, autonomous computer systems are not a new development. There aremany examples of such systems in existence. Examples include any process control system, which must monitor a realworld environment andperform actions to modify it as conditions change typically in real time  suchsystems range from the very simple for example, thermostats to the extremelycomplex for example, nuclear reactor control systems, software daemons, which monitor a software environment and perform actionsto modify the environment as conditions change  a simple example is theUNIX xbiff program, which monitors a users incoming email and obtainstheir attention by displaying an icon when new, incoming email is detected.It may seem strange that we choose to call such systems agents. But these arenot intelligent agents. An intelligent agent is a computer system that is capable offlexible autonomous action in order to meet its design objectives. By flexible, wemean that the system must be responsive agents should perceive their environment which may be the physical world, a user, a collection of agents, the Internet, etc. and respond in atimely fashion to changes that occur in it, proactive agents should not simply act in response to their environment, theyshould be able to exhibit opportunistic, goaldirected behavior and take theinitiative where appropriate, andApplications of Intelligent Agents   5 social agents should be able to interact, when they deem appropriate, withother artificial agents and humans in order to complete their own problemsolving and to help others with their activities.Hereafter, when we use the term agent, it should be understood that we areusing it as an abbreviation for intelligent agent. Other researchers emphasizedifferent aspects of agency including, for example, mobility or adaptability.Naturally, some agents may have additional characteristics, and for certain types ofapplications, some attributes will be more important than others. However, webelieve that it is the presence of all four attributes in a single software entity thatprovides the power of the agent paradigm and which distinguishes agent systemsfrom related software paradigms  such as objectoriented systems, distributed sysems, and expert systems see Wooldridge 1997 for a more detailed discussion.By an agentbased system, we mean one in which the key abstraction used isthat of an agent. In principle, an agentbased system might be conceptualized interms of agents, but implemented without any software structures corresponding toagents at all. We can again draw a parallel with objectoriented software, where it isentirely possible to design a system in terms of objects, but to implement it withoutthe use of an objectoriented software environment. But this would at best beunusual, and at worst, counterproductive. A similar situation exists with agenttechnology we therefore expect an agentbased system to be both designed andimplemented in terms of agents. A number of software tools exist that allow a userto implement software systems as agents, and as societies of cooperating agents.Note that an agentbased system may contain any nonzero number of agents.The multiagent case  where a system is designed and implemented as severalinteracting agents, is both more general and significantly more complex than thesingleagent case. However, there are a number of situations where the singleagentcase is appropriate. A good example, as we shall see later in this chapter, is theclass of systems known as expert assistants, wherein an agent acts as an expertassistant to a user attempting to use a computer to carry out some task.1.2 Agent Application Domain CharacteristicsNow that we have a better understanding of what the terms agent and agentbased system mean, the obvious question to ask is what do agents have to offerFor any new technology to be considered as useful in the computer marketplace, itmust offer one of two things the ability to solve problems that have hitherto been beyond the scope ofautomation  either because no existing technology could be used to solve theproblem, or because it was considered too expensive difficult, timeconsuming,risky to develop solutions using existing technology or the ability to solve problems that can already be solved in a significantly bettercheaper, more natural, easier, more efficient, or faster way.6   Jennings and Wooldridge1.2.1 Solving New Types of ProblemCertain types of software system are inherently more difficult to correctly designand implement than others. The simplest general class of software systems arefunctional. Such systems work by taking some input, computing a function of it,and giving this result as output. Compilers are obvious examples of functionalsystems. In contrast, reactive systems, which maintain an ongoing interaction withsome environment, are inherently much more difficult to design and correctlyimplement. Process control systems, computer operating systems, and computernetwork management systems are all wellknown examples of reactive systems. Inall of these examples, a computer system is required that can operate independently, typically over long periods of time. It has long been recognized that reactivesystems are among the most complex types of system to design and implementPnueli, 1986, and a good deal of effort has been devoted to developing softwaretools, programming languages, and methodologies for managing this complexity with some limited success. However, for certain types of reactive system, evenspecialized software engineering techniques and tools fail  new techniques arerequired. We can broadly subdivide these systems into three classes open systems, complex systems, and ubiquitous computing systems.1.2.1.1 Open SystemsAn open system is one in which the structure of the system itself is capable ofdynamically changing. The characteristics of such a system are that its componentsare not known in advance, can change over time, and may be highly heterogeneousin that they are implemented by different people, at different times, using differentsoftware tools and techniques. Computing applications are increasingly demandedby users to operate in such domains. Perhaps the bestknown example of a highlyopen software environment is the Internet  a loosely coupled computer network ofever expanding size and complexity. The design and construction of software toolsto exploit the enormous potential of the Internet and its related technology is one ofthe most important challenges facing computer scientists in the 1990s, and for thisreason, it is worth using it as a case study. The Internet can be viewed as a large,distributed information resource, with nodes on the network designed andimplemented by different organizations and individuals with widely varyingagendas. Any computer system that must operate on the Internet must be capable ofdealing with these different organizations and agendas, without constant guidancefrom users but within welldefined bounds. Such functionality is almost certain torequire techniques based on negotiation or cooperation, which lie very firmly in thedomain of multiagent systems Bond and Gasser, 1988.Applications of Intelligent Agents   71.2.1.2 Complex SystemsThe most powerful tools for handling complexity in software development aremodularity and abstraction. Agents represent a powerful tool for making systemsmodular. If a problem domain is particularly complex, large, or unpredictable, thenit may be that the only way it can reasonably be addressed is to develop a numberof nearly modular components that are specialized in terms of their representation and problem solving paradigm at solving a particular aspect of it. In suchcases, when interdependent problems arise, the agents in the systems mustcooperate with one another to ensure that interdependencies are properly managed.In such domains, an agentbased approach means that the overall problem can bepartitioned into a number of smaller and simpler components, which are easier todevelop and maintain, and which are specialized at solving the constituent subproblems. This decomposition allows each agent to employ the most appropriateparadigm for solving its particular problem, rather than being forced to adopt acommon uniform approach that represents a compromise for the entire system, butwhich is not optimal for any of its subparts. The notion of an autonomous agentalso provides a useful abstraction in just the same way that procedures, abstractdata types, and, most recently, objects provide abstractions. They allow a softwaredeveloper to conceptualize a complex software system as a society of cooperatingautonomous problem solvers. For many applications, this highlevel view is simplymore appropriate than the alternatives.1.2.1.3 UbiquityDespite the many innovations in humancomputer interface design over the pasttwo decades, and the wide availability of powerful windowbased user interfaces,computernave users still find most software difficult to use. One reason for this isthat the user of a software product typically has to describe each and every step thatneeds to be performed to solve a problem, down to the smallest level of detail. Ifthe power of current software applications is ever to be fully utilized by such users,then a fundamental rethink is needed about the nature of the interaction betweencomputer and user. It must become an equal partnership  the machine should notjust act as a dumb receptor of task descriptions, but should cooperate with the userto achieve their goal. As Negroponte wrote, the future of computing will be 100driven by delegating to, rather than manipulating computers Negroponte, 1995.To deliver such functionality, software applications must be autonomous given a vague and imprecise specification, it must determine howthe problem is best solved and then solve it, without constant guidance from theuser, proactive it should not wait to be told what to do next, rather it should makesuggestions to the user,8   Jennings and Wooldridge responsive it should take account of changing user needs and changes in thetask environment, and adaptive it should come to know users preferences and tailor interactions toreflect these.In other words, it needs to behave as an intelligent agent. These considerationsgive rise to the idea of an agent acting as an expert assistant with respect to someapplication, knowledgeable about both the application itself and the user, andcapable of acting with the user in order to achieve the users goals. We discusssome prototypical expert assistants in Section 1.3.1.2.2 Improving the Efficiency of Software DevelopmentAgent technology gives us the tools with which to build applications that we werepreviously unable to build. But it can also provide a better means of conceptualizing andor implementing a given application. Here, three important domaincharacteristics are often cited as a rationale for adopting agent technology cf. Bondand Gasser, 1988 data, control, expertise, or resources are inherently distributed, the system is naturally regarded as a society of autonomous cooperating components, or the system contains legacy components, which must be made to interact withother, possibly new software components.1.2.2.1 Distribution of Data, Control, Expertise, or ResourcesWhen the domain involves a number of distinct problem solving entities or datasources that are physically or logically distributed in terms of their data, control,expertise, or resources, and which need to interact with one another in order tosolve problems, then agents can often provide an effective solution. For example, ina distributed health care setting, general practitioners, hospital specialists, nurses,and home care organizations have to work together to provide the appropriate careto a sick patient Huang et al., 1995. In this domain, there is distribution of data the general practitioner has data about the patient, which isvery different from that of the hospital nurse  even though it concerns the sameperson, distribution of control each individual is responsible for performing a differentset of tasks, distribution of expertise the specialists knowledge is very different from thatof either the general practitioner or the nurse, and distribution of resources a specialist is responsible for the beds required bytheir patients, a general practitioner for paying hospital bills, etc.Applications of Intelligent Agents   9In cases like this, agents provide a natural way of modeling the problem realworld entities and their interactions can be directly mapped into autonomousproblem solving agents with their own resources and expertise, and which are ableto interact with others in order to get tasks done. Also, in the case of distributeddata sources, as in sensor networks Lesser and Corkill, 1983 and seismicmonitoring Mason, 1995, the use of agents means that significant amounts ofprocessing can be carried out at the data source, with only highlevel informationexchanged. This alleviates the need to send large amounts of raw data to a distantcentral processor, thus making more efficient use of communications bandwidth.1.2.2.2 Natural MetaphorThe notion of an autonomous agent is often the most appropriate metaphor forpresenting a given software functionality. For example a program that filters email can be presented to its user via the metaphor of apersonal digital assistant Maes, 1994, and meeting scheduling software can naturally be presented as an empowered,autonomous, social agent that can interact with other similar agents on theusers behalf.In such applications, the fact that these functions are implemented through aseries of local agents also means that they can be personalized to reflect thepreferences of their user. Finally, in computer games Wavish and Graham, 1995and virtual reality systems Bates, 1994, characters can naturally be represented asagents.1.2.2.3 Legacy SystemsLarge organizations have many software applications especially information systems that perform critical organizational functions. To keep pace with changingbusiness needs, these systems must be periodically updated. However, modifyingsuch legacy systems is in general very difficult the systems structure and internaloperation will become corrupted with the passage of time, designs and documentation are lost, and individuals with an understanding of the software move on.Completely rewriting such software tends to be prohibitively expensive, and isoften simply impossible. Therefore, in the long term, the only way to keep suchlegacy systems useful is to incorporate them into a wider cooperating community,in which they can be exploited by other pieces of software. This can be done, forexample, by building an agent wrapper around the software to enable it to interoperate with other systems Genesereth and Ketchpel, 1994 Jennings et al., 1993.The process of transforming a software application such as a database into an agentis sometimes referred to as agentification Shoham, 1993.10   Jennings and Wooldridge1.2.3 The Limitations of Agent SolutionsAlthough agent technology has an important role to play in the development ofleadingedge computing applications, it should not be oversold. Most applicationsthat currently use agents could be built using nonagent techniques. Thus the merefact that a particular problem domain has distributed data sources or involveslegacy systems does not necessarily imply that an agentbased solution is the mostappropriate one  or even that it is feasible. As with all system designs, the ultimatechoice is dictated by many factors. This section has identified the types of situationin which an agentbased solution should be considered, as opposed to those inwhich it should be deployed. Moreover, it should be noted that the very nature ofthe agent paradigm leads to a number of problems, common to all agent basedapplications No overall system controller. An agentbased solution may not be appropriatefor domains in which global constraints have to be maintained, in domainswhere a realtime response must be guaranteed, or in domains in which deadlocks or livelocks must be avoided. No global perspective. An agents actions are, by definition, determined by thatagents local state. However, since in almost any realistic agent system,complete global knowledge is not a possibility, this may mean that agents makeglobally suboptimal decisions. The issue of reconciling decision making basedon local knowledge with the desire to achieve globally optimal performance is abasic issue in multiagent systems research Bond and Gasser, 1988. Trust and delegation. For individuals to be comfortable with the idea ofdelegating tasks to agents, they must first trust them. Both individuals andorganizations will thus need to become more accustomed and confident with thenotion of autonomous software components, if they are to become widely used.Users have to gain confidence in the agents that work on their behalf, and thisprocess can take time. During this period, the agent must strike a balancebetween continually seeking guidance and needlessly distracting the user andnever seeking guidance and exceeding its authority. Put crudely, an agentmust know its limitations.1.3 Agent Application DomainsAgents are the next major computing paradigm and  will be pervasive inevery market by the year 2000. Janca, 1995There are several orthogonal dimensions along which agent applications could beclassified. They can be classified by the type of the agent, by the technology used toimplement the agent, or by the application domain itself. We choose to use thedomain type, since this view fits best with the objectives and structure of the rest ofthis chapter see Nwana 1996 for an alternative typology. Our aim in producingthis classification scheme is simply to give a feel for the breadth and variety ofApplications of Intelligent Agents   11agent applications. More comprehensive descriptions of specific agent systems canbe found in AA97 Chaibdraa, 1995 Nwana, 1996 PAAM 1996 van Parunak,1996.1.3.1 Industrial ApplicationsIndustrial applications of agent technology were among the first to be developed asearly as 1987, Parunak reports experience with applying the contract net taskallocation protocol in a manufacturing environment see below. Today, agents arebeing applied in a wide range of industrial applications.1.3.1.1 Process ControlProcess control is a natural application for intelligent agents and multiagentsystems, since process controllers are themselves autonomous reactive systems. It isnot surprising, therefore, that a number of agentbased process control applicationsshould have been developed. The best known of these is ARCHON, a softwareplatform for building multiagent systems, and an associated methodology forbuilding applications with this platform Jennings, 1995. ARCHON has beenapplied in several process control applications, including electricity transportationmanagement the application is in use in northern Spain, and particle acceleratorcontrol. ARCHON also has the distinction of being one of the earliest fieldtestedmultiagent systems in the world. Agents in ARCHON are fairly heavyweightcomputational systems, with four main components a highlevel communicationmodule HLCM, which manages interagent communication a planning andcoordination module PCM, which is essentially responsible for deciding what theagent will do an agent information management module AIM, which isresponsible for maintaining the agents model of the world, and finally, anunderlying intelligent system IS, which represents the agents domain expertise.The HLCM, PCM, and AIM together constitute a kind of agent wrapper, whichcan be used to encapsulate an existing intelligent system or indeed any preexistingsoftware application and turn it into an agent.1.3.1.2 ManufacturingParunak 1987 describes the YAMS Yet Another Manufacturing System, whichapplies the wellknown Contract Net protocol Smith, 1980 to manufacturingcontrol. The basic problem can be described as follows. A manufacturing enterpriseis modeled as a hierarchy of workcells. There will, for example, be workcells formilling, lathing, grinding, painting, and so on. These workcells will be furthergrouped into flexible manufacturing systems FMS, each of which will provide afunctionality such as assembly, paint spraying, buffering of products, and so on. Acollection of such FMSs is grouped into a factory. A single company ororganization may have many different factories, though these factories may12   Jennings and Wooldridgeduplicate functionality and capabilities. The goal of YAMS is to efficiently managethe production process at these plants. This process is defined by some constantlychanging parameters, such as the products to be manufactured, available resources,time constraints, and so on. In order to achieve this enormously complex task,YAMS adopts a multiagent approach, where each factory and factory componentis represented as an agent. Each agent has a collection of plans, representing itscapabilities. The contract net protocol allows tasks i.e., production orders to bedelegated to individual factories, and from individual factories down to FMSs, andthen to individual workcells. The contract net is based on the idea of negotiation,and hence YAMS views the problem of deciding how best to process a companysproduct manufacturing requirements as a negotiation problem. A somewhat similarapproach was developed in Wooldridge et al., 1996, where the problem ofdetermining an optimal production sequence for a factory was analyzed using thetools of game and negotiation theory.1.3.1.3 Air Traffic ControlKinny et al. 1996 describe a sophisticated agentrealized air traffic control systemknown as OASIS. In this system, which is undergoing field trials at Sydney airportin Australia, agents are used to represent both aircraft and the various air trafficcontrol systems in operation. The agent metaphor thus provides a useful and naturalway of modeling realworld autonomous components. As an aircraft enters Sydneyairspace, an agent is allocated for it, and the agent is instantiated with theinformation and goals corresponding to the realworld aircraft. For example, anaircraft might have a goal to land on a certain runway at a certain time. Air trafficcontrol agents are responsible for managing the system. OASIS is implementedusing the AAIIs own dMARS system. This system allows an agent to beimplemented using the beliefdesireintention model of agency  one of the mostpopular approaches to reasoning about agents in theoretical multiagent systems.1.3.2 Commercial Applications1.3.2.1 Information ManagementAs the richness and diversity of information available to us in our everyday liveshas grown, so the need to manage this information has grown. The lack of effectiveinformation management tools has given rise to what is colloquially known as theinformation overload problem. Put simply, the sheer volume of informationavailable to us via the Internet and World Wide Web WWW represents a veryreal problem. The potential of this resource is immediately apparent to anyone withmore than the most superficial experience of using the WWW. But the reality isoften disappointing. There are many reasons for this. Both human factors such asusers getting bored or distracted and organizational factors such as poorlyorganized pages with no semantic markup conspire against users attempting to useApplications of Intelligent Agents   13the resource in a systematic way. We can characterize the information overloadproblem in two ways Information filtering. Every day, we are presented with enormous amounts ofinformation via email and newsnet news, for example, only a tiny proportionof which is relevant or important. We need to be able to sort the wheat from thechaff, and focus on information we need. Information gathering. The volume of information available prevents us fromactually finding information to answer specific queries. We need to be able toobtain information that meets our requirements, even if this information canonly be collected from a number of different sites.One important contributing factor to information overload is almost certainlythat an end user is required to constantly direct the management process. But thereis in principle no reason why such searches should not be carried out by agents,acting autonomously to search the Web on behalf of some user. The idea is socompelling that many projects are directed at doing exactly this. Three suchprojects are described below Maxims Maes, 1994 describes an electronic mail filtering agent calledMaxims. The program learns to prioritize, delete, forward, sort, and archivemail messages on behalf of a user p. 35. It works by looking over theshoulder of a user as he or she works with their email reading program, anduses every action the user performs as a lesson. Maxims constantly makesinternal predictions about what a user will do with a message. If thesepredictions turn out to be inaccurate, then Maxims keeps them to itself. Butwhen it finds it is having a useful degree of success in its predictions, it starts tomake suggestions to the user about what to do. Newt Maes, 1994 also describes an example of an Internet news filteringprogram called Newt. This program, implemented in C on a UNIX platform,takes as input a stream of usenet news articles, and as output gives a subset ofthese articles that it is recommended the user reads. The Newt agent isprogrammed by means of training examples the user gives Newt examples ofarticles that would and would not be read, and this feedback is used to modifyan internal model we use the term very loosely of the users interests. Theuser can, if desired, explicitly program Newt by giving it precise rules e.g.,give me all articles containing the word agent. Newt retrieves words ofinterest from an article by performing a fulltext analysis using the vector spacemodel for documents. The Zuno Digital Library A digital library is an organized, managed collectionof data, together with services to assist the user in making use of this data. TheZuno Digital Library ZDL system is a multiagent system that enables a userto obtain a single, coherent view of incoherent, disorganized data sources suchas the World Wide Web, a users own data, collections of articles on publishinghouse sites, and so on Zuno, 1997. Agents in ZDL play one of three roles14   Jennings and Wooldridge consumer  representing end users of the system, who can be thoughtof as consuming information producer  representing content providers, who own the informationthat customers consume and facilitator  mapping between consumers and producers.Consumer agents in the system are responsible for representing the usersinterests. They maintain models of users, and use these models to assist them,by proactively providing information they require, and shielding them frominformation that is not of interest. ZDL thus acts both as an information filterand an information gatherer.1.3.2.2 Electronic CommerceCurrently, commerce is almost entirely driven by human interactions humansdecide when to buy goods, how much they are willing to pay, and so on. But inprinciple, there is no reason why some commerce cannot be automated. By this, wemean that some commercial decision making can be placed in the hands of agents.Lest the reader suppose that this is fanciful, and that no sensible commercialorganization would make their decision making and hence money spending theresponsibility of a computer program, it should be remembered that this is preciselywhat happens today in the electronic trading of stocks and shares. Widespreadelectronic commerce is, however, likely to lie some distance in the future. In thenear term, electronic trading applications are likely to be much more mundane andsmall scale. As an example, Chavez and Maes 1996 describe a simple electronicmarketplace called Kasbah. This system realizes the marketplace by creatingbuying and selling agents for each good to be purchased or sold respectively.Commercial transactions take place by the interactions of these agents.1.3.2.3 Business Process ManagementCompany managers make informed decisions based on a combination of judgement and information from many departments. Ideally, all relevant informationshould be brought together before judgement is exercised. However obtainingpertinent, consistent and uptodate information across a large company is acomplex and time consuming process. For this reason, organizations have sought todevelop a number of IT systems to assist with various aspects of the managementof their business processes. Project ADEPT Jennings et al., 1996 tackles thisproblem by viewing a business process as a community of negotiating, serviceproviding agents. Each agent represents a distinct role or department in theenterprise and is capable of providing one or more services. For example, a designdepartment may provide the service of designing a telecom network, a legaldepartment may offer the service of checking that the design is legal, and themarketing department may provide the service of costing the design. Agents whoApplications of Intelligent Agents   15require a service from another agent enter into a negotiation for that service toobtain a mutually acceptable price, time, and degree of quality. Successfulnegotiations result in binding agreements between agents. This agentbasedapproach offers a number of advantages over more typical workflow solutions tothis problem. The proactive nature of the agents means services can be scheduled ina justintime fashion rather than prespecified from the beginning, and theresponsive nature of the agents means that service exceptions can be detected andhandled in a flexible manner. The current version of the system has been tested on aBritish Telecom BT business process involving some 200 activities and ninedepartments and there are plans to move toward full scale field trials.1.3.3 Medical ApplicationsMedical informatics is a major growth area in computer science new applicationsare being found for computers every day in the health industry. It is not surprising,therefore, that agents should be applied in this domain. Two of the earliestapplications are in the areas of health care and patient monitoring.1.3.3.1 Patient MonitoringThe Guardian system described in HayesRoth et al., 1989 is intended to helpmanage patient care in the Surgical Intensive Care Unit SICU. The system wasmotivated by two concerns first, that the patient care model in a SICU isessentially that of a team, where a collection of experts with distinct areas ofexpertise cooperate to organize patient health care and second, that one of the mostimportant factors in good SICU patient health care is the adequate sharing ofinformation between members of the critical care team. In particular, specialiststend to have very little opportunity to monitor the minutebyminute status of apatient this task tends to fall to nurses, who, in contrast, often do not have theexpertise to interpret the information they obtain in the way that an appropriateexpert would. The Guardian system distributes the SICU patient monitoringfunction among a number of agents, of three different types perceptionaction agents  responsible for the interface between Guardian andthe world, mapping raw sensor input into a usable symbolic form, and translating action requests from Guardian into raw effector control commands, reasoning agents  responsible for organizing the systems decision makingprocess, and control agents  of which there will only ever be one, with overall, toplevelcontrol of the system.These agents are organized into hierarchies, and the system as a whole isclosely based on the blackboard model of control, wherein different agentsknowledge sources cooperate via sharing knowledge in a common data structureknown as a blackboard.16   Jennings and Wooldridge1.3.3.2 Health CareHuang et al. 1996 describe a prototypical agentbased distributed medical caresystem. This system is designed to integrate the patient management process, whichtypically involves many individuals. For example, a general practitioner maysuspect that a patient has breast cancer, but this suspicion cannot be confirmed orrejected without the assistance of a hospital specialist. If the specialist confirms thehypothesis, then a care programme must be devised for treating the patient,involving the resources of other individuals. The prototype system allows a naturalrepresentation of this process, with agents mapped onto the individuals and,potentially, organizations involved in the patient care process. Agents in theprototype contain a knowledgebased intelligent system, containing the domainexpertise of the agent, a humancomputer interface, allowing the user to add,remove, or view system goals, and a communications manager, which realizes themessagepassing functionality of agents. The intelligent system component is basedon the KADS model of expertise, and the whole agent architecture is implementedin PROLOG. Message passing is realized via extensions to standard email.1.3.4 EntertainmentThe leisure industry is often not taken seriously by the computer science community. Leisure applications are frequently seen as somehow peripheral to theserious applications of computers. And yet leisure applications such as computergames can be extremely lucrative  consider the number of copies of id SoftwaresQuake sold since its release in 1996. Agents have an obvious role in computergames, interactive theater, and related virtual reality applications such systems tendto be full of semiautonomous animated characters, which can naturally beimplemented as agents.1.3.4.1 GamesWavish et al. 1996 describe several applications of agent technology to computergames. For example, they have developed a version of the popular Tetris computergame, where a user must try to make a wall out of irregularly shaped falling blocks.The agent in the game takes the part of the user, who must control where the blocksfall. Trying to program this agent using traditional symbolic AI techniques wouldrequire going through a knowledge elicitation stage, representing knowledge aboutthe game and the role of the user in terms of symbolic data structures such as rules,and so on. This approach would be entirely unrealistic for a game like Tetris,which has hard realtime constraints. Wavish and colleagues thus use an alternativereactive agent model called RTA Real Time Able. In this approach, agents areApplications of Intelligent Agents   17programmed in terms of behaviors. These behaviors are simple structures, whichloosely resemble rules but do not require complex symbolic reasoning.1.3.4.2 Interactive Theater and CinemaBy interactive theater and cinema, we mean a system that allows a user to play out arole analogous to the roles played by real, human actors in plays or films,interacting with artificial, computer characters that have the behavioral characteristics of real people. Agents that play the part of humans in theaterstyleapplications are often known as believable agents, a term coined by Joe Bates. Hisvision is ofAgents that provide the illusion of life, thus permitting  anaudiences suspension of disbelief. Bates, 1994A number of projects have been set up to investigate the development of suchagents. For example, HayesRoth et al., 1995 describe a directed improvizationsystem, in which human players act out roles in a dynamic narrative, creating anew, user directed work.1.3.5 CommentsAt a certain level of abstraction, many of the above applications share commonfeatures. Individual agents are designed and built to enact particular roles. Theseagents are autonomous, goal directed entities, which are responsive to theirenvironment. They must typically interact with other agents in order to carry outtheir role. Such interactions are a natural consequence of the inevitable interdependencies which exist between the agents, their environment, and their designobjectives. As the agents are autonomous, the interactions are usually fairlysophisticated  involving cooperation, coordination and negotiation. Following onfrom this view, two important observations can be made about developing agentbased applications The detailed problem solving actions of the agent can only be determined at runtime. Individual behavior is regulated by a complex interplay between theagents internal state and its external influences its environment and the otheragents. Thus the precise trajectory that an agent will follow can only bediscovered by running the agent in its environment. Because the behavior of individual agents is not uniquely determined at designtime, the behavior of the system as a whole can also only emerge at run time.These points have some obvious and perhaps alarming implications for theuse of an agentbased approach in safetycritical application domains such as airtraffic control, where it is essential that the system satisfies its specification. Wecomment on this issue in Section 1.4.18   Jennings and WooldridgeThe above applications also illustrate that there are several different dimensionsalong which we can analyze agentbased systems Sophistication of the Agents. Agents can be seen as performing three broadtypes of behavior. At the simplest level, there is the gopher agent, whichcarries out comparatively simple tasks, based on welldefined, prespecifiedrules and assumptions. The next level of sophistication involves serviceperforming agents, which carry out a highlevel, but still welldefined task atthe request of a user e.g., arrange a meeting or find an appropriate flight.Finally, there are the predictiveproactive agents, capable of flexible autonomous behavior in the way we discussed above. Simple examples are agentsthat volunteer information or services to a user, without being asked, wheneverit is deemed to be appropriate. Role of the Agents. Agents play many types of role. For example, in several ofthe industrial and commercial applications discussed above, the role of theagent system is to provide a decision support functionality. The agents actautonomously and proactively to gather information and to make recommendations, but a human operator makes the ultimate decisions. In contrast, in theentertainment domain for example, the agent completely automates a problemsolving role  it is thus delegated a particular activity and is entirely responsible for carrying it out. Granularity of View. In some of the applications discussed above, the significant unit of analysis and design is the individual agent, whereas in otherapplications it is the society of agents that is key. The decision about whether toadopt a singleagent or multiagent approach is generally determined by thedomain, and is similar in nature to decisions about whether monolithic,centralized solutions or distributed, decentralized solutions are appropriate.Singleagent systems are in a sense much simpler than multiagent systems,since they do not require the designer to deal with issues such as cooperation,negotiation, and so on.1.4 The Agent Development BottleneckAt the time of writing, expertise in designing and building agent applications isscarce. There is little in the way of productionquality software support for buildingagent applications, and still less general understanding of the issues that need to beaddressed when building such systems. Worse, most of todays agent systems arebuilt from scratch, using bespoke tools and techniques, which cannot easily beapplied to other types of system. This is particularly worrying because a lot ofinfrastructure is required before the main components of an agent system can bebuilt. At the moment, most developers rebuild this infrastructure from scratch inevery new case this process is clearly not sustainable.However, there is an increasing awareness that this situation must change ifagents are to make it into the mainstream of software development Kinny, 1996Applications of Intelligent Agents   19Wooldridge, 1997. Support is required throughout the agent system developmentprocess. In what follows, we use a traditional software engineering model as a basisfor structuring our discussion of this issue. We begin our discussion withrequirements specification, since the stage that precedes it  requirements analysis does not differ in any significant way from that for other types of softwaresystem. The requirements analysis stage typically concludes with a user requirements document  a statement of the properties that the analyst or developerbelieves the user client wants of the new system. This document is usually writtenin nontechnical language, so that it can be understood by both client anddeveloper.1.4.1 Requirements SpecificationOnce an understanding is reached of the clients needs with respect to the newlycommissioned system, a precise statement is required of what the developers intendto build. This document tends to be written as formally as possible  it aims to be aprecise statement of the properties of the system that the developers will build. Anumber of approaches have been developed to agent system requirementsspecification, and in particular to formal mathematical approaches Wooldridge,1997. The details of these formalisms tend to be rather complex, but broadlyspeaking, they characterize agents as rational decision makers. By this, we meansystems whose internal state can be expressed in terms of mentalistic constructssuch as belief, desire, and intention. An agents decision making can then becharacterized in terms of these constructs. It may be difficult to see how one mightspecify a computer system in this way, but the idea is really quite straightforward.One builds a specification out of a set of rules strictly speaking, logicalformulas, somewhat like thisif agent 1 believes that agent 2 believes runway 1 is clearthen agent 1 should believe that agent 2 has erroneous information, and agent 1 should intend that agent 2 is informed of its error.One might wonder why terms such as believe and intend are used. Beliefsare generally used to refer to the information that agents have about theirenvironment. This information can be incorrect  in just the same way thatinformation we have about the environment our beliefs could be wrong. The termintention is used to refer to a goal that the agent will pursue until it either succeedsor fails completely  it admits the possibility of failure, a realistic possibility inmany complex systems, one which traditional formalisms tend to ignore. Thechapter by Georgeff and Rao is the clearest expression of this view in this volume.The reader is also referred to Wooldridge, 1997 for a detailed discussion on theseapproaches.20   Jennings and Wooldridge1.4.2 System DesignThe design of robust, efficient systems is one of the most important issuesaddressed by software engineers, and a great deal of effort has been devoted tomaking system design a methodical, rigorous process. At the time of writing,comparatively few workers in the agent research community have considered howdesign methodologies might be applied to agent systems. This situation mustclearly change if agent systems are to become widely used, and in particular, thefollowing key questions need to be addressed Adopting an agentbased approach. In much of the work that goes under theagent banner, the rationale behind the choice of an agentbased approach overother, arguably simpler alternatives is unclear. The analysis of appropriatedomain properties Sections 1.2 and 1.3 represents a step toward this end. Macrosystem Structure. Once given an abstract, highlevel system specification, we need to transform this specification into agents, and relate theseagents to one another in a system structure. This process is known as refinement. In just the same way that objectoriented design methodologies exist,which give guidelines relating to the identification of objects and object interdependencies, so we might expect soon to see agentoriented design methodologies, which offer clear guidelines about how to decompose a problem intoagents and what effects a given decomposition is likely to have on the systemperformance. The design problem is exacerbated by the fact that legacy systemsoften need to be incorporated in agent systems. Thus design needs to be doneboth from a topdown perspective how should the problem be decomposedideally and from a bottomup perspective what software groupings alreadyexist and cannot be changed. Both perspectives must be accommodated.1.4.3 System ImplementationAn agent system design will both describe the various different roles that existwithin the system and characterize the relationships that exist between these roles.However, the design will not generally prescribe an implementation of these agents.So, having identified the various agent roles in a system, the next step is todetermine how each of these roles can be best realized. An agent architecture needsto be devised or adopted for each role, which will deliver the required functionaland nonfunctional characteristics of the role.Many agent architectures have been developed by the intelligent agentscommunity, with many different properties Wooldridge and Jennings, 1995. Atone extreme, there are strong AI systems, which allow users to build agents asknowledgebased systems, or even as logic theorem provers. In order to buildagents using such systems, one goes through the standard knowledgebased systemprocess of knowledge elicitation and representation, coding an agents behavior interms of rules, frames, or semantic nets. At the other extreme, there are many agentframeworks that simply offer enhanced versions of for example the JavaApplications of Intelligent Agents   21programming language  they include no AI techniques at all. Neither of theseextremes is strictly right or wrong they both have merits and drawbacks. Ingeneral, of course, the simplest solution that will effectively solve a problem isoften the best. There is little point in using complex reasoning systems wheresimple Javalike agents will do. Obviously, more detailed guidelines to assist withthis decision making process are desirable.1.4.4 System Testing, Debugging, and VerificationAs long ago as 1987, Les Gasser wroteConcurrency, problemdomain uncertainty, and nondeterminism inexecution together conspire to make it very difficult to comprehend theactivity in a distributed intelligent system  we urgently need graphicdisplays of system activity linked to intelligent modelbased tools whichhelp a developer reason about expected and observed behavior. Gasser,1987Gassers comments remain as true of agent system development in the late1990s as they did of the mid1980s. Sadly, testing and debugging are still muchneglected areas of the agent development process. Developers need assistance withvisualizing what is happening, and need debugging facilities to step through theexecution and amend behavior where appropriate. Visualization is particularlyimportant  determining what is happening in asynchronous, concurrent systems isan exceedingly difficult task. This is true both within an agent and even more sobetween agents. Traditional debugging features which allow execution to bestopped, internal states to be examined, states to be changed, message arrivals to besimulated, and so on are also essential. In most systems these features and tools aredeveloped from scratch  clearly an undesirable state of affairs.1.5 The Structure of This BookThe chapters in this book cover a wide spectrum of issues related to the applications of intelligent agents and multiagent systems. There are introductorychapters that explain the basic concepts and summarize the state of the art, there arevision chapters which look to the future of agent applications from both a technicaland a marketing perspective, and, finally, there are experience chapters, whichdeal with specific agent systems and applications.In more detail Technological issues that are addressed include architectures for individualagents and multiagent systems frameworks for implementing agent applications methodologies for designing agents and multiagent systems techniques for attaining efficient and coherent communication, cooperation and22   Jennings and Wooldridgecoordination and techniques for personalizing agents to reflect the needs ofindividual users. Predictions are made about the following issues the types of markets whereagents are likely to have the highest impact the economic value of variousagent markets the time scales by which agent technology will enter variousaspects of mainstream software solutions and the technical and nontechnicalobstacles that need to be overcome if agents are to achieve their potential. Application domains for which agent systems are described include telecommunications systems, personal digital assistants, information management,information economies, business applications, air traffic control, computersimulation, transportation management, and financial management.The range of author affiliations British Telecom, US West, IBM, GPT, Sharp,DaimlerBenz, Siemens, GTE Labs, France Telecom, US Treasury, and SwissBank Corporation covers a significant proportion of the large commercial organizations that are currently investing in agent technology, and illustrates forcefullythe pervasive nature of this exciting new technology.1.5.1 Introductory ChaptersThese two chapters introduce the basic terms and concepts of agent systems. Theyprovide the underpinning for the remainder of this book and offer a good point ofentry to those who are new to the field.Nwana and Ndumu provide a broadly based and uptodate introduction to thebasic concepts and terminology of agent systems. They define a typology thatspecifies the range of agents which currently exist, offer an assessment of the keyproblems and promises of the different agent types, and describe a number ofexemplar systems.Laufmann takes a complementary approach to that of Nwana and Ndumu. Heidentifies and specifies an ideal intelligent agent, and shows how the current agentlandscape can be divided by considering extant systems as highlighting particularattributes of this ideal model. He espouses three different, but related, views ofagents  agents as automated personal assistants, agents as cooperating problemsolvers, and agents as communicating software entities. He then concentrates on thethird view and outlines a strategy for software development that should lead tosubstantially improved agent applications in the near term.1.5.2 Vision ChaptersThese four chapters assess where agents are today and where they are likely to be infive to ten years time. When taken together, the chapters convey the excitement andpotential of this field and highlight the key open problems.Applications of Intelligent Agents   23Janca presents an analysis of the current state of agentenabled applications anddescribes how this is likely to change in the coming years. He identifies two broadclasses of agents  user interface agents which act on behalf of the user capturingtheir goals and translating these into actions and process agents which areresponsible for enacting these goals. Based on an analysis of the current market foragent technology see also the contribution by Guilfoyle he notes that the currentgeneration of applications exist in selfcontained niches, that the agents useproprietary formats, and that there are no standards for interconnection seecontributions by Huhns and Singh and Kearney. To circumvent these shortcomings, he presents an agent design model which acts as a unifying framework foragent applications and which can have standard reuseable parts. In this view,building different applications becomes more of a plugandplay than a start fromscratch endeavor. Finally, he presents a series of commercial challenges that needto be overcome before agents can reach their full potential.Guilfoyle presents an analysis of the market for agent technology also seeJancas contribution. She identifies the main areas in which agent technology islikely to have an impact and the main vendors that are currently active in this field.She assesses the current trends of agent applications and offers various predictionsabout how the size and direction of the market will expand over time.Foss concentrates on the concept of information brokerage one of the key agentapplication domains identified by Janca and Guilfoyle. He outlines the role ofintelligent agents as an intermediary service between consumers and informationsources, and presents a vision of a future commercial information tradingenvironment which is rich enough for true electronic commerce to take place. Thisview includes dealing adequately with the currently neglected issues of taxation,rights, royalties, and revenues. A case is then made for the pivotal role of agenttechnology in this vision see Plus contribution for an indication of how such avision can begin to be realized using current generation technology.Kearney concentrates solely on one class of agents  personal digital assistantsPDAs. Again, this is an important current and future market for agent technologyas identified by Janca and Guilfoyle. For this application class, he posits a role foragent software which involves mediating between the individual user and a range ofonline services see also the contributions of Foss and Janca. He suggests a pathfrom the current state of the art through successive generations of PDAs to a statein which agents are ubiquitous providers of personalized services. For this vision tobe attained, he identifies agent interoperability as the key problem to be solved seealso the contribution by Huhns and Singh.1.5.3 Systems and Their ApplicationsThe chapters in this section represent the current state of the art in applied agentsystems. They outline the types of agent frameworks and architectures that are24   Jennings and Wooldridgecurrently being used to develop and implement agent systems and discuss, in detail,a wide range of agent applications built using this technology.Georgeff and Rao present results related to the design and implementation ofrational software agents. In this work, they address one of the fundamentalproblems of agent research  the gap between theory and practice. This gap iscurrently large and both sides of the field plough along in isolation. However, intheir work, the authors use a formal framework to specify and implement theiragents. The particular class of agents they address are BeliefDesireIntentionBDI agents also see the contribution by Burmeister et al.. Thus, they sketch thetheoretical foundation of their agents and how they are realized in a practical agentimplementation. They then discuss how this implementation was used to buildlargescale, realworld agent applications in the domains of air traffic management,business process management, and air combat modeling.Burmeister et al. discuss how agent based techniques can be applied in thedomains of traffic management and manufacturing. They present their coretechnology for realizing their agent applications COSY, a modular agent architecture based on the concepts of behaviors, resources, and intentions see also thecontribution by Georgeff and Rao and DASEDIS, a development environment forbuilding such agents cf. the development environment of Haugeneder and Steiner.The application of this architecture to two traffic applications traffic managementand freight logistics and two manufacturing applications flexible manufacturingand plant control is then discussed.Haugeneder and Steiner present a conceptual design and specification of anagent architecture and a multiagent language called MAIL for implementingsingle agents and cooperative interaction among them. This design is then refinedinto a multiagent environment for constructing cooperative applications based onthis model cf. the DASEDIS framework of Burmeister et al.. Finally, thearchitecture and the environment are demonstrated on two sample applications inthe areas of group scheduling and road traffic management see also thecontribution of Burmeister et al..Weihmayer and Velthuijsen provide an overview of the role of agent systems inthe domain of telecommunications. They identify the types of telecommunicationsapplications for which agent solutions have been constructed. These includeprocess support see also contributions by Huhns and Singh and Janca, networkcontrol, service management see also Plus contribution, network management,transmission switching, and network design. They then discuss the justification forthe intense interest on the part of telecommunications organizations in agenttechnology, present a number of detailed system case studies, and, finally, offer abalanced analysis of the future of agents in telecommunications.Huhns and Singh describe how a set of autonomous agents can cooperate toprovide coherent management of transaction workflows. In particular, theyconcentrate on the problem of how agents with diverse and heterogeneousApplications of Intelligent Agents   25information models can interoperate with one another cf. the approach advocatedby Kearney. Their approach to such interoperation is predicated on the fact that theagents maintain models of their information and resources. These models are thenmapped into a common ontology to ensure coherent semantics among thecooperating group. Their approach is exemplified by considering a multiagentsystem for telecommunication service provisioning.Plu presents an agentbased view of how organizations can design and buildcomputer infrastructures that provide sophisticated information and electroniccommerce services to many customers. Using the ISO standard architecture foropen distributed processing, he shows, with the aid of scenarios, the central rolethat agent technology can play at many of the models distinct levels. He alsodiscusses issues related to mobile agents  identifying when they are appropriateand the types of advantages they confer over their static counterparts.Sycara et al. present the design and implementation of a series of agents for thetasks of filtering, evaluating, and integrating information on the Internet. Theiragents team up, on demand, depending on the user, the task, and the situation, toretrieve and filter information. The agents and their organizational structure alsoadapt to the prevailing task and user. Their system is demonstrated in the domain offinancial portfolio management see also Wenger and Probsts contribution.Goldberg and Senator detail the FAIS system, which links and evaluates reportsof large cash transactions to identify potential money laundering activities. Thesystem, which has been operational since 1993, is designed and implemented as acooperative endeavor involving humans and software agents see Haugeneder andSteiners contribution for further thoughts on such humancomputer cooperation.The main focus of the presently implemented system is knowledge discovery andinformation analysis in large data spaces. However, as the systems range ofapplicability has increased, so the need for greater agenttoagent cooperation hasemerged. To this end, the authors describe the next generation of FAIS and discusshow adopting an agentbased perspective eases the system migration task.Wenger and Probst analyse the potential role and impact of the agent paradigmin the general area of providing financial services. They highlight the characteristics of typical agentbased applications and provide illustrative scenarios for thedomains of mortgage sales, corporate financial management, and portfoliomanagement see also the contribution by Sycara et al.. They then discuss thevarious ways in which intelligent agents can add value to financial operations,present a detailed scenario based on an investment sales transaction service, andassess the future role of agent technology in this market segment.26   Jennings and WooldridgeReferencesAA97 1997 Proceedings of the First International Conference on Autonomous Agents97,Marina del Rey, CA. ACM Press.Bates, J. 1994 The role of emotion in believable agents. Communications of the ACM,377, 122125.Bond, A. H., Gasser, L. Eds. 1988 Readings in Distributed Artificial Intelligence.Morgan Kaufmann.Chaibdraa, B., 1995 Industrial applications of distributed AI. Communications of theACM, 3811, 4753.Chavez, A., Maes, P. 1996 Kasbah An agent marketplace for buying and selling goods.Proceedings of First International Conference on the Practical Application ofIntelligent Agents and MultiAgent Systems, London, UK.Crabtree, B., Jennings, N. R. Eds. 1996 Proceedings of First International Conferenceon the Practical Application of Intelligent Agents and Multiagent Systems, London,UK.Franklin, S., Graesser, A. 1996 Is it an agent, or just a program Proceedings ThirdInternational Workshop on Agent Theories, Architectures and Languages, Budapest,Hungary, 193206.Gasser, L., Braganza, C., Herman, N. 1987 MACE A flexible testbed for distributed AIresearch. In M. N. Huhns Ed. Distributed AI. Morgan Kaufmann.Genesereth, M. R., Ketchpel, S. P. 1994 Software agents. Communications of the ACM,377, 4853.HayesRoth, B., Hewett, M., Waashington, R., Hewett, R., Seiver, A. 1995 Distributingintelligence within an individual. In L. Gasser, M. N. Huhns Eds. Distributed AI,Volume II, 385412. Morgan Kaufmann.Huang, J., Jennings, N. R., Fox, J. 1995 An agentbased approach to health caremanagement. Int. Journal of Applied Artificial Intelligence, 94, 401420.Janca, P. C. 1995 Pragmatic application of information agents. BIS Strategic Report.Jennings, N. R., Varga, L. Z., Aarnts, R. P., Fuchs, J., Skarek, P. 1993 Transformingstandalone expert systems into a community of cooperating agents. Int. Journal ofEngineering Applications of Artificial Intelligence, 64, 317331.Jennings, N. R., Corera, J. M., Laresgoiti, I. 1995 Developing industrial multiagentsystems. In Proceedings of the First International Conference on MultiagentSystems, ICMAS95, 423430.Jennings, N. R., Faratin, P., Johnson, M. J., Norman, T. J., OBrien, P., Wiegand, M. E.1996 Agentbased business process management. Int. Journal of CooperativeInformation Systems, 52, 3, 105130.Lesser, V. R., Corkill, D. D. 1983 The distributed vehicle monitoring testbed a tool forinvestigating distributed problem solving network. AI Magazine, Fall, 1533.Maes, P. 1994 Agents that reduce work and information overload. Communications of theACM, 377, 3140.Applications of Intelligent Agents   27Mason, C. L. 1995 Cooperative interpretation of seismic data for nuclear test ban treatyverification a DAI approach. Int. Journal of Applied Artificial Intelligence, 94,371400.Negroponte, N. 1995 Being Digital. Hodder and Stoughton.Ovum Report 1994 Intelligent agents the new revolution in software.PAAM97 1997 Proceedings of the First International Conference on the PracticalApplication of Intelligent Agents and Multiagent Systems, London.Parunak, H. V. D. 1987 Manufacturing experience with the contract net. In M. N. HuhnsEd. Distributed AI. Morgan Kaufmann.Parunak, H. V. D. 1996 Applications of distributed artificial intelligence in industry. In G.M. P. OHare, N. R. Jennings Eds. Foundations of Distributed Artificial Intelligence, 139164. Wiley.Pnueli, A. 1986 Specification and development of reactive systems. In InformationProcessing 86, ElsevierNorthHolland.Sargent, P. 1992 Back to school for a brand new ABC. In The Guardian, 12 March, p. 28.Shoham, Y. 1993 Agentoriented programming. Artificial Intelligence, 601, 5192.Smith, R. 1980 The contract net protocol. IEEE Trans. on Computers, C2912, 11041113.Wavish, P., Graham, M. 1996 A situated action approach to implementing characters incomputer games. Int. Journal of Applied Artificial Intelligence, 101, 5374.Wooldridge, M., Jennings, N. R. 1995 Intelligent agents theory and practice. TheKnowledge Engineering Review, 102, 115152.Wooldridge, M. 1997 Agent based software engineering. IEE Proceedings on SoftwareEngineering, 1441, 2637.Wooldridge, M., Bussmann, S., Klosterberg, M. 1996 Production sequencing asnegotiation. In Proceedings of the First International Conference on the PracticalApplication of Intelligent Agents and Multiagent Systems, London.Zuno Ltd 1997 See httpwww.dlib.com.
