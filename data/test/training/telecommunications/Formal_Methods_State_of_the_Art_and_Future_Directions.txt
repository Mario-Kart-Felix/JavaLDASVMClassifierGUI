Formal Methods State of the Art and FutureDirectionsEdmund M Clarke and Jeannette M WingCarnegie Mellon UniversityWe survey recent progress in the development of mathematical techniques for specifying and verifying complex hardware and software systems Many of these techniques are capable of handlingindustrialsized examples in fact in some cases these techniques are already being used on aregular basis in industry Success in formal specication can be attributed to notations that areaccessible to system designers and to new methodologies for applying these notations eectivelySuccess in verication can be attributed to the development of new tools such as more powerfultheorem provers and model checkers than were previously available Finally we suggest somegeneral research directions that we believe are likely to lead to technological advances Althoughit is dicult to predict where the future advances will come optimism about the next generationof formal methods is justied in view of the progress during the past decade Such progress however will strongly depend on continued support for basic research on new specication languagesand new verication techniquesCategories and Subject Descriptors B Hardware Control Structure Performance Analysisand Design AidsFormal models B Hardware Microprogram Design AidsVericationB Arithmetic and Logic Structures Performance Analysis and Design AidsVerication B Memory Structures Performance Analysis and Design AidsFormal modelsB InputOutput and Data Communications Performance Analysis and Design AidsFormal models verication B RegisterTransferLevel Implementation Design AidsVerication B Logic Design Design AidsVerication B Integrated CircuitsDesign AidsVerication D Software Engineering RequirementsSpecications DSoftware Engineering Program VericationAssertion checkers correctness proofs DProgramming Languages Language ClassicationsDesign languages Very highlevel languages F Logics and Meanings of Programs Specifying and Verifying and ReasoningThis research is sponsored in part by the Wright Laboratory Aeronautical Systems Center AirForce Materiel Command USAF and the Advanced Research Projects Agency ARPA undergrant number F Views and conclusions contained in this document are thoseof the authors and should not be interpreted as necessarily representing ocial policies or endorsements either expressed or implied of Wright Laboratory or the United States GovernmentAddress Computer Science Department Carnegie Mellon University  Forbes Avenue Pittsburgh PA Working Group Members Rajeev Alur Edmund Clarke cochair Rance Cleaveland DavidDill Allen Emerson Stephen Garland Steven German John Guttag Anthony Hall ThomasHenzinger Gerard Holzmann Cli Jones Robert Kurshan Nancy Leveson Kenneth McMillanJ Moore Doron Peled Amir Pnueli John Rushby Natarajan Shankar Joseph Sifakis PrasadSistla Bernhard Steen Pierre Wolper Jeannette Wing cochair Jim Woodcock and PamelaZavePermission to make digital or hard copies of part or all of this work for personal or classroomuse isgrantedwithout fee provided that copies are not made or distributed for prot or direct commercialadvantage and that copies show this notice on the rst page or initial screen of a display alongwith the full citation Copyrights for components of this work owned by others than ACM mustbe honored Abstracting with credit is permitted To copy otherwise to republish to post onservers to redistribute to lists or to use any component of this work in other works requires priorspecic permission andor a fee Permissions may be requested from Publications Dept ACMInc  Broadway New York NY  USA fax    or permissionsacmorg  EM Clarke and JM WingAbout ProgramsMechanical verication Specication techniques F Mathematical Logicand Formal Languages Mathematical LogicMechanical theorem provingGeneral Terms Software engineering formal methods hardware vericationAdditional Key Words and Phrases Software specication model checking theorem proving INTRODUCTIONHardware and software systems will inevitably grow in scale and functionalityBecause of this increase in complexity the likelihood of subtle errors is much greaterMoreover some of these errors may cause catastrophic loss of money time oreven human life A major goal of software engineering is to enable developersto construct systems that operate reliably despite this complexity One way ofachieving this goal is by using formal methods which are mathematicallybasedlanguages techniques and tools for specifying and verifying such systems Use offormal methods does not a priori guarantee correctness However they can greatlyincrease our understanding of a system by revealing inconsistencies ambiguitiesand incompletenesses that might otherwise go undetectedThe rst part of this report assesses the state of the art in specication and verication For verication we highlight advances in model checking and theoremproving In the three sections on specication model checking and theorem proving we explain what we mean by the general technique and briey describe somesuccessful case studies and wellknown tools The second part of this report outlinesfuture directions in fundamental concepts new methods and tools integration ofmethods and education and technology transfer We close with summary remarksand pointers to resources for more information STATE OF THE ARTIn the past the use of formal methods in practice seemed hopeless The notationswere too obscure the techniques did not scale and the tool support was inadequateor too hard to use There were only a few nontrivial case studies and together theystill were not convincing enough to the practicing software or hardware engineerFew people had the training to use them eectively on the jobOnly recently have we begun to see a more promising picture for the future offormal methods For software specication industry is open to trying out notationslike Z to document a systems properties more rigorously For hardware verication industry is adopting techniques like model checking and theorem proving tocomplement the more traditional one of simulation In both areas researchersand practitioners are performing more and more industrialsized case studies andthereby gaining the benets of using formal methods SpecicationSpecication is the process of describing a system and its desired properties Formalspecication uses a language with a mathematicallydened syntax and semanticsThe kinds of system properties might include functional behavior timing behaviorperformance characteristics or internal structure So far specication has beenFormal Methods State of the Art and Future Directions  most successful for behavioral properties One current trend is to integrate dierentspecication languages each able to handle a dierent aspect of a system Anotheris to handle nonbehavioral aspects of a system like its performance realtimeconstraints security policies and architectural designSome formalmethods such as Z Spivey  VDM Jones  and Larch Guttag and Horning  focus on specifying the behavior of sequential systems Statesare described in terms of rich mathematical structures like sets relations andfunctions state transitions are given in terms of pre and postconditions Othermethods such as CSP Hoare  CCS Milner  Statecharts Harel Temporal Logic Pnueli  Manna and Pnueli  Lamport  and IOautomata Lynch and Tuttle  focus on specifying the behavior of concurrentsystems states typically range over simple domains like integers or are left uninterpreted and behavior is dened in terms of sequences trees or partial orders ofevents Still others such as RAISE Nielsen et al  and LOTOS ISO wed two dierent methods one for handling rich state spaces and one for handlingcomplexity due to concurrency Common to all these methods is the use of themathematical concepts of abstraction and compositionThe process of specication is the act of writing things down precisely The mainbenet in so doing is intangiblegaining a deeper understanding of the system being specied It is through this specication process that developers uncover designaws inconsistencies ambiguities and incompletenesses A tangible byproductof this process however is an artifact which itself can be formally analyzed egchecked to be internally consistent or used to derive other properties of the speciedsystem The specication is a useful communication device between customer anddesigner between designer and implementor and between implementor and testerIt serves as a companion document to the systems source code but at a higherlevel of descriptionNotable ExamplesCICS Oxford University and IBM Hursley Laboratories collaborated in thes on using Z to formalize part of IBMs Customer Information Control System an online transaction processing system with thousands of installationsworldwide Houston and King  Measurements taken by IBM throughoutthe development process indicated an overall improvement in the quality of theproduct a reduction in the number of errors discovered and earlier detectionof errors found in the process IBM also estimated a  reduction in the totaldevelopment cost of the new release The success of this work is wellknown andresulted in the Queens Award for Technological Achievement It inspired manyothers to follow suitCDIS In  Praxis delivered to the UK Civil Aviation Authority the CCFDisplay Information System a part of the new air trac management system forLondons airspace Hall  CDIS is a distributed faulttolerant system implemented on nearly  computers linked in a dual local area network Praxis usedformal methods as an integral part of the development process and in conjunction with other software engineering project management and quality assurancetechniques During requirements analysis formal description supplemented infor  EM Clarke and JM Wingmal and structured requirements notations At the system specication stage anabstract VDM model was developed in conjunction with concrete user interfacedenitions semiformal denitions of the concurrent behavior and denitionsof external interfaces During design the abstract VDM was rened into moreconcrete module specications At a lower level the software for the dual LANwas specied and developed formally using CCSProductivity on the project was the same or better than on comparable projectscarried out using informal methods There was in other words no net costin using formal methods However the perceived and measured quality of thesoftware was much higher The delivered software had a defect rate of about faults per thousand lines of code a gure two to ten times better than that forpublished projects and on comparable software in air trac control applicationsthat did not use formal methodsLockheed CJ Praxis has been recently working with Lockheed on analyzingthe code for the avionic software of the Lockheed CJ Croxford and Sutton being supplied to the US Air Force and RAF The software is coded in theSPARKannotated subset of Ada Specications are written in the Software Productivity Consortiums CORE notation SPC  which is based on Parnasstabular specications Heninger  Janicki et al  Many would expectthat the use of SPARK would add to the cost of the software while improvingits quality The added quality however decreased the overall cost of softwaredevelopment because of the huge savings in testing The use of SPARK annotations to specify the behavior of the modules led to software which is close tobeing correct by construction and hence passes its tests instead of requiringexpensive reworkTCAS In the early s the SafetyCritical Systems Research Group at theUniversity of California Irvine now at the University of Washington produceda formal requirements specication for the Trac Collision Avoidance SystemTCAS II required on all commercial aircraft ying in US airspace Theyused the Requirements State Machine Language RSML which is based onStatecharts with changes made to overcome diculties found during the specication process Although an industry group was attempting to provide anEnglish language specication at the same time the complexity of TCAS impeded that process eventually the English specication eort was abandonedand the RSML specication was adopted instead After a group of industry anduniversity representatives produced a rst draft of the TCAS II specication aprivate company on behalf of the Federal Aviation Administration took over thespecication eort ocial TCAS II documentation still uses RSML Both theprivate company and the original university researchers have produced automatedtools for RSML including simulators test case generators and other test toolsand safety analysis tools The TCAS II specication has been automaticallychecked for mathematical completeness and consistency Heimdahl and Leveson and provablycorrect code can now be automatically generated from RSMLspecicationsThe TCAS II project demonstrated  the practicality of writing a formal requirements specication for a complex processcontrol system and  the feasiFormal Methods State of the Art and Future Directions  bility of building a formal model of a system that is readable and reviewable byapplication experts without special trainingOther case studies in formal specication have been performed primarily on commercial and safetycritical systems Some are proprietary or lack documentationthat we can cite To give the reader a sense of the applicability of formal methodswe list below some for which we can provide referencesDatabases An HP Medical Instruments realtime database for storing patientmonitoring information Bear Devices A Tektronix family of oscilloscopes Delisle and Garlan  a Schlumberger line of household electricity meters Arnold et al Hardware An INMOS oating point processor Barrett  the virtual channel processor in INMOSs T transputer Barrett  Also see SectionMedical The Clinical Neutron Therapy System at the University of Washingtoncyclotron controller Jacky Nuclear Argonne National Laboratories work on the Reactor Safety System forthe Experimental Breeder ReactorII Chisolm et al  Kljaich et al  theshutdown system of the Darlington Nuclear Generating System in Canada Archino et al Security The security policy model for the NATO Air Command and ControlSystem Boswell  the secure transmission of datagrams in the MultinetGateway System Dinolt et al  the Tokenbased Access Control System ofthe US National Institute of Standards and Technology Kuhn and Dray Telephony Various features of ATTs ESS telephone switching system usingEsterel Jagadeesan et al  and combinations of Z and CSP Mataga and Zave Zave  Zave and Jackson  the University of Passau and SiemensNixdorfs joint work on customizable telephone services and features Steenet al  recently done for Deutsche TelekomTransportation The automatic train protection system for the Paris Metro Carnotet al  Guiho and Hennebert  British Rails signaling rules King and the onboard avionics software for an Israel aircraft Harel See also Craigen et al a Craigen et al b Craigen et al  Craigenet al  for a description of twelve case studies in formal methods most citedabove VericationTwo wellestablished approaches to verication are model checking and theoremproving They go one step beyond specication these formal methods are used toanalyze a system for desired properties Model Checking Model checking is a technique that relies on building anite model of a system and checking that a desired property holds in that modelRoughly speaking the check is performed as an exhaustive state space search whichis guaranteed to terminate since the model is nite The technical challenge inmodel checking is in devising algorithms and data structures that allow us to handle  EM Clarke and JM Winglarge search spaces Model checking has been used primarily in hardware andprotocol verication Clarke and Kurshan  the current trend is to apply thistechnique to analyzing specications of software systemsTwo general approaches to model checking are used in practice today The rsttemporal model checking is a technique developed independently in the s byClarke and Emerson Clarke and Emerson  and by Queille and Sifakis Queilleand Sifakis  In this approach specications are expressed in a temporallogic Pnueli  and systems are modeled as nite state transition systems Anecient search procedure is used to check if a given nite state transition system isa model for the specicationIn the second approach the specication is given as an automaton then the system also modeled as an automaton is compared to the specication to determinewhether or not its behavior conforms to that of the specication Dierent notionsof conformance have been explored including language inclusion HarEl and Kurshan  Kurshan a renement orderings Cleaveland et al  Roscoe and observational equivalence Cleaveland et al  Fernandez et al Roy and de Simone  Vardi and Wolper Vardi and Wolper  showed howthe temporallogic modelchecking problem could be recast in terms of automatathus relating these two approachesIn contrast to theorem proving model checking is completely automatic andfast sometimes producing an answer in a matter of minutes Model checking canbe used to check partial specications and so it can provide useful informationabout a systems correctness even if the system has not been completely speciedAbove all model checkings tour de force is that it produces counterexamples whichusually represent subtle errors in design and thus can be used to aid in debuggingThe main disadvantage of model checking is the state explosion problem In McMillan used Bryants ordered binary decision diagrams BDDs Bryant to represent state transition systems eciently thereby increasing the sizeof the systems that could be veried Other promising approaches to alleviatingstate explosion include the exploitation of partial order information Peled localization reduction Kurshan a Kurshan b and semantic minimization Elseaidy et al  to eliminate unnecessary states from a system modelModel checkers today are routinely expected to handle systems with between and  state variables They have checked interesting systems with  reachablestates Burch et al  and by using appropriate abstraction techniques they cancheck systems with an essentially unlimited number of states Clarke et al As a result model checking is now powerful enough that it is becoming widely usedin industry to aid in the verication of newly developed designsNotable ExamplesIEEE Futurebus In  Clarke and his students at Carnegie Mellon usedSMV McMillan  to verify the cache coherence protocol described in theIEEE Futurebus Standard  Clarke et al  Long  TheyExhaustive state space search or reachability analysis dates back to the earliest papers on PetriNets The term model checking was coined by Clarke and Emerson Clarke and Emerson Formal Methods State of the Art and Future Directions  constructed a precise model of the protocol in the SMV input language andthen used SMV to show that the resulting transition system satised a formalspecication of cache coherence They found a number of previously undetectederrors and potential errors in the design of the protocol This appears to be therst time that an automatic verication tool has been used to nd errors in anIEEE standard Although the development of the protocol began in  allprevious attempts to validate it were based entirely on informal techniquesIEEE SCI In  Dill and his colleagues at Stanford developed the Murphinite state verication system and veried the cache coherence protocol of theScalable Coherent Interface IEEE Standard  Dill et al  The SCIstandard denes several protocols each a subset of the next They constructed amodel of a typical protocol and supplied a specication of properties necessaryfor cache coherence To avoid errors in the translation they based their modeldirectly on the C code that is given as a denition of the SCI standard Sincethe number of states of the model could be very large they veried only smallinstances of the system Even with this simplication they found several errorsin the protocol ranging from omissions of variable initializations to subtle logicalerrors These errors existed in the rather basic subset that they dened althoughthe protocol had been extensively discussed simulated and even implementedStereo components One of the emerging application domains of automaticverication is the design of hybrid systems which consist of both discrete andcontinuous components In  Bosscher Polak and Vaandrager won a bestpaper award for proving manually the correctness of a control protocol used inPhilips stereo components Bosscher et al  In  Ho and WongToiveried an abstraction of the protocol using the symbolic model checker HyTechand inferred fully automatically a more ecient timing of the protocol than theone used by Philips Ho and WongToi  Also in  Daws and Yovineused the verication tool Kronos Daws and Yovine  to check automaticallyall the properties stated and handproved by Bosscher et al In  Bengtssonand his colleagues model checked the entire protocol thus completing the questof fully automating a human proof that as little as two years ago was consideredfar out of reach for algorithmic methods Bengtsson et al ISDNISUP The NewCoRe Project was the rst fullscale application of formalverication methods in a routine software design project within ATT Chaves Holzmann  The project lasted from  until  Formal modeling and automated verication were applied to the development of the International Telecommunications Union formerly CCITT ISDNIUPP ISDN UserPart Procotol A team of ve verication engineers formalized  requirements in temporal logic and rendered the proofs with the help of a specialpurpose model checker Holzmann  Holzmann and Patti  A total of lines of Specication and Description Language SDL source code excluding comments was veried  errors were revealed and xed in the highleveldesigns approximately  of the original design requirements were discoveredto be logically inconsistentHDLC A Highlevel Data Link Controller HDLC transmitter core was beingdesigned at the Bell Labs Microelectronics Design Center in Madrid Spain for  EM Clarke and JM Wingan ApplicationSpecic Integrated Circuit library of telecommunication macrocells The standard design process included capture at the registertransfer levelusing VHDL simulation and synthesis In  late in the process the formalverication team at Bell Labs oered to run some additional functional verication on the design Calero et al  Since this design was considered to bepractically nished it was not expected that any errors would be found Withinve hours of work six properties were specied and ve were veried using theFormalCheck verication tool DePalma and Glaser  The sixth propertywas found by FormalCheck to fail uncovering a bug that would have at leastreduced the throughput of the HDLC channel More likely this bug would haveconfused the higher level protocols causing lost transmissions It took just a fewminutes to identify and propose a x for a design error that managed to escapemany hours of logic simulation The error was corrected and the correction wasformally veried using FormalCheck Plans are now in the works at the Madriddesign center to include model checking as part of the standard design processPowerScale In  a group at Bull in collaboration with researchers of theVerimag Laboratory used LOTOS to describe the processors memory controllerand bus arbiter of the multiprocessor architecture called PowerScale This architecture is based on IBMs PowerPC microprocessor and is used in Bulls Escala series of servers and workstations They identied four correctness properties which express the essential requirements for a proper functioning of thearbitration algorithm and formalized the properties and algorithm in terms ofbisimulation relations modulo abstractions between nite labelled transitionsystems Using the compositional and onthey model checking techniques implemented in the CsarAldebaran Development Package CADP toolboxthe correctness of the arbitration algorithm was established automatically in afew minutes Chehaibar et al Buildings In  civil engineers at North Carolina State University used theConcurrency Workbench to analyze the timing properties of a distributed activestructural control system Elseaidy et al  The system in question was designed to make buildings more resistant to earthquakes by sampling the forcesbeing applied to the structure and using hydraulic actuators to exert countervailing forces The engineers rst coded their design in a timed version of the CCSlanguage the resulting model contained in excess of    states and wasnot directly analyzable However by using the semantic minimization feature ofthe Concurrency Workbench they were able to construct automatically a muchsmaller system with the same timing properties that could be analyzed In thecourse of their analysis they uncovered an error in a timer setting that if undetected could have caused the active structural control component to worsenrather than dampen the vibration experienced by buildings during earthquakesOther successful industrialsized case studies in model checking are too numerousto list Evidence that model checking has comeofage is that industry is buildingtheir own model checkers or simply using existing ones Listed below are some wellknown model checkers roughly categorized according to whether the specicationPowerScale and Escala are registered trademarks of BullFormal Methods State of the Art and Future Directions  they check is given as a logical formula or as a machineTemporal logic model checkers The very rst two model checkers wereEMC Clarke and Emerson  Clarke et al  Browne et al  andCSAR Queille and Sifakis  Fernandez et al  SMV McMillan is the rst model checker to use BDDs The Spin system Gerth et al Holzmann  uses partial order reduction to reduce the state explosionproblem Holzmann and Peled  Peled  Murphi Dill et al  andUV Kaltenbach  are based on the Unity programming language Chandyand Misra  The Concurrency Workbench Cleaveland et al  veriesCCS processes for properties expressed as mucalculus formulas SVE Filkornet al  FORMAT Damm et al  Damm and DelgadoKloos  andCV D eharbe and Borrione  all focus on hardware verication HyTech Aluret al  is a model checker for hybrid systems Kronos Daws and Yovine Henzinger et al  for realtime systemsBehavior conformance checkers The CospanFormalCheck system DePalma and Glaser  HarEl and Kurshan  is based on showing inclusionbetween omega automata FDR Roscoe  checks renement between CSPprograms most recently it has been used to verify and debug the NeedhamSchroeder authentication protocol Lowe  The Concurrency Workbench Cleaveland et al  checks a similar notion of renement between CCS programs itand the tool Auto Roy and de Simone  may also be used to minimize systems with respect to observational equivalence and to determine if two systemsare observably equivalentCombination checkers Berkeleys HSIS Hojati et al  combines modelchecking with language inclusion Stanfords STeP Bjrner et al  systemwith deductive methods and VIS Brayton et al  with logic synthesis ThePVS theorem prover Owre et al  has a model checker for the modal mucalculus Rajan et al  METAFrame Steen et al  is an environmentthat supports model checking in the entire software development process Theorem Proving Theorem proving is a technique where both the systemand its desired properties are expressed as formulas in some mathematical logicThis logic is given by a formal system which denes a set of axioms and a set ofinference rules Theorem proving is the process of nding a proof of a propertyfrom the axioms of the system Steps in the proof appeal to the axioms and rulesand possibly derived denitions and intermediate lemmas While proofs can beconstructed by hand here we focus only on machineassisted theorem provingTheorem provers are increasingly being used today in the mechanical vericationof safetycritical properties of hardware and software designsTheorem provers can be roughly classied in a spectrum from highly automatedgeneralpurpose programs to interactive systems with specialpurpose capabilitiesThe automated systems have been useful as general search procedures and havehad noteworthy success in solving various combinatorial problems The interactivesystems have been more suitable for the systematic formal development of mathematics and in mechanizing formal methodsIn contrast to model checking theorem proving can deal directly with innitestate spaces It relies on techniques like structural induction to prove over innite  EM Clarke and JM Wingdomains Interactive theorem provers by denition require interaction with ahuman so the theorem proving process is slow and often errorprone In the processof nding the proof however the human user often gains invaluable insight intothe system or the property being provedNotable ExamplesSRT division algorithm In  Clarke German and Zhao used automatictheoremproving techniques based on symbolic algebraic manipulation to provethe correctness of an SRT division algorithm similar to the one in the Pentium Clarke et al  This verication method runs automatically and couldhave detected the error in the Pentium which was caused by a faulty quotientdigit selection table Later Rue Shankar and Srivas used SRIs generalpurposetheorem prover PVS Owre et al  on this same example Rueet al Processor designs The Verity verication tool Kuehlmann et al  iswidely used within IBM in the design of many processors such as the PowerPCand System Applied in a hierarchical manner the tool can handle entireprocessor designs containing millions of transistors Appenzeller and Kuehlmann Using this tool the functional behavior of a hardware system at theregister transfer level gate level or transistor level is modeled as a boolean statetransition function Algorithms based on BDDs are used to check the equivalenceof the state transition functions for dierent design levelsMotorola  In  Boyer and Yu constructed an Nqthm Boyer andMoore  Boyer and Moore  specication of the Motorola  microprocessor including  of the usermode instructions Boyer and Yu They used the specication to prove the correctness of many binary machine codeprograms produced by commercial compilers from source code in such highlevellanguages as Ada Lisp and C For example Yu veried the MC binarycode produced by the gcc compiler for  of the  C programs in the Berkeleystring libraryAMDK In  Moore and Kaufmann of Computational Logic Inc andLynch of Advanced Micro Devices Inc collaborated to prove the correctness ofLynchs microcode for oating point division on the AMDK Starting froman informal proof of correctness they formalized their argument in the ACLlogic Kaufmann and Moore  and checked it with the ACL mechanicaltheorem prover Gaps and mistakes were found in the informal proof but inthe end the microcode was mechanically shown to be correct Moore et al The entire eort took about nine weeks The mechanical proof ended doubt ofthe codes correctness and allowed testers to focus on other routines In Russino used ACL to check the correctness of the oating point square rootmicrocode Russino  He found bugs in the microcode itself after theywere xed the nal version of the square root microcode was also mechanicallyproved correctMotorola CAP During  Brock of Computational Logic Inc working in collaboration with Motorola designers developed an ACL specicationof the entire Motorola Complex Arithmetic Processor CAP a microprocessorFormal Methods State of the Art and Future Directions  for digital signal processing DSP The CAP is the most complicated microprocessor yet formalized with a three stage pipeline six independent memoriesfour multiplieraccumulators over  programmervisible registers and an instruction set allowing the simultaneous modication of well over  registers ina single instruction The formal specication tracked the evolving design andincluded a simpler nonpipelined view that was proved equivalent on a certainclass of programs Finally Brock used ACL to verify the binary microcode forseveral DSP algorithms Brock et al AAMP During  Srivas of the Stanford Research Institute and Millerof Rockwell International collaborated on the specication and verication ofthe Collins Commercial Avionics AAMP microprocessor They used PVS tospecify  of the  AAMP instructions and veried the microcode for representative instructions Miller and Srivas As with model checking an increase in the number and kinds of theorem proversprovides evidence for a growing interest in theorem proving There has been acorresponding increase in the number and kinds of examples to which theoremprovers have been applied Below is a list of some wellknown theorem proverscategorized roughly by their degree of automationUserguided automatic deduction tools Systems like ACL Kaufmannand Moore  Eves Craigen et al  LP Garland and Guttag Nqthm Boyer and Moore  Reve Lescanne  and RRL Kapur andMusser  are guided by a sequence of lemmas and denitions but each theorem is proved automatically using builtin heuristics for induction lemmadrivenrewriting and simplication Nqthm the BoyerMoore theorem prover has beenused to check a proof of Godels rst incompleteness theorem and in a variety oflargescale verication eortsProof checkers Examples include Coq Cornes et al  HOL Gordon LEGO Luo and Pollack  LCF Gordon et al  and Nuprl Constable et al  They have been used to formalize and verify hard problemsin mathematics and in program vericationCombination provers Analytica Clarke and Zhao  which combinestheorem proving with the symbolic algebra system Mathematica has successfully proved some hard numbertheoretic problems due to Ramanujam BothPVS Owre et al  and STeP Bjrner et al  combine powerful decisionprocedures and model checking with interactive proof PVS has been used toverify a number of hardware designs and reactive realtime and faulttolerantalgorithms FUTURE DIRECTIONSThe overarching goal of formal methods is to help engineers construct more reliablesystems Formal methods is thus an area that cuts across almost all other areasin Computer Science Its foundations lie squarely in mathematics its intendedapplications are hardware and software systems and its potential users are alldevelopers involved in the system engineering processTremendous advances in the past decade have been made on all fronts Astechnology improves it becomes more feasible to attack harder and larger problems  EM Clarke and JM WingProgress in the area depends on doing fundamental research inventing new methodsand building new tools integrating dierent methods to work together and makingconcerted eorts by researchers to work with practitioners to transfer technologyeectively Fundamental ConceptsSignicant advances in the practical use of formal methods have relied on fundamental results drawn from all areas in Computer Science not necessarily directlyintended for formal methods Further work needs to be done in the areas ofComposition We need to understand how to compose methods compose specications compose models compose theories and compose proofsDecomposition We need to develop more ecient methods for decomposinga computationally demanding global property into local properties whose verication is computationally simple eg the task decomposition and localizationreduction methods of Kurshan bAbstraction Real systems are dicult to specify and verify without abstractions We need to identify dierent kinds of abstractions perhaps tailored forcertain kinds of systems or problem domains and we need to develop ways tojustify them formally perhaps using mechanical helpReusable models and theories Rather than dening models and theoriesfrom scratch each time a new application is tackled it would be better to havereusable and parameterized models and theoriesCombinations of mathematical theories Many safetycritical systems haveboth digital and analog components These hybrid systems require reasoningabout both discrete and continuous mathematicsSystem developers would like to be able to predict how well their system willoperate in the eld Indeed they often care more about performance than correctness Performance modeling borrows strongly from probability statisticsand queueing theoryData structures and algorithms To handle larger search spaces and largersystems new data structures and algorithms eg more concise data structuresfor representing boolean functions are needed Methods and ToolsNo one method or tool can serve all purposes We need to support all dierent kindsFrom past experience we have learned what kinds can have the most impact To beattractive to practitioners methods and tools should satisfy the following criteriaWe realize that some of these criteria are ideals but they are still good to striveforEarly payback Methods and tools should provide signicant benets almostas soon as people begin to use themIncremental gain for incremental eort Benets should increase as developers get more adept or put more eort into writing specications or usingtoolsFormal Methods State of the Art and Future Directions  Multiple use It should be possible to amortize the cost of a method or toolover many uses For example it should be possible to derive benets from asingle specication at several points in a programs life cycle in design analysiscode optimization test case generation and regression testingIntegrated use Methods and tools should work in conjunction with each otherand with commonprogramming languages and techniques Developers should nothave to buy into a new methodology completely to begin receiving benetsThe use of tools for formal methods should be integrated with that of tools fortraditional software development eg compilers and simulatorsEase of use Tools should be as easy to use as compilers and their outputshould be as easy to understandEciency Tools should make ecient use of a developers time Turnaroundtime with an interactive tool should be comparable to that of normal compilationDevelopers are likely to be more patient however with completely automatictools that perform more extensive analysisEase of learning Notations and tools should provide a starting point forwriting formal specications for developers who would not otherwise write themThe knowledge of formal specications needed to start realizing benets shouldbe minimalError detection oriented Methods and tools should be optimized for ndingerrors not for certifying correctness They should support generating counterexamples as a means of debuggingFocused analysis Methods and tools should be good at analyzing at least oneaspect of a system well eg the control ow of a protocol They need not begood at analyzing all aspects of a systemEvolutionary development Methods and tools should support evolutionarysystem development by allowing partial specication and analysis of selectedaspects of a systemMore ambitiously rather than build a single tool we can build metatoolswhich themselves produce tools customized for a particular problem domain Steenet al  formal notation Cleaveland et al  or logic Gordon  Kindredand Wing  These metatools like compiler generators provide an automaticway to build specialized model checkers or proof checkersFinally for any new method or tool its developer should state explicitly whatits strengths limitations modeling assumptions ease of integration with othermethods and tools and startup costs are Clear selection criteria help potentialusers decide what method or tool is most appropriate for the problem at hand Integration of MethodsGiven that no one formalmethod is likely to be suitable for describing and analyzingevery aspect of a complex system a practical approach is to use dierent methodsin combination When combining methods it is important to consider bothFinding a suitable style for using dierent methods together andFinding a suitable meaning for using dierent methods together  EM Clarke and JM WingVery often neither is addressed adequately Failure to nd a suitable style missesout on the true advantages of combining methods For example the Z schoolstresses the importance of presentation of specications in an accessible form withplenty of natural language This emphasis has helped in popularizing its notationAny combination must preserve this style of presentationFailure to attend to the theoretical foundations of the combination misses outon the true advantages of formality In chemistry a distinction is drawn betweena mixture and a compound In a mixture the ingredients merely mingle togetherin a compound the ingredients become chemically united So it is with combiningdierent formal methods If the meaning of the combination is not properly explained then the result is merely a mixture nothing more can be deduced from thejoint description than from the separate ones If the meaning of the combination isexplained then the result is much more powerful It then becomes possible to havetwo views of a system specication and to reason with and rene one view and tounderstand the consequences in the other view Model Checking and Theorem Proving One of the most promising directions in method integration is in combining model checking and theorem proving Kurshan and Lamport  Rajan et al  Bjrner et al  ideallyto benet from the advantages of both approaches One way is to employ modelchecking as a decision procedure within a deductive framework as is done in toolssuch as PVS and STeP For example a suciently expressive logic can be used todene temporal operators over nite state transition systems in terms of maximalor minimal xed points For nite state transition systems these xed points canbe evaluated using a model checker as a decision procedure For structures withunbounded state spaces the temporal properties can be veried by means of xedpoint inductionAnother way of combining deductive and model checking approaches is to usededuction to obtain a nite state abstraction of an implementation that can beveried using model checking Such abstractions are commonly used in preparinga problem for model checking but are seldom rigorously veried Deduction canalso be used to verify assumptioncommitment proof obligations generated by composing component implementations that have been separately veried by means ofmodel checking Induction can be combined with model checking to verify systemscomposed of networks of nite state processes Integration with the System Development Process Formal methods cancomplement less formal methods that are used in the overall system developmentprocess They could be used not instead of but in addition to informal methodsas was done by Praxis in the CDIS example So far formal methods have showntheir strength in their use in specication and verication It is worth exploringhow they can be used in requirements analysis renement and testingRequirements analysis necessarily deals with customers who often have animprecise idea of what they want formal methods can help customers nail downtheir system requirements more preciselyRenement is the reverse of verication it is the process of taking one level ofspecication or implementation and through a series of correctnesspreservingFormal Methods State of the Art and Future Directions  transformations synthesizing a lowerlevel specication or implementation Although much theoretical work on renement has been done the results have nottransferred to practice yetTesting is an area that is one of the most costly in all software projects Formalmethods can play a role in the validation process eg using formal specications to generate test suites Richardson et al  and using model and proofchecking tools to determine formal relationships between specications and testsuites and between test suites and code Education and Technology TransferEducation is vital to the success of the formal methods There are dierent kindsof audiencesOur research peers Some of our greatest skeptics are our own colleagues Wecan overcome this skepticism by collaborating with them and their students onsystems that they care aboutPractitioners Technology transfer should be taken very seriously from thevery beginning The recent spread of formal methods is directly related to eortsmade by researchers in teaching their techniques to industryFor eective technology transfer however we must keep in mind that successfor industry depends on timely delivery continuouslyenhanced functionalityunderstanding customers needs reuse of legacy code commitment to qualityelimination of errors costeective development and realtime performanceStudents at all levels Some graduate programs now incorporate formalmethods in their curricula Garlan et al  Oxford  Educators are startingto consider teaching formal methods at the undergraduate level Students needto understand not just how to build single standalone programs from scratchbut also how to construct large systems perhaps using otheshelf componentsand how to maintain legacy code they need to know not just how to code butalso how to do highlevel system design CONCLUDING REMARKSCommercial pressure to produce higherquality software is always increasing Formal methods have already demonstrated success in specifying commercial andsafetycritical software and in verifying protocol standards and hardware designsIn the future we expect that the role of formal methods in the entire system development process will increase especially as the tools and methods successful in onedomain carry over to others Progress however will strongly depend on continued support for basic research on new specication languages and new vericationtechniquesIdeally system developers would all be trained suciently well that they wouldnot even think that they are using a formal method or tool They would routinelyuse the mathematics underlying the notation of a formal specication language assimply a means of communicating ideas to others on their team or of documentingtheir own design decisions They would routinely use tools like model and proofcheckers with as much ease as they use compilers Therefore as researchers in and  EM Clarke and JM Wingeducators of formal methods we should strive to make our notations and toolsaccessible to nonexpertsTowards this ideal however it makes sense to cultivate a new career path forspecialists in formal methods They could be experts in the use of one method ortool or they could be knowledgeable in many oering their advice on which to usefor a given application Wing envisioned over ten years ago the idea of specicationrms Wing  analogous to architecture and law rms whose employees wouldbe hired for their skills in formal methods This vision has been realized by thegrowth both in the number of inhouse teams that consult on projects within largecorporations eg ATT and Intel and in the number of independent companieseg Computational Logic Inc Kestrel Institute and ORA that specialize in theuse of formal methods and do contract work for industry and government agenciesSome companies such as Praxis use formal methods as a routine part of theirdevelopment processFinally for further reading see the April  issue of IEEE Computer whichcontains a roundtable discussion on formal methods and the June  issue ofIEEE Spectrum which gives an overview of model checking Online forums include the net newsgroup compspecification and its subnewgroups for specicmethods and the formal methods mailing list fsdmcsuqozau The OxfordUniversitys web pagehttpwwwcomlaboxacukarchiveformalmethodshtmlpoints to a wealth of information about formal methods including papers reportstools conferences journals projects and peopleREFERENCESAlur R Henzinger T and Ho PH  Automatic symbolic verication of embedded systems IEEE Transactions on Software Engineering   Appenzeller D P and Kuehlmann A  Formal verication of a PowerPC microprocessor In Proceedings of the IEEE International Conference on Computer DesignICCD Austin TX Oct  pp Archinoff G et al  Verication of the shutdown system software at the DarlingtonNuclear Generating System In Intl Conf on Control and Instrumentation in NuclearInstallations Glasgow Scotland May Arnold A Begay D and Radoux JP  The embedded software of an electricity meter An experience in using Formal Methods in an industrial project Science ofComputer ProgrammingBarrett G  Formal methods applied to a oatingpoint number system IEEETrans on Soft Eng   May Barrett G  Model checking in practice The t virtual channel processor IEEETrans on Soft Eng   Feb Bear S  An overview of HPSL In Proc of VDM Formal Development MethodsVolume  of Lecture Notes in Computer Science  SpringerVerlagBengtsson J Griffioen W Kristoffersen K Larsen K Larsson F PetterssonP and Yi W  Verication of an audio protocol with bus collision using UppAalIn R Alur and T Henzinger Eds ComputerAided Verication   Lecture Notes inComputer Science  pp  SpringerVerlagBjrner N et al  STeP Deductivealgorithmicvericationof reactiveand realtimesystems In Proc of the th International Conference on ComputerAided VericationNumber  in Lecture Notes in Computer Science July  pp  SpringerVerlagFormal Methods State of the Art and Future Directions  Bosscher D Polak I and Vaandrager F  Verication of an audiocontrolprotocol In H Langmaack WP de Roever and J Vytopil Eds FTRTFT Formal Techniques in Realtime and Faulttolerant Systems  Lecture Notes in ComputerScience  pp  SpringerVerlagBoswell A  Specication and validation of a security policy model IEEE Trans onSoftware Engineering   Feb Boyer R and Yu Y  Automated proofs of object code for a widely used microprocessor Journal of the ACM   January Boyer R S and Moore J S  A Computational Logic Academic Press New YorkBoyer R S and Moore J S  A Computational Logic Handbook Academic PressNew YorkBrayton R et al  VIS A system for verication and synthesis In Proc of the thInternational Conference on ComputerAided Verication Number  in Lecture Notesin Computer Science July  pp  SpringerVerlagBrock B Kaufmann M and Moore J S  Heavy inference Theorems aboutcommercial microprocessors In M Srivas and A Camilleri Eds Formal Methods inComputerAided Design FMCAD November  pp to appear SpringerVerlagBrowne M C Clarke E M Dill D L and Mishra B  Automatic vericationof sequential circuits using temporal logic IEEE Transactions on Computers C Bryant R E  Graphbased algorithms for boolean function manipulation IEEETrans on Computers C Burch J R Clarke E M Long D E McMillan K L and Dill D L Symbolic model checking for sequential circuit verication IEEE Trans on ComputerAided Design of Integrated Circuits and Systems   April Calero J Roman C and Palma G D  A practical design case using formalverication In Proc of DesignSuperCon  To appearCarnot M DaSilva C Dehbonei B and Meija F  Errorfree software development for critical systems using the Bmethodology In Third International IEEE Symposiumon Software Reliability Engineering Chandy K and Misra J  Parallel Program Design AddisonWesleyChaves J  Formal methods at ATT An industrial usage report In Proc FormalDescription Techniques IV   NorthHolland  pp Chehaibar G Garavel H Mounier L Tawbi N and Zulian F  Specication and verication of the powerscale bus arbitration protocol An industrial experimentwith LOTOS In Proceedings of FORTEPSTV Kaiserslautern Germany Chapman  HallChisolm G Kljaich J Smith B and Wojcik A  An approach to the verication of a faulttolerant computerbased reactor safety system A case study using automated reasoning volume  interim report Technical Report NP Jan ElectricPower Research Institute Palo Alto CA Prepared by Argonne National LaboratoryClarke E German S and Zhao X  Verifying the SRT division algorithm usingtheorem proving techniques In Proc of the th International Conference on ComputerAided Verication  Number  in Lecture Notes in Computer Science July  pp SpringerVerlagClarke E and Kurshan R  ComputerAided Verication IEEE Spectrum  Clarke E and Zhao X  Analytica A theorem prover for MathematicaThe Mathematica Journal  Clarke E M and Emerson E A  Synthesis of synchronization skeletons forbranching time temporal logic In Logic of Programs Workshop Yorktown Heights NYMay   Volume  of Lecture Notes in Computer Science  SpringerVerlagClarke E M Emerson E A and Sistla A P  Automatic verication of nitestate concurrent systems using temporal logic specicationsACM TOPLAS     EM Clarke and JM WingClarke E M Grumberg O Hiraishi H Jha S Long D E McMillan K L andNess L A  Verication of the Futurebus cache coherence protocol In ProcCHDL Clarke E M Grumberg O and Long D E  Model checking and abstractionIn Proc of Principles of Prog Lang Cleaveland R Madelaine E and Sims S  Generating front ends for vericationtools In E Brinksma R Cleaveland K Larsen and B Steffen Eds Tools andAlgorithms for the Construction and Analysis of Systems TACAS  Volume  ofLecture Notes in Computer Science Aarhus Denmark May  pp  SpringerVerlagCleaveland R Parrow J and Steffen B  The Concurrency Workbench Asemanticsbased tool for the vericationof concurrent systemsACM TOPLAS   JanConstable R et al  Implementing Mathematics with the NuPRL Proof Development Environment PrenticeHallCornes C Courant J Filliatre JC Huet G Manoury P PaulinMohringC Munoz C Murthy C Parent C Sabi A and Werner B  Thecoq proof assistant reference manual version  Technical Report  July INRIAhttppauillacinriafrcoqsysteme coqenghtmlCraigen D Gerhart S and Ralston T a An international survey of industrial applications of formal methods Technical Report NIST GCR  vols  and March US National Institute of Standards and Technology Also published by theUS Naval Research Laboratory Formal Rep  Spet  and the AtomicEnergy Control Board of CanadaCraigen D Gerhart S and Ralston T b Observations on industrial practiceusing formal methods In Proc th Int Conf on Software Eng May Craigen D Gerhart S and Ralston T  Formal methods in critical systemsIEEE Software   JanCraigen D Gerhart S and Ralston T  Formal methods reality check Industrial usage IEEE Trans on Software Engineering   Feb Craigen D Kromodimoeljo S Meisels I Neilson A Pase B and Saaltink M mEVES A tool for verifying software In Proceedings of the th InternationalConference on Software Engineering Singapore April  pp Croxford M and Sutton J  Breaking through the V and V bottleneck In Proceedings of Ada in Europe   SpringerVerlagDamm W and DelgadoKloos C  Practical Formal Methods for Hardware DesignLecture Notes in Computer Science SpringerVerlag To appearDamm W Josko B and Schlor R  Specication and Validation methods forProgramming Languages and Systems Chapter Specicationand vericationof vhdlbasedsystemlevel hardware designs pp  Oxford University PressDaws C and Yovine S  Two examples of verication of multirate timed automatawith KRONOS In Proc  IEEE RealTime Systems Symposium RTSS Pisa ItalyDec  IEEE Computer Society PressDeharbe D and Borrione D  Semantics of a vericationoriented subset of vhdlIn P Camurati and H Eveking Eds CHARME Correct Hardware Design and Verication Methods Volume  of Lecture Notes in Computer Science Frankfurt GermanyOct  pp  SpringerVerlagDelisle N and Garlan D  A formal specication of an oscilloscope IEEE Software   Sept DePalma G and Glaser A  Formal verication augments simulation ElectronicEngineering Times Dill D L Drexler A J Hu A J and Yang C H  Protocol verication asa hardware design aid In IEEE International Conference on Computer Design VLSI inComputers and Processors  pp Formal Methods State of the Art and Future Directions  Dinolt G et al  Multinet gatewaytowards A certication In IEEE Symp onSecurity and Privacy Elseaidy W Cleaveland R and Baugh J  Modeling and verifying active structural control systems Science of Computer Programming To appear A preliminaryversionof this paper appears in the Proceedings of the  RealTime Systems SymposiumFernandez JC Garavel H Kerbrat A Mateescu R Mounier L and Sighireanu M  CADP CSARALDEBARAN development package A protocol validation and verication toolbox In Proc of the th International Conference on ComputerAided Verication Number  in Lecture Notes in Computer Science July SpringerVerlagFilkorn T Schneider H Scholz A Strasser A and Warkentin P  SVEUsers Guide Technical Report ZFE BT SE SVE Siemens AG Corporate Researchand Development MunichGarlan D Abowd G Jackson D Tomayko J and Wing J  The CMU Master of Software Engineering Core Curriculum In Proceedings of the Eighth SEI Conferenceon Software Engineering Education CSEE Volume  of Lecture Notes in ComputerScience New Orleans March  pp  SpringerVerlagGarland S J and Guttag J V  Inductive methods for reasoning about abstractdata types In Proc of the th Symposium on Principles of Programming Languages pp Gerth R Peled D Vardi M Y and Wolper P  Simple onthey automaticverication of linear temporal logic In Proc IFIPWG Symp on Protocol SpecicationTesting and Verication Warsaw Poland June Gordon M  HOL A proof generating system for higherorder logic In VLSI Specication Verication and Synthesis  KluwerGordon M J Milner A J and Wadsworth C P  Edinburgh LCF Volume of Lecture Notes in Computer Science SpringerVerlagGuiho G and Hennebert C  SACEM software validation In Twelfth InternationalConf on Software Engineering Guttag J and Horning J  Larch Languages and Tools for Formal SpecicationSpringerVerlag Written with SJ Garland KD Jones A Modet and JM WingHall A  Using formal methods to develop an ATC information system IEEE Software   March Harel D  Statecharts A visual formalism for complex systems Science of ComputerProgramming   Preliminary version Tech Report CS The Weizmann Institute of Science Rehovot Israel February Harel D  Biting the silver bullet Toward a brighter future for system developmentIEEE Computer   Jan HarEl Z and Kurshan R P  Software for analytical development of communications protocols ATT Bell Laboratories Technical Journal   JanFeb Heimdahl M and Leveson N  Completeness and consistency in hierarchical statebased requirements IEEE Transactions on Software Engineering SE  June Heninger K  Specifying software requirements for complex systems New techniquesand their application IEEE Trans on Soft Eng   Jan Henzinger T A Nicollin X Sifakis J and Yovine S  Symbolic model checking for realtime systems Information and Computation  Ho PH and WongToi H  Automated analysis of an audio control protocol InP Wolper Ed ComputerAided Verication   Lecture Notes in Computer Science pp  SpringerVerlagHoare C A R  Communicating Sequential Processes PrenticeHall InternationalHojati R Brayton R and Kurshan R  BDDbased debugging of designs usinglanguage containment and fair CTL In C Courcoubetis Ed Proceedings of the thInternational Conference on ComputerAided Verication Number  in Lecture Notesin Computer Science  pp  SpringerVerlag  EM Clarke and JM WingHolzmann G  Design and Validation of Computer Protocols PrenticeHall Englewood Clis New JerseyHolzmann G  Practical methods for the formal validation of SDL specicationsComputer Communications Special issue on Practical Uses of FDTsHolzmann G  The theory and practice of a formal method NewCoRe In Proc IFIPWorld Computer Congress Hamburg Germany August Holzmann G and Patti J  Validating SDL specications An experiment InC Vissers and E Brinksma Eds Proc th Int Conf on Protocol Specication Testingand Verication INWGIFIP Twente Neth June Holzmann G and Peled D  An improvement in formal verication In ProcFORTE Berne Switzerland October Houston I and King S  CICS project report Experiences and results from usingZ In Proc of VDM Formal Development Methods Volume  of Lecture Notes inComputer Science  SpringerVerlagISO  Information Systems ProcessingOpen Systems InterconnectionLOTOSTechnical report International Standards Organization DIS Jacky J  Specifying a safetycritical control system in Z IEEE Trans on SoftwareEngineering   Feb Jagadeesan L Puchol C and Olnhausen J V  A formal approach to reactivesystems software A telecommunications application in Esterel Formal Aspects of Computing   March Janicki R Parnas D L and Zucker J  Tabular representations in relationaldocuments In C Brink Ed Relational Methods in Computer Science SpringerVerlagTo appearJones C B  Systematic Software Development Using VDM PrenticeHall International New YorkKaltenbach M  Model checking for UNITY Technical Report TR Dec TheUniversity of Texas at AustinKapur D and Musser D  Proof by consistencyArticial Intelligence  Kaufmann M and Moore J S  ACL A Computational Logic for ApplicativeCommon Lisp The Users Manual Version  ftpftpclicompubaclvaclsourcesdocHTMLacldochtmlKindred D and Wing J  Fast automatic checking of security protocols In Procof the USENIX Workshop on Electronic Commerce Protocols  To appearKing T  Formalising British Rails signalling rules In FME Industrial Benetof Formal Methods Volume  of Lecture Notes in Computer Science  pp SpringerVerlagKljaich J Smith B and Wojcik A  Formal verication of fault tolerance usingtheoremproving techniques IEEE Transactions on Computers  Kuehlmann A Srinivasan A and LaPotin D P  Verity  a formal vericationprogram for custom CMOS circuits IBM Journal of Research and Development  Kuhn D and Dray J  Formal specication and verication of control software forcryptographic equipment In Sixth Computer Security Applications Conference Kurshan R and Lamport L  Verication of a Multiplier  Bits and BeyondIn C Courcoubetis Ed Computer Aided Verication Volume  of Lecture Notes inComputer Science  pp  SpringerVerlagKurshan R P a ComputerAided Verication of Coordinating Processes PrincetonUniversity PressKurshan R P b The Complexity of Verication In Proc th ACM Symposium onTheory of Computing STOC Montreal  pp Lamport L  The temporal logic of actions ACM TOPLAS  Lescanne P  Computer experiments with the REVE term rewriting system generator In Proceedings of the th Symposium on Principles of Programming LanguagesFormal Methods State of the Art and Future Directions  Austin Texas Jan  pp Long D L  Model checking abstraction and compositional reasoning Ph D thesisCarnegie Mellon Computer Science DepartmentLowe G  Breaking and xing the NeedhamSchroder publickey protocol using FDRIn Tools and Algorithms for the Construction and Analysis of Systems  Volume  ofLecture Notes in Computer Science March  SpringerVerlagLuo Z and Pollack R  LEGO proof development system Users manual Technical Report ECSLFCS May Computer Science Dept University of EdinburghLynch N and Tuttle M  Hierarchical correctnessproofs for distributedalgorithmsTechnical report April MIT Laboratory for Computer Science Cambridge MAManna Z and Pnueli A  The Temporal Logic of Reactive and Concurrent SystemsSpringerVerlag New YorkMataga P and Zave P  Multiparadigmspecicationof an ATT switching systemIn M G Hinchey and J P Bowen Eds Applications of Formal Methods pp PrenticeHall InternationalMcMillan K L  Symbolic Model Checking An Approach to the State ExplosionProblem Kluwer Academic PublishersMiller S P and Srivas M  Formal verication of the AAMP microprocessor Acase study in the industrial use of formal methods In WIFT  Workshop on IndustrialStrength Formal Specication Techniques Boca Raton FL  pp  IEEE Computer SocietyMilner A  A Calculus of Communicating Systems Volume  of Lecture Notes inComputer Science SpringerVerlagMoore J S Lynch T and Kaufmann M  A mechanically checkedproof of the correctness of the AMDK oating point division algorithmhttpdevileceutexasedu lynchdividedividehtmlNielsen M Havelund K Wagner K and George C  The RAISE languagemethod and tools Formal Aspects of Computing  Owre S Rushby J and Shankar N  PVS A prototype verication system InD Kapur Ed th International Conference on Automated Deduction CADE Volume of Lecture Notes in Articial Intelligence June  pp  SpringerVerlagOxford  httpwwwcomlaboxacukigdp  Masters of Science in Software EngineeringPeled D  Combining partial order reductions with onthey modelchecking Journal of Formal Methods in Systems Design    Also appeared in the Proc of theth International Conference on Computer Aided Verication  Stanford CA USALecture Notes in Computer Science  SpringerVerlag Pnueli A  A temporal logic of concurrent programs Theor Comp Sci  Queille J and Sifakis J  Specication and verication of concurrent systems inCSAR In Proc of Fifth ISP Rajan S Shankar N and Srivas M  An integration of modelchecking withautomated proof checking In P Wolper Ed ComputerAided Verication   Volume of Lecture Notes in Computer Science Liege Belgium June  pp  SpringerVerlagRichardson D OMalley T and Moore C T  Approaches to specicationbased testing In ACM SIGSOFT  Third Symposium on Software Testing Analysisand Verication Dec Roscoe A  Modelchecking CSP In A Roscoe Ed A Classical Mind Essays inHonour of CAR Hoare  PrenticeHallRoy V and de Simone R  AutoAutograph In E Clarke and R Kurshan EdsComputerAided Verication   Volume  of DIMACS Series on Discrete Mathematicsand Theoretical Computer Science Piscataway NJ June  pp  AmericanMathematical Society  EM Clarke and JM WingRue H Shankar N and Srivas M  Modular verication of SRT division InProc of the th International Conference on ComputerAided Verication Number in Lecture Notes in Computer Science July  pp  SpringerVerlagRussinoff D  A mechanically checked proof of the correctness of the AMD Koatingpoint square root algorithm SubmittedSPC  Consortium requirements engineering guidebook Technical Report SPCCMC version  Software Productivity Consortium Herndon VASpivey J M  Introducing Z a Specication Language and its Formal SemanticsCambridge University Press CambridgeSteffen B Margaria T Claen A and Braun V  The Meta  environment In ComputerAided Verication   Lecture Notes Computer Science NewBrunswick NJ July  SpringerVerlag Experience Report for the Industry DaySteffen B Margaria T Claen A Braun V and Reitenspie M  Anenvironment for the creation of intelligent network services In I E Consortium EdIntelligent Networks INAIN Technologies Operations Services and Applications  AComprehensive Report Chicago IL  pp  Invited contribution Also invitedto the Annual Review of Communications IEC  pp Vardi M Y and Wolper P  An automatatheoretic approach to automatic program verication In Proc of Logic in Computer Science Wing J  Specication rms A vision for the future In Proceedings of the ThirdInternational Workshop on Software Specication and Design London Aug  ppZave P  Secrets of call forwarding A specication case study In Proceedings of theEighth International IFIP Conference on Formal Description Techniques for DistributedSystems and Communications Protocols FORTE   pp  Chapman HallZave P and Jackson M  Where do operations come from A multiparadigmspecication technique IEEE Transactions on Software Engineering   July
