Autonomous Agents and MultiAgent Systems, 1, 275306 1998c1998 Kluwer Academic Publishers, Boston. Manufactured in The Netherlands.A Roadmap of Agent Research and Developmentn.r.jenningsqmw.ac.ukDepartment of Electronic Engineering, Queen Mary and Westfield College, London E1 4NS, UK katia.sycaracs.cmu.eduSchool of Computer Science, Carnegie Mellon University, Pittsburgh, PA. 15213, USAm.j.wooldridgeqmw.ac.ukDepartment of Electronic Engineering, Queen Mary and Westfield College, London E1 4NS, UKReceived November 25, 1995 Revised March 30, 1996Editor Abstract. This paper provides an overview of research and development activities in the field of autonomousagents and multiagent systems. It aims to identify key concepts and applications, and to indicate how they relateto oneanother. Some historical context to the field of agentbased computing is given, and contemporary researchdirections are presented. Finally, a range of open issues and future challenges are highlighted.Keywords autonomous agents, multiagent systems, history1. IntroductionAutonomous agents and multiagent systems represent a new way of analysing, designing, and implementing complex software systems. The agentbased view offers a powerful repertoire of tools, techniques, and metaphors that have the potential to considerablyimprove the way in which people conceptualise and implement many types of software.Agents are being used in an increasingly wide variety of applications  ranging fromcomparatively small systems such as personalised email filters to large, complex, missioncritical systems such as airtraffic control. At first sight, it may appear that such extremelydifferent types of system can have little in common. And yet this is not the case in both,the key abstraction used is that of an agent. It is the naturalness and ease with which such avariety of applications can be characterised in terms of agents that leads researchers and developers to be so excited about the potential of the approach. Indeed, several observers feelthat certain aspects of agents are being dangerously overhyped, and that unless this stopssoon, agents will suffer a similar backlash to that experienced by the Artificial IntelligenceAI community in the 1980s 96, 156.Given this degree of interest and level of activity, in what is a comparatively new andmultidisciplinary subject, it is not surprising that the field of agentbased computing canappear chaotic and incoherent. The purpose of this paper is therefore to try and imposesome order and coherence. We thus aim to tease out the common threads that togethermake up the agent tapestry. Our purpose is not to provide a detailed review of the field, weleave this to others for example, 154, 11, 74, 111, 158. Rather than present an indepthanalysis and critique of the field, we instead briefly introduce the key issues, and indicate  how they are interrelated. Where appropriate, references to more detailed treatments areprovided.Before we can embark on our discussion, we first have to define what we mean by suchterms as agent, agentbased system and multiagent system. Unfortunately, we immediately run into difficulties, as some key concepts in the field lack universally accepteddefinitions. In particular, there is no real agreement even on the core question of exactlywhat an agent is see 52 for a discussion. Of course, this need not be a serious obstacleto progress, the AI community has made progress without having a universally accepteddefinition of intelligence, for example. Nevertheless, we feel it is worth spending sometime on the issue, otherwise the terms we use will come to lose all meaning. For us,then, an agent is a computer system, situated in some environment, that is capable of flexible autonomous action in order to meet its design objectives this definition is adaptedfrom 158. There are thus three key concepts in our definition situatedness, autonomy,and flexibility.Situatedness, in this context, means that the agent receives sensory input from its environment and that it can perform actions which change the environment in some way.Examples of environments in which agents may be situated include the physical world orthe Internet. Such situatedness may be contrasted with the notion of disembodied intelligence that is often found in expert systems. For example, MYCIN, the paradigm expertsystem 134, did not interact directly with any environment. It received information notvia sensors, but through a user acting as a middle man. In the same way, it did not act onany environment, but rather it gave feedback or advice to a third party.Autonomy is a difficult concept to pin down precisely, but we mean it simply in the sensethat the system should be able to act without the direct intervention of humans or otheragents, and that it should have control over its own actions and internal state. Others useit in a stronger sense, to mean systems that are capable of learning from experience 125,p35.Of course, situated, autonomous computer systems are not a new development. Thereare many examples of such systems in existence. Examples include any process control system, which must monitor a realworld environment and perform actions to modify it as conditions change typically in real time  such systemsrange from the very simple for example, thermostats to the extremely complex forexample, nuclear reactor control systems software daemons, which monitor a software environment and perform actions to modify the environment as conditions change  a simple example is the UNIX xbiff program, which monitors a users incoming email and obtains their attention by displayingan icon when new, incoming email is detected.While the above are certainly examples of situated, autonomous systems, we would notconsider them to be agents since they are not capable of flexible action in order to meettheir design objectives. By flexible, we mean that the system is 158 responsive agents should perceive their environment and respond in a timely fashionto changes that occur in it          proactive agents should not simply act in response to their environment, they shouldbe able to exhibit opportunistic, goaldirected behaviour and take the initiative whereappropriate social agents should be able to interact, when appropriate, with other artificial agentsand humans in order to complete their own problem solving and to help others withtheir activities.While other researchers emphasise different aspects of agency including, for example,mobility or adaptability we believe that these four properties are the essence of agenthood. Naturally, some agents will have additional characteristics, and for certain types ofapplications, some attributes will be more important than others. However, we believe thatit is the presence of all the attributes in a single software entity that provides the power ofthe agent paradigm and which distinguishes agent systems from related software paradigms such as objectoriented systems, distributed systems, and expert systems see 156 fora discussion.With the basic building block notion of an agent in place, we can define more of ourterminology. By an agentbased system, we mean one in which the key abstraction usedis that of an agent. In principle, an agentbased system might be conceptualised in termsof agents, but implemented without any software structures corresponding to agents atall. We can draw a parallel with objectoriented software, where it is entirely possibleto design a system in terms of objects, but to implement it without the use of an objectoriented software environment. But this would at best be unusual, and at worst, counterproductive. A similar situation exists with agent technology we therefore expect an agentbased system to be both designed and implemented in terms of agents.As we have defined it, an agentbased system may contain one or more agents. There arecases in which a single agent solution is appropriate. A good example, as we shall see laterin this article, is the class of systems known as expert assistants, wherein an agent acts as anexpert assistant to a user attempting to use a computer to carry out some task. However, themultiagent case  where the system is designed and implemented as several interactingagents  is arguably more general and more interesting from a software engineering standpoint. Multiagent systems are ideally suited to representing problems that have multipleproblem solving methods, multiple perspectives andor multiple problem solving entities.Such systems have the traditional advantages of distributed and concurrent problem solving, but have the additional advantage of sophisticated patterns of interactions. Examplesof common types of interactions include cooperation working together towards a common aim coordination organising problem solving activity so that harmful interactionsare avoided or beneficial interactions are exploited and negotiation coming to an agreement which is acceptable to all the parties involved. It is the flexibility and highlevelnature of these interactions which distinguishes multiagent systems from other forms ofsoftware and which provides the underlying power of the paradigm.The remainder of this article is structured as follows. Section 2 focuses on individualagents, providing some background to the concepts involved, indicating the key issues thatare being addressed, and highlighting some likely future directions for research and development. Section 3 presents a similar discussion for multiagent systems. Section 4 drawstogether the two strands. It discusses some exemplar agentbased applications and pro   vides some pointers to the likely future direction of applied agent work. Finally, section 5presents some conclusions.2. Autonomous AgentsThe purpose of this section is to identify the various threads of work that have resultedin contemporary research and development activities in agentbased systems. We begin,in section 2.1, by identifying some key developments in the history and prehistory of theautonomous agents area, up to and including current systems. In section 2.2, we thenidentify some of the key issues and future research directions in autonomous agents.2.1. HistoryCurrent interest in autonomous agents did not emerge from a vacuum. Researchers anddevelopers from many different disciplines have been talking about closely related issuesfor some time. The main contributors are artificial intelligence 125 objectoriented programming 10 and concurrent objectbased systems 2, 4 humancomputer interface design 97.2.1.1. Artificial Intelligence. Undoubtedly the main contributor to the field of autonomousagents is artificial intelligence. Ultimately, AI is all about building intelligent artifacts,and if these artifacts sense and act in some environment, then they can be considered asagents 125. Despite the fact that agency can thus be seen to be central to the study ofAI, until the 1980s comparatively little effort within the AI community was directed to thestudy of intelligent agents. The primary reason for this apparently strange state of affairswas that AI researchers had historically tended to focus on the various different components of intelligent behaviour learning, reasoning, problem solving, vision understandingand so on in isolation. The expectation was that progress was more likely to be madewith these aspects of intelligent behaviour if they were studied individually, and that thesynthesis of these components to create an integrated agent would be straightforward. Bythe early 1970s, this assumption seems to have been implicit within most mainstream AIresearch. During this period, the area of research activity most closely connected with thatof autonomous agents was AI planning 5.AI planning research is the subfield of AI that concerns itself with knowing what todo what action to perform. Ultimately, an agent is just a system that performs actions insome environment, and so it is not surprising that AI planning research should be closelyinvolved in the study of agents. The AI planning paradigm traces its origins to Newell andSimons GPS system 108, but is most commonly associated with the STRIPS planningsystem 45 and its descendents such as 23, 155. A typical STRIPSstyle planningsystem will have at least the following components          a symbolic model of the agents environment, typically represented in some limitedsubset of firstorder predicate logic a symbolic specification of the actions available to the agent, typically represented interms of PDA precondition, delete, add lists, which specify both the circumstancesunder which an action may be performed and the effects of that action a planning algorithm, which takes as input the representation of the environment, a setof action specifications, and a representation of a goal state, and produces as output aplan  essentially, a program  which specifies how the agent can act so as to achievethe goal.Thus, planning systems decide how to act from first principles. That is, in order to satisfya goal, they first formulate an entirely new plan or program for that goal. A planningsystems would thus continually execute a cycle of picking a goal 1, generating a plan for 1, executing , picking a new goal 2, and so on. Crucially, such planning is basedentirely around symbolic representations and reasoning.Attention in AI planning research during the 1970s and early 1980s focussed primarilyon the representations required for actions, and the planning algorithms themselves. Ofparticular concern was the demonstrated efficiency of the planning algorithm. With simulated microworld examples such as the wellknown blocks world, STRIPSstyle planningalgorithms appear to give reasonable performance. However, it was rapidly discoveredthat such techniques do not scale to realistic scenarios. In particular, such algorithms werepredicated on the assumption of calculative rationality 126. The calculative rationalityassumption may be informally defined as follows. Suppose we have some agent f , whichwill accept an observation of the world as input, do some computation, and sometime latergenerate an action output. Then f is said to enjoy the property of calculative rationality ifthe action it gives as output would be optimal if performed at the time f began its decisionmaking. Algorithms that have the property of calculative rationality by this definition willbe guaranteed to make the best decision possible  but they will not necessarily make itin time to be of any use. Calculative rationality tends to arise in circumstances where thedecision about which action to perform is made by an unconstrained search over the spaceof all possible decisions. The size of such search spaces are inherently exponential in thecomplexity of the task to be solved. As a consequence, searchbased techniques tend to beimpractical if results are required in any fixed time bound. Building on the burgeoning areaof algorithmic complexity analysis that emerged in the late 1960s and 1970s, a number oftheoretical results appeared in the 1980s which indicated that firstprinciples planning isnot a viable option for agents that operate in such timeconstrained environments. The bestknown of these results is due to David Chapman, who demonstrated that in many circumstances, firstprinciples planning is undecidable 23. So, building reactive agents, that canrespond to changes in their environment in time for these responses to be useful, is notlikely to be possible using firstprinciples planning techniques.The apparent failure of early AI planning techniques to scale up to realworld problems,together with the complexity results of Chapman and others, led many researchers to question the viability of symbolic reasoning approaches to planning in particular and AI ingeneral. The problem of deploying such algorithms in realworld systems also prompted   researchers to turn to the somewhat neglected issue of agent design. During the mid 1980s,an increasing number of these researchers began to question the assumptions upon whichtraditional symbolic AI approaches to agency are based. In particular, some researchersbegan to express grave reservations about whether symbolic AI, and in particular the logicist tradition in symbolic AI, was ultimately viable. Arguably the bestknown of thesecritics was Rodney Brooks, who in a series of papers presented a number of objectionsto the symbolic AI model, and sketched out an alternative research program, which hasbeen variously known as behavioural AI, reactive AI, or situated AI 15, 17, 16. In thesepapers, Brooks emphasised several aspects of intelligent behaviour that he suggested wereneglected by traditional approaches to agency and AI. In particular, he suggested that intelligent, rational behaviour is not an attribute of disembodied systems like theorem proversor traditional expert systems like MYCIN, but rather that intelligence is a product of the interaction between an agent and its environment. In addition, Brooks emphasised the viewthat intelligent behaviour emerges from the interaction of various simpler behaviours.As part of his research program, Brooks developed the subsumption architecture, anagent control architecture that employed no symbolic representations or reasoning at all.Broadly speaking, a subsumption architecture agent is a collection of task accomplishingbehaviours. Each behaviour is a finite state machine that continually maps perceptual input to action output. In some implemented versions of the subsumption architecture, thismapping is achieved via situation  action rules, which simply determine an action toperform on the basis of the agents current state. However, in Brooks implementations, behaviours were somewhat more sophisticated than this, for example allowing for feedbackfrom previous decisions. The main point is that these behaviours do no symbolic reasoning and no search. While each behaviour is generating suggestions with respect to whichaction to perform, the overall decision about which action to perform is determined by interactions between the behaviours. Behaviours can interact in several ways. For example,one behaviour can suppress the output of another. Typically, the behaviours are organised into a layered hierarchy, with lower layers representing less abstract behaviours e.g.,obstacle avoidance in physically embodied agents, and higher layers representing moreabstract behaviours. Developing agents that exhibit coherent overall behaviour is a processof carefully developing and experimenting with new behaviours, usually by placing theagent in its environment and observing the results.Despite its apparent simplicity, the subsumption architecture has nevertheless been demonstrated in several impressive applications see, e.g., 137. However, there are also a number of disadvantages with the subsumption architecture and its relatives If agents do not employ models of their environment, then they must have sufficientinformation available in their local environment for them to determine an acceptableaction. Since purely reactive agents make decisions based on local information, i.e., information about the agents current state, it is difficult to see how such decision makingcould take into account nonlocal information  it must inherently take a short termview. It is difficult to see how purely reactive agents can be designed that learn from experience, and improve their performance over time.         actionoutputperceptualinputa Horizontal layeringLayer 1Layer 2Layer n...perceptualinputactionoutputLayer 1Layer 2Layer n...b Vertical layeringFigure 1. Layered Agent Architectures A major selling point of purely reactive systems is that overall behaviour emerges fromthe interaction of the component behaviours when the agent is placed in its environment. But the very term emerges suggests that the relationship between individualbehaviours, environment, and overall behaviour is not understandable. This necessarily makes it very hard to engineer agents to fulfill specific tasks. Ultimately, there isno principled methodology for building such agents one must use a laborious processof experimentation, trial, and error to engineer an agent. While effective agents can be generated with small numbers of behaviours typicallyless that ten layers, it is much harder to build agents that contain many layers. Thedynamics of the interactions between the different behaviours become too complex tounderstand.By the early 1990s, most researchers accepted that reactive architectures are wellsuitedto certain domains and problems, but less wellsuited to others. In fact, for most problems, neither a purely deliberative e.g., firstprinciples planner architecture nor a purelyreactive architecture is appropriate. For such domains, an architecture is required that incorporates aspects of both. As a result, a number of researchers began to investigate hybridarchitectures, which attempted to marry the best aspects of both deliberative and reactiveapproaches. Typically, these architectures were realised as a number of software layers.The layers may be arranged vertically so that only one layer has access to the agents sensors and effectors or horizontally so that all layers have access to sensor input and actionoutput see Figure 1.As in the subsumption architecture, see above, layers are arranged into a hierarchy, withdifferent levels in the hierarchy dealing with information about the environment at differentlevels of abstraction. Most architectures find three layers sufficient. Thus at the lowest levelin the hierarchy, there is typically a reactive layer, which makes decisions about what todo based on raw sensor input. Often, this layer is implemented using techniques rathersimilar to Brooks subsumption architecture thus it is itself implemented as a hierarchy    of task accomplishing behaviours, where these behaviours are taskaccomplishing finitestate machines. The middle layer layer typically abstracts away from raw sensor inputand deals with a knowledge level view of the agents environment 107, typically makinguse of symbolic representations. The uppermost level of the architecture tends to deal withthe social aspects of the environment  it has a social knowledge level view 80. We thustypically find representations of other agents in this layer  their goals, beliefs, and soon. In order to produce the global behaviour of the agent, these layers interact with oneanother the specific way that the layers interact differs from architecture to architecture. Insome approaches such as TOURING MACHINES 43, 44, each layer is itself constantlyproducing suggestions about what action to perform. In this case, mediation between theselayers in order to ensure that the overall behaviour of the agent is coherent and consistentbecomes an issue. In TOURING MACHINES this mediation is achieved by a control subsystem that determines which layer should have overall control of the agent. The controlsubsystem in TOURING MACHINES is implemented as a set of rules, which can refer to theactions proposed by each layer. A similar idea is used in INTERRAP 104, 103. Anothersimilar architecture for autonomous agents is 3T 8.A final tradition in the area of agent architectures is that of practical reasoning agents 14.Practical reasoning agents are those whose architecture is modelled on or inspired by a theory of practical reasoning in humans. By practical reasoning, we simply mean the kind ofpragmatic reasoning that we use to decide what to do. Practical reasoning has long been anarea of study by philosophers, who are interested in developing theories that can accountfor human behaviour. Typically, theories of practical reasoning make use of a folk psychology, whereby behaviour is understood by the attribution of attitudes such as beliefs,desires, intentions, and so on. Human behaviour can be thought of as arising through theinteraction of such attitudes. Practical reasoning architectures are modelled on theories ofsuch interactions. Probably the bestknown and most influential type of practical reasoning architecture is the socalled beliefdesireintention BDI model 14, 57. As the nameindicates, BDI agents are characterised by a mental state with three components beliefs,desires, and intentions. Intuitively, beliefs correspond to information that the agent hasabout its environment. Desires represent options available to the agent  different possible states of affairs that the agent may choose to commit to. Intentions represent statesof affairs that the agent has chosen and has committed resources to. An agents practicalreasoning involves repeatedly updating beliefs from information in the environment, deciding what options are available, filtering these options to determine new intentions, andacting on the basis of these intentions. The philosophical foundations of the BDI modelare to be found in Bratmans account of the role that intentions play in human practicalreasoning 12. A number of BDI agent systems have been implemented, the bestknownof which is probably the Procedural Reasoning System PRS 57. Researchers interestedin practical reasoning architectures have developed a number of logical theories of BDIsystems 120, 121. Closely related to this work on practical reasoning agent architecturesis Shohams proposal for agentoriented programming, a multiagent programming modelin which agents are explicitly programmed in terms of mentalistic notions such as beliefand desire 133.         2.1.2. Object and Concurrent Object Systems. Objectoriented programmers often failto see anything novel or new in the idea of agents. When one stops to consider the relativeproperties of agents and objects, this is perhaps not surprising. Objects are defined ascomputational entities that encapsulate some state, are able to perform actions, or methodson this state, and communicate by message passing.While there are obvious similarities, there are also significant differences between agentsand objects. The first is in the degree to which agents and objects are autonomous. Recallthat the defining characteristic of objectoriented programming is the principle of encapsulation  the idea that objects can have control over their own internal state. In programming languages like JAVA, we can declare instance variables and methods to be private,meaning they are only accessible from within the object. We can of course also declarethem public, meaning that they can be accessed from anywhere, and indeed we must dothis for methods so that they can be used by other objects. But the use of public instancevariables is generally considered poor programming style. In this way, an object can bethought of as exhibiting autonomy over its state it has control over it. But an object doesnot exhibit control over its behaviour. That is, if a method m is made available for otherobjects to invoke, then they can do so whenever they wish the object has no control overwhether or not that method is executed. Of course, an object must make methods availableto other objects, or else we would be unable to build a system out of them. This is notnormally an issue, because if we build a system, then we design the objects that go in it,and they can thus be assumed to share a common goal. But in many types of multiagentsystem, in particular, those that contain agents built by different organisations or individuals, no such common goal can be assumed. It cannot be taken for granted that an agenti will execute an action method a just because another agent j wants it to  a may notbe in the best interests of i. We thus do not think of agents as invoking methods upononeanother, but rather as requesting actions to be performed. If j requests i to performa, then i may perform the action or it may not. The locus of control with respect to thedecision about whether to execute an action is thus different in agent and object systems.In the objectoriented case, the decision lies with the object that invokes the method. Inthe agent case, the decision lies with the agent that receives the request. The distinctionbetween objects and agents can be summarised in the following slogan Objects do it forfree agents do it for money.Note that there is nothing to stop us implementing agents using objectoriented techniques. For example, we can build some kind of decision making about whether to executea method into the method itself, and in this way achieve a stronger kind of autonomy forour objects. However, the point is that autonomy of this kind is not a component of thebasic objectoriented model.The second important distinction between object and agent systems is with respect tothe notion of flexible reactive, proactive, social autonomous behaviour. The standardobject model has nothing whatsoever to say about how to build systems that integrate thesetypes of behaviour. Again, one could argue that we can build objectoriented programsthat do integrate these types of behaviour. But this argument misses the point, which isthat the standard objectoriented programming model has nothing to do with these types ofbehaviour.  The third important distinction between the standard object model and our view of agentsystems is that agents are each considered to have their own thread of control  in thestandard object model, there is a single thread of control in the system. Of course, a lotof work has recently been devoted to concurrency in objectoriented programming. Forexample, the JAVA language provides builtin constructs for multithreaded programming.There are also many programming languages available most of them admittedly prototypes that were specifically designed to allow concurrent objectbased programming 4.But such languages do not capture the idea we have of agents as autonomous entities.Note, however, that active objects come quite close to our concept of autonomous agents though not agents capable of flexible autonomous behaviour 10, p91.2.1.3. HumanComputer Interfaces Currently, when we interact with a computer via auser interface, we are making use of an interaction paradigm known as direct manipulation.Put simply, this means that a computer program a word processor, for example will onlydo something if we explicitly tell it to. This makes for very oneway interaction. It wouldbe desirable, therefore, to have computer programs that in certain circumstances could takethe initiative, rather than wait for the user to spell out exactly what they wanted to do. Thisleads to the view of computer programs as cooperating with a user to achieve a task, ratherthan acting simply as servants. A program capable of taking the initiative in this way wouldin effect be operating as a semiautonomous agent. Such agents are sometimes referred toas expert assistants, or more whimsically as digital butlers.One of the key figures in the development of agentbased interfaces has been NicholasNegroponte. His vision of agents at the interface was set out in Being Digital 106The agent answers the phone, recognizes the callers, disturbs you when appropriate, and may even tell a white lie on your behalf. The same agent is well trainedin timing, versed in finding opportune moments, and respectful of idiosyncrasies. p150If you have somebody who knows you well and shares much of your information,that person can act on your behalf very effectively. If your secretary falls ill, itwould make no difference if the temping agency could send you Albert Einstein.This issue is not about IQ. It is shared knowledge and the practice of using it inyour best interests. p151Like an army commander sending a scout ahead . . . you will dispatch agentsto collect information on your behalf. Agents will dispatch agents. The processmultiplies. But this process started at the interface where you delegated yourdesires. p158The main application of such agents to date has been in the area of information management systems, particularly email managers and active new readers 97 and active worldwide web browsers 94. In section 4.1.2, we discuss such applications in more detail.         2.2. Issues and Future DirectionsThe area of agent architectures, particularly layered, or hybrid architectures, and practicalreasoning architectures, continues to be an area of considerable research effort within theagent field. For example, there is ongoing work to investigate the appropriateness of various architectures for different environment types. It turns out to be quite hard to evaluateone agent architecture against another, although some suggestions have been made as tohow this might be done in a neutral way 118.Finally, if agent technology, of the kind described in this section, is to move from theresearch lab to the office of the everyday computer worker, then serious attention mustbe given to development environments and programming languages for such systems. Todate, most architectures have been implemented in a rather ad hoc manner. Programminglanguages and tools for agents would present the developer with a layer of abstraction oversuch architectures. Shohams AGENT0 is one attempt to build such a language 133, as isthe CONGOLOG language described in 89, and the Concurrent METATEM programminglanguage 47. APRIL is another such language, which provides the developer with a set ofsoftware tools for implementing MAS 99.3. MultiAgent SystemsTraditionally, research into systems composed of multiple agents was carried out under thebanner of Distributed Artificial Intelligence DAI, and has historically been divided intotwo main camps 9 Distributed Problem Solving DPS and MultiAgent Systems MAS.More recently, the term multiagent systems has come to have a more general meaning,and is now used to refer to all types of systems composed of multiple semiautonomouscomponents.Distributed problem solving DPS considers how a particular problem can be solved by anumber of modules nodes, which cooperate in dividing and sharing knowledge about theproblem and its evolving solutions. In a pure DPS system, all interaction strategies are incorporated as an integral part of the system. In contrast, research in MAS is concerned withthe behavior of a collection of possibly preexisting autonomous agents aiming at solving agiven problem. A MAS can be defined as a loosely coupled network of problem solvers thatwork together to solve problems that are beyond the individual capabilities or knowledgeof each problem solver 39. These problem solvers  agents  are autonomous and maybe heterogeneous in nature. The characteristics of MAS are each agent has incomplete information, or capabilities for solving the problem, thuseach agent has a limited viewpoint there is no global system control data is decentralized and computation is asynchronous.Some reasons for the increasing interest in MAS research include the ability to provide robustness and efficiency the ability to allow interoperation of existing legacy systems and    the ability to solve problems in which data, expertise, or control is distributed. AlthoughMAS provide many potential advantages, they also face many difficult challenges. Below,we present problems inherent in the design and implementation of MAS this list includesboth problems first posed in 9 and some we have added1. How to formulate, describe, decompose, and allocate problems and synthesize resultsamong a group of intelligent agents2. How to enable agents to communicate and interact What communication languagesand protocols to use What and when to communicate3. How to ensure that agents act coherently in making decisions or taking action, accommodating the nonlocal effects of local decisions and avoiding harmful interactions4. How to enable individual agents to represent and reason about the actions, plans, andknowledge of other agents in order to coordinate with them How to reason about thestate of their coordinated process e.g., initiation and completion5. How to recognize and reconcile disparate viewpoints and conflicting intentions amonga collection of agents trying to coordinate their actions6. How to effectively balance local computation and communication More generally,how to manage allocation of limited resources7. How to avoid or mitigate harmful overall system behavior, such as chaotic or oscillatory behavior8. How to engineer and constrain practical MAS systems How to design technologyplatforms and development methodologies for MASSolutions to these problems are of course intertwined 54. For example, different modeling schemes for an individual agent may constrain the range of effective coordinationregimes different procedures for communication and interaction have implications for behavioral coherence different problem and task decompositions may yield different interactions.From this backdrop, we provide some historical context for the field section 3.1, discusscontemporary work in distributed problem solving section 3.2 and multiagent systemssection 3.3, and finally, we discuss some open issues section 3.4.3.1. HistoryIn 1980 a group of AI researchers held the first DAI workshop at MIT to discuss issues concerning intelligent problem solving with systems consisting of multiple problem solvers. Itwas decided that Distributed AI was not concerned with low level parallelism issues, suchas how to distribute processing over different machines, or how to parallelize centralizedalgorithms, but rather with issues of how intelligent problem solvers could coordinate effectively to solve problems. From these beginnings, the DAI field has grown into a majorinternational research area.         3.1.1. Actors One of the first models of multi agent problem solving was the actorsmodel 2, 3. Actors were proposed as universal primitives of concurrent computation.Actors are selfcontained, interactive autonomous components of a computing system thatcommunicate by asynchronous message passing. The basic actor primitives are create creating an actor from a behavior description and a set of parameters, possiblyincluding existing actors send sending a message to an actor become changing an actors local state.Actor models are a natural basis for many kinds of concurrent computation. However, asnoted in 9 actor models, along with other DAI models, face the issue of coherence. Thelowlevel granularity of actors also poses issues relating to the composition of actor behaviors in larger communities, and achievement of higher level performance goals with onlylocal knowledge. These issues were addressed in 68 where an overview of Open SystemsScience and its challenges were presented, and where an organizational architecture calledORG was proposed that included new features and extensions of the Actor model to supportorganizing large scale work.3.1.2. Task Allocation through the Contract Net Protocol The issue of flexible allocation of tasks to multiple problem solvers nodes received attention early on in the historyof DAI 33. Davis and Smiths work resulted in the wellknown Contract Net Protocol.In this protocol, agents can dynamically take two roles manager or contractor. Given atask to perform, an agent first determines whether it can break it into subtasks that could beperformed concurrently. It employs the Contract Net Protocol to announce the tasks thatcould be transferred, and requests bids from nodes that could perform any of these tasks.A node that receives a task announcement replies with a bid for that task, indicating howwell it thinks it can perform the task. The contractor collects the bids and awards the taskto the best bidder. Although the Contract Net was considered by Smith and Davis as wellas many subsequent DAI researchers to be a negotiation technique, it is really a coordination method for task allocation. The protocol enables dynamic task allocation, allowsagents to bid for multiple tasks at a time, and provides natural load balancing busy agentsneed not bid. Its limitations are that it does not detect or resolve conflicts, the managerdoes not inform nodes whose bids have been refused, agents cannot refuse bids, there is nopreemption in task execution time critical tasks may not be attended to, and it is communication intensive. To rectify some of its shortcoming, a number of extensions to thebasic protocol have been proposed, for example 128.3.1.3. Some Early ApplicationsAir Traffic Control Cammarata 21 studied cooperation strategies for resolving conflicts among plans of a group of agents. They applied these strategies to an airtrafficcontrol domain, in which the aim is to enable each agent aircraft to construct a flight    plan that will maintain a safe distance with each aircraft in its vicinity and satisfy additional constraints such as reaching its destination with minimal fuel consumption.Agents involved in a potentially conflicting situation e.g., aircraft becoming too closeaccording to their current flight path choose one of the agents involved in the conflictto resolve it. The chosen agent acts as a centralized planner to develop a multiagentplan that specifies the conflictfree flight paths that the agents will follow. The decision of which agent will do the planning is based on different criteria, for example,mostinformed agent, or moreconstrained agent. The authors carried out experimentalevaluations to compare plans made by agents that were chosen using different criteria.The Distributed Vehicle Monitoring Task DVMT In this domain, a set of agents aredistributed geographically, and each is capable of sensing some portion of an overallarea to be monitored. As vehicles move through its sensed area, each agent detectscharacteristic sounds from those vehicles at discrete time intervals. By analyzing thecombination of sounds heard from a particular location at a specific time, an agent candevelop interpretations of what vehicles might have created these sounds. By analyzing temporal sequences of vehicle interpretations, and using knowledge about mobilityconstraints of different vehicles, the agent can generate tentative maps of vehicle movements in its area. By communicating tentative maps to one another, agents can obtainincreased reliability and avoid redundant tracking in overlapping regions 38.Blackboards The DVMT, along with other early MAS applications use the blackboardsystems for coordination. Put crudely, a blackboard is simply a shared data structure 40. Agents can use a blackboard to communicate by simply writing on the datastructure. Early DVMT work by Lesser and Corkill 30 used two blackboards, onefor data and the other for agents goals. In the MINDS project, Huhns et al also usedtwo specialized blackboards 73. The MINDS project was a distributed information retrieval system, in which agents shared both knowledge and tasks in order to cooperatein retrieving documents for users. HayesRoth proposed a more elaborate blackboardstructure, with three interacting subagents for perception, control and reasoning 64.3.2. Cooperative MultiAgent InteractionsAs interest increases in applications that use cooperative agents working towards a common goal, and as more agents are built that cooperate as teams, such as in virtual training 143, Internetbased information integration 35, ROBOCUP robotic and syntheticsoccer 149, and interactive entertainment 66, so it becomes more important to understand the principles that underpin cooperation.As discussed in section 2.1, planning for a single agent is a process of constructing asequence of actions considering only goals, capabilities and environmental constraints.Planning in a MAS environment, on the other hand, considers in addition the constraintsthat the other agents activities place on an agents choice of actions, the constraints thatan agents commitments to others place on its own choice of actions and the unpredictableevolution of the world caused by other, unmodeled agents.Most early work in DAI dealt with groups of agents pursuing common goals e.g., 90,38, 21, 91. Agent interactions were guided by cooperation strategies meant to improve          their collective performance. In this light, early work on distributed planning took the approach of complete planning before action. To produce a coherent plan, the agents mustbe able to recognize subgoal interactions and either avoid them or else resolve them. Forinstance, work by Georgeff 55 included a synchroniser agent to recognize and resolvesuch interactions. Other agents send this synchroniser their plan the synchroniser examines plans for critical regions in which, for example, contention for resources could causethem to fail. The synchroniser then inserted synchronization messages akin to operatingsystems semaphores to ensure mutual exclusion. In the work by Cammarata on air trafficcontrol see section 3.1.3 the synchronizing agent was dynamically assigned according todifferent criteria, and could alter its plan to remove the interaction avoid collision.Another significant approach to resolving subproblem interdependencies is the Functionally Accurate Model FAC 91. In the FAC model, agents do not need to have allthe necessary information locally to solve their subproblems, but instead interact throughthe asynchronous, coroutine exchange of partial results. Starting with the FAC model, aseries of sophisticated distributed control schemes for agent coordination were developed,such as use of static metalevel information specified by an organizational structure, and theuse of dynamic metalevel information developed in Partial Global Planning PGP 38.Partial Global Planning is a flexible approach to coordination that does not assume anyparticular distribution of subproblems, expertise or other resources, but instead allowsnodes to coordinate themselves dynamically 38. Agent interactions take the form ofcommunicating plans and goals at an appropriate level of abstraction. These communications enable a receiving agent to form expectations about the future behavior of a sendingagent, thus improving agent predictability and network coherence 38. Since agents arecooperative, the recipient agent uses the information in the plan to adjust its own local planning appropriately, so that the common planning goals and planning effectiveness criteriaare met. Besides their common PGPs, agents also have some common knowledge abouthow and when to use PGPs. Decker 34 addressed some of the limitations of the PGP bycreating a generic PGPbased framework called TAEMS to handle issues of realtime e.g.,scheduling to deadlines and metacontrol e.g., to obviate the need to do detailed planningat all possible node interactions.Another research direction in cooperative multiagent planning has been directed towardsmodeling teamwork explicitly. This is particularly helpful in dynamic environments, whereteam members may fail or where they may be presented with new opportunities. In suchsituations, it is necessary that teams monitor their performance and reorganize based ontheir current situation.The joint intentions framework 93 is a natural extension to the practical reasoningagents paradigm discussed in section 2.1.1. It focuses on characterising a teams mental state, called a joint intention see e.g., 77 for survey. A team jointly intends a teamaction if the team members are jointly committed to completing the team action, whilemutually believing they were doing it. A joint commitment is defined as a joint persistentgoal. To enter into a joint commitment, all team members must establish appropriate mutual beliefs and commitments. This is done through an exchange of request and confirmspeech acts 28. The commitment protocol synchronizes the team, in that all memberssimultaneously enter into a joint commitment towards a team task. In addition, all teammembers must consent, via confirmation, to the establishment of a joint commitment goal    thus a joint commitment goal is not established if a team member refuses. In this case,negotiation could be used, though how this might be done remains an open issue.The SharedPlan model 60, 61 is based on a different mental attitude intending that anaction be done 13. Intending that concerns a groups joint activity or a collaboratorsactions. The concept is defined via a set of axioms that guide a team mate to take action,or enter into communication that enables or facilitates its team mates to perform assignedtasks. COLLAGEN 122 is a prototype toolkit that has its origins in the SharedPlan model,and which has been applied to building a collaborative interface agent that helps with airtravel arrangements. Jennings 79 presented a framework called joint responsibility basedon a joint commitment to a teams joint goal and a joint recipe commitment to a commonrecipe. This model was implemented in the GRATE system 78, and applied to the domainof electricity transport management.Tambe 144 presents a model of teamwork called STEAM Shell for TEAMwork, basedon enhancements to the Soar architecture 109, plus a set of about 300 domain independentSoar rules. Based on the teamwork operationalized in STEAM, three teams have beenimplemented, two that operate in a commercially available simulation for military trainingand a third in ROBOCUP synthetic soccer. STEAM uses a hybrid approach that combinesjoint intentions with partial SharedPlans.3.3. SelfInterested Multi Agent InteractionsThe notion of interactions among selfinterested agents has been centered around negotiation. Negotiation is seen as a method for coordination and conflict resolution e.g., resolving goal disparities in planning, resolving constraints in resource allocation, resolving taskinconsistencies in determining organizational structure. Negotiation has also been used asa metaphor for communication of plan changes, task allocation, or centralized resolution ofconstraint violations. Hence, negotiation is almost as illdefined as the notion of agent.We give here what we consider to be the main characteristics of negotiation, that arenecessary for developing applications in the real world. These are a the presenceof some form of conflict that must be resolved in a decentralized manner, by b selfinterested agents, under conditions of c bounded rationality, and d incomplete information. Furthermore, the agents communicate and iteratively exchange proposals andcounterproposals.The PERSUADER system by Sycara 141, 140 and work by Rosenschein 123, 124 represent the first work by DAI researchers on negotiation among selfinterested agents. Thetwo approaches differ in their assumptions, motivations, and operationalization. The workof Rosenschein was based on game theory. Utility is the single issue that agents consider,and agents are assumed to be omniscient. Utility values for alternative outcomes are represented in a payoff matrix that is common knowledge to both parties in the negotiation.Each party reasons about and chooses the alternative that will maximize its utility. Despitethe mathematical elegance of game theory, game theoretic models suffer from restrictiveassumptions that limit their applicability to realistic problems1. Real world negotiationsare conducted under uncertainty, involve multiple criteria rather than a single utility dimension, the utilities of the agents are not common knowledge but are instead private, andthe agents are not omniscient.         The PERSUADER is an implemented system that operates in the domain of labor negotiation 139. It involves three agents a union, a company, and a mediator, and is inspired byhuman negotiation. It models the iterative exchange of proposals and counterproposals inorder for the parties to reach agreement. The negotiation involves multiple issues, such aswages, pensions, seniority, subcontracting, and so on. Each agents multidimensional utility model is private rather than common knowledge. Belief revision to change the agentsutilities so that agreement can be reached is achieved via persuasive argumentation 141.In addition, casebased learning techniques are also incorporated into the model.Work by Kraus 86, focuses on the role of time in negotiation. Using a distributedmechanism, agents negotiate and can reach efficient agreements without delays. It is alsoshown that the individual approach of each agent towards the negotiation time affects andmay even determine the final agreement that is reached.As electronic commerce is rapidly becoming a reality, the need for negotiation techniques that take into consideration the complexities of the real world, such as incompleteinformation, multiple negotiation issues, negotiation deadlines, and the ability to breakcontracts will be critically needed. Work in nonbinding contracts includes 127 where decommitment penalties were introduced into the Contract Net Protocol, and the ADEPT system, in which a penalty for contract violation was built into the negotiation agreement 82.Another important aspect of successful interaction for selfinterested agents is the abilityto adapt behaviour to changing circumstances see 138 for a survey. However, learning in a multiagent environment is complicated by the fact that as other agents learn, theenvironment effectively changes. Moreover, other agents actions are often not directlyobservable, and the action taken by the learning agent can strongly bias the range of behaviors that are encountered. Hu and Wellman 69 characterize an agents belief processin terms of conjectures about the effect of their actions. A conjectural equilibrium is thendefined, in which all agents expectations are realized, and each agent responds optimallyto its expectations. They present a multiagent system where an agent builds a model of theresponse of others. Their experimental results show that depending on the starting point,the agent may be better or worse off than had it not attempted to learn a model of the otheragents.In 159 the Bazaar negotiation model was presented, which included multiagent learning through agent interactions. The benefits of learning, if any, on the individual utilitiesof agents, as well as the overall joint system utility were examined. The experimentalresults suggest that a when all agents learn, the joint system utility is near optimal andagents individual utilities are very similar b when no agent learns the agents individualutilities are almost equal but the joint utility is very low much lower than in the all agentslearn condition and c when only one agent learns, its individual utility increases at theexpense of both the individual utility of the other agents as well as the overall joint utilityof the system i.e., only one agent learning has a harmful overall effect 159, 160.3.4. Issues and Future DirectionsOne of the most important driving forces behind MAS research and development is theInternet agents are populating the Internet at an increasingly rapid pace. These agentsinvariably need to interact with oneanother in order to meet their designers objectives.    In such open environments, agents that would like to coordinate with each other eithercooperate or negotiate, for example face two major challenges first, they must be able tofind each other in an open environment, agents might appear and disappear unpredictably,and once they have done that, they must be able to interoperate.To address the issue of finding agents in an open environment like the Internet, middleagents 88 have been proposed. Each agent advertises it capability to some middle agent.A number of different agent types have been identified, including matchmakers or yellowpage agents that match advertisements to requests for advertised capabilities, blackboardagents that collect requests, and brokers that process both. In preliminary experiments36, it was seen that the behaviors of each type of middleagent have certain performancecharacteristics. For example, while brokered systems are more vulnerable to certain failures, they are also able to cope more quickly with a rapidly fluctuating agent workforce.Middle agents are advantageous since they allow a system to operate robustly in the faceof agent appearance and disappearance, and intermittent communications.To allow agents to interoperate, a number of agent communication languages have beendesigned 98, 135, 49. These provide a set of performatives based on speech acts 132.Though such performatives can characterize message types, efficient languages to expressmessage content that allows agents to understand each other have not been effectivelydemonstrated. Thus the ontology problem  that of how can agents share meaning  isstill open 62.Another critical issue is effective allocation of limited resources to multiple agents. Forexample, we have all experienced large time lags in response to Internet queries because ofnetwork congestion. Economicsbased mechanisms have been utilized in MAS to addressproblems of resource allocation the central theme of economic research 102, 128, 71.Economicsbased approaches, and market mechanisms in particular, are becoming increasingly attractive to MAS researchers both because of the ready availability of underlying formal models, but also because of their potential applicability in Internetbased commerce.In such approaches, agents are assumed to be selfinterested utility maximizers. The areaswhere economicsbased approaches have been applied to MAS research to date are aresource allocation b task allocation and c negotiation. In markets, agents that controlscarce resources labor, raw materials, goods, money agree to share by exchanging someof their respective resources to achieve some common goal. Resources are exchanged withor without explicit prices. Markets assume that exchange prices are publicly known. Inauctions, there is a central auctioneer through which coordination happens. Hence theagents need only exchange minimal amounts of information.Self interested agents, by definition, simply choose a course of action which maximizestheir own utility. In a society of selfinterested agents, it is desired that if each agent maximizes it local utility, then the whole society exhibits desirable behavior  in other words,locally good behavior implies globally good behavior. The goal is to design mechanismsfor selfinterested agents such that if agents follow these mechanisms, the overall systembehavior will be acceptable. This is called mechanism design 7. There are, however,many problems facing such a society of selfinterested agents. First, agents might overuseand hence congest a shared resource, such as a communications network. This problemis called the tragedy of the commons 63. The problem of the tragedy of commons isusually solved by pricing or taxing schemes. Second, a society of selfinterested computa         tional agents can exhibit oscillatory or chaotic behavior 72, 145. Complex behavior canbe exhibited by very simple computational ecosystems. Experimental results indicate thatimperfect knowledge suppresses oscillatory behavior at the expense of reducing performance. In addition, enhancing the decisionmaking abilities of some of the individuals inthe system can either improve or severely degrade overall system performance. Moreover,systems can remain in nonoptimal metastable states for long periods before reaching aglobally optimal state. In 145 a similar problem is considered. Two approaches are evaluated, corresponding to heterogeneous preferences and heterogeneous transaction costs.Empirically, the transaction cost case is shown to provide stability with near optimal payoffs under certain conditions. The final problem with selfinterested systems is that agentsmight be untruthful or deceitful in order to increase their individual utility. This may haveharmful effect on the whole society. Mechanism design techniques have been reported thatmake it beneficial for agents to report the truth 105.4. ApplicationsAgent technology is rapidly breaking out of universities and research labs, and is beginning to be used to solve realworld problems in a range of industrial and commercial applications. Fielded applications exist today, and new systems are being developed at anincreasingly rapid rate. Against this background, the purpose of this section is twofold.First, it aims to identify the main areas where agentbased approaches are currently beingused and to provide pointers to some exemplar systems within these areas section 4.1.Secondly, it aims to anticipate likely future directions of applied agent work and to highlight open issues which need to be addressed if this technology is to fulfill its full potentialsection 4.2.4.1. Key Domains and Exemplar SystemsTo date, the main areas in which agentbased applications have been reported are as follows manufacturing, process control, telecommunication systems, air traffic control, traffic and transportation management, information filtering and gathering, electronic commerce, business process management, entertainment and medical care. Whilst a comprehensive review of all the systems in all of these areas is beyond the scope of this papersee 22, 83, 114, we attempt to outline some of the key systems in these areas.4.1.1. Industrial Applications Industrial applications of agent technology were amongthe first to be developed, and today, agents are being applied in a wide range of industrialsystemsManufacturing Parunak 148 describes the YAMS system Yet Another ManufacturingSystem, which applies the Contract Net Protocol see above to manufacturing control.The basic problem can be described as follows. A manufacturing enterprise is modelled as a hierarchy of workcells. There will, for example, be workcells for milling,lathing, grinding, painting, and so on. These workcells are further grouped into flexible  manufacturing systems FMS, each of which provides a functionality such as assembly, paint spraying, buffering of products, and so on. A collection of such FMSs isgrouped into a factory. A single company or organisation may have many differentfactories, though these factories may duplicate functionality and capabilities. The goalof YAMS is to efficiently manage the production process at these plants. This process is defined by some constantly changing parameters, such as the products to bemanufactured, available resources, time constraints, and so on. In order to achievethis enormously complex task, YAMS adopts a multiagent approach, where each factory and factory component is represented as an agent. Each agent has a collection ofplans, representing its capabilities. The contract net protocol allows tasks i.e., production orders to be delegated to individual factories, and from individual factoriesdown to FMSs, and then to individual work cells. Other systems in this area includethose for configuration design of manufacturing products 32, collaborative design31, 115, scheduling and controlling manufacturing operations 50, 112, 116, 136,controlling a manufacturing robot 113, and determining production sequences for afactory 26, 157.Process Control Process control is a natural application for agents, since process controllers are themselves autonomous reactive systems. It is not surprising, therefore,that a number of agentbased process control applications should have been developed.The best known of these is ARCHON, a software platform for building multiagent systems, and an associated methodology for building applications with this platform 81.ARCHON has been applied in several process control applications, including electricity transportation management the application is in use in northern Spain 29, andparticle accelerator control 117. ARCHON also has the distinction of being one ofthe worlds earliest fieldtested multiagent systems. Other agentbased process control systems have been written for monitoring and diagnosing faults in nuclear powerplants 150, spacecraft control 131, 76, climate control 27 and steel coil processingcontrol 101.Telecommunications Telecommunication systems are large, distributed networks of interconnected components which need to be monitored and managed in realtime. Inwhat is a fiercely competitive market, telecommunication companies and service providersaim to distinguish themselves from their competitors by providing better, quicker ormore reliable services. To achieve this differentiation, they are increasingly turningto stateoftheart software techniques including agentbased approaches. In one suchapplication, 59, negotiating agents are used to tackle the feature interaction problem. Features in a telecommunication system provide added functionality on top of thebasic communication e.g., call forwarding and callerid. As new features are beingadded to the phone network at an ever increasing rate, it is becoming correspondingly more difficult to determine which features interact with, and are inconsistentwith, which other features. Therefore, the traditional approach of analysing servicesat design time and hardwiring in solutions for all possible interaction permutations isdoomed to failure. Given this situation, Griffeth and Velthuijsen 59 decided to adopta different strategy and tackle the problem on an asneeded basis at runtime. Theydid this by employing negotiating agents to represent the different entities who are in         terested in the set up of a call. When conflicts are detected, the agents negotiate withone another to resolve them so that an acceptable call configuration is established.Other problems for which agentbased systems have been constructed include network control 129, 152, transmission and switching 110, service management 19and network management 1, 41, 53, 119. See 153 for a comprehensive review ofthis area.Air Traffic Control Ljunberg and Lucas 95 describe a sophisticated agentrealised airtraffic control system known as OASIS. In this system, which is undergoing field trialsat Sydney airport in Australia, agents are used to represent both aircraft and the variousairtraffic control systems in operation. The agent metaphor thus provides a useful andnatural way of modelling realworld autonomous components. As an aircraft entersSydney airspace, an agent is allocated for it, and the agent is instantiated with theinformation and goals corresponding to the realworld aircraft. For example, an aircraftmight have a goal to land on a certain runway at a certain time. Air traffic control agentsare responsible for managing the system. OASIS is implemented using a beliefdesireintention system called DMARS 56.Transportation Systems The domain of traffic and transportation management is wellsuited to an agentbased approach because of its geographically distributed nature. Forexample, 18 describe a multiagent system for implementing a future car poolingapplication. Here there are two types of agent one representing the customers whorequire or who can offer transportation, and one representing the stations where customers congregate in order to be picked up. Customer agents inform relevant stationsof their requirements when and where they want to go and the station agent determines whether their requests can be accommodated and, if so, which car they shouldbe booked into. Other applications in this area are described in 46.4.1.2. Commercial Applications While industrial applications tend to be highlycomplex,bespoke systems which operate in comparatively small niche areas, commercial applications, especially those concerned with information management, tend to be oriented muchmore towards the mass market.Information Management As the richness and diversity of information available to usin our everyday lives has grown, so the need to manage this information has grown.The lack of effective information management tools has given rise to what is colloquially known as the information overload problem. Put simply, the sheer volume ofinformation available to us via the Internet and WorldWide Web WWW representsa very real problem. The potential of this resource is enormous, but the reality is oftendisappointing. There are many reasons for this. Both human factors such as usersgetting bored or distracted and organisational factors such as poorly organised pageswith no semantic markup conspire against users attempting to use the resource in asystematic way. We can characterise the information overload problem in two ways Information filtering Every day, we are presented with enormous amounts ofinformation via email and usenet news, for example, only a tiny proportion of    which is relevant or important. We need to be able to sort the wheat from the chaff,and focus on the information we need. Information gathering The volume of information available prevents us from actually finding information to answer specific queries. We need to be able to obtaininformation that meets our requirements, even if this information can only be collected from a number of different sites.One important contributing factor to information overload is almost certainly that anend user is required to constantly direct the management process. But there is in principle no reason why such searches should not be carried out by agents, acting autonomously to search the web on behalf of some user. The idea is so compelling thatmany projects are directed at doing exactly this  indeed this is probably the singlemost active area for agent applications. Two typical projects are Maxims is an electronic mail filtering agent which learns to prioritise, delete,forward, sort, and archive mail messages on behalf of a user 97, p35. It worksby looking over the shoulder of a user as he or she works with their email readingprogram, and uses every action the user performs as a lesson. Maxims constantlymakes internal predictions about what a user will do with a message. If thesepredictions turn out to be inaccurate, then Maxims keeps them to itself. But whenit finds it is having a useful degree of success in its predictions, it starts to makesuggestions to the user about what to do. The WARREN financial portfolio management system, is a multiagent system thatintegrates information finding and filtering in the context of supporting a usermanage her financial portfolio. The system consists of agents that cooperativelyselforganize to monitor and track stock quotes, financial news, financial analystsreports, and company earnings reports in order to appraise the portfolio owner ofthe evolving financial picture. The agents not only answer relevant queries butalso continuously monitor available information resources for the occurrence ofinteresting events e.g., a particular stock has gone up past a threshold and alertthe portfolio manager agent or the user.Other applications in this area include WEBMATE 25, a personal assistant that learnsuser interests and on the basis of these compiles a personal newspaper, a personalassistant agent for automating various user tasks on a computer desktop 20, a homepage finder agent 42, a web browsing assistant 94 and an expert locator agent 85.Electronic Commerce Currently, commerce is almost entirely driven by human interactions humans decide when to buy goods, how much they are willing to pay, and soon. But in principle, there is no reason why some commerce cannot be automated.By this, we mean that some commercial decision making can be placed in the handsof agents. Although widespread electronic commerce is likely to lie some distance inthe future, an increasing amount of trade is being undertaken by agents. As an example, 24 describes a simple electronic marketplace called Kasbah. This systemrealises the marketplace by creating buying and selling agents for each good to be         purchased or sold respectively. Commercial transactions then take place by the interactions of these agents. Other commerce applications include BargainFinder 87 anagent which discovers the cheapest CDs, Jango 37 a personal shopping assistant ableto search online stores for product availability and price information, MAGMA 147 avirtual marketplace for electronic commerce, and several agentbased interactive catalogues 130, 142.Business Process Management Company managers make informed decisions based ona combination of judgement and information from many departments. Ideally, all relevant information should be brought together before judgement is exercised. Howeverobtaining pertinent, consistent and uptodate information across a large company isa complex and time consuming process. For this reason, organisations have soughtto develop a number of IT systems to assist with various aspects of the managementof their business processes. Project ADEPT 82 tackles this problem by viewing abusiness process as a community of negotiating, service providing agents. Each agentrepresents a distinct role or department in the enterprise and is capable of providingone or more services. Agents who require a service from another agent enter into anegotiation for that service to obtain a mutually acceptable price, time, and degree ofquality. Successful negotiations result in binding agreements between agents. Otherapplication in this area include a system for supply chain management 51, a system for managing heterogeneous workflows 75 and a system of mobile agents forinterorganisational workflow management 100.4.1.3. Entertainment Applications The leisure industry is often not taken seriously bythe computer science community. Leisure applications are frequently seen as somehowperipheral to the serious applications of computers. And yet leisure applications suchas computer games can be extremely challenging and lucrative. Agents have an obviousrole in computer games, interactive theatre, and related virtual reality applications suchsystems tend to be full of semiautonomous animated characters, which can naturally beimplemented as agents.Games Grand and Cliff 58 built the highly successful Creatures game using agent techniques. Creatures provides a rich, simulated environment containing a number of synthetic agents that a user can interact with in realtime. The agents are intended to besophisticated pets whose development is shaped by their experiences during their lifetime. Wavish et al., 151 also describe several applications of agent technology tocomputer games.Interactive Theatre and Cinema By interactive theatre and cinema, we mean a systemthat allows a user to play out a role analogous to those played by real, human actors inplays or films, interacting with artificial, computer characters that have the behaviouralcharacteristics of real people. Agents that play the part of humans in theatrestyleapplications are often known as believable agents  software programs that providethe illusion of life, thus permitting an audiences suspension of disbelief 6. Anumber of projects have been set up to investigate the development of such agents 146,65, 92, 48.    4.1.4. Medical Applications Medical informatics is a major growth area in computerscience new applications are being found for computers every day in the health industry.It is not surprising, therefore, that agents should be applied in this domain. Two of theearliest applications are in the areas of patient monitoring and health care.Patient Monitoring The GUARDIAN system 67 is intended to help manage patient carein the Surgical Intensive Care Unit SICU. The system was motivated by two concernsfirst, that the patient care model in a SICU is essentially that of a team, where a collection of experts with distinct areas of expertise cooperate to organise patient healthcare and second, that one of the most important factors in good SICU patient healthcare is the adequate sharing of information between members of the critical care team.In particular, specialists tend to have very little opportunity to monitor the minutebyminute status of a patient this task tends to fall to nurses, who, in contrast, often donot have the expertise to interpret the information they obtain in the way that an appropriate expert would. The GUARDIAN system distributes the SICU patient monitoringfunction among a number of agents, of three different types perceptionaction agents responsible for the interface between GUARDIAN and the world, mapping raw sensor input into a usable symbolic form, and translating action requests from Guardianinto raw effector control commands reasoning agents  responsible for organising thesystems decision making process and control agents  of which there will only everbe one, with overall, toplevel control of the system. These agents are organised intohierarchies, and the system as a whole is closely based on the blackboard model ofcontrol.Health Care A prototypical agentbased distributed medical care system is describedin 70. This system is designed to integrate the patient management process, whichtypically involves many individuals. For example, a general practitioner may suspectthat a patient has breast cancer, but this suspicion cannot be confirmed or rejectedwithout the assistance of a hospital specialist. If the specialist confirms the hypothesis,then a care programme must be devised for treating the patient, involving the resourcesof other individuals. The system allows a natural representation of this process, withagents mapped onto the individuals and, potentially, organisations involved in the patient care process.4.2. Future DirectionsThe aforementioned systems can be considered as the first wave of agentbased applications. In addition to providing solutions to meet realworld needs, they demonstrate thatagentbased systems are a useful and powerful solution technology2. That is, the conception of multiple autonomous problem solvers interacting in various ways to achieveindividual and system goals is a useful software engineering abstraction just as objectsand abstract data types are. The abstraction is useful to the extent that it enables softwareengineers to do more or to do things more cheaply.However, these developments also show that designing and building agent systems isdifficult. They have all the problems associated with building traditional distributed, concurrent systems, and have the additional difficulties which arise from having flexible and          sophisticated interactions between autonomous problem solving components. For thesereasons, most extant agent system applications are built by, or in consultation with, designers and developers who are themselves active in the agent research community. Whilstthis may suffice for a niche software technology, we feel agents have the potential to befar more ubiquitous than this. Indeed, we firmly believe that agent technology has thepotential to enter the mainstream of software engineering solutions in the same way thatobjectoriented technology has. However for this to occur, it must be possible for professional software engineers to design and build multiagent systems. The big question thenbecomes one of how this is achieved.At this time, there are two major technical impediments to the widespread adoption ofagent technology i the lack of a systematic methodology enabling designers to clearlyspecify and structure their applications as multiagent systems and ii the lack of widelyavailable industrialstrength multiagent system toolkits. The former means that most extant applications have been designed in a fairly ad hoc manner  either by borrowing amethodology typically an objectoriented one and trying to shoehorn it to the multiagentcontext or by working without a methodology and designing the system based on intuitionand past experience. Clearly this situation is unsatisfactory. What is required is a systematic means of analysing the problem, of working out how it can be best structured as amultiagent system, and then determining how the individual agents can be structured. Thelatter impediment means that most multiagent system projects expend significant development effort building up basic infrastructure before the main thrust of agent and interagentdevelopment can commence. Again, this is an unsustainable position. The position can bealleviated to a certain extent by exploiting existing technologies such as CORBA as andwhere appropriate  rather than reinventing the wheel as often happens at the moment.However, we believe that still greater support is needed for the process of building agentlevel features. Thus, a toolkit or a flexible set of tools is required, providing facilities forspecifying an agents problem solving behaviour, specifying how and when agents shouldinteract, and visualising and debugging the problem solving behaviour of the agents and ofthe entire system.The other major impediment to the widespread adoption of agent technology has a socialas well as a technical aspect. For individuals to be comfortable with the idea of delegatingtasks to agents, they must first trust them. Both individuals and organisations will thusneed to become more accustomed and confident with the notion of autonomous softwarecomponents, if they are to become widely used. Users have to gain confidence in the agentsthat work on their behalf, and this process can take time. During this period, the agent muststrike balance between continually seeking guidance and needlessly distracting the userand never seeking guidance and exceeding its authority. Put crudely, an agent must knowits limitations.5. Concluding RemarksThe field of autonomous agents and multiagent systems is a vibrant and rapidly expandingarea of research and development. It represents a melting pot of ideas originating from suchareas as distributed computing, objectoriented systems, software engineering, artificialintelligence, economics, sociology, and organisational science. At its core is the concept   of autonomous agents interacting with one another for their individual andor collectivegood. This basic conceptual framework has become common currency in a range of closelyrelated disciplines, and offers a natural and powerful means of analysing, designing, andimplementing a diverse range of software solutions.Over the past two decades, a number of significant conceptual advances have been madein both the design and implementation of individual autonomous agents, and in the wayin which they interact with one another. Moreover, these technologies are now beginningto find their way into commercial products and realworld software solutions. However,despite the obvious potential, there are a number of fundamental research and developmentissues which remain. As we have indicated, these issues cover the whole gamut of theagents field, and only when robust and scalable solutions have been found will the fullpotential of agentbased systems be realised.Notes1. It should be noted that some recent game theoretic models are directly motivated by considerations of dropping or relaxing some of these assumptions. Although there has been interesting progress reported in theliterature e.g., 84, the fundamental framework and methodology of game theory remains almost the sameand it might be too early to tell whether these new results will reshape the current game theoretic framework.2. This is true even though most implemented systems use techniques which are towards the simpler end ofthose reported in the literature.References1. M. R. Adler, A. B. Davis, R. Weihmayer, and R. W. Worrest. Conflict resolution strategies for nonhierarchical distributed agents. In L. Gasser and M. Huhns, editors, Distributed Artificial Intelligence Volume II,pages 139162. Pitman Publishing London and Morgan Kaufmann San Mateo, CA, 1989.2. G. Agha. ACTORS A Model of Concurrent Computation in Distributed Systems. The MIT Press Cambridge, MA, 1986.3. G. Agha and C. Hewitt. Concurrent programming using actors. In Y. Yonezawa and M. Tokoro, editors,ObjectOriented Concurrent Programming. MIT Press, 1988.4. G. Agha, P. Wegner, and A. Yonezawa, editors. Research Directions in Concurrent ObjectOriented Programming. The MIT Press Cambridge, MA, 1993.5. J. F. Allen, J. Hendler, and A. Tate, editors. Readings in Planning. Morgan Kaufmann Publishers SanMateo, CA, 1990.6. J. Bates. The role of emotion in believable agents. Communications of the ACM, 377122125, July 1994.7. K. Binmore. Fun and Games A Text on Game Theory. D. C. Heath and Company Lexington, MA, 1992.8. R. P. Bonasso, D. Kortenkamp, D. P. Miller, and M. Slack. Experiences with an architecture for intelligent,reactive agents. In M. Wooldridge, J. P. Muller, and M. Tambe, editors, Intelligent Agents II LNAI Volume1037, pages 187202. SpringerVerlag Berlin, Germany, 1996.9. A. H. Bond and L. Gasser, editors. Readings in Distributed Artificial Intelligence. Morgan KaufmannPublishers San Mateo, CA, 1988.10. G. Booch. ObjectOriented Analysis and Design second edition. AddisonWesley Reading, MA, 1994.11. J. Bradshaw, editor. Software Agents. The MIT Press Cambridge, MA, 1997.12. M. E. Bratman. Intentions, Plans, and Practical Reason. Harvard University Press Cambridge, MA, 1987.13. M. E. Bratman. Planning and the stability of intentions. Minds and Machines, 2116, 1992.14. M. E. Bratman, D. J. Israel, and M. E. Pollack. Plans and resourcebounded practical reasoning. Computational Intelligence, 4349355, 1988.15. R. A. Brooks. A robust layered control system for a mobile robot. IEEE Journal of Robotics and Automation, 211423, 1986.         16. R. A. Brooks. Intelligence without reason. In Proceedings of the Twelfth International Joint Conference onArtificial Intelligence IJCAI91, pages 569595, Sydney, Australia, 1991.17. R. A. Brooks. Intelligence without representation. Artificial Intelligence, 47139159, 1991.18. B. Burmeister, A. Haddadi, and G. Matylis. Applications of multiagent systems in traffic and transportation. IEE Transactions on Software Engineering, 14415160, February 1997.19. M. Busuoic and D. Griffiths. Cooperating intelligent agents for service management in communicationsnetworks. In S. M. Deen, editor, Proceedings of the 1993 Workshop on Cooperating Knowledge BasedSystems CKBS93, pages 213226. DAKE Centre, University of Keele, UK, 1994.20. A. Caglayan, M. Snorrason, J. Mazzu J. Jacoby, R. Jones, and K. Kumar. Open sesame  a learning agentengine. Applied Artificial Intelligence, 115393412, 1997.21. S. Cammarata, D. McArthur, and R. Steeb. Strategies of cooperation in distributed problem solving. InProceedings of the Eighth International Joint Conference on Artificial Intelligence IJCAI83, Karlsruhe,Federal Republic of Germany, 1983.22. B. Chaibdraa. Industrial applications of distributed ai. Communications of the ACM, 38114753, 1995.23. D. Chapman. Planning for conjunctive goals. Artificial Intelligence, 32333378, 1987.24. A. Chavez and P. Maes. Kasbah An agent marketplace for buying and selling goods. In Proceedingsof the First International Conference on the Practical Application of Intelligent Agents and MultiAgentTechnology PAAM96, pages 7590, London, UK, 1996.25. Liren Chen and Katia Sycara. Webmate  A personal agent for browsing and searching. In Proceedings ofthe Second International Conference on Autonomous Agents Agents 98, MinneapolisSt Paul, MN, May1998.26. K. T. Chung and C. H. Wu. Dynamic scheduling with intelligent agents. Metra Application Note 105,Metra, Palo Alto, CA, 1997.27. S. H. Clearwater, R. Costanza, M. Dixon, and B. Schroeder. Saving energy using marketbased control. InS. H. Clearwater, editor, Market Based Control, pages 253273. World Scientific Singapore, 1996.28. P. R. Cohen and H. J. Levesque. Teamwork. Nous, 254487512, 1991.29. J. M. Corera, I. Laresgoiti, and N. R. Jennings. Using archon, part 2 Electricity transportation management.IEEE Expert, 1167179, 1996.30. D. D. Corkill and V. R. Lesser. The use of metalevel control for coordination in a distributed problemsolving network. In Proceedings of the Eighth International Joint Conference on Artificial IntelligenceIJCAI83, pages 748756, Karlsruhe, Germany, 1983.31. M. R. Cutosky, R. E. Fikes R. S. Engelmore, M. R. Genesereth, W. S. Mark T. Gruber, J. M. Tenenbaum,and J. C. Weber. PACT An experiment in integrating concurrent engineering systems. IEEE Transactionson Computers, 2612837, 1993.32. T. P. Darr and W. P. Birmingham. An attributespace representation and algorithm for concurrent engineering. AI EDAM, 1012135, 1996.33. Davis, R. and R. G. Smith. Negotiation as a metaphor for distributed problem solving. Artificial Intelligence, 2063100, 1983.34. K. Decker and V. Lesser. Designing a family of coordination algorithms. In Proceedings of the FirstInternational Conference on MultiAgent Systems ICMAS95, pages 7380, San Francisco, CA, June1995.35. K. Decker, A. Pannu, K. Sycara, and M. Williamson. Designing behaviors for information agents. InProceedings of the First International Conference on Autonomous Agents Agents97, pages 404412,Marina del Rey, CA, February 1997.36. K. Decker, K. Sycara, and M. Williamson. Middleagents for the internet. In Proceedings of the FifteenthInternational Joint Conference on Artificial Intelligence IJCAI97, Nagoya, Japan, 1997.37. R. Doorenbos, O. Etzioni, and D. Weld. A scaleable comparisonshopping agent for the world wide web.In Proceedings of the First International Conference on Autonomous Agents Agents 97, pages 3948,Marina del Rey, CA, 1997.38. E. H. Durfee. Coordination of Distributed Problem Solvers. Kluwer Academic Publishers Boston, MA,1988.39. E. H. Durfee and V. Lesser. Negotiating task decomposition and allocation using partial global planning.In L. Gasser and M. Huhns, editors, Distributed Artificial Intelligence Volume II, pages 229244. PitmanPublishing London and Morgan Kaufmann San Mateo, CA, 1989.40. R. Engelmore and T. Morgan, editors. Blackboard Systems. AddisonWesley Reading, MA, 1988.41. B. Esfandiari, G. Deflandre, and J. Quinqueton. An interface agent for network supervision. In Proceedingsof the ECAI96 Workshop on Intelligent Agents for Telecom Applications, Budapest, Hungary, 1996.  42. O. Etzioni. Moving up the information food chain Deploying softbots on the worldwide web. In Proceedings of the Thirteenth National Conference on Artificial Intelligence AAAI96, Portland, OR, 1996.43. I. A. Ferguson. TouringMachines An Architecture for Dynamic, Rational, Mobile Agents. PhD thesis,Clare Hall, University of Cambridge, UK, November 1992. Also available as Technical Report No. 273,University of Cambridge Computer Laboratory.44. I. A. Ferguson. Integrated control and coordinated behaviour A case for agent models. In M. Wooldridgeand N. R. Jennings, editors, Intelligent Agents Theories, Architectures, and Languages LNAI Volume890, pages 203218. SpringerVerlag Berlin, Germany, January 1995.45. R. E. Fikes and N. Nilsson. STRIPS A new approach to the application of theorem proving to problemsolving. Artificial Intelligence, 52189208, 1971.46. K. Fischer, J. P. Muller, and M. Pischel. Cooperative transportation scheduling An application domain fordai. Applied Artificial Intelligence, 101134, 1996.47. M. Fisher. Representing and executing agentbased systems. In M. Wooldridge and N. R. Jennings, editors,Intelligent Agents Theories, Architectures, and Languages LNAI Volume 890, pages 307323. SpringerVerlag Berlin, Germany, January 1995.48. L. N. Foner. Entertaining agents A sociological case study. In Proceedings of the First InternationalConference on Autonomous Agents Agents 97, pages 122129, Marina del Rey, CA, 1997.49. The Foundation for Intelligent Physical Agents. See httpdrogo.cselt.stet.itfipa.50. K. Fordyce and G. G. Sullivan. Logistics management system Integrating decision technologies for dispatch scheduling in semiconductor manufacturing. In M. Zweben and M. S. Fox, editors, IntelligentScheduling, pages 473516. Morgan Kaufmann Publishers San Mateo, CA, 1994.51. M. S. Fox, J. F. Chionglo, and M. Barbuceanu. The integrated supply chain management system. Technicalreport, Department of Industrial Engineering, University of Toronto, 1993.52. S. Franklin and A. Graesser. Is it an agent, or just a program In J. P. Muller, M. Wooldridge, andN. R. Jennings, editors, Intelligent Agents III LNAI Volume 1193, pages 2136. SpringerVerlag Berlin,Germany, 1997.53. F. J. Garijo and D. Hoffmann. A multiagent architecture for operation and maintenance of telecommunications networks. In Proceedings of the Twelfth International Conference on AI, Expert Systems and NaturalLanguage, pages 427436, Avignon, France, 1992.54. L. Gasser. Social conceptions of knowledge and action. Artificial Intelligence, 431, 1991.55. M. P. Georgeff. Communication and interaction in multiagent planning. In Proceedings of the ThirdNational Conference on Artificial Intelligence AAAI83, Washington, D.C., 1983.56. M. P. Georgeff. Distributed multiagent reasoning systems dmars. Technical report, Australian AI Institute, Level 6, 171 La Trobe Street, Melbourne, Australia, 1994.57. M. P. Georgeff and A. L. Lansky. Reactive reasoning and planning. In Proceedings of the Sixth NationalConference on Artificial Intelligence AAAI87, pages 677682, Seattle, WA, 1987.58. S. Grand and D. Cliff. Creatures Entertainment software agents with artificial life. Autonomous Agentsand MultiAgent Systems, 12, 1998.59. N. D. Griffeth and H. Velthuijsen. The negotiating agents approach to runtime feature interaction resolution. In L. G. Bouma and H. Velthuijsen, editors, Feature Interactions in Telecommunications Systems,pages 217235. IOS Press, 1994.60. Barbara Grosz and Sarit Kraus. Collaborative plans for complex group actions. Artificial Intelligence,8622693571, 1996.61. Barbara Grosz and Candace Sidner. Plans for discourse. In Phil Cohen, Jerry Morgan, and Martha Pollack,editors, Intentions in Communication, pages 417444. MIT Press, Cambdrige, MA, 1990.62. T. R. Gruber. A translation approach to portable ontologies. Knowledge Acquisition, 52199220, 1993.63. G. Hardin. The tragedy of commons. Science, 1621243, 1968.64. B. HayesRoth. A blackboard architecture for control. Artificial Intelligence, 26, 1985.65. B. HayesRoth. Agents on stage Advancing the state of the art in AI. In Proceedings of the FourteenthInternational Joint Conference on Artificial Intelligence IJCAI95, pages 967971, Montreal, Quebec,Canada, August 1995.66. B. HayesRoth and L. Brownston. Multiagent collaboration in directed improvisation. In Proceedings ofthe First International Conference on MultiAgent Systems ICMAS95, pages 148154, San Francisco,CA, June 1995.67. B. HayesRoth, M. Hewett, R. Washington, R. Hewett, and A. Seiver. Distributing intelligence withinan individual. In L. Gasser and M. Huhns, editors, Distributed Artificial Intelligence Volume II, pages385412. Pitman Publishing London and Morgan Kaufmann San Mateo, CA, 1989.         68. C. Hewitt and J. Inman. Dai betwist and between From intelligent agents to open systems science. IEEETrans. SMC, 21614091418, 1991.69. Junling Hu and Michael P. Wellman. Selffulfilling bias in multiagent learning. In Proceedings of theSecond International Conference on MultiAgent Systems ICMAS96, Kyoto, Japan, 1996.70. J. Huang, N. R. Jennings, and J. Fox. An agentbased approach to health care management. AppliedArtificial Intelligence, 94401420, 1995.71. B. A. Huberman and S. H. Clearwater. A multiagent system for controlling building environments. InProceedings of the First International Conference on MultiAgent Systems ICMAS95, pages 171176,San Francisco, CA, June 1995.72. B. A. Huberman and T. Hogg. The behavior of computational ecologies. In B. A. Huberman, editor, TheEcology of Computation. NorthHolland, Amsterdam, 1988.73. M. Huhns, U. Mukhopadhyay, and L. M. Stephens. DAI for document retrieval The MINDS project.In M. Huhns, editor, Distributed Artificial Intelligence, pages 249284. Pitman Publishing London andMorgan Kaufmann San Mateo, CA, 1987.74. M. Huhns and M. P. Singh, editors. Readings in Agents. Morgan Kaufmann Publishers San Mateo, CA,1998.75. M. N. Huhns and M. P. Singh. Managing heterogeneous transaction workflows with cooperating agents.In N. R. Jennings and M. Wooldridge, editors, Agent Technology Foundations, Applications and Markets.SpringerVerlag Berlin, Germany, 1998.76. F. F. Ingrand, M. P. Georgeff, and A. S. Rao. An architecture for realtime reasoning and system control.IEEE Expert, 76, 1992.77. N. R. Jennings. Commitments and conventions The foundation of coordination in multiagent systems.The Knowledge Engineering Review, 83223250, 1993.78. N. R. Jennings. Specification and implementation of a belief desire jointintention architecture for collaborative problem solving. Journal of Intelligent and Cooperative Information Systems, 23289318,1993.79. N. R. Jennings. Controlling cooperative problem solving in industrial multiagent systems using jointintentions. Artificial Intelligence, 742, 1995.80. N. R. Jennings and J. R. Campos. Towards a sociallevel characterisation of socially responsible agents.IEE Transactions on Software Engineering, 14411125, February 1997.81. N. R. Jennings, J. Corera, I. Laresgoiti, E. H. Mamdani, F. Perriolat, P. Skarek, and L. Z. Varga. UsingARCHON to develop realworld DAI applications for electricity transportation management and particleacceleration control. IEEE Expert, 1166088, December 1996.82. N. R. Jennings, P. Faratin, M. J. Johnson, T. J. Norman, P. OBrien, and M. E. Wiegand. Agentbasedbusiness process management. International Journal of Cooperative Information Systems, 523105130,1996.83. N. R. Jennings and M. Wooldridge. Applying agent technology. In N. R. Jennings and M. Wooldridge,editors, Agent Technology Foundations, Applications, and Markets. SpringerVerlag Berlin, Germany,1998.84. J. S. Jordan. The exponential covergence of bayesian learning in normal form games. Games and EconomicBehavior, 4202217, 1992.85. H. Kautz, B. Selman, and M. Shah. The hidden web. AI Magazine, 1822735, 1997.86. S. Kraus, J. Wilkenfeld, and G. Zlotkin. Multiagent negotiation under time constraints. Artificial Intelligence, 752297345, 1995.87. B. Krulwich. The BargainFinder agent Comparison price shopping on the internet. In J. Williams, editor,Bots, and other Internet Beasties, pages 257263. Macmillan Computer Publishing Indianapolis, 1996.88. D. R. Kuokka and L. P. Harada. Issues and extensions for information matchmaking protocols. International Journal of Cooperative Information Systems, 523251274, 1996.89. Y. Lesperance, H. J. Levesque, F. Lin, D. Marcu, R. Reiter, and R. B. Scherl. Foundations of a logicalapproach to agent programming. In M. Wooldridge, J. P. Muller, and M. Tambe, editors, Intelligent AgentsII LNAI Volume 1037, pages 331346. SpringerVerlag Berlin, Germany, 1996.90. V. R. Lesser, E. H. Durfee, and D. D. Corkill. Trends in cooperative distributed problem solving. IEEETransaction on Knowledge and Data Engineering, 116383, 1989.91. V.R. Lesser. A retrospective view of fac distributed problem solving. IEEE Transactions on Systems, Man,and Cybernetics, Special Issue on Distributed Artificial Intelligence, 21613471362, December 1991. 92. J. C. Lester and B. A. Stone. Increasing believability in animated pedagogical agents. In Proceedings ofthe First International Conference on Autonomous Agents Agents 97, pages 1621, Marina del Rey, CA,1997.93. H. J. Levesque, P. R. Cohen, and J. H. T. Nunes. On acting together. In Proceedings of the Eighth NationalConference on Artificial Intelligence AAAI90, pages 9499, Boston, MA, 1990.94. H. Lieberman. Letizia An agent that assists web browsing. In Proceedings of the Fourteenth InternationalJoint Conference on Artificial Intelligence IJCAI95, pages 924929, Montreal, Quebec, Canada, August1995.95. M. Ljunberg and A. Lucas. The OASIS air traffic management system. In Proceedings of the SecondPacific Rim International Conference on AI PRICAI92, Seoul, Korea, 1992.96. Ovum Ltd. Intelligent agents The next revolution in software, 1994.97. P. Maes. Agents that reduce work and information overload. Communications of the ACM, 3773140,July 1994.98. J. Mayfield, Y. Labrou, and T. Finin. Evaluating KQML as an agent communication language. InM. Wooldridge, J. P. Muller, and M. Tambe, editors, Intelligent Agents II LNAI Volume 1037, pages347360. SpringerVerlag Berlin, Germany, 1996.99. F. G. McCabe and K. L. Clark. April  agent process interaction language. In M. Wooldridge and N. R.Jennings, editors, Intelligent Agents Theories, Architectures, and Languages LNAI Volume 890, pages324340. SpringerVerlag Berlin, Germany, January 1995.100. M. Merz, B. Lieberman, and W. Lamersdorf. Using mobile agents to support interorganizational workflowmanagement. Applied Artificial Intelligence, 116551572, 1997.101. K. Mori, H. Torikoshi, K. Nakai, and T. Masuda. Computer control system for iron and steel plants. HitachiReview, 374251258, 1988.102. T. Mullen and M. P. Wellman. Some issues in the design of marketoriented agents. In M. Wooldridge,J. P. Muller, and M. Tambe, editors, Intelligent Agents II LNAI 1037, pages 283298. SpringerVerlagHeidelberg, Germany, 1996.103. J. P. Muller. The Design of Intelligent Agents LNAI Volume 1177. SpringerVerlag Berlin, Germany,1997.104. J. P. Muller and M. Pischel. Modelling interacting agents in dynamic environments. In Proceedings ofthe Eleventh European Conference on Artificial Intelligence ECAI94, pages 709713, Amsterdam, TheNetherlands, 1994.105. Roger B. Myerson. Credible negotiation statements and coherent plans. Journal of economic theory,48264303, 1989.106. N. Negroponte. Being Digital. Hodder and Stoughton, 1995.107. A. Newell. The knowledge level. Artificial Intelligence, 18182127, 1982.108. A. Newell and H. A. Simon. GPS A program that simulates human thought. In Lernende Automaten. R.Oldenbourg, KG, 1961.109. Allen Newell. Unified Theories of Cognition. Harvard University Press, 1990.110. Y. Nishibe, K. Kuwabara, T. Suda, and T. Ishida. Distributed channel allocation in atm networks. InProceedings of the IEEE Globecom Conference, pages 12.2.112.2.7, Houston, TX., 1993.111. G. M. P. OHare and N. R. Jennings, editors. Foundations of Distributed Artificial Intelligence. WileyInterscience New York, 1996.112. E. Oliveira, J. M. Fonseca, and A. SteigerGarcao. MACIV A DAI based resource management system.Applied Artificial Intelligence, 116525550, 1997.113. L. Overgaard, H. G. Petersen, and J. W. Perram. Reactive motion planning a multiagent approach. AppliedArtificial Intelligence, 1013552, 1996.114. H. V. D. Parunak. Industrial and practical applications of dai. In G. Wei, editor, MultiAgent Systems. TheMIT Press Cambridge, MA, 1998.115. H. V. D. Parunak, A. D. Baker, and S. J. Clark. The aaria agent architecture An example of requirementsdriven agentbased system design. In Proceedings of the First International Conference on AutonomousAgents Agents 97, pages 482483, Marina del Rey, CA, 1997.116. H. V. D. Parunak, A. Ward, M. Fleischer, and J. Sauter. A marketplace of design agents for distributedconcurrent setbased design. In Proceedings of the Fourth International Conference on Concurrent Engineering Research and Applications, 1997.117. F. Perriolat, P. Skarek, L. Z. Varga, and N. R. Jennings. Using archon Particle accelerator control. IEEEExpert, 1168086, 1996.         118. M. E. Pollack and M. Ringuette. Introducing the Tileworld Experimentally evaluating agent architectures.In Proceedings of the Eighth National Conference on Artificial Intelligence AAAI90, pages 183189,Boston, MA, 1990.119. A. S. Rao and M. P. Georgeff. Intelligent realtime network management. In Proceedings of the TenthInternational Conference on AI, Expert Systems and Natural Language, Avignon, France, 1990.120. A. S. Rao and M. P. Georgeff. Modeling rational agents within a BDIarchitecture. In R. Fikes andE. Sandewall, editors, Proceedings of Knowledge Representation and Reasoning KRR91, pages 473484. Morgan Kaufmann Publishers San Mateo, CA, April 1991.121. A. S. Rao and M. P. Georgeff. An abstract architecture for rational agents. In C. Rich, W. Swartout, andB. Nebel, editors, Proceedings of Knowledge Representation and Reasoning KRR92, pages 439449,1992.122. C. Rich and C. Sidner. Collagen When agents collaborate with people. In Proceedings of the InternationalConference on Autonomous Agents Agents 97, Marina del Rey, CA, 1997.123. J. S. Rosenschein. Rational Interaction Cooperation Among Intelligent Agents. PhD thesis, ComputerScience Department, Stanford University, Stanford, CA 94305, 1985.124. J. S. Rosenschein and G. Zlotkin. Rules of Encounter Designing Conventions for Automated NegotiationAmong Computers. MIT Press, Boston, MA, 1994.125. S. Russell and P. Norvig. Artificial Intelligence A Modern Approach. PrenticeHall, 1995.126. S. Russell and D. Subramanian. Provably boundedoptimal agents. Journal of AI Research, 2575609,1995.127. T. Sandholm and V. Lesser. Issues in automated negotation and electronic commerce extending the contract net protocol. In Proc. First Int. Conf. on Multiagent Systems ICMAS95, June 1995.128. Tuomas Sandholm. An implementation of the contract net protocol based on marginal cost calculations. InProceedings of the Eleventh National Conference on Artificial Intelligence, pages 256262, Washington,July 1993.129. R. Schoonderwoerd, O. Holland, and J. Bruten. Antlike agents for load balancing in telecommunicationsnetworks. In Proceedings of the First International Conference on Autonomous Agents Agents 97, pages209216, Marina del Rey, CA, 1997.130. R. Schrooten and W. van de Velde. Software agent foundation for dynamic interactive electronic catalogues.Applied Artificial Intelligence, 115459482, 1997.131. U. M. Schwuttke and A. G. Quan. Enhancing performance of cooperating agents in realtime diagnosticsystems. In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence IJCAI93, pages 332337, Chambery, France, 1993.132. J. R. Searle. Speech Acts An Essay in the Philosophy of Language. Cambridge University Press Cambridge, England, 1969.133. Y. Shoham. Agentoriented programming. Artificial Intelligence, 6015192, 1993.134. E. H. Shortliffe. ComputerBased Medical Consultations. Elsevier Science Publishers B.V. Amsterdam,The Netherlands, 1976.135. I. Smith and P. Cohen. Towards semantics for an agent communication language based on speech acts.In Proceedings of the Thirteenth National Conference on Artificial Intelligence AAAI96, Portland, OR,1996.136. F. Sprumont and J. P. Muller. Amacoia A multiagent system for designing flexible assembly lines. AppliedArtificial Intelligence, 116573590, 1997.137. L. Steels. Cooperation between distributed agents through self organization. In Y. Demazeau and J.P. Muller, editors, Decentralized AI  Proceedings of the First European Workshop on Modelling Autonomous Agents in a MultiAgent World MAAMAW89, pages 175196. Elsevier Science Publishers B.V.Amsterdam, The Netherlands, 1990.138. P. Stone and M. Veloso. Multiagent systems A survey from the machine learning perspective. IEEETransactions on Knowledge and Data Engineering, Forthcoming, 1998.139. K. Sycara. Negotiation planning An AI approach. European Journal of Operational Research, 46216234, 1990.140. K. P. Sycara. Resolving goal conflicts via negotiation. In Proceedings of the Seventh National Conferenceon Artificial Intelligence AAAI88, St. Paul, MN, 1988.141. K. P. Sycara. Persuasive argumentation in negotiation. Theory and Decision, 28203242, 1990.142. K. Takahashi, Y. Nishibe, I. Morihara, and F. Hattori. Intelligent pages Collecting shop and serviceinformation with software agents. Applied Artificial Intelligence, 116489500, 1997.  143. M. Tambe. Recursive agent and agent group tracking in a realtime, dynamic environment. In Proceedingsof the First International Conference on MultiAgent Systems, pages 368375, San Francisco, June 1995.AAAI Press.144. Milind Tambe. Towards flexible teamwork. Journal of Artificial Intelligence Research, 783124, 1997.145. J. Thomas and K. Sycara. Stability and heterogeneity in multi agent systems. In Proceedings of the ThirdInternational Conference on MultiAgent Systems ICMAS98, Paris, France, July, 1998.146. R. Trappl and P. Petta. Creating Personalities for Synthetic Actors. SpringerVerlag Berlin, Germany,1997.147. M. Tsvetovatyy, M. Gini, B. Mobasher, and Z. Wieckowski. MAGMA An agentbased virtual marketplacefor electronic commerce. Applied Artificial Intelligence, 116501524, 1997.148. H. Van Dyke Parunak. Manufacturing experience with the contract net. In M. Huhns, editor, DistributedArtificial Intelligence, pages 285310. Pitman Publishing London and Morgan Kaufmann San Mateo,CA, 1987.149. Manuela Veloso, Peter Stone, Kwun Han, and Sorin Achim. Cmunited A team of robotic soccer agentscollaborating in an adversarial environment. In Proceedings of the The First International Workshop onRoboCup, Nagoya, Japan, August 1997. JCAI97.150. H. Wang and C. Wang. Intelligent agents in the nuclear industry. IEEE Computer, 30112834, 1997.151. P. Wavish and M. Graham. A situated action approach to implementing characters in computer games.Applied Artificial Intelligence, 1015374, 1996.152. R. Weihmayer, I. Ghaznavi, and P. Sheridan. A distributed architecture for cooperative management ofstrategic communications networks. In Proceedings of the IEE MILCOM93 Conference, Boston, MA,1993.153. R. Weihmayer and H. Velthuijsen. Intelligent agents in telecommunications. In N. R. Jennings and M. J.Wooldridge, editors, Agent Technology Foundations, Applications and Markets. SpringerVerlag Berlin,Germany, 1998.154. G. Wei, editor. MultiAgent Systems. The MIT Press Cambridge, MA, 1998.155. D. Wilkins. Practical Planning Extending the Classical AI Planning Paradigm. Morgan KaufmannPublishers San Mateo, CA, 1988.156. M. Wooldridge. Agentbased software engineering. IEE Transactions on Software Engineering, 14412637, February 1997.157. M. Wooldridge, S. Bussmann, and M. Klosterberg. Production sequencing as negotiation. In Proceedingsof the First International Conference on the Practical Application of Intelligent Agents and MultiAgentTechnology PAAM96, pages 709726, London, UK, April 1996.158. M. Wooldridge and N. R. Jennings. Intelligent agents Theory and practice. The Knowledge EngineeringReview, 102115152, 1995.159. Dajun Zeng and Katia Sycara. Benefits of learning in negotiation. In Proceedings of AAAI97, Providence,Rhode Island, U.S.A., 1997.160. Dajun Zeng and Katia Sycara. Bayesian learning in negotiation. International Journal of HumanComputerStudies, 48, in press 1998.
