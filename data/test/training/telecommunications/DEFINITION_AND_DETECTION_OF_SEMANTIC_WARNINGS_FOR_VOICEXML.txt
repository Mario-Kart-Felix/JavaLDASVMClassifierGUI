DEFINITION AND DETECTION OF SEMANTIC WARNINGS FORVOICEXMLPattara Leelaprute and Tohru KikunoGraduate School of Information Science and Technology,Osaka University15 Yamadaoka Suitashi, Osaka, JAPAN 5650871email pattaraist.osakau.ac.jp, kikunoist.osakau.ac.jpMasahide Nakamura and Kenichi MatsumotoGraduate School of Information Science,Nara Institute of Science and Technology, Japan89165 Takayama Ikoma, Nara, JAPAN 6300192email masanis.naist.jp, matumotois.naist.jpABSTRACTVoiceXML is an XMLbased language to describe interactive voice response services, which brings the advantagesof Webbased development and delivery. Although the syntax of VoiceXML is prescribed by the VoiceXML DTD andthe schema, the compliance with them is not a sufficientcondition for the correctness of a VoiceXML script.To detect the semantic flaws, we propose semanticwarnings for VoiceXML. Focusing on the semantic aspects of voice interactive services, we define nine classesof warnings. Then, a warning detection framework withXPath and XSLT is presented. We also evaluate the advantages and limitations of the proposed method by qualitativediscussions.KEY WORDSVoiceXML, semantic warnings, detection, XPath, XSLT1 IntroductionIn developing programmable services with the Internet,there is a major trend of using XML for representingplatformindependent data, or even application programsthemselves called XML scripts. Many XMLbased languages are currently standardized to specify various services, for instance WSDL 20 for Web Services, ebXML3 for electric commerce, CPL 9 for VoIP. The use of anXMLbased language significantly improves the portabilityand interoperability of the programmable parts includingdata and programs of the service.However, most XMLbased languages are definedby DTDs Document Type Definitions or XML schemas,which cover only syntax of the target language. In general, the DTD and the schema are not expressive enough tospecify semantics of the service. Therefore, there is a greatpossibility that nonexpert developers make semantic flawsin the service logic, which cannot be validated by the DTDor the schema.This paper especially focuses on VoiceXML VoiceExtensible Markup Language 17 18, which is designedto create services that can interact with user by voice orthe DTMF dialtone multi frequency, i.e., touchtone keypad. Many VoiceXML platforms are released for business use purpose e.g., 515. Services can build uponexisting Internet standards and best practices to deliver acomplete voice solution to the customers by integratingVoiceXML with their existing Web infrastructure. The syntax of VoiceXML is defined by the VoiceXML DTD and theschema. However, as far as we know, there is no definitionor guideline by which developers can validate the semanticcorrectness of VoiceXML scripts.The goal of this paper is to propose semantic warnings of VoiceXML, which are a simple guideline to detectthe source of semantic flaws for any VoiceXML scripts. Focusing on the nature of voice interactive services, we definenine warning classes. Exploiting a practical VoiceXMLplatform, OptimTalk 11, we show that each warning canlead the platform to a problematic behavior.We also present a framework to detect the semanticwarnings. For this, we characterize each semantic warningas a problematic XML structure, and distill it using XPath21. Combining the XPath representation with XSLT 22,we implement a lightweightand generic warning detectionframework wellfeasible to unknown warnings that will bediscovered in the future.The proposed method is evaluated from the viewpoints of impact of warnings, property coverage, advantageand limitation of XPath, and completeness of the warnings.Integrated into development environments of VoiceXMLapplications, the proposed semantic warnings help developers to construct more semantically reliable voice applications.2 Overview of VoiceXMLA VoiceXML application consists of one or moreVoiceXML scripts that can call each other. A VoiceXMLscript is an XML document whose syntax definition is prescribed by the VoiceXML DTD and the schema. In thefollowing, we pick up some important constructors to builda VoiceXML script. The full specification is found in 18.Forms A form is a basic dialog element to present information and gather user inputs, which is generally composed of several form items. The form items are subdividedinto input items and control items. An input item specifiesa variable explained later to gather from the user. Inputitems may have prompt elements to tell the user whatto say or key in, filled elements to define the actionwhen the input is filled in, and event handlers explainedlater that process any resulting events. A typical inputitem is field, which assigns an input from the userto the associated variable via speech or DTMF recognition.A field may have option elements to offer a listof selective inputs. An option may specify attributesdtmf for an associated DTMF value, and value for anexplicit value of the item. A block element is a typicalcontrol item that specifies an executable block procedurewithout user input.Menus A menu is a special form to prompt the userto make a choice and transitions to different places basedon that choice. A menu has choice elements formaking a list of selective items. A choice may specify a text content of an item, a next attribute for the URIof next dialog to be processed, and a dtmf attribute whichexplicitly associates a DTMF value to the item. For convenience, a menu may have dtmf attribute that implicitly assigns sequential DTMF digits to each of the first ninechoices. Inside a menu, an enumerate element that is used within a prompt element, automatically generates a prompt message telling all choicesavailable to the user. It is also used within a field thatcontains options.Variables Variables in VoiceXML are declared by varelements, or by form items such like field withname attributes. A variable in var can be assigned byassign, while a variable in field is filled in whenthe user inputs the field. Variables may be referred in condition attributes cond or expression attributes expr.ECMAScript4 is used as the expression language in them.A value element returns the value of an expression. Aclear element clears the current value. Each variablehas a scope. If a variable is defined in a dialog element i.e.,form, its scope is within the dialog. If defined outsideany dialog elements, the variable is treated as a global variable.Control Flow VoiceXML has several elements to operate the control flow of the script. For example, the elements if, elseif and else specify conditionalbranches. A goto element is used for the unconditional jump, while an exit terminates the script. Asubmit element is used to submit the gathered data tothe server via HTTP GET or POST, by specifying variablesin the namelist attribute.Event Handling A VoiceXML script has event handlingthat defines what to do when an event occurs. For example,a noinput element is triggered when user does not respond, and a nomatch element is triggered when someunrecognized input is given. The eventhandling can havea count attribute which allows system to provide different actions when the same event occurs, depending on thenumber of occurrence.Figure 1a shows an example VoiceXML script for avirtual restaurant where the user can order a dish from beeffish or chicken, and the cooking method.This script has a form named maincourse, andtwo fields named maindish and cook, which arevariables for the field.By the field maindish, the system first prompts awelcome message and enumerates reads one by one alloptions of Beef, Fish or Chicken. Then, the user selects adish by saying one of the options, or by pressing a DTMFkey. The DTMF values are defined in the options. Ifthe user does not respond until timeout, the noinputevent occurs and prompts the user to answer again. After the user gives the matching input, the correspondingvalue attribute is set to the variable maindish.Subsequently, the field cook asks for the cookingmethod of the maindish. The user can answer grill, roastor stew as specified in the external grammar. See 18 forthe details. If the answer does not match, the nomatchevent occurs and prompts the user for retry. After the userfills the matching input, the input is set to the variablecook. Simultaneously, the filled element is executed and the if conditional branch is evaluated. Sincethe restaurant owner does not have fish stew in todaysmenu, the script does not accept the combination of fishand stew for the input. In this case, the value of cook iscleared and the script prompts the user to select other cooking method for fish again. Otherwise, the script submitsthe values of maindish and cook to the server as specified in the submit. Figure 1b shows an example ofthe dialog processed by the virtual restaurant specified inFigure 1a.3 VoiceXML Semantic WarningFocusing on the nature of the voice interactive applications, we identify nine classes of warnings for VoiceXMLscripts. For each warning, we give the definition, the effectand an illustrative example. Furthermore, we observe whatactually happens, by executing the script with a practicalVoiceXML platform  OptimTalk 11. To save space,only the essential part of the script may be shown in eachexample.3.1 Infinite Loop LOOPDefinition Multiple goto elements form a closedloop from which the execution cannot escape.Effect An infinite loop imposes nonproductive endlessactions. Moreover, the infinite loop could damage thesystem such like stack overflow, leading to the unexpected termination of the program.Example Figure 2 shows an example of LOOP. In thisscript, the second form select item is called fromthe first form welcome. Also, first form welcomeis called from the second form select item. Sincethere is no path to escape this cycle, an infinite loopoccurs. When we execute this script on OptimTalk,xml version1.0 encodingUTF8vxml version2.0 xmlnshttpwww.w3.org2001vxmlxmlnsxsihttpwww.w3.org2001XMLSchemainstancexsischemaLocationhttpwww.w3.org2001vxmlhttpwww.w3.orgTRvoicexml20vxml.xsdform idmaincoursefield namemaindishprompt Welcome to our restaurant.Please select your maindish. enumeratepromptoption dtmf1 valuebeef Beef optionoption dtmf2 valuefish Fish optionoption dtmf3 valuechicken Chicken optionnoinput Please say one of enumeratenoinputfieldfield namecookgrammar srccooking.grxmlprompt You have selected value exprmaindishfor the main dish. Please select grill,roast or stew for the cooking method.promptnomatch Sorry, please select only from grill,roast or stew.nomatchfilledif condcookstew ampampmaindishfishprompt Sorry, we have onlyroast and grill for fish today.promptclear namelistcookelseprompt You have selected value exprcookvalue exprmaindish for the order.Thank you for calling, goodbye.promptsubmit nextcgibinmaincourse.cgimethodpost namelistmaindish cookiffilledfieldformvxmlSystem Welcome to our restaurant.Please select your maindish.BeefFishChickenUser SilenceSystem Please say one ofBeefFishChickenUser fishSystem You have selected fish for yourmain dish. Please selectgrill, roast or stewfor the cooking method.User steamSystem Sorry, please select only fromgrill, roast or stew.User stewSystem Sorry, we have only roastand grill for fish today.User grillSystem You have selected grill fishfor the order.Thank you for calling, goodbye.a VoiceXML script b Dialog processedFigure 1. Example of VoiceXML script for the virtual restaurantform idwelcomeblockprompt Welcome to our virtual store. promptgoto nextselectitem blockformform idselectitemblockprompt Sorry, our store is temporary closedfor maintenance.promptgoto nextwelcome blockformFigure 2. Example of LOOPthe platform was terminated unexpectedly due to stackoverflow.3.2 Choice or Option Without ContentCOWCDefinition A choice element in a menu or anoption element in a field lacks the textcontent.Effect According to the schema, each choice oroption has a text content of PCDATA that willbecome the selective subject for that choice. However,in case that the content is absent, there is no way forusers to select that choice.Example We explain COWC with a correct VoiceXMLscript shown in Figure 3. This script is supposed tobe a news system to provide choice of Todaynews,Weather or Sports. Now suppose that Todaynewsin the first choice is absent. When executingthe script, the user can only hear Weather and Sports.As a result, there is no way for the user to chooseTodaynews. With OptimTalk the script was unexpectedly terminated with an error message error.badfetch when the user input any word other thanWeather and Sports.3.3 Choice or Option Without EnumerateCOWEDefinition An enumerate element is not specifiedin any prompt elements in a menu or afield with option elements.Effect An enumerate element is used for the systemto read the items one by one, so that the user can listenmenuprompt Welcome to news service.Please say one of, enumeratepromptchoice nexthttp...newstodaynews.vxmlTodaynewschoicechoice nexthttp...newsweather.vxmlWeatherchoicechoice nexthttp...newssports.vxmlSportschoicemenuFigure 3. Example script used for COWC, COWE, IACBto the list and make a choice. If it is absent, the usercannot hear anything with regard to the choices, anddoes not know which choice should be chosen.Example Let us use the script in Figure 3 to explain.Suppose that the enumerate is absent from thatscript. When the script is executed, the user will hearnothing about the choices, thus is unable to makechoices. Strangely however, if the user did input anappropriate choice, the selection was performed correctly with OptimTalk.3.4 Identical Actions in the ConditionalBranch IACBDefinition The same actions are specified for all conditions of the conditional branch.Effect No matter which condition holds, the same actionis executed. In such case, this conditional branch ismeaningless and should be eliminated to reduce thestructural complexity.Example In Figure 3, we replace all of the three URIsspecified in next attributes with the same one. Nomatter which choice was taken, the same action wasperformed in the URI. This confused the user sincethe user doubted that his input had been wrong. In thiscase, the menu was completely redundant, so shouldbe removed to improve the usability.3.5 Overlapped Conditions in the Choices orOptions OCCODefinition Multiple choice elements in a menuor multiple option elements in a fieldspecify the same dtmf attribute or the same text content.Effect If multiple choice elements have the samedtmf attribute, a touchtone input corresponds tomultiple choices. Similarly, for the same text content PCDATA, multiple choices could be taken by amenuprompt Welcome to news service.Please say one of, enumerateor use DTMF to select the choice.promptchoice dtmf1 nexthttp...newstodaynews.vxmlTodaynewschoicechoice dtmf2 nexthttp...newsweather.vxmlWeatherchoicechoice dtmf2 nexthttp...newssports.vxmlSportschoicemenuFigure 4. Example of OCCOsingle word of users. Thus, there is nondeterminismwhich choice should be taken.Example Figure 4 shows an example. The second andthird choices have the same dtmf attributesdtmf2. Therefore, if the user presses 2, anondeterministic behavior occurs which of Weatheror Sports should be selected. With OptimTalk, thethird choice jumping to sports.vxml was always selected when the user pressed 2. This alsomeans that the user has no way to select the secondchoice for Weather with DTMF.3.6 Redeclared Form items in Same ScopeRFSSDefinition A single name is used for declarations of different form items in the same scope, which result in aname redeclaration.Effect The VoiceXML specification does not specify thedefault behavior for the redeclaration for the redeclared form items. So, for a reference to the name,there is a nondeterminism which item should betaken. This causes a platformdependent issue.Example Figure 5 shows an example of RFSS. This scriptasks user for the clothes to order, and waits for theinput. If the user answers tshirt, the goto attempts to jump to the field select size, to providethe selection of the size. However, since there existtwo fields declared as select size, it is unclearwhich field should be taken. With OptimTalk, the fieldselect size that appeared first was selected. This isdue to the implementation issue of OptimTalk. Fromthe viewpoint of the user, it appears that no problemhas occurred in the script.3.7 Overlapped Counter in Event HandlingsOCEHDefinition Multiple event handlings in the same typespecify the same count attribute and they becomeactive simultaneously.form idorderfield nameselectitemgrammar srcclothes.grxmlpromptWhat kind of clothes do you want to orderpromptfilledif conditemtshirtgoto nextitemselectsizeelseif conditempants. . .iffilledfieldfield nameselectsizeprompt Please select the size for your tshirt.prompt. . .fieldfield nameselectsizeprompt We have only size S M or L.prompt. . .fieldformFigure 5. Example of RFSSEffect The count attribute in the same event handlingallows the script to handle the same event differently, based on the number of the number of occurrence counts of the event. The specification ofVoiceXML prescribes a selection algorithm to find thebest qualified event handling element, when an eventis thrown. Hence, even if there exist multiple elementswith the same count attribute, only one of them ischosen to be executed by the algorithm. However,such overlapped counter just increases the complexity and unreachable event handlings, and thus shouldbe avoided.Example Figure 6 shows an example. This script authenticates the user by the password within threetimes of challenges. There are four nomatchevent handlings, each of which is activated whenthe user input unmatched password. The first threenomatchs are inherited to the child elementfield. Now, two nomatchs have the samecounter count3. So, handlings overlap whenthe user fails three times. Indeed, according to theselection algorithm, the latter nomatch Youmissed too many times. Bye is always taken in thisexample. In this case, the former one is redundant,and should be removed to avoid the confusion.3.8 Conflict of Implicit DTMF in MenuCIDMDefinition A menu element with attributedtmftrue has a choice element withexplicit dtmf attribute.Effect When the attribute dtmf is set to true in amenu, any choice that does not have explicit dtmf attributes are given the implicit sequenform idauthenticatenomatch count1 Please try again.nomatchnomatch count2 This is your last chance.nomatchnomatch count3 We will connect you to the operator.goto nexthttp...operator.vxmlnomatchfield namepasswordgrammar srcauthenticate.grxmlprompt Please say your password. promptnomatch count3 You missed too many times. Bye.exitnomatchfieldformFigure 6. Example of OCEHmenu dtmftrueprompt Please select one of the following services.Please use DTMF 19 to select the choice. enumeratepromptchoice nextcheckbalanceCheck balancechoicechoice dtmf1 nexttranferTransfer moneychoicechoice nextforeigncurrencyBuy foreign currencychoicemenuFigure 7. Example of CIDMtial DTMFs 1, 2,...,9. So, the choice thathas an explicit dtmf attribute may conflict with theimplicit one.Example Figure 7 shows an example. In this script,DTMF values of 1, 2, and 3 are automatically assigned to each of the first three choices, because ofthe menu dtmftrue. However, since thesecond choice explicitly set dtmf1, the implicit assignment of the DTMF 2 conflicts withit. OptimTalk caught an exception of error.badfetchwhen executing the script. It seems that OptimTalkimplements the routine for detecting the conflict.Since OptimTalk could not execute this script becauseof the exception, the user could not use any service.3.9 Usage of Undefined Variable UUVBDefinition A variable is used before the value is set.Effect When a declared variable is used before the valueis set, the value is assumed to be undefined. Thiscauses incorrect evaluation of conditions or expressions. Also, submitting the undefined variable toanother URI may also cause unexpected input for theURI.Example We use Figure 1a to show an example. Assume that the field maindish is misarranged to be thelast field in the form. Then, the conditional statementin the if will not be evaluated correctly becausethe value of maindish is still undefined. Moreover,the undefined value of maindish will be submitted tocgibinmaincourse.cgi. In the script assumed, thesystem asks a cooking method first. However, sincethe value of maindish is still undefined, the message You have selected undefined for the main dishis prompted. Next, no matter which cooking methodis given, the following if statement is not evaluated correctly. As a result, the script always takes theelse and submits the undefined maindish to theserver.4 Detecting VoiceXML Semantic WarningsThis section proposes a framework to detect the semanticwarnings in given XML scripts. Our key idea is to characterize each warning as a problematic structure of the XMLdocument, and to distill the structure by exploiting XPathXML Path Language 21.4.1 Principle of XPath NotationXPath is a language to address arbitrary parts of an XMLdocument 21. Any node or set of nodes in a given XMLdocument can be located. Also, XPath can apply variousfunctions to the the nodes located. Specifically, these areperformed by the following two stepsLocation XPath addresses target nodes by a locationpath consisting of multiple location steps delimited by. A location step is in the form of axisnodetestpredicates.For example, attributedtmf, whichmeans select dtmf attribute of the current node,can be abbreviated to dtmf. Also, choicerefers to all choices that are descendantsof the document root, which is equivalent todescendantorselfnodechildchoice.Functions The functions apply various operationsto the nodes located. We here introduce only several functions used in this paper. 1 or  computes the equivalence of ,2 stringlength measures the lengthof , 3 contains,checks the inclusion of  in , 4concat,, concatenates the , and 5count counts the number of .4.2 Describing Semantic Warnings withXPathUsing XPath, we try to describe each semantic warning.As an example, let us take COWC in Section 3.2. To detectCOWC, we need to find any choice or optionthat do not contain any text contents.First, we concentrate on a choice. Since achoice appears as a child of a menu, a location path menuchoice selects all of choiceelements that have some menu as direct parents.Next, an element e whose text contents is empty can bespecified by estringlengthtext0.Combining them together, we obtainmenuchoicestringlengthtext0,which can be read as all choices that donot contain any text contents. Finally, to checkif a given VoiceXML script contains any suchchoice, we just have to know true or false ofcountmenuchoicestringlengthtext00.Similarly, we obtain the expression for option.Consequently, COWC can be described by the followingXPath countmenuchoicestringlengthtext00 or countmenufieldstringlengthtext00.Table 1 presents XPath representation for all the proposed warnings.4.3 Detecting Semantic WarningsOnce the semantic warnings are described in XPath, wejust need to implement a warning detection system to generate the detection report. Taking full advantage of XPath,we exploit XSLT Extensible Stylesheet Language Transformations 22 for the report generation.For each semantic warning, we describe a formatof the report in XSLT, using the following XSLT syntax xslif testXPath expression warning message xslif. The XSLT displays a certainmessage when the specified XPath expression becomestrue. For example, a format rule for COWC can be described in XSLT asxslif testcountmenuchoicestringlengthtext00 COWC was detected.content in choice is absentxslifxslif testcountfieldoptionstringlengthtext00 COWC was detected.content in option is absentxslifWe describe formats of all warnings in an XSLTfile let it be warnings.xsl. Then, for eachgiven VoiceXML script, we embed a reference towarnings.xsl as a style sheet. Finally, we browsethe VoiceXML script with a Web browser that implementsthe XSLT processor. The Web browser translates thegiven VoiceXML script into a warning report according towarnings.xsl.Table 1. XPath representation of the proposed semantic warningsWarning Name Description in XPathLOOP countformconcatquotquot,idfollowingsiblingformgotonextand gotonextconcatquotquot,followingsiblingformid0COWC 1. Content in choice is absent countmenuchoicestringlengthtext002. Content in option is absent countfieldoptionstringlengthtext00COWE 1. enumerate in menu is absentcountmenuchoice and countpromptenumerate002. enumerate in field is absentcountfieldoption and countpromptenumerate00IACB 1. Identical action in choices within menu existcountmenuchoice andcountchoicenextfollowingsiblingchoicenext002. Identical action in options within field existcountfieldoption andcountoptionvaluefollowingsiblingoptionvalue00OCCO 1. Same dtmf attribute exists in choices or optionscountmenuchoicedtmffollowingsiblingchoicedtmf0 orcountfieldoptiondtmffollowingsiblingoptiondtmf02. Content in choices or options are the samecountmenuchoicetextfollowingsiblingchoicetext0 orcountfieldoptiontextfollowingsiblingoptiontext0RFSS Case of redeclared fields countfieldnamefollowingsiblingfieldname0OCEH 1. Case of nomatch countnomatchcountfollowingnomatchcount02. Case of noinput countnoinputcountfollowingnoinputcount0CIDM countmenudtmfquottruequot and choicedtmf andcontainsquot1 2 3 4 5 6 7 8 9quot, choicedtmf0UUVB Case of fieldcountfieldname and containsprecedingvalueexpr, name countfieldname and containsprecedingsubmitnamelist, name countfieldname and containsprecedingifcond, name countfieldname and containsprecedingelseifcond, name0 andcountfieldname and containsprecedingfieldname, namecountfieldname and containsfollowingfieldname, name05 Evaluation5.1 Impact of WarningsTo investigate how serious each semantic warning is, wehere try to classify the warnings into three warning levelscritical, moderate and tolerable. The classificationis conducted with respect to viewpoints of both the developer and the users. In the following, we define the warninglevels from the developers view and users view.Critical Level Developers View Warnings causing a system down orunexpected script termination. Users View Warnings making the service completely unavailable while the user is on the service.Moderate LevelDevelopers View Warnings causing unexpected behaviors, such as nondeterminism and unspecified values. Thebehaviors vary heavily depending on the underlying systemimplementation.Users View Warnings that can make users confusedagainst hisher intention, generally causing usability problems of the service.Tolerable LevelDevelopers View Warnings causing unreachable code orredundant parts in the script. Although the script is normally processed, these warnings may expose trivial mistakes, or restriction of some features that the developer intended to provide.Users View Warnings that are not recognized by the user,but can restrict the original service behaviors that are supposed to be provided for the user.Based on the execution results with OptimTalk seeSection 3, we classify the proposed warnings as shown inTable 2. The warnings in the critical level must be resolvedTable 2. The classification of the impact of semantic warningsLevel Developers viewpoint Users viewpointCritical COWC CIDM COWC CIDMModerate OCCO RFSS UUVB IACB OCCO UUVBTolerable IACB OCEH RFSS OCEHat the highest priority, since they may make the service totally unavailable. Resolving the moderate level should contribute to assuring the minimum quality of a script to deployit as a proper service. This improves the portability of thescript as well as the usability of the service. Finally, warnings in the tolerable level are helpful to eliminate redundantand illstructured service logic, which improves readability and maintainability of the script. Thus, the proposedwarnings can be used as a simple guideline to improve thequality of the script service from the semantic aspect.5.2 Property CoverageThe key idea of the proposed warning detection frameworkis to characterize each warning by a static structure of thegiven VoiceXML script. This allows us to describe the ninewarning classes smartly in XPath representation.However, not all semantic properties can be describedexactly in a static way. For example, LOOP see Section3.1 is a dynamic property, strictly speaking. That is, without executing the script, we would not be able to predictexactly how many gotos form an infinite loop. In fact,the XPath representation of LOOP in Table 1 covers onlyinfinite loops with the length of 2. To detect loops withlonger length, we can prepare an XPath expression for eachlength, and join them by disjunction. However, it is unrealistic to prepare expressions for all possible loops with anyarbitrary length. Thus, the semantic properties covered bythe proposed method are limited to the ones that can bereasonably described in static expressions.5.3 Advantage and Limitation of XPathIn our warning detection framework, we extensively usedXPath to describe and detect the proposed semantic warnings. The great advantage of introducing XPath is in itsgenerality. Since XPath is a widelyknown standard, wecan reuse the existing modules and applications. Therefore, the implementation of the warning detection system becomes quite simple and easilyextendable, Also,since XPath is not tightly coupled with specific languages,the application of our framework is not limited withinVoiceXML only, but is well feasible to detecting problematic warnings of other XMLbased languages.The limitation is in the expressive power of XPath. Asthe drawback of its generality, XPath is not always able tohandle languagespecific issues. For instance, VoiceXMLadopts ECMAScript to specify conditions as cond attribute and expressions as expr attribute in the script.However, XPath does not have any means to parse stringswritten in ECMAScript.Let us take UUVB see Section 3.9 as an example.To locate a variable with the undefined value, we need tocheck every cond and expr attribute whether or not thevariable exists in the attribute. However, since XPath cannot process the syntax of ECMAScript, we used the XPathcontains function as a substitute for the exact matchingof the variable, regarding the ECMAScript as an ordinarystring. This imposes a restriction on UUVB that a givenVoiceXML scripts is not allowed to have any pair of namesthat the one overlaps another e.g., main and maindish.To completely cover such languagespecific issues, we mayneed to introduce more powerful languages, such as Perland C, as a supplementary support.5.4 CompletenessWe have so far found nine classes of semantic warningsfor VoiceXML. Then, we presented a warning detectionframework with XPath, although LOOP and UUVB werepartially covered as mentioned above. We believe that theproposed warnings provide simple but useful means for developers to build reliable VoiceXML scripts.Of course, we cannot guarantee that the proposed nineclasses are complete to cover all the semantic problemsof VoiceXML. Further classes may be found in the future.Even in such a case, the proposed method is well feasible,as long as the new warnings can be described statically inXPath. In our future work, we plan to clarify how much oftotal semantic problems in VoiceXML can be covered bysemantic warnings described in XPath.We have examined only the semantic aspect ofVoiceXML in this paper. However, investigatingVoiceXML from the security viewpoint is another important problem to prevent the script from committing securityincidents, such as crosssite scripting 110. Currently,we consider that LOOP and UUVB could be abused formalicious security attacks, since LOOP can cause a DOSattack to a server, while UUVB can submit undefined values that cannot be processed correctly by the server. Formulating such securityrelated warnings for VoiceXML isa quite challenging issue and is also our longterm goal.5.5 Related WorkMost published research in VoiceXML are about the application and integration, such as integration with theenterprise Web applications 2, and implementation ofVoiceXML browser with SIP 12 of VoIP 13. Few ofresearch focus on the quality or correctness of VoiceXMLscript.In 16, a highlevel notation called CRESS is proposed to define and analyze voice interactive services. Aservice defined by CRESS can be compiled into formal descriptions such as LOTOS 7 and SDL 8, where the developer can evaluate the integrity of the service. CRESS isalso able to compile the defined service into a VoiceXMLscript. The main difference of this approach and ours area CRESS cannot validate VoiceXML scripts directly, sothe service needs to be given firstly in the CRESS representation. b CRESS does not specify any concrete semanticwarnings, so the properties to be proven must be rigorouslygiven by the developer.The method presented in 14 tries to capture the Webcontents accessibility guideline 19 with an XPathbasedlanguage called SGSL. This approach is similar to ours, inthe sense that it distills a certain property as certain XMLstructures. However, it differs from ours significantly, sincetheir target is data i.e., HTML while our target is programs i.e., VoiceXML scripts. In our research, we choseXPath to take advantage of its generality. However, usingSGSL might be a good option to capture more complexwarnings.6 ConclusionIn this paper, we have proposed nine classes of semanticwarnings for VoiceXML and a warning detection methodwith XPath and XSLT. Each warning was applied to a practical VoiceXML platform  OptimTalk. It was shown thatVoiceXML scripts with the semantic warnings can lead theplatform to certain problematic situations. We have alsoevaluated the proposed method from several viewpoints.Practically, integrated into development environments ofVoiceXML applications, the proposed semantic warningshelp developers to construct more semantically reliable applications.Finally, we summarize our future work. We are currently developing practical VoiceXML applications for ahome network system 6. Moreover, we investigate othertypes of warnings. Generalization of the semantic warnings for other XMLbased language is also an interestingproblem.References1 CERTCC, Malicious HTML Tags Embedded in Client Web Requests, Feb. 2000,httpwww.cert.orgadvisoriesCA200002.html2 J. Chugh and V. Jagannathan, VoiceEnabling EnterpriseApplications, Proc. of Eleventh IEEE International Workshops on Enabling Technologies Infrastructure for Collaborative Enterprises WETICE02, pp. 188189, June. 20023 ebXML Initiative, ebXML  Enabling A Global ElectronicMarket, httpwww.ebxml.org4 Ecma International, ECMAScript Language Specification Standard ECMA262, httpwww.ecmainternational.orgpublicationsstandardsEcma262.htm5 IBM, Websphere Voice ServerTM,WebSphere Voice Toolkit, httpwww4.ibm.comsoftwarespeechenterpriseep 1.html6 H. Igaki, M. Nakamura and K. Matsumoto, Design andevaluation of the home network system using the service oriented architecture, Proc. of International Conference on Ebusiness and Telecommunication Networks ICETE2004,vol.1, pp.6269, Aug. 2004.7 ISOIEC, Information Processing Systems  Open SystemsInterconnection  LOTOS  A Formal Description Technique based on the Temporal Ordering of Observational Behavior, ISOIEC 8807, International Organization for Standardization, Geneva, Switzerland, 1989.8 ITU, Specification and Description Language, ITUTZ.100, International Telecommunications Union, Geneva,Switzerland, 2000.9 J. Lennox and H. Schulzrinne, Call processing language framework and requirements, Request for Comments 2824, Internet Engineering Task Force, May. 2000,httpwww.ietf.orgrfcrfc2824.txtnumber282410 Microsoft Corporation, Information on CrossSite Scripting Security Vulnerability, Feb. 2000,httpwww.microsoft.comtechnetSecuritynewscrssite.mspx11 OptimTalk, httpwww.optimtalk.cz12 J. Rosenberg, H. Schulzrinne, G. Camarillo, E. Schooler,A. Johnston, J. Peterson, R. Sparks, M. Handley andE. Schooler SIPsession initiation protocol, Request forComments 3261, Internet Engineering Task Force, Jun.2002, httpwww.ietf.orgrfcrfc3261.txtnumber326113 K. Singh, A. Nambi, H. Schulzrinne,IntegratingVoiceXML with SIP services, IEEE International Conference on Communications 2003 ICC03, pp.784788, May2003.14 Y. Takata, T. Nakamura and H. Seki, Automatic Accessibility Guideline Validation of XML Documents Basedon a Specification Language, Proc. of 10th InternationalConference on HumanComputer Interaction HCII 2003,pp.10401044, June 2003.15 Tellme Networks, Tellme Studio, httpwww.tellme.com16 K. J. Turner, Analysing interactive voice services, Journalof Computer Networks, Elsevier, Vol. 45, Issue 5, pp. 665685, 2004.17 VoiceXML Forum, httpwww.voicexml.org18 W3C, Voice Extensible Markup Language VoiceXMLVersion 2.0 W3C Recommendation, Mar. 2004,httpwww.w3.orgTRvoicexml2019 W3C, Web Content Accessibility Guideline WCAGVersion 1.0 W3C Recommendation, May 1999,httpwww.w3.orgTRWAIWEBCONTENT20 W3C, Web Services Description LanguageWSDL Version 1.1 W3C Note, Mar. 2001,httpwww.w3.orgTRwsdl21 W3C, XML Path Language XPath Version 1.0 W3C Recommendation, Nov. 1999,httpwww.w3.orgTRxpath22 W3C, XSL Transformations XSLT Version 1.0 W3CRecommendation, Nov. 1999, httpwww.w3.orgTRxslt
