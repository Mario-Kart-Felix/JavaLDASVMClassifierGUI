Software AgentsChapter 1An Introduction to Software AgentsJeffrey M. BradshawSince the beginning of recorded history, people have been fascinated withthe idea of nonhuman agencies.1 Popular notions about androids, humanoids, robots, cyborgs, and science fiction creatures permeate our culture, forming the unconscious backdrop against which software agents are perceived. The word robot, derived from the Czech word for drudgery, becamepopular following Karel Capeks 1921 play RUR Rossum Universal Robots.While Capeks robots were factory workers, the public has also at times embraced the romantic dream of robots as digital butlers who, like the mechanical maid in the animated feature The Jetsons, would someday putter aboutthe living room performing mundane household tasks. Despite such innocuousbeginnings, the dominant public image of artificially intelligent embodied creatures often has been more a nightmare than a dream. Would the awesomepower of robots reverse the masterslave relationship with humans Everydayexperiences of computer users with the mysteries of ordinary software, riddledwith annoying bugs, incomprehensible features, and dangerous viruses reinforce the fear that the software powering autonomous creatures would poseeven more problems. The more intelligent the robot, the more capable of pursuing its own selfinterest rather than its masters. The more humanlike the robot,the more likely to exhibit human frailties and eccentricities. Such latent concerns cannot be ignored in the design of software agentsindeed, there is morethan a grain of truth in each of themThough automata of various sorts have existed for centuries, it is only withthe development of computers and control theory since World War II that anything resembling autonomous agents has begun to appear. Norman 1997 observes that perhaps the most relevant predecessors to todays intelligent agentsare servomechanisms and other control devices, including factory control andthe automated takeoff, landing, and flight control of aircraft. However, theagents now being contemplated differ in important ways from earlier concepts.Significantly, for the moment, the momentum seems to have shifted from hardware to software, from the atoms that comprise a mechanical robot to the bitsthat make up a digital agent Negroponte 1997.2Alan Kay, a longtime proponent of agent technology, provides a thumbnailsketch tracing the more recent roots of software agentsThe idea of an agent originated with John McCarthy in the mid1950s, and theterm was coined by Oliver G. Selfridge a few years later, when they were both atthe Massachusetts Institute of Technology. They had in view a system that, whengiven a goal, could carry out the details of the appropriate computer operations andcould ask for and receive advice, offered in human terms, when it was stuck. Anagent would be a soft robot living and doing its business within the computersworld. Kay 1984.Nwana 1996 splits agent research into two main strands the first beginningabout 1977, and the second around 1990. Strand 1, whose roots are mainly in distributed artificial intelligence DAI, has concentrated mainly on deliberativetype agents with symbolic internal models. Such work has contributed to an understanding of macro issues such as the interaction and communication betweenagents, the decomposition and distribution of tasks, coordination and cooperation,conflict resolution via negotiation, etc. Strand 2, in contrast, is a recent, rapidlygrowing movement to study a much broader range of agent types, from the moronic to the moderately smart. The emphasis has subtly shifted from deliberationto doing from reasoning to remote action. The very diversity of applications and approaches is a key sign that software agents are becoming mainstream.The gauntlet thrown down by early researchers has been variously taken upby new ones in distributed artificial intelligence, robotics, artificial life, distributed object computing, humancomputer interaction, intelligent and adaptive interfaces, intelligent search and filtering, information retrieval, knowledgeacquisition, enduser programming, programmingbydemonstration, and agrowing list of other fields. As agents of many varieties have proliferated,there has been an explosion in the use of the term without a corresponding consensus on what it means. Some programs are called agents simply because theycan be scheduled in advance to perform tasks on a remote machine not unlikebatch jobs on a mainframe some because they accomplish lowlevel computingtasks while being instructed in a higherlevel of programming language orscript Apple Computer 1993 some because they abstract out or encapsulate thedetails of differences between information sources or computing servicesKnoblock and Ambite 1997 some because they implement a primitive or aggregate cognitive function Minsky 1986, Minsky and Riecken 1994 some because they manifest characteristics of distributed intelligence Moulin andChaibdraa 1996 some because they serve a mediating role among people andprograms Coutaz 1990 Wiederhold 1989 Wiederhold 1992 some becausethey perform the role of an intelligent assistant Boy 1991, Maes 1997 somebecause they can migrate in a selfdirected way from computer to computer4 BRADSHAWWhite 1996 some because they present themselves to users as believable characters Ball et al. 1996, Bates 1994, HayesRoth, Brownston, and Gent 1995some because they speak an agent communication language Genesereth 1997,Finin et al. 1997 and some because they are viewed by users as manifesting intentionality and other aspects of mental state Shoham 1997.Out of this confusion, two distinct but related approaches to the definition ofagent have been attempted one based on the notion of agenthood as an ascriptionmade by some person, the other based on a description of the attributes that software agents are designed to possess. These complementary perspectives are summarized in the section What Is a Software Agent.  The subsequent section discusses the why of software agents as they relate to two practical concerns 1simplifying the complexities of distributed computing and 2 overcoming the limitations of current user interface approaches. The final section provides a chapterby chapter overview of the remainder of the book.What Is a Software AgentThis section summarizes the two definitions of an agent that have been attempted agent as an ascription, and agent as a description.Agent as an AscriptionAs previously noted, one of the most striking things about recent research anddevelopment in software agents is how little commonality there is between different approaches. Yet there is something that we intuitively recognize as afamily resemblance among them. Since this resemblance cannot have to dowith similarity in the details of implementation, architecture, or theory, it mustbe to a great degree a function of the eye of the beholder.3 Agent is that agentdoes4 is a slogan that captures, albeit simplistically, the essence of the insightthat agency cannot ultimately be characterized by listing a collection of attributes but rather consists fundamentally as an attribution on the part of someperson Van de Velde 1995.5This insight helps us understand why coming up with a onceandforalldefinition of agenthood is so difficult one persons intelligent agent is anotherpersons smart object and todays smart object is tomorrows dumb program. The key distinction is in our expectations and our point of view. Theclaim of many agent proponents is that just as some algorithms can be more easily expressed and understood in an objectoriented representation than in a procedural one Kaehler and Patterson 1986, so it sometimes may be easier for developers and users to interpret the behavior of their programs in terms of agentsrather than as more runofthemill sorts of objects Dennett 1987.6The American Heritage Dictionary defines an agent as one that acts or hasAN INTRODUCTION TO SOFTWARE AGENTS 5the power or authority to act or represent another or the means bywhich something is done or caused instrument. The term derives from thepresent participle of the Latin verb agere to drive, lead, act, or do.As in the everyday sense, we expect a software agent to act on behalf of someone to carry out a particular task which has been delegated to it.7 But since it istedious to have to spell out every detail, we would like our agents to be able toinfer what we mean from what we tell it. Agents can only do this if theyknow something about the context of the request. The best agents, then,would not only need to exercise a particular form of expertise, but also take intoaccount the peculiarities of the user and situation.8 In this sense an agent fills therole of what Negroponte calls a digital sisterinlawWhen I want to go out to the movies, rather than read reviews, I ask my sisterinlaw. We all have an equivalent who is both an expert on movies and an expert onus. What we need to build is a digital sisterinlaw.In fact, the concept of agent embodied in humans helping humans is often onewhere expertise is indeed mixed with knowledge of you. A good travel agentblends knowledge about hotels and restaurants with knowledge about you Areal estate agent builds a model of you from a succession of houses that fit yourtaste with varying degrees of success. Now imagine a telephoneanswering agent, anews agent, or an electronicmailmanaging agent. What they all have in commonis the ability to model you. Negroponte 1997.While the above description would at least seem to rule out someone claiming that a typical payroll system could be regarded as an agent, there is stillplenty of room for disagreement Franklin and Graesser 1996. Recently, for example, a surprising number of developers have rechristened existing components of their software as agents, despite the fact that there is very little thatseems agentlike about them. As Foner 1993 observes I find little justification for most of the commercial offerings that call themselves agents. Most of them tend to excessively anthropomorphize the software, andthen conclude that it must be an agent because of that very anthropomorphization,while simultaneously failing to provide any sort of discourse or social contract between the user and the agent. Most are barely autonomous, unless a regularlyscheduled batch job counts. Many do not degrade gracefully, and therefore do not inspireenough trust to justify more than trivial delegation and its concomitant risks.9Shoham provides a practical example illustrating the point that althoughanything could be described as an agent, it is not always advantageous to do soIt is perfectly coherent to treat a light switch as a very cooperative agent with thecapability of transmitting current at will, who invariably transmits current when itbelieves that we want it transmitted and not otherwise flicking the switch is simply our way of communicating our desires. However, while this is a coherent view,it does not buy us anything, since we essentially understand the mechanismsufficiently to have a simpler, mechanistic description of its behavior. Shoham1993.106 BRADSHAWDennett 1987 describes three predictive stances that people can take towardsystems table 1. People will choose whatever gives the most simple, yet reliableexplanation of behavior. For natural systems e.g., collisions of billiard balls, itis practical for people to predict behavior according to physical characteristicsand laws. If we understand enough about a designed system e.g., an automobile, we can conveniently predict its behavior based on its functions, i.e., what itis designed to do. However as John McCarthy observed in his work on advicetakers in the mid1950s, at some point the complexity of the system becomessuch that the best you can do is give advice Ryan 1991. For example, to predict the behavior of people, animals, robots, or agents, it may be more appropriate to take a stance based on the assumption of rational agency than one basedon our limited understanding of their underlying blueprints.11Singh 1994 lists several pragmatic and technical reasons for the appeal ofviewing agents as intentional systemsThey i are natural to us, as designers and analyzers ii provide succinct descriptions of, and help understand and explain, the behaviour of complex systems iiimake available certain regularities and patterns of action that are independent ofthe exact physical implementation of the agent in the system and iv may be usedby the agents themselves in reasoning about each other.Agent As a DescriptionA more specific definition of software agent that many agent researchersmight find acceptable is a software entity which functions continuously and autonomously in a particular environment, often inhabited by other agents andprocesses Shoham 1997. The requirement for continuity and autonomy derives from our desire that an agent be able to carry out activities in a flexible andintelligent manner that is responsive to changes in the environment without requiring constant human guidance or intervention. Ideally, an agent that functions continuously in an environment over a long period of time would be ableto learn from its experience. In addition, we expect an agent that inhabits an environment with other agents and processes to be able to communicate and cooperate with them, and perhaps move from place to place in doing so.AN INTRODUCTION TO SOFTWARE AGENTS 7Physical Stance Predict based on physical characteristics and lawsDesign Stance Predic t based on what it is designed to doIntentional Stance Precit based on assumption of rational agencyTable 1. Dennetts three predictive stances from Sharp 1992, 1993.All this being said, most software agents today are fairly fragile and specialpurpose beasts, no one of which can do very much of what is outlined above in ageneric fashion. Hence the term software agent might best be viewed as an umbrella term that covers a range of other more specific and limited agent typesNwana 1996. Though as individuals the capabilities of the agents may be ratherrestricted, in their aggregate they attempt to simulate the functions of a primitivedigital sisterinlaw, as particular ones intimately familiar with the user and situation exchange knowledge with others who handle the details of how to obtainneeded information and services. Consistent with the requirements of a particularproblem, each agent might possess to a greater or lesser degree attributes like theones enumerated in Etzioni and Weld 1995 and Franklin and Graesser 1996 Reactivity the ability to selectively sense and act Autonomy goaldirectedness, proactive and selfstarting behavior Collaborative behavior can work in concert with other agents to achieve acommon goal Knowledgelevel Newell 1982 communication ability the ability to communicate with persons and other agents with language more resembling humanlike speech acts than typical symbollevel programtoprogram protocols Inferential capability can act on abstract task specification using priorknowledge of general goals and preferred methods to achieve flexibilitygoes beyond the information given, and may have explicit models of self,user, situation, andor other agents. Temporal continuity persistence of identity and state over long periods oftime12 Personality the capability of manifesting the attributes of a believablecharacter such as emotion Adaptivity being able to learn and improve with experience Mobility being able to migrate in a selfdirected way from one host platform to another.To provide a simpler way of characterizing the space of agent types thanwould result if one tried to describe every combination of possible attributes,several in the agent research community have proposed various classificationschemes and taxonomies.For instance, AI researchers often distinguish between weak and strong notions of agency agents of the latter variety are designed to possess explicit mentalistic or emotional qualities Shoham 1997 Wooldridge and Jennings 1995.From the DAI community, Moulin and Chaibdraa have characterized agentsby degree of problemsolving capabilityA reactive agent reacts to changes in its environment or to messages from otheragents. An intentional agent is able to reason on its intentions and beliefs, to create plans of actions, and to execute those plans. In addition to intentional agent8 BRADSHAWcapabilities, a social agent possesses explicit models of other agents. Moulin andChaibdraa 1996, pp. 89.An influential white paper from IBM Gilbert et al. 1995 described intelligent agents in terms of a space defined by the three dimensions of agency, intelligence, and mobility figure 1Agency is the degree of autonomy and authority vested in the agent, and can be measured at least qualitatively by the nature of the interaction between the agent andother entities in the system. At a minimum, an agent must run asynchronously. Thedegree of agency is enhanced if an agent represents a user in some way A more advanced agent can interact with data, applications, services or other agents.Intelligence is the degree of reasoning and learned behavior the agents abilityto accept the users statement of goals and carry out the task delegated to it. At aminimum, there can be some statement of preferences Higher levels of intelligence include a user model and reasoning. Further out on the intelligence scale are systems that learn and adapt to their environment, both in termsof the users objectives, and in terms of the resources available to the agentMobility is the degree to which agents themselves travel through the network Mobile scripts may be composed on one machine and shipped to anotherfor execution Mobile objects are transported from machine to machine inthe middle of execution, and carrying accumulated state data with them.Nwana 1996 proposes a typology of agents that identifies other dimensionsof classification. Agents may thus be classified according to Mobility, as static or mobile Presence of a symbolic reasoning model, as deliberative or reactiveAN INTRODUCTION TO SOFTWARE AGENTS 9AgencyMobility IntelligenceIntelligentAgentsStaticMobile scriptsMobile objectsService interactivityApplication interactivityData interactivityRepresentation of userAsynchronyPreferencesReasoningPlanningLearningExpert SystemsFixedFunction AgentsFigure 1. Scope of intelligent agents Adapted from Gilbert et al. 1995. Exhibition of ideal and primary attributes, such as autonomy, cooperation,learning. From these characteristics, Nwana derives four agent types collaborative, collaborative learning, interface, and smart see figure 2. Roles, as information or Internet Hybrid philosophies, which combine two or more approaches in a singleagent Secondary attributes, such as versatility, benevolence, veracity, trustworthiness, temporal continuity, ability to fail gracefully, and mentalistic andemotional qualities.After developing this typology, Nwana goes on to describe ongoing researchin seven categories collaborative agents, interface agents, mobile agents, informationInternet agents, reactive agents, hybrid agents, and smart agents.After listing several definitions given by others, Franklin and Graesser 1996give their own an autonomous agent is a system situated within and part of anenvironment that senses that environment and acts on it, over time, in pursuitof its own agenda and so as to effect what it senses in the future. Observingthat by this definition even a thermostat could qualify as an agent, they discussvarious properties of agents and offer the taxonomy in figure 3 as one that covers most of the examples found in the literature. Below this initial classification,they suggest that agents can be categorized by control structures, environmentse.g., database, file system, network, Internet, language in which they are written, and applications.Finally, Petrie 1996 discusses the various attempts of researchers to distinguish agents from other types of software. He first notes the difficulties in satisfactorily defining intelligence and autonomy. Then he shows how most of the10 BRADSHAWCooperate LearnAutonomousSmartAgentsCollaborativeAgentsCollaborativeLearningAgentsInterfaceAgentsFigure 2. Typology based on Nwanas Nwana 1996 primary attribute dimension.current webbased searching and filtering agents, though useful, are essentially onetime query answering mechanisms that are adequately described bythe less glamorous computer science term server. Similarly, mobile processwould be a less confusing term than mobile agent for those Java appletswhose only agentlike function is to allow processes to run securely on foreignmachines. In contrast to these previous attempts to describe a set of unambiguous defining characteristics for agents in general, Petrie argues the case for onespecific class typedmessage agents. Typedmessage agents are distinguished fromother types of software by virtue of their ability to communicate as a communityusing a shared message protocol such as KQML. In the shared message protocol,at least some of the message semantics are typed and independent of the applications. And semantics of the message protocol necessitate that the transportprotocol not be only clientserver but rather a peertopeer protocol. An individual software module is not an agent at all if it can communicate with the othercandidate agents only with a clientserver protocol without degradation of thecollective task performance.Time and experience will ultimately determine both the meaning and thelongevity of the term agent. Like many other computing terms in commonusage such as desktop, mouse, and broker, it began with a metaphor butwill end up denoting concrete software artifacts. As public exposure to usefuland technically viable implementations of agent software increases, the termwill either come to mean something that everyone understands because theyhave seen many examples of it, or it will fall into disuse because it describes aconcept that is no longer appropriate. What is unlikely to disappear are the motivations that have incited the development of agentbased software. These aredescribed in the following section.AN INTRODUCTION TO SOFTWARE AGENTS 11Autonomous AgentsBiological AgentsRobotic AgentsSoftware Agents Artificial Life AgentsTaskspecific AgentsEntertainment AgentsVirusesFigure 3. Franklin and Graessers 1996 agent taxonomy.Why Software AgentsWhile the original work on agents was instigated by researchers intent on studying computational models of distributed intelligence, a new wave of interest hasbeen fueled by two additional concerns of a practical nature 1 simplifying thecomplexities of distributed computing and 2 overcoming the limitations of current user interface approaches.13 Both of these can essentially be seen as a continuation of the trend toward greater abstraction of interfaces to computing services. On the one hand, there is a desire to further abstract the details ofhardware, software, and communication patterns by replacing todays programtoprogram interfaces with more powerful, general, and uniform agenttoagentinterfaces on the other hand there is a desire to further abstract the details of thehumantoprogram interface by delegating to agents the details of specifying andcarrying out complex tasks. Grosof Harrison, Chess, and Kershenbaum 1995argues that while it is true that point solutions not requiring agents could be devised to address many if not all of the issues raised by such problems, the aggregate advantage of agent technology is that it can address all of them at once.In the following two subsections, I discuss how agents could be used to address the two main concerns I have mentioned. Following this, I sketch a visionof how agentenabled system architectures of the future could provide an unprecedented level of functionality to people.Simplifying Distributed ComputingBarriers to Intelligent Interoperability. Over the past several years, Brodie1989 has frequently discussed the need for intelligent interoperability insoftware systems. He defines the term to mean intelligent cooperationamong systems to optimally achieve specified goals. While there is little disagreement that future computing environments will consist of distributedsoftware systems running on multiple heterogeneous platforms, many oftodays most common configurations are, for all intents and purposes, disjoint they do not really communicate or cooperate except in very basic wayse.g., file transfer, print servers, database queries figure 4. The currentubiquity of the Web makes it easy to forget that until the last few years,computer systems that could communicate typically relied on proprietary orad hoc interfaces for their particular connection. The current growth in popularity of objectoriented approaches and the development of a few important agreedupon standards e.g., TCPIP, HTTP, IIOP, ODBC has brought abasic level of encapsulated connectivity to many systems and services. Increasingly, these connections are made asynchronously through messagepassing, in situations where the advantages of loose coupling in complex cooperating systems can be realized Mellor 1994 Perrow 1984 Shaw 1996.We are now in the midst of a shift from the network operating system to In12 BRADSHAWternet and intranetbased network computing Lewis 1996. As this transitiontakes place, we are seeing the proliferation of operating systemindependent interoperable network services such as naming, directory, and security. These,rather than the underlying operating systems, are defining the network, reducing the operating systems to commodities. Lewis 1996 asserts that Netscape isthe best example of a vendor focused exclusively on such a goal. Federations ofsuch vendors are defining standardsbased operating systemindependent services directory, security, transactions, Web, and so forth, truly universal serverindependent clients Web browsers, and networkbased application development support Java, JavaScript, ActiveX. In such approaches, both the client andserver operating systems become little more than a collection of device drivers.Incorporating Agents as Resource ManagersA higher level of interoperability would require knowledge of the capabilitiesof each system, so that secure task planning, resource allocation, execution,monitoring, and, possibly, intervention between the systems could take place.To accomplish this, an intelligent agent could function as a global resourcemanager figure 5.Unfortunately, while a single agent might be workable for small networks ofsystems, such a scheme quickly becomes impractical as the number of cooperating systems grows. The activity of the single agent becomes a bottleneck for theotherwise distributed system. A further step toward intelligent interoperability is to embed one or more peer agents within each cooperating system figure6. Applications request services through these agents at a higher level corresponding more to user intentions than to specific implementations, thus providingAN INTRODUCTION TO SOFTWARE AGENTS 13DisjointAd hocEncapsulatedFigure 4. Evolution of system connectivity Adapted from Brodie 1989.a level of encapsulation at the planning level, analogous to the encapsulationprovided at the lower level of basic communications protocols. As agents increasingly evolve from stationary entities to mobile ones, we will see an evenmore radical redefinition of distributed object computing within corporate networks and on the World Wide Web Chang and Lange 1996. These scenariospresume, of course, timely agreement on basic standards ensuring agent interoperability Gardner 1996 Lange 1996 Virdhagriswaran, Osisek, and OConnor 1995 White 1997.Overcoming User Interface ProblemsLimitations of Direct Manipulation Interface. A distinct but complementarymotivation for software agents is in overcoming problems with the current generation of user interface approaches. In the past several years, direct manipulation interfaces Hutchins, Hollan, and Norman 1986 Shneiderman 1983 Shneiderman 1984 Smith, et al. 1982 have become the standard. For many of themost common user tasks, they are a distinct improvement over commandlineinterfaces. Since direct manipulation requires software objects to be visible,users are constantly informed about the kinds of things they can act upon. If, inaddition, the objects have a natural correspondence to realworld or metaphorical counterparts, users can apply previously acquired experience to more quickly learn what the objects can do and how to do it. Many advantages of directmanipulation begin to fade, however, as tasks grow in scale or complexity. Forexample, anyone who has had much experience with iconic desktop interfacesknows that there are times when sequences of actions would be better automated than directly performed by the user in simple, tedious steps.14 Several researchers have analyzed the limitations of passive artifact metaphors for com14 BRADSHAWAFigure 5. Cooperating systems with single agent as a global planner. Connections represent agenttoapplication communication Adapted from Brodie 1989.plex tasks diSessa 1986 Erickson 1996 Kay 1990 Whittaker 1990. Amongothers, people are likely to encounter the following problems Large search space In large distributed systems it is difficult to find whatwe need through browsing or the use of traditional indexing methods.What is practical and possible for a few hundred items becomes unwieldyand impossible for several thousand. Actions in response to immediate user interaction only Sometimes instead ofexecuting an action immediately, we want to schedule it for a specific timein the future. Or, we may want to have software automatically react to systemgenerated events when we are away from the machine. No composition With most direct manipulation interfaces, we cannot easilycompose basic actions and objects into higherlevel ones. Rigidity The consistency that makes passive artifact interfaces predictableand easytolearn for simple tasks makes them brittle and untrustworthyfor complex ones. Function orientation Software is typically organized according to genericsoftware functions rather than the context of the persons task and situation. No improvement of behavior Traditional software does not notice or learnfrom repetitive actions in order to respond with better default behavior.Indirect Management Using AgentsResearchers and developers are attempting to address these problems by combining the expression of user intention through direct manipulation with thenotion of an indirect management style of interaction Kay 1990. In such an apAN INTRODUCTION TO SOFTWARE AGENTS 15AAA AAFigure 6. Cooperating systems with distributed agents. Connecting lines represent ongoing agenttoagent communication Adapted from Brodie 1989.proach, users would no longer be obliged to spell out each action for the computer explicitly instead, the flexibility and intelligence of software agents wouldallow them to give general guidelines and forget about the details.Many of the actions now performed by users could be delegated to varioussoftware agents. Thus, in a glimpse of the future, Tesler 1991 imagines the following directives being given by a person to a software agent On what date in February did I record a phone conversation with Sam Make me an appointment at a tire shop that is on my way home and isopen after 6 PM. Distribute this draft to the rest of the group and let me know when theyveread it. Whenever a paper is published on fullerene molecules, order a copy for mylibrary.Later on in the day, Tesler imagines the agent catching up to the person withthese followup messages You asked me when you last recorded a phone conversation with Sam. Itwas on February 27. Shall I play the recording You scribbled a note last week that your tires were low. I could get you anappointment for tonight. Laszlo has discarded the last four drafts you sent him without reading anyof them. You have requested papers on fullerene research. Shall I order papers onother organic microclusters as wellDirect manipulation and indirect management approaches are not mutually exclusive. Interface agent researchers are not out to completely do away with computing as we know it, but more modestly hope that complementing seeandpoint interfaces with askanddelegate extensions will help reduce requiredknowledge and simplify necessary actions while maintaining a sufficient level ofpredictability. Specifically, the use of software agents will eventually help overcome the limitations of passive artifact interfaces in the following ways table 2 Scalability Agents can be equipped with search and filtering capabilities thatrun in the background to help people explore vast sources of information. Scheduled or eventdriven actions Agents can be instructed to execute tasksat specific times or automatically wake up and react in response to systemgenerated events. Abstraction and delegation Agents can be made extensible and composablein ways that common iconic interface objects cannot. Because we cancommunicate with them, they can share our goals, rather than simplyprocess our commands. They can show us how to do things and tell uswhat went wrong Miller and Neches 1987. Flexibility and opportunism Because they can be instructed at the level of16 BRADSHAWgoals and strategies, agents can find ways to work around unforeseenproblems and exploit new opportunities as they help solve problems. Task orientation Agents can be designed to take the context of the personstasks and situation into account as they present information and take action. Adaptivity Agents can use learning algorithms to continually improvetheir behavior by noticing recurrent patterns of actions and events.Toward AgentEnabled System ArchitecturesIn the future, assistant agents at the user interface and resourcemanagingagents behind the scenes will increasingly pair up to provide an unprecedentedlevel of functionality to people. A key enabler is the packaging of data and software into components that can provide comprehensive information aboutthemselves at a finegrain level to the agents that act upon them.Over time, large undifferentiated data sets will be restructured into smaller elements that are welldescribed by rich metadata, and complex monolithic applications will be transformed into a dynamic collection of simpler parts with selfdescribing programming interfaces. Ultimately, all data will reside in aknowledge soup, where agents assemble and present small bits of informationfrom a variety of data sources on the fly as appropriate to a given context figure7 Neches et al. 1991 Sowa 1990. In such an environment, individuals andgroups would no longer be forced to manage a passive collection of disparatedocuments to get something done. Instead, they would interact with activeknowledge media Barrett 1992 Bradshaw et al. 1993b Brown and Duguid 1996Glicksman, Weber, and Gruber 1992 Gruber, Tenenbaum, and Weber 1992that integrate needed resources and actively collaborate with them on their tasks.Figure 7 illustrates the various roles agents could play in an agentenabled system architecture. Some could act in the role of intelligent user interface managers,AN INTRODUCTION TO SOFTWARE AGENTS 17Typical Limitations of Direct ManipulationInterfacesAdvantages of AgentOriented ApproachLarge search space ScalabilityActions in response to immediate userinteraction onlyScheduled or eventdriven actionsNo composition Abstraction and delegationRigidity Flexibility and opportunismFunction orientation Task orientationNo improvement of behavior AdaptivityTable 2. Typical limitations of direct manipulation interfaces and advantages of agentoriented approach.drawing on the resources of other agents working behind the scenes Arens et al.1991 Browne, Totterdell, and Norman 1990 Kay 1990 Neal and Shapiro 1994Sullivan and Tyler 1991. Such agents would work in concert to help coordinatethe selection of the appropriate display modes and representations for the relevantdata Bradshaw and Boose 1992 Johnson et al. 1994, incorporating semantic representations of the knowledge in the documents to enhance navigation and information retrieval Boy 1992 Bradshaw and Boy 1993 Gruber, Tenenbaum, andWeber 1992 Lethbridge and Skuce 1992 Math and Chen 1994. Because the layout and content of the views would be driven by context and configuration models rather than by handcrafted userinterface code, significant economies could berealized as the data and software components are reused and semiautomaticallyreconfigured for different settings and purposes. Some agents might be represented explicitly to the user as various types of personal assistants Maes 1997. Ideally,each software component would be agentenabled, however for practical reasons components may at times still rely on traditional interapplication communication mechanisms rather than agenttoagent protocols.Overview of the BookThe first subsection summarizes the first set of chapters under the heading ofAgents and the User Experience, which contain introductory pieces authoredby proponents and a critic of agent technology. The next set, Agents for18 BRADSHAWAA AAIntegrated interfaceto knowledgemediaAgent aspersonalassistantAgents as intelligentinterface managersAgenttoagentcommunicationInterapplication communicationAgentsbehind thescenesAFigure 7  An agentenabled system architecture.Learning and Intelligent Assistance, describes how agents have been used toenhance learning and provide intelligent assistance to users in situations wheredirect manipulation interfaces alone are insufficient. The final set, Agent Communication, Collaboration, and Mobility, details various approaches to agentoriented programming, agenttoagent communication, and agent mobility, aswell as the use of agents to provide intelligent interoperability between looselycoupled components of distributed systems.Agents and the User ExperienceHow Might People Interact with Agents Normans 1997 introductory chapter sets the stage for the first section of the book. Agents occupy a strange placein the realm of technology, he opens, leading to much fear, fiction, and extravagant claims. Because the new crop of intelligent agents differ so significantlyin their computational power from their predecessors, we need to take into account the social issues no less than the technical ones if our designs are to be acceptable to peopleThe technical aspect is to devise a computational structure that guarantees thatfrom the technical standpoint, all is under control. This is not an easy task.The social part of acceptability is to provide reassurance that all is working according to plan This is also a nontrivial task.The reassurance that all is working according to plan is provided by an understandable and controllable level of feedback about the agents intentions andactions. We must also think about how to accurately convey the agents capabilities and limitations so that people are not misled in their expectations. Part ofthe problem is the natural overenthusiasm of agent researchers part of theproblem is peoples tendency to falsely anthropomorphize.15 Although designerscan carefully describe agent capabilities and limitations within accompanyinginstructional manuals, it is even more important to find clever ways to weavethis information naturally and effectively into the agent interface itself.Safety and privacy are additional concerns. How does one guard againsterror, maliciousness as in the spread of computer viruses, and deliberate intentto pry and probe within ones personal records Legal policies to address theseissues must be formulatedimmediately, at local, national, and global levels.A final concern is how to design the appropriate form of interaction betweenagents and people. For example, how do ordinary people program the agent todo what they want While programmingbydemonstration or simplified visualor scripting languages have been suggested, none of them seem adequate to specify the kinds of complex tasks envisioned for future intelligent agents.16Since agents are here to stay, we must learn how to cope with the dangers along with the positive contributions. None of these negative aspects ofagents are inevitable. All can be eliminated or minimized, but only if weAN INTRODUCTION TO SOFTWARE AGENTS 19consider these aspects in the design of our intelligent systems.Agents From Direct Manipulation to Delegation. In his chapter, Nicholas Negroponte 1997, a longtime champion of agent technology Negroponte 1970,1995, extols the virtues of delegation in intelligent interfacesThe best metaphor I can conceive of for a humancomputer interface is that of awelltrained English butler. The agent answers the phone, recognizes the callers,disturbs you when appropriate, and may even tell a white lie on your behalf. Thesame agent is well trained in timing and respectful of idiosyncrasies. People whoknow the butler enjoy considerable advantage over a total stranger. That is justfine. Negroponte 1997.What will such digital butlers do They will filter, extract, and present therelevant information from bodies of information larger than we could ordinarily digest on their own. They will act as digital sistersinlaw, combining theirknowledge of information and computing services with intimate knowledgeabout the person on whose behalf they are acting.To create agents that are intelligent enough to perform these tasks to ourlevel of satisfaction, we will need to reopen profound and basic questions of intelligence and learning that past AI research has left largely untouched. An understanding of decentralized approaches to intelligence is key coherence canemerge from the activity of independent agents who coordinate their actions indirectly through shared external influences in their common environment.17User interface design will also be decentralized. Instead of being an effort byprofessionals to produce the best interface for the masses, it will become an individual affair, driven more by the personalized intelligence of ones local agentsthan the blanket application of general humanfactors knowledge. The agentslongtime familiarity with a person, gained by numerous shared experiences,will be critical to the new beyondthedesktop metaphor. Though direct manipulation has its place, Negroponte believes that most people would prefer to runtheir home and office life with a gaggle of welltrained butlers.Interface Agents Metaphors with Character. The thesis of Laurels 1997 chapter is that unabashed anthropomorphism in the design of interface agents isboth natural and appropriateFirst, this form of representation makes optimal use of our ability to make accurate inferences about how a character is likely to think, decide, and act on the basisof its external traits. This marvelous cognitive shorthand is what makes plays andmovies work Second, the agent as character whether humanoid, canine, cartoonish, or cybernetic invites conversational interaction without necessarily requiring elaborate natural language processing Third, the metaphor of charactersuccessfully draws our attention to just those qualities that form the essential nature of an agent responsiveness, competence, accessibility, and the capacity to perform actions on our behalf.Recognizing the considerable resistance many will have to this idea, she responds20 BRADSHAWto some of the most common criticisms. First, is the objection to having to facewhining, chatting little irritants each time you turn on the machine. Laurelnotes that the problem is not agents per se, but rather the traits they are assumedto possess. To address this problem, we must allow the traits of agents to be fullyuserconfigurable. Another criticism is the indirection implied by the presence ofan agent, Why should I have to negotiate with some little dip in a bowtie whenI know exactly what I want to do The answer is that if you know what youwant to do and if you want to do it yourself, the agent should quickly get out ofyour way. Agentbased assistance should be reserved for tedious or complex tasksthat you dont want to do yourself, and that you are comfortable entrusting to asoftware entity. Will peoples acquired habit of bossing agents around lead themto treating real people the same way Laurel argues that this is a real issue, butshould not be handled by repression of the dramatic formrather it should beaddressed as an ethical problem for agent designers and the culture at large. Finally, there is the oftheard criticism that AI doesnt work. Laurel counterswith examples of successful use of AI techniques in welldefined domains. Moreove, she asserts that most agents do not need a fullblown artificial personality,but can be implemented much more simply.Laurel concludes with a discussion of key characteristics of interface agentsagency, responsiveness, competence, and accessibility and of an RD agendathat includes an appreciation of the contribution of studies of story generationand dramatic character.18Designing Agents as if People Mattered. Erickson 1997 explores the manydifficulties surrounding adaptive functionality and the agent metaphor. Withrespect to adaptive functionality, he describes three design issues raised in astudy of users of the DowQuest information retrieval system. In brief, peopleneed to understand what happened and why when a system alters its responsethey need to be able to control the actions of a system, even when it does not always wait for the users input before it makes a move and they need to predictwhat will happen, even though the system will change its responses over time.Several approaches to these problems have been suggested, including providingusers with a more accurate model of what is going on, managing overblown expectations of users at the beginning so they are willing to persist long enough tobenefit from the systems incremental learning, and constructing a plausiblefictional model of what is going on.Given the potential of the agent metaphor as a possible fiction for portrayingsystem functionality, Erickson examines three strands of research that shedsome light on how well this approach might work. Designed to encourage students to explore an interactive encyclopedia, the Guides project allowed researchers to observe the kinds of attributions and the level of emotional engagement people had with stereotypic characters that assisted in navigation.Erickson also reviews the extensive research that Nass and his colleagues haveAN INTRODUCTION TO SOFTWARE AGENTS 21performed on the tendency of people to use their knowledge of people and social rules to make judgments about computers. Finally, he discusses recent research on the reaction of people to extremely realistic portrayals of agents.In the final section of the chapter, Erickson contrasts the desktop object andagent conceptual models, and argues that they can be used together in the sameinterface so long as they are clearly distinguished from one another. Specificcomputing functionality can be portrayed either as an object or an agent, depending on what is most natural. The desktop metaphor takes advantage ofusers previous knowledge that office artifacts are visible, are passive, have locations, and may contain things. Objects stay where they are nice, safe predictable things that just sit there and hold things. Ontological knowledge of adifferent sort comes into play when the agent metaphor is employed. Our common sense knowledge of what agents can do tells us that, unlike typical desktopobjects, they can notice things, carry out actions, know and learn things, and goplaces.19 Agents become the repositories for adaptive functionality. The overall conclusion is that research which focuses on the portrayal of adaptive functionality, rather than on the functionality itself, is a crucial need if we wish todesign agents that interact gracefully with their users.Direct Manipulation Versus Agents Paths to Predictable, Controllable, andComprehensible Interfaces. Breaking with the tone of cautious optimism expressed in the preceding chapters, Shneiderman, a longtime advocate of directmanipulation, is troubled by the concept of intelligent interfaces in generalFirst, such a classification limits the imagination. We should have much greaterambition than to make a computer behave like an intelligent butler or otherhuman agentSecond, the quality of predictability and control are desirable. If machines are intelligent or adaptive, they may have less of these qualitiesThird, I am concerned that if designers are successful in convincing the users thatcomputers are intelligent, then the users will have a reduced sense of responsibilityfor failuresFinally, machines are not people and if you confuse the way you treat machineswith the way you treat people you may end up treating people like machines.20Shneiderman backs up his general concerns with lessons from past disappointments in natural language systems, speech IO, intelligent computerassisted instruction, and intelligent talking robots.Shneiderman observes that agent proponents have not come up with gooddefinitions of what is and is not an agent. Is a compiler an agent How aboutan optimizing compiler Is a database query an agent Is the print monitor anagent Is email delivered by an agent Is a VCR scheduler an agent His examination of the literature reveals six major elements of the agent approach anthropomorphic presentation, adaptive behavior, acceptance of vague goalspecification, gives you what you need, works while you dont, and works22 BRADSHAWwhere you arent. The first three, on closer examination, seem counterproductive, while the last three are good ideas that could be achieved by other means.The alternative to a vision of computers as intelligent machines is that of predictable and controllable user interfaces, based on direct manipulation of representations of familiar objects. Shneiderman concludes with a description of twoexamples from his own lab tree maps and dynamic queries that show thepower of visual, animated interfaces built on promising strategies like informative and continuous feedback, meaningful control panels, appropriate preference boxes, userselectable toolbars, rapid menu selection, easytocreatemacros, and comprehensible shortcuts. These, he argues, rather than vague visions of intelligent machines, will allow users to specify computer actions rapidly, accurately, and confidently.Agents for Learning and Intelligent AssistanceAgents for Information Sharing and Coordination A History and Some Reflections. The chapter by Malone, Grant, and Lai 1997 reviews more than tenyears of seminal work on a series of programs which were intended to allow unsophisticated computer users to create their own cooperative work applicationsusing a set of simple, but powerful, building blocks. The work is based on twokey design principles, which each imply a particular kind of humility thatshould be required of agent designers1. Dont build computational agents that try to solve complex problems all by themselves. Instead, build systems where the boundary between what the agents do andwhat the humans do is a flexible one. We call this the principle of semiformal systems2. Dont build agents that try to figure out for themselves things that humanscould easily tell them. Instead, try to build systems that make it as easy as possiblefor humans to see and modify the same information and reasoning processes theiragents are using. We call this the principle of radical tailorabilityInformation Lens, the first program in the series, was a system for intelligentsorting and processing of electronic mail messages. Object Lens and Oval weresuccessor programs providing much more general and tailorable environmentsthat extended beyond the domain of electronic mail filtering.The name Oval is an acronym for the four key components of the systemobjects, views, agents, and links. By defining and modifying templates forvarious semistructured objects, users can represent information about people,tasks, products, messages, and many other kinds of information in a form thatcan be processed intelligently by both people and their computers. By collecting these objects in customizable folders, users can create their own viewswhich summarize selected information from the objects. By creating semiautonomous agents, users can specify rules for automatically processing this information in different ways at different times. Finally, links, are used for connecting and relating different objects Lai and Malone 1992.AN INTRODUCTION TO SOFTWARE AGENTS 23The authors describe several different applications that were created to show thepower and generality of the Oval approach.21 All these demonstrate the surprisingpower that semiformal information processing can provide to people, and lend credence to the claim that people without formal programming skills can be enabledto create agentbased computing environments that suit their individual needs.Agents that Reduce Work and Information Overload. While the developers ofOval have explored ways to simplify agent authoring, Pattie Maes and her colleagues at MIT have pursued an approach that allows personal assistants to learnappropriate behavior from user feedback Maes 1997. The personal assistantstarts out with very little knowledge and over time becomes more experienced,gradually building up a relationship of understanding and trust with the userWe believe that the learning approach has several advantages over enduserprogramming and knowledgebased approaches First, it requires less workfrom the enduser and application developer. Second, the agent can more easilyadapt to the user over time and become customized to individual and organizational preferences and habits. Finally, the approach helps in transferring information, habits and knowhow among the different users of a community.A learning agent acquires its competence from four different sources. First, itcan look over the shoulder of users as they perform actions. Second, it canlearn through direct and indirect feedback from the user. Indirect feedback isprovided when the user ignores the agents suggested action. Third, the agentcan learn from usersupplied examples. Finally, the agent can ask advice fromother users agents that have may have more experience with the same task.Two assumptions determine whether the learning approach is appropriate for agiven application1. The application should involve a significant amount of repetitive behavior.Otherwise, there would be no consistent situationaction patterns for theagent to learn.2. Repetitive behavior should be different for different users. Otherwise, the behavior could be more efficiently hardcoded once and for all in a program,rather than implemented using learning agents.Maes describes four agentbased applications built using the learning approach electronic mail handling Maxims, meeting scheduling,22 Usenet Netnews filtering Newt, and recommending books, music or other forms of entertainment Ringo23 Through clever user feedback mechanisms and tailoringoptions, this approach provides a great deal of functionality from the combination of relatively simple mechanisms.KidSim Programming Agents without a Programming Language. Like Malone and his colleagues, Smith, Cypher, and Spohrer 1997 have focused their attention on the problem of agent authoring. What is unique to their application,however, is that they are trying to create a general and powerful tool for use by24 BRADSHAWchildren. To make this possible, they have adopted a languageless approachWe decided that the question is not what language can we invent that will be easier for people to use The question is should we be using a language at allWeve come to the conclusion that since all previous languages have been unsuccessful, language itself is the problem.. The graphical user interface eliminated command lines by introducing visualrepresentations for concepts and allowing people to directly manipulate those representations Today all successful editors on personal computers follow this approach. But most programming environments do not. This is the reason most people have an easier time editing than programming.KidSim24 now called Cocoa is a tool kit where children can build worldspopulated by agents that they program themselves by demonstration and directmanipulation. Existing agents simulation objects can be modified, and new onescan be defined from scratch. Although agents cannot inherit from one another,they can share elements such as rules. In keeping with the design philosophy ofdirect manipulation, all elements of the simulation are visible in the interface.Languageless programming is accomplished by combining two ideas graphical rewrite rules, and programmingbydemonstration.25 Graphical rewrite rulesdefine transformations of a region of the game board from one state to another.Programmingbydemonstration is accomplished by letting the child put the system into record mode to capture all actions and replay them. A major strengthof KidSim is that the results of recording user actions can be shown graphically,rather than as a difficulttounderstand script, as in most other such systems.The authors describe a series of classroom studies in which children fromages eight to fourteen have used development versions of KidSim. The studieshave led to a refinement of many of the concepts in KidSim, and have in turnprovided convincing evidence that reasonably complex simulations of this sortcan be constructed by very young children. No doubt there are many agent applications for adults that could take advantage of similar principles to makeprogramming accessible.Lifelike Computer Characters The Persona Project at Microsoft. While manysoftware agent researchers are content to make agents that are merely useful,others seek the more ambitious goal of making complete agents that are highlyvisible in the user interface, project the illusion of being aware and intentioned,and are capable of emotions and significant social interaction. The Persona project Ball et al. 1997 was formed to prototype possible interfaces to future computerbased assistants, in this case a conversational, anthropomorphic computercharacter that will interact with the user to accept task assignments and reportresults. To be successful, such assistants will need to support interactive giveand take including task negotiation and clarifying questions, understand howand when it is appropriate to interrupt the user with a report or request forAN INTRODUCTION TO SOFTWARE AGENTS 25input, and acknowledge the social and emotional impacts of interaction.The creation of lifelike computer characters requires a wide variety of technologies and skills, including speech recognition, natural language understanding, animation, and speech synthesis. A sophisticated understanding of subtledialogue mechanisms and social psychology is also essential. To add to this challenge, all the necessary computational machinery to support these technologiesmust ultimately be able to run with acceptable performance on garden varietycomputing platforms.The application chosen for the project described in this chapter involves ananimated character Personal Digital Parrot One, PDP1, or Peedy for shortthat acts as a knowledgeable compact disc changer The assistant can bequeried as to what CDs are available by artist, title or genre, additional information can be obtained about the CDs, and a playlist can be generated. Peedyresponds verbally and by doing things to spoken commands in a restricted subset of natural language.The application relies on two major technology components reactive animationand natural language. ReActor represents a visual scene and accompanying entitiessuch as cameras and lights hierarchically. The most interesting aspect of the animation is its reactivity, i.e., the fact that complex behaviors, including emotion, canbe triggered by user input. The natural language capability relies on the Whisperspeech recognition module and on a broadcoverage natural language parser.The creation of such prototypes has allowed Ball and his colleagues to discover and explore many littleunderstood aspects of humancomputer interactionand to point the way toward the creation of increasingly sophisticated lifelikeconversational assistants in the future.Software Agents for Cooperative Learning. Boys chapter 1997 examines therole of agents in learning technology. He briefly reviews significant trends of thepast, including computerbased training, intelligent tutoring systems, interactive learning systems, and cooperative learning systems. Computersupportedcooperative learning CSCL builds on the lessons learned from these past approaches to provide an environment where knowledge is exchanged via activeelectronic documents.Four requirements guide the design of active documents 1. providing the appropriate illusion that is useful and natural for the user to understand its content2. providing appropriate indexing and linking mechanisms to connect the document with other relevant documents 3. providing adaptivity so that over timethe document becomes increasingly tailored to the information requirements ofparticular users and 4. including dynamic simulations to enable people to understand aspects of complex situations that cannot be adequately represented usinga static medium such as paper.Software agents for cooperative learning are designed to transform standardelectronic documents into active ones. Drawing on extensive past research expe26 BRADSHAWrience with the Situation Recognition and Analytical Reasoning SRAR modeland the knowledge block representation Boy 1992 Boy 1991 Boy and Math1993 Math and Chen 1994, he defines an agent in the context of this chapterto be a software entity that can be represented by a knowledge block with aninterface metaphor appearance.As an example of an agentbased CSCL system Boy describes ACTIDOC, aprototype environment for active documents that has been applied in the domain of physics instruction. ACTIDOC documents consist of an ordered set ofpages containing content and software agents to make the content active. Eachagent contains a name, a context, a set of triggering conditions, a set of internalmechanisms, and a set of interface metaphors. From Schank and Jonas 1991six learning architectures, Boy derives classes of agents useful in active document design casebased learning agent, incidental learning agent, problemsolvingagent, video database agent, simulation agent, and suggestivequestions agent. Additionally he defines the roles of evaluation, instructor aid, and networking agents.These are illustrated using a physics example that demonstrates one way thatagents can be used to make document content come alive.The M System. Based on Minskys Society of Mind SOM theory Minsky 1986,the M system Riecken 1997 is designed to provide intelligent assistance in abroad range of tasks through the integration of different reasoning processessocieties of agents. The architecture has previously been applied in the domainsof music composition and intelligent user interface agents this paper describeshow M assists users of a desktop multimedia conferencing environment to classify and manage metaphorical electronic objects such as documents, ink, images, markers, white boards, copy machines, and staplers.In the Virtual Meeting Room VMR application, participants collaborateusing penbased computers and a telephoneEach user is supported by a personalized assistant, which attempts to recognizeand define relationships between domain objects, based on the actions performedby the users and the resulting new states of the world. For example, VMR participants may perform actions on a group of electronic documents such as joiningthem as a set or annotating them collectively. M attempts to identify all domain objects and classify relationships between various subsets based on their physicalproperties and relevant user actions.Within M there are five major reasoning processes, each of which are viewed asindividual agents spatial, structural, functional, temporal, and causal. Other moresimple agents function as supporting agents. Functioning as a set of SOM memory machines, these supporting agents represent conceptual knowledge aboutthings like color, shape, and spatial relationships. As an architecture of integrated agents, M dynamically generates, ranks, and modifies simultaneous theoriesabout what is going on in the VMR world. As a faithful implementation ofSOM theory, M provides for an IO system, a spreading activation semantic netAN INTRODUCTION TO SOFTWARE AGENTS 27work to implement Minskys Klinespolynemes, a rulebased system, a scripting system, a blackboard system to implement Minskys transframes andpronomes, and a history log file system.To Riecken, an agent is fundamentally a simple, specialized reasoning process, whereas an assistant is composed of many agencies of agents To handle acommon sense problem, one would not typically call on an agentinstead, onewould want an assistant endowed with the talents of many integrated agents.Agent Communication, Collaboration, and MobilityAn Overview of AgentOriented Programming. Agentoriented programmingAOP is a term that Shoham 1977 has proposed for the set of activities necessaryto create software agents. What he means by agent is an entity whose state isviewed as consisting of mental components such as beliefs, capabilities, choices,and commitments. Agentoriented programming can be thought of as a specialization of objectoriented programming approach, with constraints on what kindsof statedefining parameters, message types, and methods are appropriate. Fromthis perspective, an agent is essentially an object with an attitude.An agents mental state consists of components such as beliefs, decisions,capabilities, and obligations. Shoham formally describes the state in an extension of standard epistemic logics, and defines operators for obligation, decision,and capability. Agent programs control the behavior and mental state of agents.These programs are executed by an agent interpreter. In the spirit of speech acttheory, interagent communication is implemented as speech act primitives ofvarious types, such as inform, request, or refrain.An agent interpreter assures that each agent will iterate through two steps atregular intervals 1 read the current messages and update its mental state including beliefs and commitments, and 2 execute the commitments for the current time, possibly resulting in further belief change. Shohams original agent interpreter, AGENT0, implements five language elements fact statements Smithis an employee of Acme, communicative action statements inform, request, refrain, conditional action statements If, at time t, you believe that Smith is an employee of Acme, then inform agent A of the fact, variables, and commitmentrules If you receive message x while in the mental state y, perform action z.The basic concepts described by Shoham have influenced the direction ofmany other agent researchers. He and his colleagues have continued their investigations on several fronts including mental states, algorithmic issues, the role ofagents in digital libraries, and social laws among agents.KQML as an Agent Communication Language. While Shohams definition of anagent is built around a formal description of its mental state, other groups of researchers have taken agent communication as their point of departure.26 In this28 BRADSHAWchapter, Finin, Labrou and Mayfield 1997 justify such a rationale as followsThe building block for intelligent interaction is knowledge sharing that includesboth mutual understanding of knowledge and the communication of that knowledge.The importance of such communication is emphasized by Genesereth, who goes so faras to suggest that an entity is a software agent if and only if it communicates correctlyin an agent communication language Genesereth and Ketchpel 1994. After all, it ishard to picture cyberspace with entities that exist only in isolation it would go againstour perception of a decentralized, interconnected electronic universe.After an overview of the work of the Knowledge Sharing Effort KSE consortium Neches et al. 1991 to tackle various issues relating to software agentsand interoperability, the authors focus on one particular result of the effortKQML Knowledge Query Manipulation Language.The authors suggest seven categories of requirements for an agent communication language Form. It should be declarative, syntactically simple, and easily readable bypeople and programs. Content. A distinction should be made between the language that expressescommunicative acts performatives and the language that conveys thecontent of the message. Semantics. The semantics should exhibit those desirable properties expected of the semantics of any other language. Implementation. The implementation should be efficient, provide a good fitwith existing software, hide the details of lower layers, and allow simpleagents to implement subsets of the language. Networking. It should support all important aspects of modern networkingtechnology, and should be independent of transport mechanism. Environment. It must cope with heterogeneity and dynamism. Reliability. It must support reliable and secure agent communication.After a review of the features of KQML, the authors describe how the features of KQML support each of these requirements. The authors conclude bydescribing various applications of KQML and by giving a comparison with tworelated approaches AOP and Telescript.An AgentBased Framework for Interoperability. Genesereth 1997 continuesthe theme of agent communication with his chapter on the role of agents in enabling interoperability, meaning that software created by different developersand at different times works together in seamless manner. He discusses twolimitations of current software interoperability technologies 1. they lack theability to communicate definitions, theorems, and assumptions that may beneeded for one system to communicate effectively with another, and 2. there isno general way of resolving inconsistencies in the use of syntax and vocabulary.Like Finin and his colleagues, Genesereth has been a major contributor toAN INTRODUCTION TO SOFTWARE AGENTS 29the KSE. His ACL agent communication language draws on three cornerstones of the KSE approach vocabularies, ontologies KIF Knowledge Interchange Format, and KQML. The vocabulary of ACL is represented as a sophisticated openended dictionary of terms that can be referenced by thecooperating agents and applications.27 KIF is a particular syntax for first orderpredicate calculus that provides for a common internal knowledge representation, an inner language for agents Genesereth and Fikes 1992. It was originally developed by Genesereths group and is currently being refined as part ofan ISO standardization effort. In the ACL approach, KQML is viewed as a linguistic layer on top of KIF that allows information about the context e.g.,sender, receiver, time of message history to be taken into account as part ofagent messages. In short, an ACL message is a KQML expression in which thearguments are terms or sentences in KIF formed from words in the ACL vocabulary Genesereth and Ketchpel 1994.The concept of a facilitator is central to ACL. Agents and facilitators are organized into a federated system, in which agents surrender their autonomy in exchangefor the facilitators services. Facilitators coordinate the activities of agents and provide other services such as locating other agents by name white pages or  by capabilities yellow pages, direct communication, contentbased routing, messagetranslation, problem decomposition, and monitoring. Upon startup, an agent initiates an ACL connection to the local facilitator and provides a description of its capabilities. It then sends the facilitator requests when it cannot supply its own needs,and is expected to act to the best of its ability to satisfy the facilitators requests.Genesereth describes several examples of applications and summarizes issueswhere further work is needed. ACL is an important step toward the ambitiouslongrange vision where any system software or hardware can interoperate withany other system, without the intervention of human users or programmers.Agents for Information Gathering. The chapter by Knoblock and Ambite1977 provides an indepth example of the use of agents for an importantclass of problems information gathering. The SIMS architecture for intelligent information agents is designed to provide1. modularity in terms of representing an information agent and informationsources,2. extensibility in terms of adding new information agents and informationsources,3. flexibility in terms of selecting the most appropriate information sources toanswer a query,4. efficiency in terms of minimizing the overall execution time for a givenquery, and5. adaptability in terms of being able to track semantic discrepancies amongmodels of different agents.30 BRADSHAWEach SIMS information agent provides expertise on a specific topic by drawing upon other information agents and data repositories. An existing databaseor program can be turned into a simple information agent by building the appropriate interface code, called a wrapper, that will allow it to conform to theconventions of the particular agent organization Such an approach greatlysimplifies the individual agents since they need to handle only one underlyinglanguage. This arrangement makes it possible to scale the network into manyagents with access to many different types of information sources. Agents thatanswer queries but do not originate them are referred to as data repositories.Each SIMS agent contains a detailed model of its domain of expertise anontology and models of the information sources that are available to it. Givenan information request, an agent selects an appropriate set of informationsources, generates a plan to retrieve and process the data, uses knowledge aboutinformation sources to reformulate the plan for efficiency, and executes theplan. KQML is used as the communication language in which messages aretransmitted among agents, while Loom MacGregor 1990 is used as the contentlanguage in which queries and responses are formulated.A learning capability helps agents improve their overall efficiency and accuracy. Three modes of learning are used caching data that is frequently retrievedor which may be difficult to retrieve, learning about the contents of informationsources so as to minimize the cost of retrieval, and analyzing the contents of information sources so as to refine its domain model. To date, the authors have built information agents that plan and learn in thelogistics planning domain. They are continuing to extend the planning andlearning capabilities of these agents.KAoS Toward an IndustrialStrength Open Agent Architecture. It is ironicthat as various sorts of agents are increasingly used to solve problems of software interoperability, we are now faced with the problem of incompatible competing agent frameworksThe current lack of standards and supporting infrastructure has prevented thething most users of agents in realworld applications most need agent interoperability Gardner 1996 Virdhagriswaran, Osisek, and OConnor 1995. A key characteristic of agents is their ability to serve as universal mediators, tying together looselycoupled, heterogeneous componentsthe last thing anyone wants is an agentarchitecture that can accommodate only a single native language and a limited set ofproprietary services to which it alone can provide access.The longterm objective of the KAoS Knowledgeable Agentoriented Systemagent architecture Bradshaw et al. 1997 is to address two major limitations ofcurrent agent technology 1. failure to address infrastructure, scalability, and security issues and 2. problems with the semantics and lack of principled extensibilityof agent communication languages such as KQML. The first problem is addressed by taking advantage of the capabilities of commercial distributed objectAN INTRODUCTION TO SOFTWARE AGENTS 31products CORBA, DCOM, Java as a foundation for agent functionality, andsupporting collaborative research and standardsbased efforts to resolve agent interoperability issues. The second problem is addressed by providing an open agentcommunication metaarchitecture in which any number of agent communicationlanguages with their accompanying semantics could be accommodated.Each KAoS agent contains a generic agent instance, which implements as a minimum the basic infrastructure for agent communication. Specific extensions andcapabilities can be added to the basic structure and protocols through ordinary objectoriented programming mechanisms. Unlike most agent communication architectures, KAoS explicitly takes into account not only the individual message,but also the various sequences of messages in which it may occur. Shared knowledge about message sequencing conventions conversation policies enables agentsto coordinate frequently recurring interactions of a routine nature simply and predictably. Suites provide convenient groupings of conversation policies that supporta set of related services e.g., the Matchmaker suite. A starter set of suites is provided in the architecture but can be extended or replaced as required.The authors experience with KAoS leads them to be optimistic about theprospects for agent architectures built on open, extensible object frameworksand they look forward to the wider availability of interoperable agent implementations that will surely result from continued collaboration.Communicative Actions for Artificial Agents. Cohen and Levesques 1997chapter identifies major issues in the design of languages for interagent communication, with specific application to KQMLThe authors of KQML have yet to provide a precise semantics for this language,as is customary with programming languages.28 Without one, agent designers cannot be certain that the interpretation they are giving to a performative is in factthe same as the one some other designer intended it to have. Moreover, the lack ofa semantics for communication acts leads to a number of confusions in the set ofreserved performatives supplied. Lastly, designers are left unconstrained and unguided in any attempt to extend the set of communication actions.In KQML, communicative actions are considered to belong to a specific classof speech acts called performatives which, in natural language, are utterancesthat succeed simply because speakers say or assert they are doing so e.g., I hereby bequeath my inheritance to my daughter. The authors identify three general difficulties with KQML. First, the definitions of the performatives suffer fromambiguity and vagueness. Second, there are misidentified performatives, that shouldinstead be classes as directives e.g., requests or assertives e.g., informs. Third,there are missing performatives, such as the commissives e.g., promises.The authors respond to these difficulties with an outline an analysis of rational action upon which their theory of speech acts rests. They then show how thespeech acts of requesting and informing can be defined in terms of the primitives from this theory. The implications for future KQML design decisions are32 BRADSHAWtwofold. First, if developers are allowed to extend the set of KQML performatives, they must provide both correct implementations of the directive force ofnew actions as well as assure that the new actions enter into old and new conversation patterns correctly. Second, if the communication primitives are to behandled independently of the content of the message, developers must not allowany attitude operators in the content e.g., not permit an agent who says that itrequests an act to also say that it does not want the act done.The authors provide a comparison with other agent communication languages including AOP, Telescript, and their own Open Agent ArchitectureOAA approach Cohen and Cheyer 1994. Additional work in joint intentiontheory Cohen 1994 Cohen and Levesque 1991 Smith and Cohen 1995 is required to clarify how communicative actions function in the initiation of teambehavior, and how they may be able to predict the structure of finitestate models of interagent conversations as used in agent architectures such as KAoS.29Mobile Agents. Telescript is an objectoriented remote programming language that is designed to address the problem of interoperability for networkservices White 1997. What PostScript did for crossplatform, deviceindependent documents, Telescript aims to do for crossplatform, networkindependent messagingIn Telescript technology, mobile agents go to places, where they perform tasks onbehalf of a user. Agents and places are completely programmable, but they aremanaged by security features such as permits, authorities, and access controls. Telescript technology is portable, allowing it to be deployed on any platform, over anytransport mechanism, and through assorted mediawireline and wireless. Telescript technology can also handle different content types, including text, graphics,animations, live video, and sounds. Telescript technology turns a network into anopen platform.30 Simplified development, portability, and support for rich messagecontent make the technology applicable to a range of communicating applications,from workflow automation to information services and from network management to electronic markets General Magic 1994.Telescript technology allows developers to bundle data and procedures into anagent that will be sent over the network and executed remotely on the server.31The Telescript agent carries its own agenda and may travel to several places insuccession in order to perform a task. Security for host systems is of paramountconcern. The Telescript runtime engine can be set to prevent agents from examining or modifying the memory, file system, or other resources of the computerson which they execute. Moreover, each agent carries securely formatted and encrypted identification tickets that must be checked by the host before runningcode. The ticket may also carry information about what kinds of tasks the agentis permitted to perform, and the maximum resources it is allowed to expend.White provides a motivation for mobile agent technology in terms of severalexample applications. A comprehensive overview of Telescript technologies andprogramming model and a brief discussion of related work round out the chapter.AN INTRODUCTION TO SOFTWARE AGENTS 33Parting ThoughtsReaders may legitimately complain about the idiosyncratic selection of chapters forthis book. Significant research topics and important bodies of work have certainlybeen neglected32 although I hope that some of this may be rectified in a subsequentvolume. What I have tried to provide is convenient access to an initial collection ofexemplars illustrating the diversity of problems being addressed today by softwareagent technology. Despite the fact that the solutions described here will ultimatelybe replaced by better ones regardless of whether the term software agent survives the next round of computing buzzword evolution, I believe that the kinds ofissues raised and lessons learned from our exploration of software agent technologypoints the way toward the exciting developments of the next millennium.AcknowledgmentsHeartfelt thanks are due to Kathleen Bradshaw and to Ken Ford and MikeHamilton of AAAI Press, who nurtured this project from the beginning and patiently sustained it to a successful end. I am grateful to the authors of the individualchapters for allowing their contributions to appear in this volume, and for manystimulating discussions. Peter Clark, Jim Hoard, and Ian Angus provided helpfulfeedback on an earlier draft of this chapter. Significant support for this effort wasprovided by Boeing management including Cathy Kitto, Ken Neves, and Al Erisman and by my colleagues in the agent research group Bob Carpenter, RobCranfill, Renia Jeffers, Luis Poblete, Tom Robinson, and Amy Sun. The writing ofthis chapter was supported in part by grant R01 HS09407 from the Agency forHealth Care Policy and Research to the Fred Hutchison Cancer Research Center.Notes1. Works by authors such as Schelde 1993, who have chronicled the development ofpopular notions about androids, humanoids, robots, and science fiction creatures, are auseful starting point for software agent designers wanting to plumb the cultural contextof their creations. The chapter Information beyond computers in Lubar 1993 provides a useful grand tour of the subject. See Ford, Glymour, and Hayes 1995 for a delightful collection of essays on android epistemology.2. This is perhaps an overstatement, since researchers with strong roots in artificial life alife and robotics traditions have continued to make significant contributions to our understanding of autonomous agents Maes 1993 Steels 1995. Although most researchers inrobotics have concerned themselves with agents embodied in hardware, some have alsomade significant contributions in the area of software agents. See Etzioni 1993 for arguments that software presents a nolessattractive platform than hardware for the investigation of complete agents in realworld environments. Williams and Nayak 1996 describe a softwarehardware hybrid agent concept they call immobile robots immobots.3. For example, see the operational definition proposed by Shoham An agent is an entity whose state is viewed as consisting of mental components such as beliefs, capabilities,choices, and commitments.34 BRADSHAW4. With apologies to Oliver Goldsmith Bartlett and Beck 1980, p. 3699.5. Alan Turing Turing 1950 proposed what was perhaps the first attempt to operationalize a test for machine intelligence using the criterion of human ascription. Research on believable agents Bates et al. 1994, lifelike computer characters Ball 1996, and agentbasedcomputer games Tackett and Benson 1985 carries on in the same tradition, aiming toproduce the most realistic multimedia experience of computerbased agents possible. Asdiscovered by organizers of the Loebner Prize Competitions Epstein 1992 and theAAAI Robot Competitions Hinkle, Kortenkamp, and Miller 1996 Simmons 1995, onesignificant challenge in objectively judging results of competitions based on pure ascription and performance measures is that unless the evaluation criteria are wellthought out,agents or robots relying on cheap programming tricks may consistently outperform thosewho may be demonstrating some more legitimate kind of machine intelligence.6. Russell and Norvig 1995, p. 821 discuss the fact that while ascribing beliefs, desires, andintentions to agents the concept of an intentional stance might help us avoid the paradoxesand clashes of intuition, the fact that it is rooted in a relativistic folk psychology can createother sorts of problems. Resnick and Martin Martin 1988 Resnick and Martin 1990 describe examples of how, in real life, people quite easily and naturally shift between the different kinds of descriptions of designed artifacts see footnote 11. Erickson 1997, Laurel1997, and Shneiderman 1997 offer additional perspectives on the consequences of encouraging users to think in terms of agents.7. Milewski and Lewis 1994 review the organizational psychology and managementscience literature regarding delegation. They draw implications for agent design, including delegation costbenefit tradeoffs, kinds of communication required, determinants oftrust, performance controls, and differences in personality and culture.8. The difference between an automaton and an agent is a somewhat like the difference between a dog and a butler. If you send your dog to buy a copy of the New YorkTimes every morning, it will come back with its mouth empty if the news stand happensto have run out one day. In contrast, the butler will probably take the initiative to buyyou a copy of the Washington Post, since he knows that sometimes you read it insteadLe Du 1994, my translation.9. Newquist 1994 gives a similarlyflavored critique of the overhyping of intelligencein various products. 10. Shoham goes on to cite the following statement by John McCarthy, who distinguishesbetween the legitimacy of describing mental qualities to machines and its usefulnessTo ascribe certain beliefs, free will, intentions, consciousness, abilities or wants to a machineor computer program is legitimate when such an ascription expresses the same information about the machine that it expresses about a person. It is useful when the ascriptionhelps us understand the structure of the machine, its past or future behavior, or how torepair or improve it. It is perhaps never logically required even for humans, but expressing reasonably briefly what is actually known about the state of the machine in a particular situation may require mental qualities or qualities isomorphic to them. Theories ofbelief, knowledge and wanting can be constructed for machines in a simpler setting thanfor humans, and later applied to humans. Ascription of mental qualities is most straightforward for machines of known structure such as thermostats and computer operatingsystems, but is most useful when applied to entities whose structure is very incompletelyknown McCarthy 1979.11. Of course, in real life, people quite easily and naturally shift between the differentkinds of descriptions. For example, Resnick and Martin report the following about theirresearch with children building LEGO robots As students play with artificial creatures,AN INTRODUCTION TO SOFTWARE AGENTS 35we are particularly interested in how the students think about the creatures. Do theythink of the LEGO creatures as machines, or as animals In fact, we have found that students and adults regard the creatures in many different ways. Sometimes students viewtheir creatures on a mechanistic level, examining how one LEGO piece makes anothermove. At other times, they might shift to the information level, exploring how information flows from one electronic brick to another. At still other times, students view thecreatures on a psychological level, attributing intentionality or personality to the creatures.One creature wants to get to the light. Another creature likes the dark. A third isscared of loud noises.Sometimes, students will shift rapidly between levels of description. Consider, for example, the comments of Sara, a fifthgrader Martin 1988. Sara was considering whetherher creature would sound a signal when its touch sensor was pushedIt depends on whether the machine wants to tell if we want the machine to tellus if we tell the machine to tell us.Within a span of ten seconds, Sara described the situation in three different ways.First she viewed the machine on a psychological level, focusing on what the machinewants. Then she shifted intentionality to the programmer, and viewed the programmeron a psychological level. Finally, she shifted to a mechanistic explanation, in which theprogrammer explicitly told the machine what to do.Which is the correct level That is a natural, but misleading question. Complex systems can be meaningfully described at many different levels. Which level is best depends on the context on what you already understand and on what you hope to learn. Incertain situations, for certain questions, the mechanistic level is the best. In other situations, for other questions, the psychological level is best. By playing with artificial creatures, students can learn to shift between levels, learning which levels are best for whichsituations. Resnick and Martin 1990.12. Ideally, this would include some notion of episodic memory. Unfortunately, only twomajor examples of agents incorporating episodic memory in the literature easily cometo mind Winograds 1973 SHRDLU and Vere and Bickmores 1990 basic agent.For a thoughtprovoking look into the consequences of a future where a personalagent might become the ultimate cradletograve companion, experiencing and remembering every event of a lifetime, see The Teddy chapter in Norman 1992.13. In his widely cited article Eye on the Prize Nilsson 1995, Nilsson discusses theshift of emphasis in AI from inventing general problemsolving techniques to what hecalls performance programs, and gives his reasons for believing that there will soon be areinvigoration of efforts to build programs of general, humanlike competence.14. While macro and scripting languages are technically adequate to solve this problem, itseems unlikely that the majority of end users will ever want to endure what it takes tobecome proficient with them In the past two decades there have been numerous attemptsto develop a language for end users Basic, Logo, Smalltalk, Pascal, Playground, HyperTalk, Boxer, etc. All have made progress in expanding the number of people who can program. Yet as a percentage of computer users, this number is still abysmally small. Considerchildren trying to learn programming We hypothesize that fewer than 10 of therechildren who are taught programming continue to program after the class ends EliotSoloway states, My guess is that the number is less than 1 Who in their right mindwould use those languagesany of themafter a class Smith, Cypher, and Spohrer1997. While the software agent perspective does not obviate the need for enduser programming, I believe it has potential as one means of simplifying some of the conceptualbarriers that users and developers face in designing and understanding complex systems.36 BRADSHAW15. Fortunately, people have a lot of experience in judging the limitations of those withwhom they communicate Sometimes people overstate what the computer can do, butwhat people are extremely good at is figuring out what they can get away with. Childrencan size up a substitute teacher in about five minutes Kahle 1993. For evidence thatdevelopers of intelligent software are no less prone than other people to overestimate thecapabilities of their programs, see McDermott 1976.16. Automatic programming is an enterprise with a long history of insatiable requirementsand moving expectations. For example, Rich and Waters 1988 remind us that comparedto programming in machine code, assemblers represented a spectacular level of automation. Moreover, FORTRAN was arguably a greater step forward than anything that has happened since. In particular, it dramatically increased the number of scientific end users whocould operate computers without having to hire a programmer. Today, no one would callFORTRAN a form of automatic programming, though in 1958 the term was quite appropriate. The intractability of fullyautomated, completelygeneral programming is analogousto the problem of automated knowledge acquisition Bradshaw et al. 1993a Ford et al.1993. As Sowa observes Fully automated knowledge acquisition is as difficult as unrestricted natural language understanding. The two problems, in fact, are different aspects ofexactly the same problem the task of building a formal model for some real world systemon the basis of informal descriptions in ordinary language. Alan Perlis once made a remarkthat characterizes that difficulty You cant translate informal specifications into formalspecifications by any formal algorithm.  Sowa 1989.17. Van de Velde 1995 provides a useful discussion of the three coupling mechanismswhich can enable coordination between multiple agents knowledgelevel, symbollevel,and structural. Symbollevel coupling occurs when agents coordinate by exchange ofsymbol structures e.g., messages and knowledgelevel coupling occurs when an agentrationalizes the behavior of multiple agents by ascribing goals and knowledge to themthat, assuming their rational behavior, explains their behavior i.e., through taking anintentional stance. Structural coupling, as discussed extensively by Maturana and Varela1992, occurs when two agents coordinate without exchange of representation, bybeing mutually adapted to the influences that they experience through their common environment For example, a sidewalk plays a coordinating role in the behavior ofpedestrians and drivers and the coordination of soccer players within and acrossteams is mediated primarily by the ball. Similarly, as Clancey 1993 argues, the usefulness of the blackboard metaphor is that it provides an external representation thatregulates the coordination between multiple agents.18. These latter issues are discussed in more detail in a Laurels 1991 book Computers asTheatre.19. It is also easy for people to assume less tangible qualities about agents like that theyare internally consistent, are rational, act in good faith, can introspect, can cooperate toachieve common goals, and have a persistent mental state.20. A more blunt criticism of agents is voiced by Jaron Lanier 1996, who writes, Theidea of intelligent agents is both wrong and evil. I also believe that this is an issues ofreal consequence to the nearterm future of culture and society. As the infobahn rears itsgargantuan head, the agent question looms as a deciding factor in whether this new beastwill be much better than TV, or much worse.  See also his extended online debate withPattie Maes in Lanier and Maes 1996.21. Several commercial products have subsequently incorporated Ovallike capability,though with less generality and sophistication. These include cooperative work tools anddatabases for semistructured information such as Lotus Notes Greif 1994 and CaereAN INTRODUCTION TO SOFTWARE AGENTS 37Pagekeeper, as well as mail readers with rulebased message sorting. Workflow management tools with some of these capabilities have also appeared.22. For other approaches to defining agents for scheduling and calendar managementtasks, see Kautz et al. 1993 Mitchell et al. 1994.23. Maes has formed Firefly Network, Inc. in order to extend the technology developedin Ringo to the Web. Her firefly service uses knowledge about people with similar tastesand interests in music and movies as a means of personalizing its recommendations.24. A sort of Java for kids.25. For a similar approach that relies on graphical rewrite rules, see Repennings 1995Agentsheets.26. This is of course a caricature of both approaches Shoham does not ignore the importance of agent communication in AOP neither would most agent communication researchers argue that some representation of mental state is unnecessary. Davies 1994AgentK language is an attempt to build a hybrid that extends AGENT0 to use KQMLfor communication.27. One wellknown tool that has been used to construct such vocabularies is OntolinguaGruber 1992a, 1992b.28. Recent efforts to provide a semantic foundation for KQML are described in Labrou1996 and Labrou and Finin 1994. Another more general approach to agent language semantics is currently under development by Smith and Cohen 1995.29. Such a strategy parallels the approach of Rosenschein, who designed a compiler thatgenerates finite state machines whose internal states can be proved to correspond to certain logical propositions about the environment Kaelbling and Rosenschein 1990Rosenschein 1995.30. General Magic is working hard to assure that Telescript can take maximum advantage of developments in Internet technology. Its Tabriz AgentWare and Agent Toolsproducts General Magic 1996 integrate Telescript and Web technologies, and Whitehas proposed a common agent platform intended to enable interoperability betweenTelescript and other mobile agent technology White 1996.31. With respect to the relationship between Telescript, Tabriz, and Java, General Magicwrites It is important to note that Telescript and Java are complementary, interoperablelanguages. Telescript agents can set parameters for Java applets and Java applets can callTelescript operations on the server. This interoperability allows developers to create solutions that leverage the power of the two environments Java can be used to create andmanage compelling user experiences, while Tabriz can manage transactions, instructions, events, and processes General Magic 1996.32. Much more, for example, could have been included about the veritable explosion ofwork on agents and the Internet Bowman et al. 1994 Cheong 1996 Etzioni and Weld1995 Weld, Marks, and Bobrow 1995. None of the many applications of agent technology in complex application areas ranging from digital libraries Paepcke et al. 1996Wiederhold 1995 to systems management Benech, Desprats, and Moreau 1996 Rivire,Pell, and Sibilla 1996 to manufacturing Balasubramanian and Norrie 1995 could be included. We have slighted the whole fields of artificial life Langton 1995 situated automata Brooks 1990 Kaelbling and Rosenschein 1991, learning and adaptation Gaines1996 Maes 1995 Sen et al. 1996, and large portions of the voluminous literature on DAIand other fields where important related work is taking place.38 BRADSHAWReferencesApple. 1993. AppleScript Language Guide. Reading, Mass. AddisonWesley.Arens, Y. Feiner, S. Foley, J. Hovy, E. John, B. Neches, R. Pausch, R. Schorr, H. andSwartout, W. 1991. Intelligent User Interfaces, Report ISIRR91288, USCInformationSciences Institute, Marina del Rey, California.Balasubramanian, S., and Norrie, D. H. 1995. A MultiAgent Intelligent Design SystemIntegrating Manufacturing and ShopFloor Control. In Proceedings of the First International Conference on MultiAgent Systems ICMAS95, ed. V. Lesser, 39. Menlo Park,Calif. AAAI Press.Ball, G. 1996. Lifelike Computer Characters LCC96 Schedule and Workshop Information. httpwww.research.microsoft.comlcc.htm. Ball, G. Ling, D. Kurlander, D. Miller, J. Pugh, D. Skelly, T. Stankosky, A. Thiel,D. Dantzich, M. V and Wax, T. 1996. Lifelike Computer Characters The Persona Project at Microsoft Research. In Software Agents, ed J. M. Bradshaw. Menlo Park, Calif.AAAI Press.Barrett, E. 1992. Sociomedia An Introduction. In Sociomedia Multimedia, Hypermedia, andthe Social Construction of Knowledge, ed. E. Barrett, 110. Cambridge, Mass. MIT Press.Bartlett, J., and Beck, E. M., eds. 1980. Familiar Quotations. Boston, Mass. Little, Brown.Bates, J. 1994. The Role of Emotion in Believable Agents. Communications of the ACM377 122125.Bates, J., HayesRoth, B., Laurel, B.,  Nilsson, N. 1994. Papers presented at the AAAISpring Symposium on Believable Agents, Stanford University, Stanford, Calif.Benech, D. Desprats, T. and Moreau, J.J. 1996. A Conceptual Approach to the Integration of Agent Technology in System Management. In Distributed Systems Operations andManagement DSOM96.Bowman, C. M. Danzig, P. B. Manber, U. and Schwartz, M. F. 1994. Scalable InternetResource Discovery Research Problems and Approaches. Communications of the ACM378 98107, 114.Boy, G. 1992. ComputerIntegrated Documentation. In Sociomedia Multimedia, Hypermedia, and the Social Construction of Knowledge, ed. E. Barrett, 507531. Cambridge,Mass. MIT Press.Boy, G. A. 1991. Intelligent Assistant Systems. San Diego, Calif. Academic Press.Boy, G. A. 1997. Software Agents for Cooperative Learning. In Software Agents, ed J. M.Bradshaw. Menlo Park, Calif. AAAI Press.Boy, G. A., and Math, N. 1993. Operator Assistant Systems An Experimental Approach Using a Telerobotics Application. In Knowledge Acquisition as Modeling, eds. K.M. Ford and J. M. Bradshaw,  271286. New York Wiley.Bradshaw, J. M., and Boose, J. H. 1992. Mediating Representations for Knowledge Acquisition, Boeing Computer Services, Seattle, Washington.Bradshaw, J. M., and Boy, G. A. 1993. Adaptive Documents, Internal Technical Report,EURISCO.Bradshaw, J. M., Dutfield, S., Benoit, P.,  Woolley, J. D. 1997. KAoS Toward an industrialstrength generic agent architecture. In Software Agents, ed J. M. Bradshaw. MenloPark, Calif. AAAI Press.Bradshaw, J. M. Ford, K. M. AdamsWebber, J. R. and Boose, J. H. 1993. Beyond theAN INTRODUCTION TO SOFTWARE AGENTS 39Repertory Grid New Approaches to Constructivist KnowledgeAcquisition Tool Development. In Knowledge Acquisition as Modeling, eds. K. M. Ford and J. M. Bradshaw,287333. New York Wiley.Bradshaw, J. M. Richards, T. Fairweather, P. Buchanan, C. Guay, R. Madigan, D.and Boy, G. A. 1993. New Directions for ComputerBased Training and PerformanceSupport in Aerospace. Paper presented at the Fourth International Conference onHumanMachine Interaction and Artificial Intelligence in Aerospace, 2830 September,Toulouse, France.Brodie, M. L. 1989. Future Intelligent Information Systems AI and Database Technologies Working Together. In Readings in Artificial Intelligence and Databases, eds. J. Mylopoulos and M. L. Brodie, 623642. San Francisco, Calif. Morgan Kaufmann.Brooks, R. A. 1990. Elephants Dont Play Chess. Robotics and Autonomous Systems 6.Brown, J. S., and Duguid, P. 1996. The Social Life of Documents. First Mondayhttpwww.firstmonday.dk.Browne, D. Totterdell, P. and Norman, M., eds. 1990. Adaptive User Interfaces. SanDiego, Calif. Academic.Canto, C., and Faliu, O. n.d.. The History of the Future Images of the 21st Century. ParisFlammarion.Chang, D. T., and Lange, D. B. 1996. Mobile Agents A New Paradigm for DistributedObject Computing on the WWW. In Proceedings of the OOPSLA 96 Workshop Toward the Integration of WWW and Distributed Object Technology.Cheong, F.C. 1996. Internet Agents Spiders, Wanderers, Brokers, and Bots. Indianapolis,Ind. New Riders.Clancey, W. J. 1993. The Knowledge Level Reinterpreted Modeling SocioTechnicalSystems. In Knowledge Acquisition as Modeling, eds. K. M. Ford and J. M. Bradshaw,3350. New York Wiley.Cohen, P. R. 1994. Models of Dialogue. In Cognitive Processing for Vision and VoiceProceedings of the Fourth NEC Research Symposium, ed. T. Ishiguro, 181203.Philadelphia, Pa. Society for Industrial and Applied Mathematics.Cohen, P. R., and Cheyer, A. 1994. An Open Agent Architecture. Paper presented at theAAAI Spring Symposium on Software Agents, 2123 March, Stanford, California.Cohen, P. R. and Levesque, H. 1997. Communicative Actions for Artificial Agents. In Software Agents, ed J. M. Bradshaw. Menlo Park, Calif. AAAI Press.Cohen, P. R., and Levesque, H. J. 1991. Teamwork, Technote 504, SRI International,Menlo Park, California.Coutaz, J. 1990. Interfaces Homme Ordinateur Conception et Ralisation. Paris EditionsBordas.Davies, W. H. E. 1994. AGENTK An Integration of AOP and KQML. In Proceedings ofthe CIKM94 Workshop on Intelligent Agents, eds. T. Finin and Y. Labrou.httpwww.csd.abdn.ac.ukpedwardspublsagentk.html.Dennett, D. C. 1987. The Intentional Stance. Cambridge, Mass. MIT Press.diSessa, A. A. 1986. Notes on the Future of Programming Breaking the Utility Barrier.In UserCentered System Design, eds. D. A. Norman and S. W. Draper. Hillsdale, N.J.Lawrence Erlbaum.Epstein, R. 1992. The Quest for the Thinking Computer. AI Magazine 132 8195.40 BRADSHAWErickson, T. 1996. Designing Agents as If People Mattered. In Software Agents, ed J. M.Bradshaw. Menlo Park, Calif. AAAI Press.Etzioni, O. 1993. Intelligence without robotics. AI MagazineWinter, 714.Etzioni, O.,  Weld, D. S. 1995. Intelligent agents on the Internet Fact, fiction, and forecast. IEEE Expert, 104, 4449.Finin, T., Labrou, Y.,  Mayfield, J. 1997. KQML as an agent communication language.In Software Agents, ed. J. M. Bradshaw. Menlo Park, Calif. AAAI Press.Etzioni, O. 1993. Intelligence without Robots A Reply to Brooks. AI Magazine 144713.Etzioni, O., and Weld, D. S. 1995. Intelligent Agents on the Internet Fact, Fiction, andForecast. IEEE Expert 104 4449.Foner, L. 1993. Whats an Agent, Anyway A Sociological Case Study, Agents Memo, 9301,Media Lab, Massachusetts Institute of Technology.Ford, K. M. Glymour, C. and Hayes, P. J., eds. 1995. Android Epistemology. Menlo Park,Calif. AAAI Press.Ford, K. M. Bradshaw, J. M. AdamsWebber, J. R. and Agnew, N. M. 1993. Knowledge Acquisition as a Constructive Modeling Activity. In Knowledge Acquisition as Modeling, eds. K. M. Ford and J. M. Bradshaw,  932. New York Wiley.Franklin, S., and Graesser, A. 1996. Is It an Agent or Just a Program A Taxonomy forAutonomous Agents. In Proceedings of the Third International Workshop on Agent Theories, Architectures, and Languages. New York SpringerVerlag.Gaines, B. R. 1997. The Emergence of Knowledge through Modeling and Management Processes inSocieties of Adaptive Agents,  Knowledge Science Institute, University of Calgary. Forthcoming.Gardner, E. 1996. Standards Hold Key to Unleashing Agents. Web Week 5, 29 April.General Magic. 1996. Tabriz White Paper Transforming Passive Networks into an Active, Persistent, and Secure Business Advantage, White Paperhttpwww.genmagic.comTabrizWhitepaperstabrizwp.html, General Magic, Mountain View, California.General Magic. 1994. Telescript Technologies at Heart of NextGeneration ElectronicServices, News Release, 6 January, General Magic, Mountain View, California.Genesereth, M. R. 1997. An Agentbased Framework for Interoperability. In SoftwareAgents, ed. J. M. Bradshaw. Menlo Park, Calif. AAAI Press.Genesereth, M. R., and Fikes, R. 1992. Knowledge Interchange Format Version 3.0 Reference Manual, Logic Group Report, Logic921, Department of Computer Science,Stanford University.Genesereth, M. R., and Ketchpel, S. P. 1994. Software Agents. Communications of theACM 377 4853, 147.Gilbert, D. Aparicio, M. Atkinson, B. Brady, S. Ciccarino, J. Grosof, B. OConnor, P.Osisek, D. Pritko, S. Spagna, R. and Wilson, L. 1995. IBM Intelligent Agent Strategy,IBM Corporation.Glicksman, J. Weber, J. C. and Gruber, T. R. 1992. The NOTE MAIL Project for ComputerSupported Cooperative Mechanical Design. Paper presented at the AAAI92Workshop on Design Rationale Capture and Use, San Jose, California, July.Greif, I. 1994. Desktop Agents in GroupEnabled Products. Communications of the ACM377 100105.AN INTRODUCTION TO SOFTWARE AGENTS 41Gruber, T. R. 1992a. ONTOLINGUA A Mechanism to Support Portable Ontologies, Version3.0, Technical Report, KSL 9166, Knowledge Systems Laboratory,  Department ofComputer Science, Stanford University.Gruber, T. R. 1992b. A Translation Approach to Portable Ontology Specifications. Paperpresented at the Seventh Knowledge Acquisition for KnowledgeBased Systems Workshop, Banff, Alberta, Canada.Gruber, T. R. Tenenbaum, J. M. and Weber, J. C. 1992. Toward a Knowledge Mediumfor Collaborative Product Development. In Proceedings of the Second InternationalConference on Artificial Intelligence in Design, ed. J. S. Gero. Harrison, C. G. Chess, D. M. and Kershenbaum, A. 1995. Mobile Agents Are They aGood Idea IBM T. J. Watson Research Center.HayesRoth, B. Brownston, L. and Gent, R. V. 1995. Multiagent Collaboration in Directed Improvisation. In Proceedings of the First International Conference on MultiAgentSystems ICMAS95, ed. V. Lesser, 148154. Menlo Park, Calif. AAAI Press.Hinkle, D. Kortenkamp, D. and Miller, D. 1996. The 1995 Robot Competition and Exhibition. AI Magazine 171 3145.Hutchins, E. L. Hollan, J. D. and Norman, D. A. 1986. Direct Manipulation Interfaces.In UserCentered System Design, eds. D. A. Norman and S. W. Draper, 87124. Hillsdale,N.J. Lawrence Erlbaum.Johnson, P. Feiner, S. Marks, J. Maybury, M. and Moore, J., eds. 1994. Paper presentedat the AAAI Spring Symposium on Intelligent MultiMedia MultiModal Systems, Stanford, California.Kaehler, T., and Patterson, D. 1986. A Small Taste of SMALLTALK. BYTE, August,145159.Kaelbling, L. P., and Rosenschein, S. J. 1991. Action and Planning in Embedded Agents.In Designing Autonomous Agents, eds. P. Maes , 3548. Cambridge, Mass. MIT Press.Kaelbling, L. P., and Rosenschein, S. J. 1990. Action and Planning in Embedded Agents.Robotics and Autonomous Systems 612 3548.Kahle, B. 1993. Interview of Brewster Kahle. Intertek 41517.Kautz, H. Selman, B. Coen, M. Ketchpel, S. and Ramming, C. 1994. An Experimentin the Design of Software Agents. In Proceedings of the Twelfth National Conferenceon Artificial Intelligence AAAI94, 438443. Menlo Park, Calif. American Associationfor Artificial Intelligence.Kay, A. 1990. User Interface A Personal View. In The Art of HumanComputer InterfaceDesign, ed. B. Laurel, 191208. Reading, Mass. AddisonWesley.Kay, A. 1984. Computer Software. Scientific American 2513 5359.Knoblock, C. A.,  Ambite, J.L. 1996. Agents for Information Gathering. In SoftwareAgents, ed. J. M. Bradshaw. Menlo Park, Calif. AAAI Press.Labrou, Y. 1996. Semantics for an Agent Communication Language. Ph.D. diss., Dept.of Computer Science, University of Maryland at Baltimore County.Labrou, Y., and Finin, T. 1994. A Semantics Approach for KQMLA GeneralPurposeCommunication Language for Software Agents. In Proceedings of the Third International Conference on Information and Knowledge Management, eds. N. R. Adam, B. K.Bhargava, and Y. Yesha, 447455. New York Association of Computing Machinery.Lai, K.Y., and Malone, T. W. 1992. Oval Version 1.1 Users Guide, Center for Coordination Science, Massachusetts Institute of Technology.42 BRADSHAWLange, D. B. 1996. Agent Transfer Protocol ATP0.1 Draft 4, Tokyo Research Laboratory, IBM Research.Langton, C. G., ed. 1995. Artificial Life An Overview. Cambridge, Mass. MIT Press.Lanier, J. 1996. Agents of Alienation. httpwww.voyagerco.commiscjaron.html.Lanier, J., and Maes, P. 1996. Intelligent Humans  Stupid Humans Hot Wired, 1524July. httpwww.hotwired.combraintennis9629index0a.html.Laurel, B. 1991. Computers as Theatre. Reading, Mass. AddisonWesley.Laurel, B. 1997. Interface agents Metaphors with Character. In Software Agents, ed J. M.Bradshaw. Menlo Park, Calif. AAAI Press.Le Du, B. 1994. Issue 1309, 13 mai. Les Agents, des Assistants dots dIntelligence. 01 Informatique, p. 13.Lethbridge, T. C., and Skuce, D. 1992. Beyond Hypertext Knowledge Management forTechnical Documentation. Submitted to SIGDOC 92. Ottawa, Ontario, Canada.Lewis, J. 1996. NETSCAPE Gets Serious about Infrastructure. The Burton Group.Lubar, S. 1993. InfoCulture The Smithsonian Book of Information and Inventions. Boston,Mass. Houghton Mifflin.McCarthy, J. M. 1979. Ascribing Mental Qualities to Machines, Technical Report, Memo326, AI Lab, Stanford University.McDermott, D. 1976. Artificial Intelligence Meets Natural Stupidity. SIGART Newsletter 5749.MacGregor, R. 1990. The Evolving Technology of ClassificationBased Knowledge Representation Systems. In Principles of Semantic Networks Explorations in the Representationof Knowledge, ed. J. F. Sowa, 385400. San Francisco, Calif. Morgan Kaufmann.Maes, P. 1997. Agents that Reduce Work and Information Overload. In Software Agents,ed. J. M. Bradshaw. Menlo Park, Calif. AAAI Press.Maes, P. 1995. Modeling Adaptive Autonomous Agents. In Artificial Life An Overview,ed. C. G. Langton, 135162. Cambridge, Mass. MIT Press.Maes, P., ed. 1993. Designing Autonomous Agents. Cambridge, Mass. MIT Press.Maes, P., and Kozierok, R. 1993. Learning Interface Agents. In Proceedings of theEleventh National Conference on Artificial Intelligence AAAI93, 459465. MenloPark, Calif. American Association for Artificial Intelligence.Malone, T. W. Grant, K. R. and Lai, K.Y. 1996. Agents for Information Sharing andCoordination A History and Some Reflections. In Software Agents, ed. J. M. Bradshaw.Menlo Park, Calif. AAAI Press.Martin, F. 1988. Children, Cybernetics, and Programmable Turtles. Masters Thesis, MediaLaboratory, Massachusetts Institute of Technology.Math, N., and Chen, J. 1994. A UserCentered Approach to Adaptive Hypertext Basedon an Information Relevance Model. Paper presented at the Fourth International Conference on User Modeling UM 94, Hyannis, Massachusetts.Maturana, H. R., and Varela, F. J. 1992. The Tree of Knowledge The Biological Roots ofHuman Understanding rev. ed.. Boston Shambala.Mellor, P. 1994. CAD ComputerAided Disaster. SOFSEM 94.Milewski, A. E., and Lewis, S. M. 1994. Design of Intelligent Agent User InterfacesDelegation Issues. Technical Report, Oct. 20. ATT Information Technologies Services.AN INTRODUCTION TO SOFTWARE AGENTS 43Miller, J. R., and Neches, R. 1987. Tutorial on Intelligent Interfaces Presented at theSixth National Conference on Artificial Intelligence, 1416 July, Seattle, Washington.Minsky, M. 1986. The Society of Mind. New York Simon  Schuster.Minsky, M., and Riecken, D. 1994. A Conversation with Marvin Minsky about Agents.Communications of the ACM 377 2329.Mitchell, T. Caruana, R. Freitag, D. McDermott, J. and Zabowski, D. 1994. Experience with a Learning Personal Assistant. Communications of the ACM 377 8191.Moulin, B., and Chaibdraa, B. 1996. An Overview of Distributed Artificial Intelligence.In Foundations of Distributed Artificial Intelligence, eds. G. M. P. OHare and N. R. Jennings, 355. New York Wiley.Neal, J. G., and Shapiro, S. C. 1994. KnowledgeBased Multimedia Systems. In Multimedia System, ed. J. F. K. Buford, 403438. Reading, Mass. AddisonWesley.Neches, R. Fikes, R. Finin, T. Gruber, T. Patil, R. Senator, T. and Swartout, W. R.1991. Enabling Technology for Knowledge Sharing. AI Magazine 123 3655.Negroponte, N. 1997. Agents From Direct Manipulation to Delegation. In SoftwareAgents, ed. J. M. Bradshaw. Menlo Park, Calif. AAAI Press.Negroponte, N. 1995. Being Digital. New York Alfred Knopf.Negroponte, N. 1970. The Architecture Machine Towards a More Human Environment.Cambridge, Mass. MIT Press.Newell, A. 1982. The Knowledge Level. Artificial Intelligence 1887127.Newquist, H. P. 1994. Intelligence on DemandSuckers. AI Expert, December, 4243.Nilsson, N. J. 1995. Eye on the Prize. AI Magazine 162 917.Norman, D. A. 1997. How Might People Interact with Agents In Software Agents, ed J.M. Bradshaw. Menlo Park, Calif. AAAI Press.Norman, D. A. 1992. Turn Signals Are the Facial Expressions of Automobiles. Reading,Mass. AddisonWesley.Nwana, H. S. 1996. Software Agents An Overview. Knowledge Engineering Review,113 205244.Paepcke, A. Cousins, S. B. GarciaMolina, H. Hassan, S. W. Ketchpel, S. P.Rscheisen, M. and Winograd, T. 1996. Using Distributed Objects for Digital LibraryInteroperability. IEEE Computer, May, 6168.Perrow, C. 1984. Normal Accidents Living with HighRisk Technologies. New York Basic.Petrie, C. J. 1996. AgentBased Engineering, the Web, and Intelligence. IEEE Expert,116 2429.Repenning, A. 1995. Bending the Rules Steps toward Semantically Enriched GraphicalRewrite Rules. Paper presented at  Visual Languages, Darmstadt, Germany.Resnick, M., and Martin, F. 1990. Children and Artificial Life, EL Memo, 10, MediaLaboratory, Massachusetts Institute of Technology.Rich, C., and Waters, R. C. 1988. Automatic Programming Myths and Prospects. IEEEComputer 218 4051.Riecken, D. 1997. The M System. In Software Agents, ed. J. M. Bradshaw. Menlo Park,Calif. AAAI Press.Rivire, A.I. Pell, A. and Sibilla, M. 1996. Network Management Information IntegrationSolution for Models Interoperability, Technical Report, HewlettPackard Laboratories.44 BRADSHAWRosenschein, S. J. 1985. Formal Theories of Knowledge in AI and Robotics. New Generation Computing 34 345357.Russell, S., and Norvig, P. 1995. Artificial Intelligence A Modern Approach. New YorkPrenticeHall.Ryan, B. 1991. DYNABOOK Revisited with Alan Kay. BYTE, February, 203208.Schank, R. C., and Jona, H. Y. 1991. Empowering the Student New Perspectives on theDesign of Teaching Systems. The Journal of the Learning Sciences 11.Schelde, P. 1993. Androids, Humanoids, and Other Science Fiction Monsters. New YorkNew York University Press.Sen, S. Hogg, T. Rosenschein, J. Grefenstette, J. Huhns, M. and Subramanian, D., eds.1996. Adaptation, Coevolution, and Learning in Multiagent Systems Papers from the1996 AAAI Symposium. Technical Report SS9601. Menlo Park, Calif. AAAI Press.Sharp, M. 1993. Reactive Agents, Technical Report, Apple Computer, Cupertino, Calif.Sharp, M. 1992. Principles for Situated Actions in Designing Virtual Realities. Mastersthesis, Department of Computer Science, University of Calgary.Shaw, M. 1996. Some Patterns for Software Architectures. In Pattern Languages of Program Design, eds. J. O. Coplien and D. C. Schmidt, 453462. Reading, Mass. AddisonWesley.Shneiderman, B. 1997. Direct manipulation vs. agents Paths to predictable, controllable,and comprehensible interfaces. In Software Agents, ed J. M. Bradshaw. Menlo Park,Calif. AAAI Press.Shneiderman, B. 1987. Designing the User Interface Strategies for Effective HumanComputer Interaction. Reading, Mass. AddisonWesley.Shneiderman, B. 1983. Direct Manipulation A Step beyond Programming Languages.IEEE Computer 168 5769.Shoham, Y. 1997. An Overview of Agentoriented Programming. In Software Agents, edJ. M. Bradshaw. Menlo Park, Calif. AAAI Press.Shoham, Y. 1993. AgentOriented Programming. Artificial Intelligence 601 5192.Simmons, R. 1995. The 1994 AAAI Robot Competition and Exhibition. AI Magazine162 1930.Singh, M. P. 1994. Multiagent Systems A Theoretical Framework for Intentions, KnowHow, and Communication. Berlin SpringerVerlag.Smith, D. C., Cypher, A.,  Spohrer, J. 1997. KidSim Programming Agents Without aProgramming Language. In Software Agents, ed. J. M. Bradshaw. Menlo Park, Calif.AAAI Press.Smith, D. C. Irby, C. Kimball, R. Verplank, W. and Harslem, E. 1982. Designing theSTAR User Interface. BYTE 4242282.Smith, I. A., and Cohen, P. R. 1995. Toward a Semantics for a Speech ActBased AgentCommunications Language. In Proceedings of the CIKM Workshop on Intelligent Information Agents, eds. T. Finin and J. Mayfield. New York Association of ComputingMachinery.Sowa, J. F. 1990. Crystallizing Theories out of Knowledge Soup. In Intelligent SystemsState of the Art and Future Systems, eds. Z. W. Ras and M. Zemankova. London EllisHorwood.Sowa, J. F. 1989. Knowledge Acquisition by Teachable Systems. In EPIA 89, LectureAN INTRODUCTION TO SOFTWARE AGENTS 45Notes in Artificial Intelligence, eds. J. P. Martins and E. M. Morgado,  381396. BerlinSpringerVerlag.Steels, L. 1995. The Artificial Life Roots of Artificial Intelligence. In Artificial Life AnOverview, ed. C. G. Langton, 75110. Cambridge, Mass. MIT Press.Sullivan, J. W., and Tyler, S. W., eds. 1991. Intelligent User Interfaces. New York Association of Computing Machinery.Tackett, W. A., and Benson, S. 1985. Real AI for Real Games In Technical Tutorial andDesign Practice, 467486. Tesler, L. G. 1991. Networked Computers in the 1990s. Scientific American, September,8693.Turing, A. M. 1950. Computing Machinery and Intelligence. Mind 59236 433460.Van de Velde, W. 1995. Cognitive ArchitecturesFrom Knowledge Level to StructuralCoupling. In The Biology and Technology of Intelligent Autonomous Agents, ed. L. Steels,197221. Berlin Springer Verlag.Vere, S., and Bickmore, T. 1990. A Basic Agent. Computational Intelligence 64160.Virdhagriswaran, S. Osisek, D. and OConnor, P. 1995. Standardizing Agent Technology. ACM Standards View. In press.Weld, D. Marks, J. and Bobrow, D. G. 1995. The Role of Intelligent Systems in the National Information Infrastructure. AI Magazine 163 4564.White, J. 1997. A Common Agent Platform, httpwww.genmagic.comInternetCapw3cpaper.htm, General Magic, Inc., Sunnyvale, California.White, J. 1997. Mobile Agents. In Software Agents, ed. J. M. Bradshaw. Menlo Park,Calif. AAAI Press.Whittaker, S. 1990. NextGeneration Interfaces. Paper presented at the AAAI SpringSymposium on KnowledgeBased HumanComputer Interaction, Stanford, California,March.Wiederhold, G. 1995. Digital Libraries, Value, and Productivity, Stanford University.Wiederhold, G. 1992. Mediators in the Architecture of Future Information Systems.IEEE Computer, March, 3849.Wiederhold, G. 1989. The Architecture of Future Information Systems, Technical Report, Computer Science Department, Stanford University.Williams, B. C., and Nayak, P. P. 1996. Immobile Robots AI in the New Millennium. AIMagazine 173 1735.Winograd, T. 1973. A Procedural Model of Language Understanding. In ComputerModels of Thought and Language, eds. R. Schank and K. Colby, 249266. New YorkFreeman.Wooldridge, M. J., and Jennings, N. R. 1995. Agent Theories, Architectures, and Languages A Survey. In Intelligent Agents ECAI94 Workshop on Agent Theories, Architectures, and Languages, eds. M. J. Wooldridge and N. R. Jennings, 139. Berlin SpringerVerlag.46 BRADSHAWSection OneAgents  the User Experience
