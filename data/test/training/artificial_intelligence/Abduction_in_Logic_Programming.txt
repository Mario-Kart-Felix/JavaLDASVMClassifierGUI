Abduction in Logic ProgrammingMarc Denecker1 and Antonis Kakas21 Department of Computer Science, K.U.Leuven,Celestijnenlaan 200A, B3001 Heverlee, Belgium.Marc.Deneckercs.kuleuven.ac.behttpwww.cs.kuleuven.ac.bemarcd2 Department of Computer Science, University of Cyprus,75 Kallipoleos St., Nicosia, Cyprus.antonisucy.ac.cyhttpwww.cs.ucy.ac.cyantonisAbstract. Abduction in Logic Programming started in the late 80s,early 90s, in an attempt to extend logic programming into a frameworksuitable for a variety of problems in Artificial Intelligence and other areasof Computer Science. This paper aims to chart out the main developments of the field over the last ten years and to take a critical view ofthese developments from several perspectives logical, epistemological,computational and suitability to application. The paper attempts to expose some of the challenges and prospects for the further developmentof the field.1 IntroductionOver the last two decades, abduction has been embraced in AI as a nonmonotonicreasoning paradigm to address some of the limitations of deductive reasoning inclassical logic. The role of abduction has been demonstrated in a variety of applications. It has been proposed as a reasoning paradigm in AI for diagnosis 8,90, natural language understanding 8, 39, 4, 93, default reasoning 81, 29, 25,50, planning 28, 110, 71, 59, knowledge assimilation and belief revision 54, 76,multiagent systems 7, 64, 102 and other problems.In the context of logic programming, the study of abductive inference started at the end of the eighties as an outcome of different attempts to use logicprogramming for solving AIproblems. Facing the limitations of standard logicprogramming for solving these problems, different researchers proposed to extend logic programming with abduction. Eshghi 28 introduced abduction inlogic programming in order to solve planning problems in the Event Calculus65. In this approach, abduction solves a planning goal by explaining it by anordered sets of events a plan that entails the planning goal. This approach wasfurther explored by Shanahan 110, Missiaen et al. 72, 71, Denecker 21, Jung48 and recently in 59, 60. Kakas and Mancarella showed the application of abduction in logic programming for deductive database updating and knowledgeassimilation 53, 55. The application of abduction to diagnosis has been studiedin 10, 11 within an abductive logic programming framework whose semanticswas defined by a suitable extension of the completion semantics of LP.In parallel to these studies of abduction as an inferential method, Eshghi andKowalski 29 and later Kakas and Mancarella in 52, 54 and Dung in 25, usedabduction as a semantical device to describe the nonmonotonic semantics ofLogic Programming in a way analogous to Poole in 81. In 18, 14, abductivelogic programming was investigated from a knowledge representation point ofview and its suitability for representing and reasoning on incomplete informationand definitional and assertional knowledge was shown.For these reasons, Abductive Logic Programming1 ALP 50, 51 was recognized as a promising computational paradigm that could resolve many limitations of logic programming with respect to higher level knowledge representationand reasoning tasks. ALP has manifested itself as a framework for declarativeproblem solving suitable for a broad collection of problems.Consequently, at the start of the 90s, a number of abductive systems weredeveloped. In 54, the abductive procedure of 29 for computing negation as failure through abduction was extended to the case of general abductive predicates.Another early abductive procedure was developed in 10 using the completion.17 proposed SLDNFA, an extension of SLDNF with abduction allowing nonground abductive hypotheses. 21 proposed an extension of SLDNFA with aconstraint solver for linear order and demonstrated that this system could beapplied correctly for partial order planning in the context of event calculus.Later, the idea of integrating abduction and constraint solving was developedmore generally in the ACLP framework 56, 61, 60 this procedure is the resultof incorporating CLP constraint solving in the abductive procedure of 54. In37 an abductive procedure that can be regarded as a hybrid of SLDNFA andthe procedure of Console et al has been defined based on explicit rewrite ruleswith the completion and equality. This has later 66 incorporated constraintsolving in a similar way to the ACLP procedure. A bottom up procedure, latercombined with some top down refinement, was given in 106 and 42 the lattersystem was an implementation using the Model Generator MGTP developedon the multiprocessor machine developed at ICOT. Another recent abductiveprocedure in LP is that of AbDual 1 which exploits tabling techniques fromXSB.Despite these efforts and the many potential applications for abduction, it hastaken considerable time and effort to develop computationally effective systemsbased on abduction for practical problems. The field has faced and to someextend continues to do so a number of challenges at the logical, methodologicaland implementational level. In the recent past, important progress has beenmade on all these levels. The aim of this chapter is to give a comprehensive1 The JulyAugust 2000 volume Vol. 44 of the journal of Logic Programming is aspecial issue on Abductive Logic Programming. This contains several papers thatopen new perspectives on the relationship between abduction and other computational paradigms.overview of the state of the art of Abductive Logic Programming, to point toproblems and challenges and to sketch recent progress.Bob Kowalski has been one of the founders of Abductive Logic Programming. Recently, he has, together with others, proposed 64 that ALP can beused as a framework in which we can integrate an agents knowledge on how toreduce its goal to subgoals and thus plan how to achieve this goal, described inthe program part of an abductive theory, together with the agents obligations,prohibitions and other elements that determine its reactive behaviour, describedin the integrity constraints part of its abductive theory. In this suggestion ALPplays a central role in capturing the behaviour of an autonomous agent thatfeeds from and reacts to its environment.This together with his view of its role in the way that Logic Programmingshould evolve more generally as a programming language of the future is described elegantly in his short position statement on the future of Logic Programming in this volume.The rest of the paper is organized as follows. Section 2 briefly reviews thestudy of abduction in AI and philosophy and situates Abductive Logic Programming within this broad context. Section 3 gives the formal definition ofabduction, and reviews the different formal semantics that have been proposedin the literature. Section 4 reviews the different ALP frameworks that have beendeveloped so far analyzing their potential scope to applications and their linksto other extensions of LP. The paper ends with a discussion of future challengesand prospects of development for the field of ALP.2 What is abduction2.1 What is an explanationThe term abduction was introduced by the logician and philosopher C.S. Pierce18391914 who defined it as the inference process of forming a hypothesisthat explains given observed phenomena 77. Often abduction has been definedbroadly as any form of inference to the best explanation 47 where best refersto the fact that the generated hypothesis is subjected to some optimality criterion. This very broad definition covers a wide range of different phenomenainvolving some form of hypothetical reasoning. Studies of abduction rangefrom philosophical treatments of human scientific discovery down to formal andcomputational approaches in different formal logics.In the context of formal logic, abduction is often defined as follows. Given alogical theory T representing the expert knowledge and a formula Q representing an observation on the problem domain, abductive inference searches for anexplanation formula E such that E is satisfiable2 w.r.t. T and it holds that3 T  E  Q2 If E contains free variables, E should be satisfiable w.r.t. T .3 Or, more general, if Q and E contain free variables T  E  Q.In general, E will be subjected to further restrictions such as the aforementionedminimality criteria and criteria restricting the form of the explanation formulae.g. by restricting the predicates that may appear in it. This view defines anabductive explanation of an observation as a formula which logically entails theobservation. However, some have argued, sometimes with good reasons, that itis more natural to view an explanation as a cause for the observation 47. Awellknown example is as follows 92 the disease paresis is caused by a latentuntreated form of syphilis. The probability that latent untreated syphilis leadsto paresis is only 25. Note that in this context, the direction of entailment andcausality are opposite syphilis is the cause of paresis but does not entail it, whileparesis entails syphilis but does not cause it. Yet a doctor can explain paresisby the hypothesis of syphilis while paresis cannot account for an explanation forsyphilis.In practice, examples where causation and entailment do not correspond arerare4. It turns out that in many applications of abduction in AI, the theory Tdescribes explicit causality information. This is notably the case in modelbaseddiagnosis and in temporal reasoning, where theories describe effects of actions.By restricting the explanation formulas to the predicates describing primitivecauses in the domain, an explanation formula which entails an observation givesa cause for the observation. Hence, for this class of theories, the logical entailmentview implements the causality view on abductive inference.2.2 Relationship to other reasoning paradigmsAs mentioned in the previous section, the definition of abduction is very broadand covers a wide range of hypothetical reasoning inference that could otherwisebe formally distinguished. Not surprisingly, there are many different views onwhat is abduction and how to implement it. Many philosophers and logicianshave argued that abduction is a generalization of induction 34. Induction can bedefined as inference of general rules that explain certain data. A simple exampleillustrating inductive inference is the following derivationhumansocratesmortalsocratesx.humanx mortalxHence, induction can also be seen as a form of inference to the best explanation.The term abduction as used in this paper, refers to a form of reasoning thatcan be clearly distinguished from inductive inference. In most current applications of abduction the goal is to infer extentional knowledge, knowledge that isspecific to the particular state or scenario of the world. In applications of induction, the goal is to infer intentional knowledge, knowledge that universally holds4 See 91 where the relation between causal and evidential modeling and reasoning isstudied and linked to abduction.in many different states of affairs and not only in the current state of the world.For example, an abductive solution for the problem that a certain car does notstart this morning is the explanation that its battery is empty. This explanationis extentional. On the other hand, an inductive inference is to derive from a setof examples the rule that if the battery is empty then the car will not start. Thisis intentional knowledge. As a consequence of this distinction, abductive answersand inductive answers have a very different format. In particular, inductive answers are mostly general rules that do not refer to a particular scenario whileabductive answers are usually simpler formulas, often sets of ground atoms, thatdescribe the causes of the observation in the current scenario according to a givengeneral theory describing the problem domain. This distinction in the form of theanswer induces in turn strong differences in the underlying inference procedures.Abduction as a form of inference of extentional hypotheses explaining observed phenomena, is a versatile and informative way of reasoning on incompleteor uncertain knowledge. Incomplete knowledge does not entirely fix the state ofaffairs of the domain of discourse while uncertain knowledge is defeasible in thesense that its truth in the domain of discourse is not entirely certain. In the presence of uncertain knowledge, 81 demonstrated how abductive inference can beused for default reasoning. In the presence of incomplete knowledge, abductionreturns an explanation formula corresponding to a nonempty collection of possible states of affairs in which the observation would be true or would be causedon the other hand deduction is the reasoning paradigm to determine whether astatement is true in all possible states of affairs. As such, abduction is stronglyrelated to model generation and satisfiability checking and can be seen as a refinement of these forms of reasoning. By definition, the existence of an abductiveanswer proves the satisfiability of the observation. But abduction returns moreinformative answers answers which describe the properties of a class of possiblestates of affairs in which the observation is valid.2.3 Abduction and Declarative Knowledge RepresentationAn important role of logic in AI is that of providing a framework for declarativeproblem solving. In this, a human expert specifies his knowledge of the problemdomain by a descriptive logic theory and uses logical inference systems to solvecomputational tasks arising in this domain. Although in the early days of logicbased AI, deduction was considered as the unique fundamental problem solvingparadigm of declarative logic 70 in the current state of the art deduction haslost this unique place as the central inferential paradigm of logic in AI. Indeed,we argue that a declarative problem solving methodology will often lead toabductive problems. Let us illustrate this with an example problem domain,that of university time tabling.The process of declarative problem solving starts with the ontology designphase during this step, an alphabet of symbols denoting the relevant objects,concepts and relationships in the problem domain must be designed. This alphabet defines the ontology of the problem domain. It precedes the knowledgedescription phase during which the expert expresses his knowledge using thesymbols of the alphabet. In the example domain of university timetables we havethree important types of objects lectures, time slots and class rooms. We couldrepresent them using the predicates lecture1, time slot1 and room1. Important relevant relationships between them refer to when and where lectures takeplace these relationships could be represented by predicates time of lecture2and room of lecture2.A key observation is that even though at this stage the knowledge specification has not even started, the choice of the alphabet already determinesthat certain tasks will be abductive. In particular, the task of computing acorrect time table will consist of computing tables for time of lecture2 androom of lecture2 that satisfy certain logical constraints imposed on correctschedules. This task is not a deductive task the correct tables will not bededucible from the theory. Rather it is an abductive problem  or a model generation problem5  a problem of completing the problem description so thatthe goal or observation that all lectures are scheduled, holds.The ontology design phase has a strong impact on the specification phase.If the alphabet is complex and does not have a simple correspondence to theobjects, concepts, relations and functions of the domain of discourse, this willcomplicate the knowledge description phase and lead to a more complex, moreverbose, less comprehensive and less modular specification. For example, onesimple constraint is that each lecture must be scheduled at some time slot androoml  lecturel t, r  time slott  time of lecturet, lroomr  room of lecturer, lAnother constraint is that two lectures cannot take place in the same room atthe same timet, r, l1, l2. room of lecturer, l1  room of lecturer, l2time of lecturet, l1  time of lecturet, l2 l1  l2If we had represented the assignments of rooms and time slots to lectures bybalanced binary tree structures, this would have complicated significantly theexpression of these requirements which are now expressed directly. Thus, animportant aspect of the declarative problem solving methodology, is that theontology and alphabet is designed in a task independent way such that it naturally matches with the types of objects and relationships that occur in theproblem domain.The above example illustrates that the choice of the alphabet may enforce theuse of a specific type of inference to solve a specific computational task, and that,when we follow a declarative approach this will often lead to the problem tasksto be abductive in nature. Vice versa, the apriori choice of a specific inferential5 Recall the close relationship between abduction as viewed in this paper and modelgeneration, as explained in the previous section.system such as Prolog or a CLP system to solve a specific computational problemhas a strong impact on the choice of the alphabet for that problem domain.In the university time tabling problem, a Prolog or CLP solution will not bebased on the use of predicates time of lecture2 and room of lecture2 but onanother, in this case more complex alphabet, typically one in which predicatesrange over lists or trees of assignments of lectures, time slots and rooms. Thisalphabet is more complex and is choosen in a taskdependent way, which resultsin reduced readability and modularity of the problem specification and in areduced reusability of the specification to solve other types of tasks. The fact thatthe alphabet in Prolog and CLP programming must be chosen in relation tothe provided inference system rather than by its match with the human expertsconception of the problem domain is one of the fundamental reasons why evenpure Prolog programs are rarely perceived as truly declarative.There is clearly a tradeoff here. On the one hand, the choice of an alphabet incorrespondence with the concepts and relations in the mind of the human expertis a prerequisite to obtain a compact, elegant and readable specification. As aresult of this often the computational task of problem solving links tightly to abduction. Putting this more directly we would argue that Declarative KnowledgeRepresentation comes hand in hand with abduction. Abduction then emerges asan important computational paradigm that would be needed for certain problemsolving tasks within a declarative representation of the problem domain.On the other hand, in practice the choice of a representation is not governedmerely by issues relating to a natural representation but also and sometimeseven more by issues of computational effectiveness. Although the use of a morecomplex ontology may seriously reduce the elegance of the representation, it maybe necessary to be able to use a specific system for solving a problem in somecases this would mean that the pure declarative problem representation needsto be augmented with procedural, heuristic and strategic information on how tosolve effectively the computational problem.Current research on abduction studies how more intelligent search and inference methods in abductive systems can push this tradeoff as far as possible inthe direction of more declarative representations.3 Abductive Logic ProgrammingThis section presents briefly how abduction has been defined in the context oflogic programming.An Abductive Logic Programming theory is defined as a triple P,A, ICconsisting of a logic program, P , a set of ground abducible atoms A6 and a setof classical logic formulas IC, called the integrity constraints, such that no atomp  A occurs in the head of a rule of P .In the field of Abductive Logic Programming, the definition of abduction isusually specialized in the following way6 In practice, the abducibles are specified by their predicate names.Definition 1. Given an abductive logic theory P,A, IC, an abductive explanation for a query Q is a set   A of ground abducible atoms such that P   Q P   IC P  is consistent.Some remarks are in order. First, this definition is generic both in terms ofsyntax and semantics. Often, the syntax is that of normal logic programs withnegation as failure but some have investigated the use of abduction in the context of extended logic programming 43 or constraint logic programming 56,60, 66. At the level of semantics, the above definition defines the notion of anabductive solution in terms of any given semantics of standard logic programming. Each particular choice of semantics defines its own entailment relation ,its own notion of consistent logic programs and hence its own notion of what anabductive solution is. In practice, the three main semantics of logic programming completion, stable and wellfounded semantics  have been used to definedifferent abductive logic frameworks.A second remark is that an abductive explanation  aims to represent anonempty collection of states of affairs in which the explanandum Q would hold.This explains the third condition that P  should be consistent.Third, when integrity constraints IC are introduced in the formalism, onemust define how they constrain the abductive solutions. There are different viewson this. Early work on abduction in Theorist in the context of classical logic 81,was based on the consistency view on constraints. In this view, any extensionof the given theory T with an abductive solution  is required to be consistentwith the integrity constraints IC T  IC   is consistent. The above definition implements the entailment view the abductive solution  together with Pshould entail the constraints. This view is the one taken in most versions of ALPand is stronger than the consistency view in the sense that a solution accordingto the entailment view is a solution according to the consistency view but notvice versa.The difference between both views can be subtle but in practice the differentoptions usually coincide. E.g. it frequently happens that P   has a uniquemodel, in which case both views are equivalent. In practice, many ALP systems20, 61 use the entailment view as this can be easily implemented without theneed for any extra specialized procedures for the satisfaction of the integrityconstraints since this semantics treats the constraints in the same way as thequery.The above definition aims to define the concept of an abductive solution for aquery but does not define abductive logic programming as a logic in its own rightas a pair of syntax and semantics. However, a notion of generalized model canbe defined, originally proposed in 52, which suggests the following definition.Definition 2. M is a model of an abductive logic framework P,A, IC iff thereexists a set   A such that M is a model of P   according to some LPsemantics and M is a classical model of IC, i.e. M  IC.The entailment relation between abductive logic frameworks and classical logicformulas is then defined in the standard way as followsP,A, IC  F iff for each model M of P,A, IC, M  F .Note that this definition is also generic in the choice of the semantics oflogic programming. This way, abductive extensions of stable semantics 52, ofwellfounded semantics 79 and the partial stable model semantics 111 havebeen defined. Also the completion semantics has been extended 10 to the caseof abductive logic programs. The completion semantics of an abductive logicframework P,A, IC is defined by the mapping it to its completion. This is thefirst order logic theory consisting of  UN , the set of unique names axioms, or Clarks equality theory. IC compP,A, the set of completed definitions for all nonabducible predicates.A recent study 16 that attempts to clarify further the representational andepistemological aspects of ALP, has proposed IDlogic as an appropriate logic forALP. IDlogic is defined as an extension of classical logic with inductive definitions. Each inductive definition consists of a set of rules defining a specific subsetof predicates under the wellfounded semantics. This logic gives an epistemological view on ALP in which an abductive logic program is a definition of theset of the nonabducible predicates and abducible predicates are open predicates, i.e. not defined. The integrity constraints in an abductive logic frameworkare simply classical logic assertions. Thus the program P represents the humanexperts strong definitional knowledge and the theory IC represents the humanexperts weaker assertional knowledge. Therefore in IDlogic, ALP can be seenas a sort of description logic in which the program is a TBOX consisting ofone simultaneous definition of the nonabducible predicates, and the assertionscorrespond to the ABOX 115.4 Abductive Logic Programming FrameworksThe framework defined in the previous section is generic in syntax and semantics.In the past ten years, the framework has been instantiated and sometimes hasbeen extended in different ways. In order to show the wider variety of motivations and approaches that are found in Abductive Logic Programming, thissection aims to present briefly a number of these alternative frameworks, implemented systems and applications. These different instantiations differ from eachother by using different formal syntax or semantics, or sometimes simply becausethey use a different inference method and hence induce a different proceduralsemantics.4.1 Approaches under the completion semantics for LPAbduction through Deduction. One of the first ALP frameworks is that of10. The syntax in this framework is that of hierarchical logic programs7 with7 A hierarchical program is one without recursion.a predefined set of abducible predicates. The formal syntax is an extension ofClarks completion semantics 9 in which only the nonabducible predicatesare completed. The main aim of this work was to study the relationshipbetween abduction and deduction in the setting of nonmonotonic reasoning.In particular, many characterizations of nonmonotonic reasoning such ascircumscription, predicate completion, explanatory closure implement a sortof closure principle allowing to extract implicit negative information outof explicit positive information. What is shown in this work is that for arestricted class of programs, the abductive explanations to a query withrespect to a set of nonrecursive rules can be characterized in a deductiveway if we apply the completion semantics as a closure principle.Formally, given a hierarchical abductive logic program P with abduciblesA, its completion PC consists of iffdefinitions for the nonabducible predicates. These equivalences allow to rewrite any observation O to an equivalentformula F in the language of abducible predicates such that PC  O  Fwhere  is classical logic entailment. The formula F , called the explanation formula, can be seen as a disjunctive characterization of all abductivesolutions of O given P . The restriction to hierarchical programs ensures termination of a procedure to compute the explanation formula. The frameworkhas been extended to handle a restricted form ofintegrity constraints.The above abductive framework has been used to formalize diagnostic problem solving and classification in nonmonotonic inheritance hierarchies 10,24, and has been extended to characterize updates in deductive databases12. The completion semantics is also the basis for the knowledge compilation optimization of abductive problem solving described in 11.The IFF Framework. The IFF framework is also based on the completionsemantics. It was initially developed as a unifying framework integrating abduction and view updating 36, 37. The IFF proof procedure is defined bya rewriting system in which an initial goal is rewritten to a disjunction ofanswers. The main rewrite rules are unfolding, namely backward reasoningwith the iff definitions, and propagation, namely forward reasoning with theintegrity constraints. IFF produces answers to goals in the form of conjunctions of abducible atoms and denial integrity constraints. An extension of itwith special treatment of builtin predicates and constraint logic programming was proposed in 120, 66. Another modification of the IFF proof procedure was developed for applications modeling reasoning of rational agents64 and management of active rules in databases 96. The main underlyingLP semantics used in this framework is Fittings threevalued completionsemantics but correctness results have been proven also for perfect modelsemantics and under some restrictions for stable semantics.Prototype implementations of the three instances of the IFF procedure 37,97 exist and have been applied in many experiments. The original IFF proofprocedure has been implemented in Java and was applied within a Voyagerextension to the problem of interaction and communication amongst multiple agents, as well as cooperative problem solving. It was also used forinformation integration from multiple sources 95, to the management of information networks 112, and it has been integrated with PROGOL to learnpreconditions of actions in the frameworks of the event and situation calculi.The extension presented in 120, 66 has been applied to jobshop scheduling66 and semantic query optimization 121. The procedure suggested in 96was implemented in April, and was used in the context of applications foractive databases and agents. Recently, it has been used to study the problemof resource allocation in a multiagent environment 102.4.2 Approaches under stable and wellfounded semanticsIn Logic Programming other semantics have been proposed as refinements of thecompletion semantics. These include the stable model semantics 38 and thewellfounded model semantics 116. The following ALP frameworks use thesesemantics for their underlying LP framework.SLDNFA and IDlogic. SLDNFA 17, 20 is an abductive extension of SLDNFresolution 68, suitable for abductive reasoning in the context of possiblyrecursive abductive logic programs under the completion semantics. It wasproven sound and, under certain restrictions, complete with respect to the3valued completion and wellfounded semantics. This procedure came outof the early attempts to implement AIplanning using abductive reasoning inthe event calculus. It was one of the first procedures that correctly handlesnonground abduction, i.e. abduction of atoms with variables. The procedurewas also used in one of the first experiments of integration of abduction andconstraint solving. 21 describes an extension of SLDNFA with a constraintsolver for the theory of total order and applies it for partial order planningand in the context of temporal reasoning with incomplete knowledge.At the logical level, the work evolved into a study of the role of ALP for knowledge representation and of SLDNFA for abductive and deductive reasoning.A number of subsequent experiments with ALP and SLDNFA demonstratedthe role of ALP for knowledge representation of incomplete and temporalknowledge 19, 113, 114, 22. To explain and clarify the representational andepistemological aspects of ALP, 16 proposed IDlogic, an integration ofclassical logic with inductive definitions under wellfounded semantics.At the computational level, efforts were done to improve the computationalperformance and expressivity of the original implementation of the SLDNFAprocedure. The SLDNFAC system 117 is developed at the K.U.Leuven andimplements abduction in the context of IDLogic, supporting directly general first order classical axioms in the language and higher order aggregates.The system integrates constraint solving with the general purpose abductiveresolution SLDNFA. It is implemented as a metainterpreter on top of Sicstusprolog and is available from httpwww.cs.kuleuven.ac.be dtaiktsystemsE.shtml.The SLDNFAC system has been used in the context of prototypical constraint solving problems such as Nqueens, logical puzzles, planning problems in the blocks world, etc . . . for proving infinite failure of definite logicprograms 5, failure of planning goals 13 and for semantic interpretationof temporal information in natural language 119. An extension of the system has also been used in the context of a scheduling application for themaintenance for power units of power plants. This experiment involves theuse of higher order aggregates and is described in detail in section 5.1. Recently, 78 compared SLDNFAC with different other approaches for solvingconstraint problems including CLP, ACLP and the Smodels system 74 andshows that in many problems the system is competitive.Bottom up Abduction. This approach was proposed originally in 107 andaims to develop efficient techniques for computing abductive solutions underthe generalized stable model semantics 52 by translating the abductive logicprogram to a standard logic program and applying efficient bottom up stablemodel generators to this translation. This approach is based on a translation of Abductive logic programs into pure logic programs with stable modelsemantics 107. Abductive solutions w.r.t. the original abductive logic program correspond to stable models of its translation8. To compute abductivesolutions, 107 also proposed a procedure for bottomup stable model computation based on truth maintenance techniques. It is an extension of theprocedure for computing wellfounded models of 33, 94 and dynamicallychecks integrity constraints during the computation of stable models anduses them to derive facts. Later this bottom up procedure was integratedwith a procedure for topdown expectation 108, 46. This topdown procedure searches for atoms and rules that are relevant for the query and theintegrity constraints and thus helps to steer the search into the direction ofa solution. This procedure has been used for a number of applications in thefollowing two domains.Legal Reasoning A dynamic notion of similarity of cases in legal reasoning is implemented using abductive logic programming. The input of thissystem is legal factors, case bases and the current case and position ofuser defendant or plaintiff. The system translates the case bases andthe current case into an abductive logic program. Using the topdownproof procedure the system then computes important factors and retrieves a similar case based on the important factors and generates anexplanation why the current case is similar to the retrieved case whichis preferable to users position 105. The system has also been extendedso that legal rules and legal cases are combined together for statutoryinterpretation 103.Consistency Management in Software Engineering This system computes a minimal revised logical specification by abductive logic programming. A specification is written in Horn clauses which is translated intoan abductive logic program. Given an incompatibility between this spe8 The correctness of this transformation of abductive logic programs to pure logicprograms has been shown to be independent of the stable model semantics, and hasbeen extended to handle integrity constraints 111.cification and new information the system computes by abduction a maximally consistent program that avoids this incompatibility 104.ACLP Abductive Constraint Logic Programming. The ACLP frameworkgrew as an attempt to address the problem of providing a highlevel declarative programming or modeling environment for problems of Artificial Intelligence which at the same time has an acceptable computational performance.Its roots come from the work on abduction and negation as failure in 29and the early definitions of Abductive Logic Programming 52, 53, 50. Its keyelements are i the support of abduction as a central inference of the system,to facilitate declarative problem solving, and ii the use of Constraint LogicProgramming techniques to enhance the efficiency of the computational process of abductive inference as this is applied on the highlevel representationof the problem at hand.In an ACLP abductive theory the program, P , and the integrity constraints,IC, are defined over a CLP language with finite domain constraints. Its semantics is given by a form of Generalized Model semantics which extends inthe obvious way the definition 1 above when our underlying LP frameworkis that of CLP. Negation in P is given meaning through abduction and iscomputed in a homogeneous way as any other abducible. The general computation model of ACLP consists of a cooperative interleaving between hypotheses and constraint generation, via abductive inference, with consistencychecking of abducible assumptions and constraint satisfaction of the generated constraints. The integration of abductive reasoning with constraintsolving in ACLP is cooperative, in the sense that the constraint solver notonly solves the final constraint store generated by the abductive reductionbut also affects dynamically this abductive search for a solution. It enablesabductive reductions to be pruned early by setting new suitable CLP constraints on the abductive solution that is constructed.The framework of ACLP has also been integrated with Inductive Logic Programming to allow a form of machine learning under incomplete information62.The ACLP system 60, 49, developed at the University of Cyprus, implements the ACLP framework of ALP for a restricted sublanguage of thefull ACLP framework. Currently, the system is implemented as a metainterpreter on top of the CLP language of ECLiPSe using the CLP constraint solver of ECLiPSe to handle constraints over finite domains integerand atomic elements. The architecture of the system is quite general andcan be implemented in a similar way with other constraint solvers. It can beobtained, together with information on how to use it, from the following webaddress httpwww.cs.ucy.ac.cyaclp. Direct comparison experiments 61of ACLP with the underlying CLP system of ECLiPSe have demonstratedthe potential of ALP to provide a highlevel modeling environment which ismodular and flexible under changes of the problem, without compromisingsignificantly the computational efficiency of the underlying CLP framework.ACLP has been applied to several different types of problems. Initial applications have concentrated on the problems of scheduling, time tablingand planning. Other applications include i optical music recognition whereACLP was used to implement a system that can handle recognition under incomplete information, ii resolving inconsistencies in software requirementswhere a simplified form of ACLP was used to identify the causes of inconsistency and suggest changes that can restore consistency of the specificationand iii intelligent information integration where ACLP has been used asa basic framework in the development of information mediators for the semantic integration of information over web page sources. Although most ofthese applications are not of industrial scale with the notable exceptionof a crewscheduling 57 application for the small sized company of CyprusAirways  see also below 5.2 they have been helpful in indicating somegeneral methodological guidelines that can be followed when one is developing abductive applications see 57. The aircrew scheduling applicationproduced solutions that were judged to be of good quality, comparable tomanually generated solutions by experts of many years on the particularproblem, while at the same time it provided a flexible platform on which thecompany could easily experiment with changes in policy and preferences.Extended and Preference Abduction. In order to broaden the applicability of ALP in AI and databases, Inoue and Sakama propose two kinds ofextensions of ALP Extended abduction 43 and Preference abduction 44.An abductive program in the framework of extended abduction is a pairK,A of logic programs possibly including negation as failure and disjunctions. Each instance of element of A is abducible. An explanation of a groundliteral G consists of a pair of sets I, O of subsets of A such that K O Iis consistent and entails G. An antiexplanation of G satisfies the same conditions except that K  O  I does not entail G. Thus, abduction in thisframework extends standard abduction by defining not only explanation butalso antiexplanations, by allowing solutions in which rules from the programare deleted and by allowing general rules to be abduced or deleted.Several implementation methods have been proposed for computing extended abduction. 45 proposed a model generation method with term rewriting. In 99, 41, transformation methods are proposed that reduce the problem of computing extended abduction to a standard abductive problem. Extended abduction has several potential applications such as abductive theoryrevision and abduction in nonmonotonic theories, view update in deductive databases, theory update, contradiction removal, system repair problemswith model checking, and inductive logic programming see 43, 99, 41.A framework for preference abduction is an abductive logic program K,Aaugmented with a set  of possible priorities between different literals ofthe program. For a given goal G, preferred abduction computes a set ofabducible atoms I and a subset  of  representing some priority relation,such that K  I is consistent and K  I  G, which means that G istrue in every preferred answer set of the prioritized logic program K I,  98. Hence, preferred abduction not only abduces atoms but also thepriority relationship. A procedure to compute preference abduction has beenproposed in 44.Preference abduction can be used in resolution of the multiple extensionproblem in nonmonotonic reasoning, skeptical abduction, reasoning aboutrule preference, and preference view update in legal reasoning 44.ABDUAL Abduction in extended LP 1 proposes the ABDUAL framework, an abductive framework based on extended logic programs. An abductive logic program in this framework is a tuple  P,A, IC , where Pis an extended logic program with both explicit and default negation, ICa set of constraints and A a set of ground objective literals i.e. atoms or explicitly negated atoms. The declarative semantics of this formalism is basedon the wellfounded semantics for extended programs.The procedure presented in 1 integrates a tabling mechamism in the abductive inference procedure. The procedure solves an abductive query intwo stages. First, the program is transformed by grounding it and addingfor each nonabducible ground atom p a rule notp R where R expressesthat none of the rules for p applies. The resulting program is called thedual program. In the second step, abductive solutions are computed by anevaluation method that operates on the dual program.The ABDUAL system is currently implemented on top of XSBProlog 122.The system is available from httpwww.cs. sunysb.edutswift. Work iscurrently being done in order to migrate some of the tabling mechanismsof ABDUAL, now taken care of the metainterpreter, into the XSBengine.Work is also underway on the XSB system so that the counfounded setremoval operation can be implemented at the engine level.The ABDUAL system has been applied in medical psychiatric diagnosis 31as a result of an investigation into the logical representation and automationof DSMIV Diagnostic and Statistical Manual of Mental Disorders. Thecurrent user interface of the Diagnostica system httpmedicinerules.comuses abduction in a simple but clinically relevant way to allow for hypothetical diagnosis when there is not enough information about a patient for aconclusive diagnosis, the system allows for hypothesizing possible diagnosison the basis of the limited information available. This is one of the firstapplications of abduction that is been commercialized.ABDUAL has also been employed to detect specification inconsistencies inmodelbased diagnosis system for power grid failure 6. Here abduction isused to abduce hypothetical physically possible events that might cause thediagnosis system to come up with a wrong diagnosis violating the specification constraints.Probabilistic Horn Abduction and Independence Choice Logic. Probabilistic Horn abduction 84, later extended into the independent choice logic86, is a way to combine logical reasoning and belief networks into a simpleand coherent framework. Its development has been motivated by the Theorist system 88 but it has been extended into a framework for decision andgametheoretic agents that includes logic programs, belief networks, Markovdecision processes and the strategic form of a game as special cases. In particular, it has been shown that it is closely related to Bayesian networks 80,where all uncertainty is represented as probabilities.An independent choice logic theory is made up of two parts a choice space consisting of disjoint sets of ground atoms. The elementsof a choice space are called alternatives. an acyclic logic program such that no element of an alternative unifieswith the head of a clause.The semantics is modeltheoretic. There is a possible world for each choice ofone element from each alternative. What is true in a possible world is givenby the stable model of the atoms chosen and the logic program. Intuitivelythe logic program gives the consequences of the choices. This framework isabductive in the sense that the explanations of an observation g provide aconcise description of the worlds in which g is true. Belief networks can bedefined by having independent probability distributions over the alternatives.Intuitively, we can think of nature making the choice of a value for eachalternative. In this case Bayesian conditioning corresponds exactly to thereasoning of the above framework of independent choice logic. This can alsobe extended to decision theory where an agent can make some choices andnature others 86, and to the gametheoretic case where there are multipleagents who can make choices.Different implementations of the ICL and its various special cases exist.These include Prologstyle implementations that find explanations topdown83, 89, bottomup implementations for the ground case that use a probabilistic variant of the conflicts used in modelbased diagnosis 85, and algorithms based on efficient implementations of belief networks that also exploit the contextspecific independent inherent in the rule forms 87. Initialstudies of application of ICL have centered around problems of diagnosis androbot control.5 Example Applications of AbductionALP as a paradigm of declarative problem solving allows us to formalize a widevariety of problems. A survey of the field reveals the potential application ofabduction in areas such as databases updates, belief revision, planning, diagnosis,natural language processing, default reasoning, user modeling, legal reasoning,multiagent systems, scheduling, and software engineering. In this section, tworelatively largescale applications of ALP are presented in some detail in orderto illustrate the main features of declarativeness and modularity of an abductivebased approach that have been exposed in the previous sections.5.1 Scheduling of maintenanceThis experiment is based on a real life problem of a Belgian electricity provider. The problem description is as follows. The company has a network ofpower plants, distributed over different areas and each containing several powerproducing units. These units need a fixed number of maintenances during theyear. The problem is then to schedule these maintenances so that a numberof constraints are satisfied and the risk of power shortage and hence, importfrom other providers is as low as possible. The problem was solved using theSLDNFAC system extended with a restricted yet sufficient form of higherorderaggregates. The system accepts first order constraints which are first compiledto rules using the LloydTopor transformation. Below we given an overview ofthe problem solution. For a more complete description of the solution and theabductive procedure for reasoning on aggregates, we refer the reader to 117.The fact that a maintenance M lasts from week B till week E, is represented by the predicate startM,B,E. This is the only abducible predicate inthe specification. Other predicates are either defined or are input data and aredefined by a table. Some of the main constraints that need to be satisfied aregiven below9. Maintenances maintM and their duration durationM,D are givenby a table. All maintenances must be scheduled, thus for each maintenancethere exists an according start relation. This is specified via a first orderlogical formula i.e. an integrity constraint as followsM  maintM B,E,D  weekB  weekE  durationM,DE  B D  1  startM,B,E. A table of prohibitedU,Bp,Ep facts specify that maintenances M for unitU are not allowed during the period Bp,EpU,Bp, Ep,M,B,E prohibitedU,Bp,Ep maint for unitM,U  startM,B,E E  Bp  Ep  B. For each week the number of the units in maintenance belonging to a plant Pshould be less than a maximal number Max. A table of plant maxP,Maxatoms defines for each plant the maximal number of units in maintenancesimultaneously.P,Max,We  plantP   plant maxP,Max  weekWe OnMaint  cardU  unitU  unit in plantU, P in maintU,We, OnMaintOnMaint Max.Note that this constraint uses the cardinality aggregate card. The meaning ofthe above cardinality atom is that the set of units of plant P in maintenancein week We contains OnMaint elements. The predicate in maint is definedby an auxiliary program rule specifying that a unit U is in maintenanceduring a certain week W if a maintenance M of this unit is going on duringW in maintU,W  maint for unitM,U, startM,B,E, B W,W  E.9 In this and the following section, variable names start with a capital, as standard inlogic programming. Another constraint is that the capacity of the units in maintenance belongingto a certain area should not exceed a given area maximum. To represent this,the summation aggregate is needed. A table of capacityU,C describes foreach unit its maximum capacity.A,Max, We,CM  areaA  area maxA,Max  weekWesumU,C unitU  in areaU,A  in maintU,WecapacityU,C, U,CapCap,CM 0  CM  CM Max.In the above constraint, the meaning of the sum aggregate atom is that thesum of the lambda function over the set expression is CM. It defines CMas the total capacity of area A in maintenance during week We.The above specification describes some of the necessary properties of a correctschedule. However, not all schedules satisfying these properties are desirable. Inparticular, schedules that minimise the risk of power shortage are preferable.To this end, the company maintains statistical data about the expected peakload per week. Desirable solutions are those that maximise the reserve capacity,that is the difference between the available capacity and the expected peak load.This relation reserveWeek,R can then be defined as the difference betweenavailable capacity the sum of capacities of all units not in maintenance duringthis week and the estimated peak loadreserveWe,R peakloadWe,Load, total capacityT ,sumU,Cap unitU  in maintU,WecapacityU,Cap,U,CapCap, InMaint,R  T  Load InMaint.in which total capacityT  means the sum of all capacities of all units.In the SLDNFAC system, the query for the optimal solution for the scheduling problem is minimumsetR,existsW  reserveW,R,M, maximizeM.It expresses that an optimal abductive solution is desired in which the minimalreserve for one year is as high as possible.The actual problem, given by the company, consists of scheduling 56 maintenances for 46 units in one year 52 weeks. The size of the search space is ofthe order of 5246. The current implementation reduces the goal and the integrity constraints to a large finite domain constraint store without backtrackingpoints. In the current implementation of SLDNFAC, this reduction phase is completed in less than one minute . Subsequently the CLP solver starts to generatesolutions of increasing quality. The current implementation was able to find asolution which is 97 away from the optimal one in 20 minutes.The same problem was also solved using a CLP system. A comparison betweenthe CLP solution and the ALP solution clearly shows the tradeoff between efficiency and flexibility. The pure optimized CLP solution will setup its constraint store in several seconds 3 to 4 seconds, and find the same solutionas the above specification within 2 minutes compared to 20 minutes for theSLDNFACsolver. On the other hand, the CLP solution is a much larger program 400 lines developed in some weeks of time in which the constraints arehidden within data structures, whereas the above representation in ALP is asimple declarative representation of 11 logical formulae, written down after somehours of discussion.5.2 AirCrew assignmentThe second application of abduction that we present is also based on a reallife problem, namely that of crewassignment for Cyprus Airways. The problemof air crewassignment is concerned with the assignment of aircrews to eachof the flights that an airline company has to cover over some specific periodof time. This allocation of crew to flights has to respect all the necessary constraints validity and also try to minimize the crew operating cost quality.The validity of a solution is defined by a large number of complex constraints,which express governmental and international regulations, union rules, companyrestrictions etc. The quality of the schedule is specified, not only by its cost,but also by the needs and preferences of the particular company or crew at thatspecific period of time. In addition, an airline is also interested in the problem ofreassignment or of adapting an existing crew assignment to changes in the application environment such as flight delays or cancellations, new flight additionsor crew unavailability etc. These changes often affect the quality of an existingsolution or even make an existing solution unacceptable.This problem for the pilot crew of Cyprus Airways was solved within ALPusing the ACLP system. The problem was represented entirely as an ALP theoryT  P,A, IC. The program part P describes basic data and defines a numberof concepts that allow for encoding particular strategies for decomposing theoverall goal to subgoals. Different strategies affect efficiency of the problem solving process and the quality of the solutions with respect to the criteria of costor fairness of assignment. The solution of the problem is captured via an abducible predicate assignsCrew, Task the only member of A which gives theassignment of crew members to different types of duty tasks eg. flights, standbys, dayoffs, etc.. For details of this and for a more complete description ofthe problem and its abductivebased solution see 58. Here we will concentratemore on how the complex validity constraints of the problems are representedin the IC part of the theory.The problem of air crewassignment has a large variety of complex constraintsthat need to be respected. These contain simple constraints such as that a pilot can not be assigned to two overlapping flights but also many other quitecomplex constraints such as that during any period of 6 days respectively 14days a pilot must have one day off respectively 2 consecutive days off. Lets usillustrate how some of these would be represented as integrity constraints in IC.The following integrity constraint expresses the requirement that for any pilotthere must be at least MinRest hours rest period between any two consecutiveduties. MinRest is greater than or equal to 12 and it is calculated according tothe previous assignments of the crew. All variables in the integrity constraintsbelow are universally quantified over the whole formula.assignCrew, F lighton new dutyCrew, F light,end prev dutyCrew, F light, EndOfDuty,time differenceEndOfDuty, F light, RestPeriod,MinRestCrew,MR, RestPeriod  MR.Here on new dutyCrew, F light defines whether the flight, F light, is the beginning of a new duty period for Crew and end prev dutyCrew, F light, EndOfDutyspecifies the time of the end of the duty, EndOfDuty, for the crew member,Crew, which is immediately before the departure time of the flight F light. Theseare defined in the program P of the theory.The requirement that each pilot must have at least 2 consecutive days offduring any 14 day period is represented by the integrity constraintconsec2 daysoffCrew,DeptDate, 14assignCrew, F light,dept dateF light,DeptDatewhere consec2 daysoffCrew,DeptDate, 14 means that the Crew has two consecutive days off within a time window of 14 days centered around the dateDeptDate. This is given in the program P with the help of the definition ofdayoff as followsconsec2 daysoffCrew,Date,Nconsec daysDate,N,DayA,DayB,dayoffCrew,DayA,dayoffCrew,DayBdayoffCrew,Datenot assignCrew, flightId,Date,crew at baseDate,further free hrsCrew,Datefurther free hrsCrew,Date next dateDate,NDate,assignCrew, flightId,NDate,departureflightId,NDate, NDate,DeptT ime, DeptT ime  8further free hrsCrew,Date next dateDate,NDate,assignCrew, flightId,NDate,departureflightId,NDate, NDate,DeptT ime,DeptT ime  6, previous dateDate, PDate,assignCrew, flightId, PDate,arrivalflightId, PDate, PDate, ArrT ime, ArrT ime  22.This expresses the definition of a dayoff as a nonworking day 000  2400, atbase, with one of the following additional requirements. Either the crew beginshisher duty after 8am the next morning, or she begins work after 6am butfinishes before 10pm 2200 the day before.During the computation, the satisfaction of this integrity constraint meansthat whenever a new assumption of assignment of a Crew to a Flight is made weneed to ensure that consec2 daysoff for this Crew member remains satisfied. Insome cases this would then dynamically generate extra assignments, of the Crewmember to dayoffs, to ensure that hisher flight assignments are consistent.Airlines also have their own requirements on the problem stemming fromparticular policies of the specific company and crew preferences. The abductive formulation, with its modular representation of the problem, facilitates inmany cases a direct representation of these with additional integrity constraintsin IC. As an example consider a requirement of Cyprus Airways which statesthat flight managers should not have more than two duties per week. This canbe represented by the following integrity constraintassignCrew, F lightrankCrew, flight manager,on new dutyCrew, F light,num of dutiesCrew, F light, week period,NDuties,NDuties  2.Here num of dutiesCrew, F light, week period,NDuties counts the numberof duties NDuties that a crew member has within a week period centeredaround the date of the flight F light.With regards to the problem of reassignment under some new information,given an existing solution, a new module is added to the crewassignment system which exploits the natural ability of abduction to reason with a given setof hypotheses, in this case the partial existing solution. This module followsthree steps 1 remove from the old solution all hypotheses which are affected bythese changes. This step is in fact optional, helping only in the efficiency, sincehypotheses which make the existing solution inconsistent will be eventually removed automatically by the reexecution of the abductive goal in step 3 below,2 add the new requirements changes of the problem. These may be in theform of integrity constraints or simply as new information in the domain of theapplication and 3 reexecute the or part of the abductive goal of the problem with the set of the hypotheses in step 1 as a given initial set of abducibleassumptions.Given the set of flights which are affected by the changes, the aim is to reestablish the consistency, and preferably also the quality, of the old solution byreassigning crew to these flights, without having to recalculate a new solutionfrom the beginning but rather by making the fewest possible changes on the oldexisting solution, within 48 hours from the time of the change.The reassignment module in this application is interactive in the sense thatthe user can select a crew for a particular flight or decide whether to accepta system proposed selection of crew. Having searched for a crew member, thesystem informs the user about the particular selection, together with a list ofother assignments secondary changes on this crew in the old solution, that areaffected and would also need to be rescheduled. It then gives himher the optionto reject this choice, in which case the system will look for another possibility.When the selection of a crew is done directly by the user, the system will checkif this choice is valid and inform the user of the list if any of secondary affectedflights, that would also need to be rescheduled, resulting from this choice.Although Cyprus Airways is a small size airline it contains the full complexityof the problem. During the busy months the flight schedule contains over 500flight legs per month. The ACLP system was able to produce solutions in afew minutes which were judged by the airlines experts on this problem to beof good quality comparable and with respect to balancing requirement oftenbetter to the manually generated ones. The system was also judged to be usefuldue to the flexibility that it allowed to experiment easily with changes in policyand preferences of the company. The reassignment module was able to suggestsolutions on how to adapt the existing roster within at most 5 seconds. It waschosen as the most useful module of the system as it could facilitate the operatorsto develop and adjust a solution to meet the specific needs and preferences thatthey have at the time.6 Links of ALP to Other Extensions of LPIn parallel with the development of the above frameworks and systems for ALPit has become clear that there exist strong links between some ALP frameworksand other extensions of Logic Programming.ALP has tight connections to Answer Set Programming 32. Recall thatthe ABDUAL framework 1 is an extension of Answer Set Programming withabduction. Standard ALP with one negation is strongly related Stable LogicProgramming 69, 75, the restriction of Answer Set Programming 32 to purelogic programs. As mentioned in section 4, an abductive logic framework under the generalized stable semantics can be translated in an equivalent logicprogram under stable semantics. Consequently, current systems for computingstable models such as SMODELS 75 can be used to compute abduction underthe generalized stable semantics. Interestingly, there are significant differencesbetween in computational models that are developed in both areas. WhereasALP procedures such as SLDNFA, IFF and ACLP are extensions of SLDNFand operate in a top down way on predicate programs, systems like SMODELSare based on bottom up propagation in the propositional grounding of a logicprogram. More experimentation is needed to assess the strengths and weaknessesof these approaches.Links have been shown also between ALP and Disjunctive Logic Programming 100, 101, 124. The hypothetical reasoning of ALP and the reasoning withdisjunctive information of DLP can be interchanged. This allows theories in oneframework to be transformed to the other framework and thus to be executedin this other framework. For example, it is possible to transform an ALP theoryinto a DLP one and then use a system such as the recently developed dlv system27 to answer abductive queries. Vice versa, 124 showed that abductive proofprocedures can be used as for reasoning on DLP programs.Another type of extension of the LP paradigm is Inductive Logic Programming. Currently, several approaches are under investigation synthesizing ALPand ILP 2, 73, 123, 35. These approaches aim to develop techniques for knowledge intensive learning with complex background theories. One problem to befaced by ILP techniques is that the training data on which the inductive process operates often contain gaps and inconsistencies. The general idea is thatabductive reasoning can feed information into the inductive process by usingthe background theory for inserting new hypotheses and removing inconsistentdata. Stated differently, abductive inference is used to complete the training datawith hypotheses about missing or inconsistent data that explain the example ortraining data using the background theory. This process gives alternative possibilities for assimilating and generalizing this data. In another integration of ALPand ILP, ILP is extended to learn ALP theories from incomplete backgrounddata 62. This allows the framework to perform Multiple Predicate Learning ina natural way.As we have seen in previous sections several approaches to ALP have recognized the importance of linking this together with Constraint Logic Programming. They have shown that the integration of constraint solving in abductivelogic programming enhances the practical utility of ALP. Experiments indicatethat the use of constraint solving techniques in abductive reasoning make theabductive computation much more efficient. On the other hand, the integratedparadigm of ALP and CLP can be seen as a highlevel constraint programmingenvironment that allows more modular and flexible representations of the problem domain. The potential benefits of this paradigm are largely unexplored atthe moment.7 Challenges and Prospects for ALPIn the past decade, many studies have shown that extending Logic Programmingwith abduction has many important applications in the context of AI and declarative problem solving. Yet, at this moment the field of ALP faces a number ofchallenges at the logical, methodological and computational level. In this sectionwe attempt to chart out some of these challenges and point to some promisingdirections.7.1 Heterogeneity of ALPAs can be seen in section 4, ALP is a very heterogeneous field. On the one hand,this heterogeneity stems from the fact that logic programming itself shows acomplex landscape. On the other hand, it stems from the fact the term abductionis defined very broadly and covers a broad class of rather loosely connectedreasoning phenomena.At the conceptual level, abduction is sometimes used to denote concepts atdifferent conceptual levels. For example, in many of the frameworks discussedearlier, abduction is a concept at the inferential level it is a form of logicalinference. In other contexts such as in the abductive semantics for negation asfailure 29, abduction is a concept used at the semantical level, as a specific wayof formalizing model semantics. This mismatch between different conceptuallevels is confusing and a potential hazard for the field.At the logical level, there are many different formalisms and different semantics. Various forms of abduction have been introduced in different formalisms including pure logic programming, answer set programming and recently aconditional logic programming formalism 30. The advantage of this is that thefield may act as a forum for integrating and relating a wide variety of differentforms of logical reasoning in otherwise distant areas. A disadvantage is that thisheterogeneity may hide a lack of coherence in which efforts of researchers tobuild effective systems are scattered in a wide variety of incompatible views andapproaches. To develop a computational logic, a focused effort at different levelsis needed research on semantics to clarify the declarative meaning, research onknowledge representation to clarify the applications of the logic, research to explore the relation with other logics, and research to investigate how to implementefficient problem solvers. These efforts should link together in a constructive andcross supporting way.7.2 Epistemological foundations of ALPOne of the underlying problems of the field is the lack of understanding of theepistemological foundations of ALP. Epistemological questions are what kind ofknowledge can be represented by an abductive logic framework and vice versa,what does an ALP theory tell us about the problem domain or equivalently,what information about the domain of discourse is expressed by a given ALPtheory Such questions are fundamental to the understanding of any logic. Aclear answer is a prerequisite for developing a wellmotivated methodology fordeclarative problem solving using ALP.The standard definition of ALP as presented in section 3 does not attemptto answer the above questions. The definition 1 of an abductive solution definesa formal correctness criterion for abductive reasoning, but does not address thequestion of how the ALP formalism should be interpreted. Also the genericdefinition 2 of the formal model semantics of ALP does not provide answers. Infact, here ALP inherits the ambiguity of logic programming at the epistemological level, as demonstrated recently in 15. Here are some fundamental questions To understand the meaning of an ALP framework, at the very least we needto understand the meaning of its symbols. How is negation in ALP to beunderstood The extended completion semantics defined for ALP by Console, Thorasso and Theseider Dupre 10 maps negation as failure literals toclassical negation. On the other hand, in the generalized stable semantics52 and in the ABDUAL framework 1, negation as failure literals are interpreted as modal literals Kp in autoepistemic logic or default logic 38. What is the relationship between ALP and classical logic An ALP framework may contain an arbitrary classical logic theory IC of constraints inALPs model semantics, models of an ALP framework satisfy the constraintsin IC in the standard way of classical logic. This suggests that ALP is anextension of classical logic. On the other hand, ALP is defined as a study ofabductive reasoning while classical logic is normally viewed as the study ofdeductive reasoning. How are these two views reconciledThe lack of clear epistemological foundations for ALP is one of the causes ofALPs lack of coherence and is a factor blurring the role and status of ALP atthe knowledge representation level in the broader context of logicbased AI. Anepistemological study of ALP can contribute significantly to the understandingof the field at the logical and methodological level.7.3 Computational ChallengesThe computational challenges of the paradigm are considerable. The challengeof building abductive systems for solving a broad class of problems formalizedby highlevel declarative representations, is extremely difficult to realise.At the theoretical level of complexity, formal results show that in general theproblem of computing abduction is hard 26. In the datalog case, the problemof computing abductive solutions is in general intractable. In the general case ofALP frameworks with function symbols, the existence of an abductive solutionis undecidable. On the implementational level, the problem of implementingabductive reasoning can be seen as an extension of the implementation of CLPsystems in which we need to reason about constraints of general first order logic.Current systems such as ACLP, SLDNFAC and IFF are based on the integration of CLP techniques in high level abductive procedures. These systems operateby reducing the high level constraints in a, in general, nondeterministic processto a constraint store that can be handled efficiently by specialised constraint systems. Recent experiments with the ACLP and SLDNFAC systems have shownthat in those cases where the reduction process is deterministic, these procedurescan be very performant. However, when the process is nondeterministic, theseprocedures can start to trash. The reason for this behaviour is that a number oftechniques are built in in the current procedures that delay the creation of choicepoints and perform deterministic computation first. In many applications suchas scheduling, these techniques can avoid making choices altogether. In othercases, such as in planning applications, the arsenal of techniques does not sufficeto manage these choice points and the current procedures often make uninformedselections of choices leading to uncontrolled depth first execution and trashing.The above analysis suggests different ways to improve the computationaltechniques of ALP. One way is to further improve the techniques to discoverdeterministic subgoals and delay creation of choice points. A second way is toincorporate techniques for smarter and better informed selection of the choicepoints and choice of alternatives in the choice point. A third way is an improvedcontrol to avoid unrestricted depth first reasoning using techniques similar toloop detection and iterative deepening can be used. With respect to the firsttwo problems, different approaches can be followed. One is to further refine thecurrent integration of Constraint Solving in the abductive inference. In the current systems, the CLP solver is a black box that interacts with the abductivesolver by returning a solution at the end, or by reporting consistency or inconsistency of the constraint store at different points during the execution. Onedirection to be examined is how to exploit the information present in the constraint store to steer the search for an abductive solution and make a betterinformed selection of goals. An alternative direction is to apply techniques fromheuristic search in Artificial Intelligence.An interesting application domain to study the above techniques for abductive reasoning is AIplanning, due to the strong links between abduction andplanning and the fact that recently, techniques from constraint solving and heuristic search have been successfully applied in this domain. What we can learnhere is how recent developments of constraint and heuristic methods of search inplanning could be applied to the more general case of abductive computation.A complementary approach to address the computational hardness of ALPwould be to develop ALP systems in which the user has the facility to incrementally refine herhis model of the problem in a modular way. Starting from apurely declarative problem description, it should be possible to refine the modelby adding more and more additional knowledge about the problem, includingnondeclarative heuristic and operational control knowledge. Again recent worksuggests that this is a promising line of development but there is no systematicstudy of how such a modeling environment would be designed and build in ALP.A completely different approach is to exploit the kind of techniques used inbottom up abduction 46 see section 4 based on the computation of stablemodels of a ground logic program. Techniques like those used by the smodelssystem 75 which integrates methods from propositional constraint propagationwith bottom up application of semantic fixpoint operators of the 3valued completion semantics and wellfounded semantics. In the current state of the art,it seems that while the latter techniques based on reasoning on propositionaltheories are more robust, the abductive extensions of SLDNF with CLP mayoutperform the first ones especially as they can take into account more easilyadditional problem domain specific information. Therefore, extending the latterprocedures along the lines suggested above is a promising research direction.7.4 Challenges at the Application levelIn the past decade, the potential of the different ALP frameworks have beendemonstrated in a wide variety of application domains. However, only a few ofthe current running applications exceed the level of academic toy examples.Like in many other areas of AI, this potential has not yet been realized inrealistic and industrial scale applications. One of the challenges of the domainis to find interesting niche domains with industrial impact in which the currentsystems can be evaluated and finetuned. Experimentation with and evaluation ofabductive systems in realistic domains could yield important information at thelevels of language constructs, methodology, computational control, integrationof heuristic information, etc..Some prototypical classes of problems that seem good candidates for finetuning ALP methods are Scheduling and Planning domains and Knowledge Intensive Learning where machine learning with a rich background knowledge canbe performed only if the inductive methods are integrated with abduction 123,73, 35.7.5 A possible approach to these challengesIn this section, we briefly describe our own views on how to approach the abovelogical and computational challenges.The underlying logic for ALP is IDlogic 16, 23 a logic which is appropriatefor ALP in the way that it extends classical logic with inductive definitions of ageneralized nonmonotone kind. As mentioned earlier in section 3, an abductivelogic framework P,A, IC has a natural embedding in IDlogic. P represents adefinition of the nonabducible predicates while IC represents a set of classicallogic assertions. In this view, ALP is the study of abduction in the context ofIDlogic. IDlogic was defined in an attempt to cope with the epistemologicalchallenges of logic programming and gives answers to the epistemological questions raised in section 7.2.At the computational level, we are currently developing a system called theAsystem 63, 118 integrating features of ACLP and SLDNFAC with special attention to the search in the abductive computation. During the computation,the selection and evaluation of choice points is guided by information obtainedfrom a constraint store associated to the abductive solution. With this information the high level search can avoid deadend branches before entering them. Theresult is a more robust and modular system which is capable to solve effectivelya wider range of problems than the older systems. The application domain of theexperiments with the Asystem are currently focused on scheduling and planningapplications. The Asystem is built on top of Sicstus Prolog  version 3.8.5 orabove and is available at httpwww.cs.kuleuven.ac.bedtaikt.8 ConclusionAbductive logic programming grew out of attempts to use logic programmingtechniques for a broad class of problems from AI and other areas of ComputerScience. At present Abductive Logic Programming presents itself as a conservative extension of Logic Programming that allows more declarative representations of problems. The main emphasis till now has been on setting up differentframeworks for abduction and showing how they provide a general approach todeclarative problem solving.ALP faces a number of challenges, at the logical, methodological and computational level typical for a field in an initial stage of development. We are nowbeginning to understand the contributions of this field and to develop solutionsfor the problems that the field faces.At the logical level, ALP aims to be suitable for declarative knowledge representation, thus facilitating maintenance, reusability and graceful modifiability.Yet, ALP retains from logic programming the possibility of embedding highlevel strategic information in an abductive program which allows us to speed upand fine tune the computation. In this respect, ALP is able to combine the advantages of declarative specification and programming to a greater extent thanstandard logic programming.The field has also started to recognize the full extent of the problem and thecomplexity of developing effective and useable ALP systems. The overall task ofALP of providing a highlevel general purpose modeling environment which atthe same time is computationally effective is an extremely difficult one. But weare beginning to learn how to analyze and break this task down to appropriatesubproblems that are amenable to study within our current understanding ofthe field. The hope remains that within the highlevel programming environment that ALP could provide, the programmer will be able to solve problemseffectively in a translucent way.References1. J. J. Alferes, L. M. Pereira, T. Swift. Wellfounded Abduction via Tabled DualPrograms. In Procs. of the 16th International Conference on Logic Programming,Las Cruces, New Mexico, Nov. 29  Dec. 4, 1999.2. H. Ade and M. Denecker. Abductive inductive logic programming. In C.S. Mellish,editor, Proc. of the International Joint Conference on Artificial Intelligence, pages12011209. Morgan Kaufman, 1995.3. J. J. Alferes, J. A. Leite, L. M. Pereira, P.Quaresma. Planning as AbductiveUpdating. In D. Kitchin ed., Procs. of AISB00, 2000.4. Balsa, J., Dahl, V. and Pereira Lopes, J.G. Datalog Grammars for AbductiveSyntactic Error Diagnosis and Repair. In Proc. Natural Language Understandingand Logic Programming Workshop, Lisbon, 1995.5. M. Bruynooghe, H. Vandecasteele, D.A. de Waal, and Denecker M. Detectingunsolvable queries for definite logic programs. The Journal of Functional andLogic Programming, 1999135, November 1999.6. J.F.Castro, L. M. Pereira, Z.Vale. Power Grid Failure Diagnosis Certification.Technical Report, University of Lisbon.7. A. Ciampolini, E. Lamma, P. Mello and P. Torroni. Expressing Collaboration andCompetition Among Abductive Logic Agents. In AIIA Notizie  Anno XIII3,Settembre 2000, pag. 1924.8. E. Charniak and D. McDermott. Introduction to Artifical Intelligence. AddisonWesley, 1985.9. K.L. Clark. Negation as failure. In H. Gallaire and J. Minker, editors, Logic andDatabases, pages 293322. Plenum Press, 1978.10. L. Console, D. Theseider Dupre, and P. Torasso. On the relationship betweenabduction and deduction. Journal of Logic and Computation, 15661690, 1991.11. L. Console, L. Portinale and Theseider Dupre, D., Using Compiled knowledge toguide and focus abductive diagnosis. IEEE Transactions on Knowledge and DataEngineering, Vol. 8 5, pp. 690706, 1996.12. L. Console, M.L. Sapino and Theseider Dupre, D. The Role of Abduction inDatabase View Updating. Journal of Intelligent Information Systems, Vol. 43,pp. 261280, 1995.13. D. de Waal, M. Denecker, M. Bruynooghe, and M. Thielscher. The generationof preinterpretations for detecting unsolvable planning problems. In Proceedingsof the Workshop on ModelBased Automated Reasoning 15th International JointConference on Artificial Intelligence, pages 103112, 1997.14. M. Denecker. A Terminological Interpretation of Abductive Logic Programming.In V.W. Marek, A. Nerode, and M. Truszczynski, editors, International Conferenceon Logic Programming and Nonmonotonic Reasoning, Lecture notes in ArtificialIntelligence 928, pages 1529. Springer, 1995.15. M. Denecker. On the Epistemological foundations of Logic Programming and itsExtensions. In AAAI Spring Symposium on Answer Set Programming Towards Efficient and Scalable Knowledge Representation and Reasoning, volume technical report SS0101. American Association for Artificial Intelligence, AAAI Press, 2001.16. M. Denecker. Extending classical logic with inductive definitions. In J.Lloyd et al.,editor, First International Conference on Computational Logic CL2000, volume1861 of Lecture notes in Artificial Intelligence, pages 703717, London, July 2000.Springer.17. M. Denecker and D. De Schreye. SLDNFA an abductive procedure for normal abductive programs. In K.R. Apt, editor, Proc. of the International Joint Conferenceand Symposium on Logic Programming, pages 686700. MIT Press, 1992.18. M. Denecker and D. De Schreye. Representing incomplete knowledge in abductivelogic programming. In Proc. of the International Symposium on Logic Programming, pages 147163. MIT Press, 1993.19. M. Denecker and D. De Schreye. Representing Incomplete Knowledge in AbductiveLogic Programming. Journal of Logic and Computation, 55553578, September1995.20. M. Denecker and D. De Schreye. SLDNFA an abductive procedure for abductivelogic programs. Journal of Logic Programming, 342111167, 1998.21. M. Denecker, L. Missiaen, and M. Bruynooghe. Temporal reasoning with abductiveevent calculus. In Proc. of the European Conference on Artificial Intelligence. JohnWiley and sons, 1992.22. M. Denecker, K. Van Belleghem, G. Duchatelet, F. Piessens, and D. De Schreye.Using Event Calculus for Protocol Specification. An Experiment. In M. Maher,editor, The International Joint Conference and Symposium on Logic Programming,pages 170184. MIT Press, 1996.23. Marc Denecker, Maurice Bruynooghe, and Victor W Marek. Logic programmingrevisited  logic programs as inductive definitions. ACM Transactions on Computational Logic, 2001. accepted.24. Theseider Dupre, D.. Characterizing and Mechanizing Abductive Reasoning. PhDThesis, Dip. Informatica, Universita di Torino, 1994.25. P.M. Dung. Negations as hypotheses an abductive foundation for Logic Programming. In Proc. of the International Conference on Logic Programming, 1991.26. Thomas Eiter, Georg Gottlob, Nicola Leone. Abduction from Logic ProgramsSemantics and Complexity. Theoretical Computer Science 18912129177 1997.27. Thomas Eiter, Wolfgang Faber, Nicola Leone, and Gerald Pfeifer. Declarativeproblemsolving using the dlv system. In Jack Minker, editor, LogicBased ArtificialIntelligence. Kluwer Academic Publishers, 2000.28. K. Eshghi. Abductive planning with Event Calculus. In R.A. Kowalski and K.A.Bowen, editors, Proc. of the International Conference on Logic Programming. TheMIT press, 1988.29. K. Eshghi and R.A. Kowalski. Abduction compared with negation as failure. InProc. of the International Conference on Logic Programming. MITpress, 1989.30. D. Gabbay, L. Giordano, A. Martelli, and M.L. Sapino. Conditional reasoning inlogic programming. Journal of Logic Programming, 44133774, 2000.31. J. Gartner, T. Swift, A. Tien, C. V. Damasio, L. M. Pereira. Psychiatric Diagnosisfrom the Viewpoint of Computational Logic. In G. Wiggins ed., Procs. of AISB,2000.32. Gelfond, M., Lifschitz, V. Classical negation in logic programs and disjunctivedatabases. New Generation Computing, pp. 365387, 1991.33. Fages, F. A New Fixpoint Semantics for General Logic Programs Compared withthe WellFounded and the Stable Model Semantics. Proc. of ICLP90, pp. 442 458, 1990.34. P. Flach and A. C. Kakas Eds.. Abduction and Induction Essays on their Relation and Integration. Kluwer Academic Press, 2000.35. P. Flach and A. C. Kakas. Abductive and Inductive Reasoning Background andIssues. In Peter Flach and Antonis Kakas, editors, Abduction and Induction essayson their relation and integration. Kluwer, 2000.36. Fung, T.H. Abduction by deduction. Ph.D. Thesis, Imperial College, London,1996.37. T.H. Fung, R.A. Kowalski. The iff procedure for abductive logic programming. InJournal of Logic Programming 332151165, Elsevier, 1997.38. M. Gelfond and V. Lifschitz. The stable model semantics for logic programming. InProc. of the International Joint Conference and Symposium on Logic Programming,pages 10701080. IEEE, 1988.39. Hobbs, J.R. An integrated abductive framework for discourse interpretation. Symposium on Automated Abduction,Stanford, 1990.40. K. Inoue. Hypothetical reasoning in Logic Programs. Journal of Logic Programming, 183191228, 1994.41. K. Inoue. A simple characterization of extended abduction. In Proceedings of theFirst International Conference on Computational Logic, Lecture Notes in ArtificialIntelligence, 1861, pages 718732, Springer, 2000.42. K. Inoue, Y. Ohta, and R. Hasegawa. Bottomup Abduction by Model Generation.Technical Report TR816, Institute for New Generation Computer Technology,Japan, 1993.43. K.Inoue and C. Sakama. Abductive framework for nonmonotonic theory change.In Proceedings of IJCAI95, pages 204210, Morgan Kaufmann, 1995.44. K. Inoue and C. Sakama. Abducing priorities to derive intended conclusions. InProceedings of IJCAI99, pages 4449, Morgan Kaufmann, 1999.45. K. Inoue and C. Sakama. Computing extended abduction through transaction programs. Annals of Mathematics and Artificial Intelligence, 253,4339367, 1999.46. Iwayama, N. and Satoh, K. Computing Abduction by Using TMS with TopDownExpectation. Journal of Logic Programming, Vol. 44 No.13, pp. 179  206, 2000.47. J.R. Josephson and S.G. Josephson, editors. Abductive Inference Computation,Philosophy, Technology. New York Cambridge University Press, 1994.48. C.G. Jung, K. Fischer, and A. Burt. Multiagent planning using an abductiveevent calculus. Technical Report DFKI Report RR9604, DFKI, Germany, 1996.49. A. C. Kakas. ACLP Integrating Abduction and Constraint Solving. In Proceedingsof NMR2000, 2000.50. Kakas, A. C., Kowalski, R. A., Toni, F., Abductive logic programming. Journal ofLogic and Computation 26 1993 71977051. A. C. Kakas, R.A. Kowalski, and F. Toni. The role of abduction in logic programming. Handbook of Logic in Artificial Intelligence and Logic Programming 5,pages 235324, D.M. Gabbay, C.J. Hogger and J.A. Robinson eds., Oxford University Press 199852. A.C. Kakas and P. Mancarella. Generalised Stable Models a Semantics for Abduction. In Proc. 9th European Conference on AI, ECAI90, Stockolm, 1990.53. A.C. Kakas and P. Mancarella. Database updates through abduction. In Proc.of the 16th Very large Database Conference, pages 650661. Morgan Kaufmann,1990.54. A.C. Kakas and P. Mancarella. On the relation of truth maintenance and abduction. In Proc. 1st Pacific Rim International Conference on Artificial Intelligence,PRICAI90, Nagoya, Japan, 1990.55. A. C. Kakas and P. Mancarella. Knowledge assimilation and abduction. International Workshop on Truth Maintenance, Stockholm, ECAI90, Springer VerlagLecture notes in Computer Science, Vol. 515, pp. 5471, 1990.56. Kakas, A. C., Michael, A. Integrating abductive and constraint logic programming.In Proc. International Logic Programming Conference, pp. 399413, 1995.57. A.C. Kakas and A. Michael. AirCrew Scheduling through Abduction. Proceedingsof IEAAIE99, pp. 600612, 1999.58. A.C. Kakas and A. Michael. An Abductivebased scheduler for aircrew assingment.Journal of Applied Artificial Intelligence Vol. 15, pp. 333360, 2001.59. A.C. Kakas, A. Michael and C. Mourlas. ACLP a case for nonmonotonic reasoning. in Proceedings of NMR98,pp. 4656, 1998.60. A.C. Kakas, A. Michael and C. Mourlas. ACLP Abductive Constraint LogicProgramming. Journal of Logic Programming special issue on Abductive LogicProgramming, Vol. 44 13, pp. 129177, 2000.61. A.C. Kakas and C. Mourlas. ACLP Flexible Solutions to Complex Problems.Proceedings of Logic Programming and Nonmonotonic Reasoning, LPNMR97,1997,62. A.C. Kakas and F. Riguzzi. Abductive Concept Learning. New Generation Computing, Vol. 18, pp. 243294, 2000.63. A.C Kakas, Bert Van Nuffelen, and Marc Denecker. Asystem  Problem solvingthrough abduction. In Proceedings of IJCAI01  Seventeenth International JointConference on Artificial Intelligence, pp. 591597, 2001.64. R.A. Kowalski and F. Sadri, From Logic Programming towards Multiagent Systems. Annals of Mathemathics and Artificial Intelligence, Vol 25, pp. 391419,1999.65. R.A. Kowalski and M. Sergot. A logicbased calculus of events. New GenerationComputing, 44319340, 1986.66. Kowalski, R.A. Toni, F. Wetzel, G. 1998. Executing suspended logic programs.Fundamenta Informaticae 343203224, ISO Press.67. J. A. Leite, F. C. Pereira, A. Cardoso, L. M.Pereira. Metaphorical Mapping Consistency via Dynamic Logic Programming. In J. Lloyd et al. eds., Procs. of FirstInt. Conf. on Computational Logic CL 2000, London, UK, pages 13621376, LNAI1861, Springer, 2000.68. J.W. Lloyd. Foundations of Logic Programming. SpringerVerlag, 1987.69. V.W. Marek and M. Truszczynski. Stable models and an alternative logic programming paradigm. In K.R. Apt, V. Marek, M. Truszczynski, and D.S. Warren,editors, The Logic Programming Paradigm a 25 Years Perspective, pages pp. 375398. SpringerVerlag, 1999.70. J. McCarthy. Situations, actions and causal laws. Technical Report AImemo 1,Artifical Intelligence Program, Standford University, 1957.71. Lode R. Missiaen, Marc Denecker, and Maurice Bruynooghe. CHICA, an abductive planning system based on event calculus. Journal of Logic and Computation,55579602, September 1995.72. L.R. Missiaen, M. Bruynooghe, and M. Denecker. Abductive planning with eventcalculus. Internal report, Department of Computer Science, K.U.Leuven, 1992.73. S. Muggleton. Theory Completion in Learning. In Proceedings of Inductive LogicProgramming, ILP00, 2000.74. I. Niemela and P. Simons. Smodels  an implementation of the stable model andwellfounded semantics for normal logic programs. Proceeings of the 4th International Conference on Logic Programming and Nonmonotonic Reasoning, pp.420429, 1997.75. I. Niemela. Logic programs with stable model semantics as a constraint programming paradigm. Annals of Mathematics and Artificial Intelligence, 253,4241273,1999.76. M. Pagnucco. The role of abductive reasoning within the process of belief revision.PhD Thesis, Department of Computer Science, University of Sydney, 1996.77. C.S. Peirce. Philosophical Writings of Peirce. Dover Publications, New York, 1955.78. Nikolay Pelov, Emmanuel De Mot, and Marc Denecker. Logic programming approaches for representing and solving constraint satisfaction problems  a comparison. In Proceedings of LPAR2000  7th International Conference on Logic forProgramming and Automated Reasoning, 2000. accepted.79. L.M. Pereira, J.N. Aparicio, and J.J. Alferes. Nonmonotonic reasoning with WellFounded Semantics. In K. Furukawa, editor, Proc. of the eight international conference on logic programming, pages 475489. the MIT press, 1991.80. J. Pearl. Probabilistic Reasoning in Intelligent Systems Networks of PlausibleInference. Morgan Kaufmann, San Mateo, CA, 1988.81. D. Poole. A Logical Framework for Default Reasoning. Artifical Intelligence,362747, 1988.82. D. Poole. A methodology for using a default and abductive reasoning system.International Journal of Intelligent Systems, 55521548, December 1990.83. D. Poole. Logic programming, abduction and probability A topdown anytimealgorithm for computing prior and posterior probabilities. New Generation Computing, 1134377400, 1993.84. D. Poole. Probabilistic Horn abduction and Bayesian networks. Artificial Intelligence, 64181129, 1993.85. D. Poole. Probabilistic conflicts in a search algorithm for estimating posteriorprobabilities in Bayesian networks. Artificial Intelligence, 8869100, 1996.86. D. Poole. The independent choice logic for modelling multiple agents under uncertainty. Artificial Intelligence, 94756, 1997. special issue on economic principlesof multiagent systems.87. D. Poole. Probabilistic partial evaluation Exploiting rule structure in probabilisticinference. In Proc. 15th International Joint Conf. on Artificial Intelligence IJCAI97, pages 12841291, Nagoya, Japan, 1997.88. D. Poole, R. Goebel, and R. Aleliunas. Theorist A logical reasoning system fordefaults and diagnosis. In N. Cercone and G. McCalla, editors, The KnowledgeFrontier Essays in the Representation of Knowledge, pages 331352. SpringerVerlag, New York, NY, 1987.89. David Poole. Learning, bayesian probability, graphical models, and abduction. InPeter Flach and Antonis Kakas, editors, Abduction and Induction essays on theirrelation and integration. Kluwer, 2000.90. Poole, D., Goebel, R.G., Aleliunas, Theorist a logical reasoning system for defaultand diagnosis. The Knowledge Fronteer Essays in the Representation of Knowledge, Cercone and McCalla eds, Springer Verlag Lecture Notes in Computer Science 331352, 1987.91. D. Poole, A. Mackworth, R. G. Goebel, Computational Intelligence a logicalapproach Oxford University Press, 1998.92. Stathis Psillos. Ampliative Reasoning Induction or Abduction. In ECAI96 workshop on Abductive and Inductive Reasoning, 1996.93. Rochefort, S., Tarau, P. and Dahl, V. Feature Interaction Resolution ThroughHypothetical Reasoning. In Proc. 4th World Multiconference on Systemics, Cybernetics and Informatics SCI2000 and the 6th International Conference on Information Systems Analysis and Synthesis ISAS2000, Orlando, USA July 2326,2000.94. Sacca, D., Zaniolo, C. Stable Models and NonDeterminism in Logic Programswith Negation. Proc. of PODS90, pp. 205  217, 1990.95. F.Sadri, F. Toni, I.Xanthakos. A LogicAgent based System for Semantic Integration. 17th International CODATA Conference Data and Information for theComing Knowledge Millennium CODATA 2000, Theme I3, Integration of Heterogeneous Databases and Data Warehousing.96. F. Sadri, F. Toni. Abduction with negation as failure for active databases andagents. Proc. AIIA 99, 6th Congress of the Italian Association for ArtificialIntelligence, pages 353362, Pitagora Editrice Bologna, 1999.97. F. Sadri, F. Toni. Abduction with Negation as Failure for Active and ReactiveRules, In E. Lamma and P. Mello eds., Proc. AIIA 99, 6th Congress of the ItalianAssociation for Artificial Intelligence, Springer Verlag LNAI 1792, pages 4960,2000.98. C. Sakama and K. Inoue. Representing priorities in logic programs. In Proceedingsof the 1996 Joint International Conference and Symposium on Logic Programming,pages 8296, MIT Press, 1996.99. C. Sakama and K. Inoue. Updating extended logic programs through abduction.In Proceedings of LPNMR 99, Lecture Notes in Artificial Intelligence, 1730, pages147161, Springer, 1999.100. C. Sakama and K. Inoue. Abductive logic programming and disjunctive logicprogramming their relationship and transferability. Journal of Logic Programming Special issue on ALP 44137196, 2000.101. C. Sakama and K. Inoue. An alternative approach to the semantics of disjunctive logic programs and deductive databases. Journal of Automated Reasoning131145172, 1994.102. F. Sadri, F. Toni and P. Torroni. Dialogues for negotiation agent varieties anddialogue sequences. In Preproc. ATAL01, special track on negotiation. Seattle,WA, August 2001.103. Satoh, K. Statutory Interpretation by Casebased Reasoning through AbductiveLogic Programming. Journal of Advanced Computational Intelligence, Vol. 1, No.2,pp. 94  103, 1997.104. Satoh, K. Computing Minimal Revised Logic Program by Abduction. Proc. ofthe International Workshop on the Principles of Software Evolution, IWPSE98,pp. 177  182, 1998.105. Satoh, K. Using Two Level Abduction to Decide Similarity of Cases. Proc. ofECAI98 pp. 398  402, 1998.106. K. Satoh and N. Iwayama. A Query Evaluation method for Abductive LogicProgramming. In K.R. Apt, editor, Proc. of the International Joint Conferenceand Symposium on Logic Programming, 1992.107. Satoh, K. and Iwayama, N. Computing Abduction by Using the TMS. Proc. ofICLP91, pp. 505  518, 1991.108. Satoh, K. and Iwayama, N. A Query Evaluation Method for Abductive LogicProgramming. Proc. of JICSLP92, pp. 671  685, 1992.109. Satoh, K. and Iwayama, N., A Correct GoalDirected Proof Procedure for aGeneral Logic Program with Integrity Constraints, E. Lamma and P. Mello eds.,Extensions of Logic Programming, LNAI 660, pp. 24  44, SpringerVerlag 1993.110. M. Shanahan. Prediction is deduction but explanation is abduction. In Proc. ofthe IJCAI89, page 1055, 1989.111. F. Toni. A semantics for the KakasMancarella procedure for abductive logicprogramming. Proc. GULP95, M. Alpuente and M. I. Sessa, eds., pages 231242,1995.112. F. Toni. Automated Reasoning for Collective Information Management. Proc.LocalNets, International Workshop on Communitybased Interactive Systems, inconjunction with AC99, the Annual Conference of the EC I3 Programme113. K. Van Belleghem, M. Denecker, and D. De Schreye. Representing continuouschange in the abductive event calculus. In Proc. of the International Conferenceon Logic Programming. MITPress, 1994.114. K. Van Belleghem, M. Denecker, and D. De Schreye. The abductive event calculusas a general framework for temporal databases. In Proc. of the InternationalConference on Temporal Logic, pages 301316, 1994.115. K. Van Belleghem, M. Denecker, and D. De Schreye. A strong correspondencebetween description logics and open logic programming. In Lee Naish, editor, Proc.of the International Conference on Logic Programming, 1997, pages 346360. MITpress, 1997.116. A. Van Gelder, K.A. Ross, and J.S. Schlipf.r The WellFounded Semantics forGeneral Logic Programs. Journal of the ACM, 383620650, 1991.117. Bert Van Nuffelen and Marc Denecker. Problem solving in IDlogic with aggregates some experiments. In M. Denecker, A. Kakas, and F. Toni, editors, 8th Int.Workshop on NonMonotonic Reasoning NMR2000, session on Abduction, pages115, Breckenridge, Colorado, USA, April 911 2000.118. B. Van Nuffelen and A.C Kakas, ASystem Programming with Abduction. InProceedings of LPNMR2001, LNAI Vol. 2173, pp. 393396, Springer Verlag, 2001.119. Sven Verdoolaege, Marc Denecker, and Frank Van Eynde. Abductive reasoningwith temporal information. In Ielka van der Sluis Harry Bunt and Elias Thijsse,editors, Proceedings of the Fourth International Workshop on Computational Semantics, pages 351366, 2001.120. Wetzel, G. Abductive and Constraint Logic Programming. Ph.D. Thesis, ImperialCollege, London, 1997.121. G. Wetzel, F. Toni. Semantic Query Optimization through Abduction and Constraint Handling. Proc. of the International Conference on Flexible Query Answering Systems, T. Andreasen, H. L. Larsen and H. Christiansen eds., Springer VerlagLNAI 1495 1998.122. The XSB Group. The XSB logic programming system, version 2.0. 1999. Availablefrom httpwww.cs.sunysb.edusbprolog.123. A. Yamamoto. Using abduction for induction based on bottom up generalization.In Peter Flach and Antonis Kakas, editors, Abduction and Induction essays ontheir relation and integration. Kluwer, pp. 267280,2000.124. J.H. You, L.Y. Yuan and R. Goebel. An abductive approach to disjunctive logicprogramming. Journal of Logic Programming special issue on Abductive LogicProgramming, Vol. 44 13, pp. 101128, 2000.
