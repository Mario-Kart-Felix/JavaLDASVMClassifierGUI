Cognitive NetworksRyan W. Thomas, Luiz A. DaSilva, Allen B. MacKenzieThe Bradley Department of Electrical and Computer Engineering, Virginia Tech, Blacksburg, VAemail rwthomas, ldasilva, mackenabvt.eduAbstract This paper presents a definition and framework fora novel type of adaptive data network the cognitive network.In a cognitive network, the collection of elements that makeup the network observes network conditions and then, usingprior knowledge gained from previous interactions with thenetwork, plans, decides and acts on this information. Cognitivenetworks are different from other intelligent communicationtechnologies because these actions are taken with respect to theendtoend goals of a data flow. In addition to the cognitiveaspects of the network, a specification language is needed totranslate the users endtoend goals into a form understandableby the cognitive process. The cognitive network also depends on aSoftware Adaptable Network that has both an external interfaceaccessible to the cognitive network and network status sensors.These devices are used to provide control and feedback. Thepaper concludes by presenting a simple case study to illustratea cognitive network and its framework.I. INTRODUCTIONCurrent data networking technology limits a networksability to adapt, often resulting in suboptimal performance.Limited in state, scope and response mechanisms, the network elements consisting of nodes, protocol layers, policiesand behaviors are unable to make intelligent adaptations.Communication of network state information is stifled bythe layered protocol architecture, making individual elementsunaware of the network status experienced by other elements.Any response that an element may make to network stimulican only be made inside of its limited scope. The adaptationsthat are performed are typically reactive, taking place after aproblem has occurred. In this paper, we advance the idea ofcognitive networks, which have the promise to remove theselimitations by allowing networks to observe, act, learn andoptimize their performance.This paper is divided into four parts. Section II defines whata cognitive network is. It also examines what a successfulcognitive network should be able to do, listing a few possibleapplications for the technology. Section III investigates thecognitive process. The paper then discusses a framework forimplementing a cognitive network in section IV and investigates a case study in section V.II. WHAT IS A COGNITIVE NETWORKA. BackgroundIn recent years, the words cognitive and smart have become buzzwords that are applied to many different networkingand communications systems. At a minimum, in the currentliterature we find mention of cognitive radios 12, 8, smartradios 2, smart antennas 1, cognitive packets 5, smartpackets 20 and cognitive networks 11, 18. There does notseem to be a common, accepted definition of what these termsmean when applied to a networking technology. The commonaspect in the terms mentioned above is the implication that thetechnology has the ability to selfmodify. We argue, however,that a cognitive network goes beyond the use of selfmodifyingtechnology.Cognitive networks have been mentioned in forwardlooking papers before. Mitola makes brief mention of how hiscognitive radios could interact within the systemlevel scope ofa cognitive network 12. Saracco refers to cognitive networksin his investigation into the future of information technology19. He postulates that the movement of network intelligencefrom controlling resources to understanding user needs willhelp flatten the network by moving network intelligencefurther out towards the edges of the network. Mhnen et al.discuss cognitive networks with respect to future mobile IPnetworks, arguing that the context sensitivity of these networkscould have as interesting an application in the field as cognitiveradios 11. None of these papers, however, express exactlywhat a cognitive network is and how it should work.A good model to use when examining cognitive networksis cognitive radio. There is significant research interest inthis area, and although cognitive radio was well defined byJoseph Mitola 13, 12, confusion often arises when theterms Software Defined Radio SDR and cognitive radioare used interchangeably. An SDR is simply a radio thatputs most of the Radio Frequency RF and IntermediateFrequency IF functionality, including waveform synthesis,into the digital rather than the analog domain, allowingfor great flexibility in the modes of radio operation calledpersonalities 12. Cognitive radio, on the other hand, sitsabove the SDR and is the intelligence that lets an SDRdetermine which mode of operation and parameters to use.Cognition here is used in association with a technology thatoperates inside a complex environment the congested radiofrequency spectrum, observes it, makes behavior choices, andreceives feedback from it, all the while learning  assemblinga data set that will help determine future behaviors based onpast and current feedback.Cognitive networks are likely to employ crosslayer optimizations and act simultaneously on parameters belonging tomultiple layers in the protocol stack. However, cognitive networks are more than crosslayer design. Crosslayer protocolsare surveyed in depth by Gong in 6. Here, the protocolsare divided into two major classes jointlayer optimizationdesigns and crosslayer adaptive designs. Jointlayer optimiza35214244001390520.00 2005 IEEEtions forge together two layers and then require some sort ofnetwork information synchronization to be able to performtheir global optimization algorithms. Protocols in the crosslayer adaptive classification communicate information betweentwo distinct network layers, which then adapt parameters in anattempt to locally optimize performance. Regardless of whichclass of crosslayer networking protocol is implemented, thesesolutions typically focus on a single parameter to optimizeon. Furthermore, many crosslayer designs are so focused onoptimizing at the chosen layers that they may end up degradingthe overall system or connection performance 10. In thismanner, crosslayer design would be more aptly associatedwith a cognitive layer technology than a cognitive networking technology, since crosslayer design does not exhibit thebreadth of options that should be available to a intelligentnetwork, nor the endtoend scope necessary to be termed acognitive network.B. RequirementsA cognitive network should provide, over an extendedperiod of time, better endtoend performance than a noncognitive network. Cognition could be used to improve resource management, Quality of Service QoS, security, accesscontrol, or many other network goals. Cognitive networks areonly limited by the adaptability of the underlying networkelements and the flexibility of the cognitive framework. Inthis manner, cognitive networks are not limited to only wireless networks. Adhoc networks, infrastructuremode wirelessnetworks, fully wired networks and heterogeneous networksare also candidates for cognitive network design.Cognitive networks should use network metrics and patternsas input to the decision making process and then provideoutput in the form of a set of actions that can implementedin modifiable network elements. Ideally, a cognitive networkshould be forwardlooking, rather than reactive, and attempt toadjust to problems before they occur. Finally, the architectureof a cognitive network should be extensible and flexible,supporting future improvements and elements.Implementing a cognitive network requires a system that ismore complex in terms of overhead, architecture and operation. For cognitive networks to be justifiable, the performanceimprovement must outweigh these additional complexities.For certain environments, such as static wired networks withpredictable behavior, it may not make sense to convert to cognitive behaviors. Other environments, such as heterogeneouswireless networks, may be ideal candidates for cognition.C. DefinitionWe suggest the following definition of a cognitive networkA cognitive network has a cognitive process that canperceive current network conditions, and then plan,decide and act on those conditions. The network canlearn from these adaptations and use them to makefuture decisions, all while taking into account endtoend goals.This definition mimics standard models of cognition andlearning. The network and endtoend aspects of the definition,however, are critical to differentiating a cognitive networkfrom other cognitive communication technologies. Withoutthis scope, the system is perhaps a cognitive radio or layer,but not a cognitive network. Here, endtoend denotes all thenetwork elements involved in the transmission of a data flow.For a unicast transmission, this might include the subnets,routers, switches, virtual connections, encryption schemes,mediums, interfaces, or waveforms, to mention just a few.The endtoend goals are what gives a cognitive network itsnetworkwide scope, separating it from other technologies,which have only a local, single element scope.In order to fit this definition, a cognitive network musthave elements in a Software Adaptable Network SAN tomodify. Similar to a cognitive radio, which depends on an SDRto modify aspects of radio operation e.g. time, frequency,bandwidth, code, spatiality, waveform, a SAN depends on anetwork that has one or more tunable elements. Practically,this means that a network may be able to modify one orseveral layers of the network stack in its member nodes. Asimple example of a SAN could be a wireless network withdirectional antennas antennas with the ability to scan theirreceive or transmit strength to various points of rotation. Thisnetwork would meet the definition for basic functionality of aSAN, since it contains a modifiable medium access scheme.However, it could only be called a cognitive network if thebehavior modifying the antenna direction is cognisant of howthose choices affect endtoend goals. If it is only aware ofhow it affects linklevel goals, it is simply a smart antenna orless.D. Examples and ApplicationsExamples of potential cognitive network applications includeHeterogeneity. For networks that employ a wide variety ofprotocols and physical layer interfaces, a cognitive networkcan provide a mechanism for creating order in chaos. Since acognitive network views and learns from the observed networkstatus, it can deconflict individual nodes and optimize theconnections  from top level objectives such as creatingefficient homogeneous clusters to lowerlevel goals such asreducing the total amount of energy expended.QoS. In a more general sense, cognitive networks canbe used to manage the QoS for a connection. Utilizing thefeedback about observed network conditions, the cognitivenetwork can identify bottlenecks, estimate guarantees, changeprioritization and optimize behaviors to provide the desiredendtoend QoS.Security. Cognitive networks could also be used for securitypurposes such as access control, tunneling, trust managementor intrusion detection. By analyzing feedback from the variouslayers of the network, a cognitive network can find patternsand risks and then react by changing such security mechanismsas rule sets, protocols, encryption and group membership. Suchcognition may also aid in trust and reputation mechanisms.353III. THE COGNITIVE PROCESSThe central mechanism of the cognitive network is thecognitive process. This is the process that does the actuallearning and decides on the appropriate response to observednetwork behavior. How the cognitive process operates dependsheavily on whether it is implemented in a centralized ordecentralized fashion and on the amount of network stateknown to the process.A. ScopeAs defined in section IIC, a cognitive network operatesin light of endtoend goals. This means that the scope ofthe cognitive network is operating above the goals of theindividual network elements. Instead, it operates within thescope of a data flow, which may include many networkelements. Many flows may traverse a single network element,which means that the cognitive network needs to be able toprioritize these flows. By interacting with the SAN, the cognitive network tries to maintain a set of endtoend goals suchas routing optimizations, connectivity, trust management, etc.by modifying the elements of the SAN. The cognitive elementsassociated with each flow are allowed to act selfishly andindependently in the context of the entire network to achievelocal goals.For some network applications however, the individualelements may not be so selfish or independent. For instance,in homogeneous user environments such as military, lawenforcement or corporate networks, the nodes are as concernedwith the overall goals of the network as they are with theirown goals. This raises the scope of a flow beyond its ownrequirements and is in contrast to a commercial ISP WANor some other network made up of unrelated users in whichthe nodes are likely to behave in selfish, localoptimizationmodes of operation. In attempting to accommodate networkwide goals, however, more state information will need to becommunicated, leading to higher overhead and complexity.An interesting question is how much of a performancedifference there is between these two scopes of operation.The performance difference between following selfish, localgoals and the acting in a communal, networkwide mode ofoperation is called the price of anarchy in 17. This termis defined to be the difference in performance between anetwork run by an allknowing benevolent dictator that canspecify the correct solution for the connections to be attheir optimum at any given time and one governed purelyby selfish anarchy. The answer to this question will guide thedevelopment of cognitive networks by indicating the requiredcomplexity and amount of state information needed to meetthe goals of the cognitive network. If it turns out that theperformance is significantly poorer when acting selfishly thanacting communally, the cognitive network may need to providemore centralized guidance or an appropriate incentive structureto the network elements than simply a endtoend goal. It ispossible that the answer to this question will depend on thekinds of optimizations the cognitive network is trying to make.B. StateThe effect of a cognitive networks decisions on the networkperformance depends on the amount of network state information available to it. In order for a cognitive network to makea decision based on endtoend goals, the system must haveknowledge of the current state and the current network goals.If a cognitive network has knowledge of the entire networksstate, cognitive decisions should be more correct than thosemade in ignorance. For a large, complicated system such acomputer network, it is unlikely that the cognitive networkwould know the total system state. There is often a very highcost to communicate this information beyond those networkelements requiring it, meaning a cognitive network will haveto work with less than a full picture of the network status.There are two possible modes of operation for the cognitivenetwork and the state distribution. The first is a centralizedmode of operation, in which a central server or entity tracksall endtoend goals and network status data. The other modeis distributed, in which nodes in the network share this information and no central authority exists to manage the gatheringand dissemination of this data. The tradeoffs between each ofthese modes of operation have been examined in other contextsand the usual problems associated with them are valid here too.From the possibility of a singlepoint of failure problem in thecentralized mode to overhead issues in the distributed mode,system designers will need to determine which mode offersthe best trade off for their cognitive design. Beyond purelycentralized or distributed, hybrid mechanisms may also bepossible. An example of this could be a network that transmitsendtoend goals in a distributed fashion but uses a centralrepository to store network status updates.Additional problems that a cognitive network will have tosolve include Where does this network state information comefrom How do the network elements distribute the networkstate information amongst each other If the network state isreported by the members of the network, how do we enforcetruthful reportingC. The Feedback LoopA unifying aspect of any learning model is the feedbackloop. In order to learn, a feedback loop is created in whichpast interactions with the environment guide current andfuture interactions. Figure 1 illustrates a simple example ofa feedback loop first put forward by Col John Boyd, USAFret. Commonly called the OODA loop 3, standing forObserve, Orient, Decide and Act, the model was originallyused to help military officers understand the thought processesof their adversaries. However, this loop has been adoptedoutside of the military, in applications ranging from businessmanagement to artificial intelligence. It is remarkably similarto the model Mitola uses to describe the cognition processin cognitive radios. The loop consists of four selfexplanatorycomponents, which guide a decision maker through the processof choosing an appropriate action based on input from theenvironment. The loop is missing a few important components,however. One is an overarching goal, which should feed354ObserveOrientDecideActEnvironmentFig. 1. The OODA Loopin from outside the loop and guide the orientation anddecision components by providing a context in which tomake a decision. Another missing component is a learningmodule, which prevents mistakes from previous iterations frombeing made on future iterations.Feedback loops such as the OODA loop work becausealthough the environment in which the decisions are beingmade may be highly complex, it is not totally random. Thereis a structure to the complex system that may not be apparentfrom outside analysis but an attempt to approximate it can bemade through iterative cycles of a testresponse feedback loop.By simplifying the environment to a black box model, it maybe possible to determine some of this structure, particularly ifthe system is reasonably stationary within the time frame ofinterest for the adaptations. In a cognitive network, networkelements and their interactions are the black box. The SANmodifications that the cognitive network implements act asinputs to the box, while behavior observed in the network arethe outputs.The problem with simple crosslayer protocols such asthe cognitive layers mentioned before is that they do notmodel the entire endtoend connection as the black box,but instead they examine a specific subset of the network.This can produce unforeseen responses at other elements ofthe network that are not a part of the crosslayer protocol.These responses are outside of the adaptive mechanism or theoptimization algorithm used by the cognitive layer. Ideally, acognitive network would be able to optimize the connectionby changing many of the flexible options available to it in thenetwork. Assuming that there is some underlying structure tothe response of the network, some form of machine learningalgorithm could be used to analyze the network response andchoose the correct set of inputs to optimize the system.D. CognitionCognitive processes fall under the title of machine learning and have been an active research area since the 1960s.Machine learning is broadly defined in 21 as any algorithmthat improves its performance through experience gainedover a period of time without complete information about theenvironment in which it operates. Underneath this definition,many different kinds of artificial intelligence, decision makingand adaptive algorithms can be placed, giving cognitive networks a wide scope of possible mechanisms to use in learning.In the following paragraphs, a brief discussion of possiblemechanisms for machine learning is given. There are manyother possibilities for implementing machine learning, including combinations or hybridization of the following strategiesthe choice of machine learning algorithm depends on whatthe the network goals are and how these problems are setup. Complex cognitive networks may have several cognitionprocesses operating, each using mechanisms appropriate forthe problem being solved.When discussing machine learning and artificial intelligence, the area of neural networks is often cited as a successfulmechanism for implementing learning. Neural networks usea bottomup method of learning, simulating the biologicalneurons and pathways that the brain is thought to use. A seriesof these artificial neurons analyze different aspects of knowninputs with some amount of unknown corruption. Patternrecognition is a common and straightforward application ofcognitive networks. If network responses are modeled as anoisy pattern, a neural network could be used to categorizethe pattern into predetermined responses.Genetic algorithms are usually used in optimizing over verylarge solution spaces where exhaustively searching would betoo costly. By imitating the process of evolution selection,recombination and mutation, genetic algorithms are able toexplore these large solution spaces for local optima. Geneticalgorithms have many applications, but work best for centralized problems where the environment is well known. For thisreason, if most of the current network state is known, geneticalgorithms could be used to determine optimal behaviors.Recently, artificial intelligence has focused on expert systems 16. Expert systems are often used to make decisions in avery narrow field of knowledge a common application is medical diagnosis and imitate the intuition that a professional inthe field would have in finding a solution by asking a series ofquestions typically with only yes, no, and no responseanswers. Expert systems can be useful in determining how toprioritize goals and solve problems that have a limited numberof possible inputs.Kalman filters 4 are not usually considered a machinelearning algorithm, but do fit the definition of machine learninggiven above. They contain an adaptive algorithm for feedbackcontrol. Usually found in systems that contain significantamounts of system noise, the Kalman filter is a recursivefilter used to estimate the actual and future state of the systembased on noisy Gaussian measurements. The ability to act as a355ElementsConfigurable NetworkApplicationUserResourceNetworkAPINetworkStatusSensorsSoftware Adaptive NetworkCognitive ProcessCognition LayerEndtoend GoalsSpecification LanguageFig. 2. The Cognitive Frameworkdynamic filter means a Kalman filter can be useful for trackingand maintaining a particular performance metric in a changingor noisy system.Learning automata 15 are a simple method of intelligentlylearning a process to an unknown feedback system. Typicalapplications for learning automata include problems wherethere are many dynamic elements interacting with a complexsystem, such as intelligent vehicles 22, crosslayer optimization problems 7 or routing problems 15. If the problem isdistributed and requires very little state information, learningautomata can be a good approach.Regardless of what implementation is chosen, the processneeds to be able to learn or converge to a solution faster thanthe network status changes, and then relearn and reconvergeto new solutions when the status changes again. The issue ofconvergence is of particular importance in environments thatchange frequently, such as mobile wireless networks.IV. A COGNITIVE NETWORK FRAMEWORKRegardless of what the scope of a cognitive network is, howdecentralized it is or how much state information is available,some aspects of the network have to be known. A networknode makes use of a communication medium and as suchrequires at least two entities synchronized in certain operatingmodes to communicate effectively. Furthermore, the cognitivenetwork has to know what its goals are and how to interactwith the underlying SAN. This information requires a softwareframework to be in place, tying the user needs, cognition andunderlying network together. Figure 2 illustrates the nominalarchitecture put forth in this section to build the cognitivenetwork.A. User  Application  Resource RequirementsThe top level component of the cognitive network includesthe endtoend goals, which are put forth by the networkusers, applications or resources. These requirements drive thecognitive behaviors by identifying, prioritizing and weightingthe requirements to the user of the cognitive network.As mentioned in section IIC, these endtoend goals arewhat sets a cognitive network apart from other cognitivecommunication mechanisms. Changing or modifying a network element can create performance optimization local to theparticular element being modified, but still cause a negativeeffect on the performance elsewhere in the network or node.For instance, a particular wireless MAC protocol may optimizefor power consumption, creating higher hop count routesthat use short links. However, this mode of operation mightresult in additional endtoend delay due to the additionalprocessing, queueing and transmission delay that goes alongwith higher hop count routes which in turn could affectthe transport layer, leading to more retransmissions. As aresult, the overall power consumption for the node might behigher than without the original optimization. Alternatively, ifthe protocol does achieve lower power consumption, it mayincrease the jitter of the connection beyond what is feasible fora voice application. The possibilities of interaction are endless.Only if the users of the network reveal their requirements cana cognitive network know if it is operating successfully.Like most engineering problems, there is likely to be anengineering tradeoff for every goal optimized on. In theoptimization space, the cognitive network will not be ableto optimize all metrics indefinitely. In most systems, a pointis reached in which one metric cannot be optimized withoutaffecting another. At this point, the cognitive network will needto know the metric priorities and the minimum and maximumrequired performance of each of these metrics.B. Cognitive ProcessThe cognitive process consists of three components thespecification language, cognition layer, and network input.These components follow the feedback loop discussed insection IIIC, providing the actual intelligence of the cognitivelayer, and allow it to interface with the SAN and the networkusers.Cognitive Specification Language To connect the requirements of the toplevel users of the network to the cognitivelayer, an interface layer must be developed. This informationneed not be globally known unless the cognitive network isoperating with a systemwide scope, in which case globalknowledge might be required, but must be communicatedbetween the source of the requirements and the local cognitiveprocess.This process is similar to the Radio Knowledge Representation Language RKRL proposed by Mitola for cognitiveradio 13 or QoS specification languages. There are alreadyseveral different QoS specification paradigms in existence 9and the concept of these languages  mapping requirementsto underlying mechanisms  is the same here, except that356the mechanisms are adaptive to the network capabilities asopposed to a fixed set of mechanisms.Unlike RKRL or a QoS specification language, a CognitiveSpecification Language CSL must be able to adapt to newnetwork elements, applications and goals, some of which maynot even be imagined yet. For this reason, an extensibleformat such as eXtensible Markup Language XML maybe appropriate. Other requirements may include support fordistributed or centralized operation including the sharing ofdata between multiple cognition layers. This language shouldnot actually perform the cognitive process this is done by thecognition layer but an application may be needed to translatethe requirements as generated by the top level users intoCSL.Cognition Layer The cognitive aspect of the network couldbe either centralized or distributed. Depending on whether thenetwork is operating in local or communal mode, distributedor centralized may be a more natural fit. It is a reasonableassumption, however, that most networks will have the cognitive behavior handled at each node, providing an argument todecentralize the operation. Possible algorithms for this layerwere discussed in section IIID.Network Status Sensors While the CSL provides endtoend goals as input to the cognition layer, the network statussensors provide feedback from the network to the cognitionlayer. They also allow the cognition layer to observe patterns,trends, and thresholds in the network for possible action.The network status sensors may only report data from theconnection that the cognitive network is managing, or theymay distribute their information to the entire network. Asdiscussed in section IIIB, the status these sensors collect canbe communicated in either a distributed or centralized form.Such sensors can be colocated with or be a specific functionof general purpose network nodes.C. Software Adaptable NetworkThe SAN is really a separate research area, just as the designof the SDR is separate from the development of the cognitiveradio. However, the cognitive network needs to be aware ofthe interface that the SAN provides to the network elementsit can control. This is similar to an Application ProgrammingInterface API or an Interface Description Language IDL.The SAN also consists of Modifiable Network Elements,which act as points of control for the cognitive network.Network API The actual software for the SAN and itsinterface will likely sit as some sort of middleware betweenthe user or application and the network elements, includingthe network stack. Using multiplatform glue such as CommonObject Request Broker Architecture CORBA, the API willbridge this gap. Just like the other aspects of the framework,the API should be flexible and extensible. Continuing our analogy with SDRs, an existing system that is possibly analogousto this is the Software Communications Architecture SCAused in the Joint Tactical Radio System JTRS .Another responsibility of the API and the SAN is tonotify the cognitive network of what the operating states ofthe network elements are. Many modifications to the networkstack require that both ends of the link be synchronized andoperating in the same mode. The communication required tosynchronize these states is the responsibility of the SAN andcould be accomplished either in or out of channel. Eithermethod is a significant hurdle to overcome. If, for instance, twocognitive network processes switch to different transmissionfrequencies, or different byte orders in the packet headers,or even incompatible retransmission strategies, communicationbetween the two nodes could break down.Thus at a minimum, the cognitive network needs to knowwhat modifications have been made by each of the devices inits communication channel that could impede communicationif not synchronized. Since it is possible that different networksmay have different modifications available to them, the systemused to gather and distribute this information must be robustand extensible.Modifiable Network Elements The actual components ofthe SAN are the modifiable network elements. These elementscan include any object or element used in a network, althoughit is unlikely that all elements in a SAN would be modifiable.Each element should have public and private interfaces tothe API, allowing it to be manipulated by the SAN and thecognitive network.V. CASE STUDYIn order to illustrate some of the concepts discussed in thispaper, we have developed a simple case study. This studyconsists of a distributed cognition layer made up of learningautomata. Each node in the network is equipped with adirectional reception antenna and omnidirectional transmissionantenna. The omnidirectional antenna has a variable powersource that can vary the amount of power transmitted. Theendtoend goal is to maximize the connection time for unicastand multicast communication between a source node and oneor more destination nodes. In section VA, this problem willbe mapped onto the cognitive network architecture discussedpreviously. In section VB, the simulation used to model thisproblem is discussed. Finally, results and conclusions fromthis simulation are presented in section VC.A. ArchitectureUserApplicationResource Layer For many applications,such as voice and video, having a longlasting endtoendconnection is an important consideration. The stability andlifetime of a connection is a limiting factor. Many factorsmay affect the expected lifetime of a network connection ina wireless network. For instance, traffic congestion can causetimeouts in upper layer protocols, interference can cause lossof connection at the physical layer, and mobility can causeunexpected disconnections in traffic routing. However, formobile and portable devices, one of the biggest factors in thelifetime of a connection is the utilization of the available powercapacity contained in the batteries of the network devices.For this study, it is assumed that the wireless network ismade up of a collection of network elements with varying357power capacity limitations. Some elements may be batterypowered, with limited power capacity, while others may be lessmobile, wired into the electrical system with almost limitlesspower. The lifetime of a data flow, however, is limited by therate at which the energy is being consumed and the powercapacity of the nodes in the network. By minimizing the totalutilization of the flow, the lifetime of devices being used tocarry the connection can be maximized.Furthermore, for this particular case study, there are noadditional requirements or limitations set by the top layer. Ifanother goal was to be set, such as a fair utilization of allnodes in the network or minimizing the power consumption ofthe path, a prioritization scheme would have to be developedto accomplish this multiobjective optimization. To assist inprioritizing the utility of different combinations, performancebounds may need to be set on each of the goals.Cognitive Specification Language The Cognitive Specification Language translates the endtoend goals to a formunderstandable by the cognitive process. For the goal ofmaximizing flow lifetime, the specification layer translatesthese goals in terms of the modifiable network elements. Inthis case, it is relates the goal of connection lifetime to the totalpower utilization of the chosen route. More complex cognitivespecification layers could also relate this goal to other possiblefactors, such as traffic rate, signaltonoise ratio, or mobility.This would depend on the cognition layers ability to processthese additional goals and having modifiable network elementsthat are able to support them. If user mobility is not somethingthat can be controlled by the software adaptable network,the cognitive network cannot specify a goal to the cognitionlayer that requires mobility to be modified. Similarly, if thecognition layer is not capable of optimizing multiple goals,specifying objectives for both power utilization and signaltonoise ratio would not be possible.In this simple case, the network flow lifetime goal is specified to the cognition layer by a fitness function that describesthe total power utilization. With the goal of minimizing thepower utilization of the multicast route, the fitness functionreturns higher values for power combinations that lead to lowerutilization. We define a multicast route as a tree T . The tree isanchored at a source node s that transmits to destination nodesD where D can range from 1 to N1. We assign a costfunction to each edge of the tree that is the utilization ratioof the power expended to power capacity of the transmittingsource node of that edgeut ptct1Here pt is the power set for transmission from node t andct is the available power capacity for node t. ct is afunction of node ts battery capacity in coulombs, the averageduty cycle of a transmission, and the potential drop across thebattery. We then additionally define maximum and minimumcosts for an edge asumaxt pmaxtct2umint pmintct3where pmaxt is an upper limit on the power transmitted fromnode t and pmint is a lower limit on power transmitted fromt. For a given multicast tree T the fitness function  0,1maps the routes power utilization to the endtoend goal ofmaximizing connection lifetime by defining  as 0 D  T1 tT uttT uminttT umaxttT umint D  T4The fitness function is 0 if the tree is broken due to interferenceor having inadequate power to reach all all branches. Thefunction then increases as the average utilization decreases,until it is maximized with a value of 1 in the case that thelink cost is umin for each node in the tree.Cognition Layer  In 23, the heuristic approach to directional antenna multicast, Directional Reception IncrementalProtocol DRIP was introduced. It was shown to be remarkably close to the optimal minpower solution. However, DRIPis designed to work in the absence of internode interference.Wood and DaSilva identified that heuristic solutions havegood performance in optimal environments, but have troublewhen the realworld problem of interference is introduced. Theheuristic works by assigning a cost to each link related to theinterferencefree power required to reach a particular node.However, once the tree is built, interference will creep intothe system and require more power than initially calculated.This problem can be somewhat mitigated by estimating theinterference and augmenting the required link power. However,this estimate is difficult to accurately calculate since theactual amount of insystem interference each node receivesis a function of the power output of neighboring nodes, thedistance to the neighbors, and whether the neighbors residein the directional beam of the receiving node. This case studyuses a modified DRIP algorithm that attempts to make a bestestimate of the required power making an estimate of theexpected amount of insystem interference. However, if thisestimate is too high, more power and battery utilization willbe used than necessary, and if it is too low, connections andthe multicast tree will be broken because of interference.The cognition process is the layer that solves the misestimation problem and simultaneously minimizes the powerused. By interacting with the environment, it learns to optimize the network by adapting the power output of all interiortree nodes to a lower power utilization ratio while maintaininga fully connected multicast tree. To solve the connectionlifetime problem, the cognition layer is implemented as anetwork of learning automata. An automaton is a learningmodel that has an action space either discrete or continuous,a probability vector that maps a selection probability to everyaction, and a feedback function. Each automaton in this358example is created as an Finite Action Learning AutomataFALA. Specifically, the automata are deigned as LearningRewardInaction automata denoted LRI. LRI automata andtheir behavior are discussed in detail in 14, 15, 21. AnLRI automaton is so named because the probability vector ofthe automaton is only reinforced when the automaton performsan action that receives positive feedback. If the feedback is 0,no updating occurs.As mentioned before, an LRI automaton works by updatingthe probability that it will select actions in the future based onfeedback from current and previous actions. In this case, eachautomata in the tree is given 10 possible power levels to choosefrom. These actions are represented in elements of the actionvector . The probability of choosing any particular action in is contained in the probability vector p. These two vectorsare related to one another through their indices. Initially, theprobability vector is uniformly distributed, meaning that eachelement of p is set to p1. The probabilities change as theautomata get feedback from the system. If the action chosen atinstance k is i and it receives feedback k, the probabilityvector p is updated in the next time increment asp jk 1 pikk1 pik j  ip jkkp jk  j  i 5where  is the learning parameter and i denotes the actionchoice selected. Equation 5 shows that the probability ofchoosing a particular action increases when  1 but does notchange when   0. It can be easily shown through inductionthat 0  p jk  1 and pj1 p jk  1 for every value of k.The automaton calculates  using the function defined by theCognitive Specification Language.When the FALA loop through the choiceactionfeedbackcycle, they generate a Markov process in the probability vectorp. The state space for this process can be given bySr pp  p1, p2, . . . , prT  0  pi  1 i,pi1pi  16The interior of this state space, S0r is the set of all possible validp in Sr, and is the search space of the FALA. This is becausewhen a FALA operates, it is trying to solve the optimizationproblemmaxpEkpk  p 7which, assuming small enough learning parameter , is at alocal maxima when p is a unit vector with one component ofvalue one and all others of value 0.In this example, the automata learn by repeatedly selectingpower levels to transmit at from the action space and thedetermining the feedback from the  function provided to it bythe cognitive specification language. The process is repeateduntil the system converges and stabilizes to a local utilizationminima.Network API The network API allows the cognition layerto interface with the network. For this study, the cognitionlayer needs to control the output power from the transmittingnodes. The API should provide the cognition limits on thepossible power settings, and provide a hook for setting thepower output requested by the cognition process. Additionally,the API should provide a mechanism for the cognition layerto share information between nodes. In order to calculate thefitness function, members of the multicast tree have to sharetheir utilization ratios with each other. Since child nodes haveto communicate with parent nodes as well as parent nodescommunicating with child nodes, the API should provide somebasic form of bidirectional communication mechanism thatgoes beyond the directional multicast discussed here.Network Status Sensors Network status sensor read information from the network and provide it to the cognitionlayer. For the case study, the status sensors are very simple,measuring the power output and capacity at each node, as wellas the connectivity of the network.Modifiable Network Elements The only modifiable networkelement for this study is the power output of the transmitter.Although other elements, such as the beam direction, may bemodifiable, they are not controllable by the cognitive network.B. SimulationThe network was simulated using Matlab. A 10 unit by 10unit map was created, and 10 adhoc nodes were placed in themap using a uniform distribution for the x and y coordinates.The receive beamwidth was set to 45 degrees wide, and weassumed that 70 of the power was received in the main lobe.These nodes are each given one LRI automata to controlthe transmission power, varying it among 10 power levelsuniformly distributed from 10 to 110 of the power estimateprovided by the DRIP heuristic. Unless otherwise specified, allresults refer to a learning parameter  of 0.10.The simulation models the heterogeneity of the batterycapacity by assigning random battery capacities to each node.There is a 30 chance that a node will be powered bya generated power source instead of a battery. The powercapacities are uniformly distributed from 300 to 1000 units ofpower. The signaltonoise ratio threshold for communicationto occur was set to a value of 1, meaning that signals receivedwith a power level greater than the noise and interference willbe correctly received. Outofsystem noise was set to 0.1 units.It was experimentally determined that setting the insysteminterference estimate to 0.45 units of power gave the highestprobability of successfully connecting the tree.The number of receivers was varied from 1 to 9, with 100runs performed for each receiver set size. For each simulationrun, the average utilization ratio for the tree was measured,as well as the singlenode maximum utilization, the fitnessfunction value and the iterations to convergence. A simulationwas determined to have converged when all vectors p had anelement greater than 1 . For this simulation  was set to104.It should be noted that this simple case study simulationignores unknown secondary effects that could work againstthe network goals. A more complex example might havemore network status sensors. This would allow other variables359Number of Receivers1 3 5 7 90.05 74 74 72 71 71 0.10 70 69 69 66 700.15 71 66 66 66 64TABLE IMEAN PERCENT IMPROVEMENT IN POWER UTILIZATION 100 TRIALSthat effect the connection lifetime to be determined, possiblychanging either the function  provided by the CSL or thevalue that  gives the cognition process.C. ResultsIn order to determine the optimality of the cognitive network solution, the cognitive network performance is comparedagainst the noncognitive heuristic DRIP solution.Because of its reliance on estimating the outofsystemnoise, the heuristic solution does not always determine aworkable solution. Across all receiver sets, the heuristic findsa working solution only 86 of the time. In contrast, thecognitive network finds a solution 97 of the time, an 11improvement.In terms of average power utilization, the cognitive networkoutperforms the heuristic. Removing the cases where theheuristic does not find a solution and the where the sourcenode has an infinitely large power source the solution tothis is trivial and both methods achieve average utilizationof 0, the cognitive network performs at least 64 better thanthe heuristic. Table I shows the average improvement for thecognitive network over the noncognitive network.Since the multicast tree is like a multiended chain, shouldthe connection fail between any two links in the chain, thetree will fail to reach all recipients. The lifetime of the treeis proportional to the most utilized link, since it will failfirst. Although the cognition layer does not specifically tryand determine the routing system containing the node withthe minimal maximum utilization, the cognitive network doeshave an advantage over the heuristic in this aspect also. Infact, the single node maximum utilization ratio of the cognitivenetwork is, on average, 70 lower than that of the heuristic.VI. CONCLUSIONThis paper has presented, defined and described a newform of adaptive network technology, the cognitive network.Although the term cognitive is associated with many communications technologies, we have defined a cognitive networkto be a unique, adaptive networking technology that operatesin light of the endtoend goals of a data flow. This paperdescribed the software framework required to implement acognitive network, and introduced the idea of a SAN, anunderlying network technology that has modifiable networkelements. By presenting a case study, this paper illustrated boththe architecture and potential of a cognitive network. Cognitivenetworks are a future networking technology that will allowdata networks operating in complex, heterogeneous, noisy anddynamic environments to reclaim stability by learning andadapting their behaviors to meet toplevel endtoend goals.REFERENCES1 Angeliki Alexiou and Martin Haardt. Smart antenna technologies forfuture wireless systems trends and challenges. IEEE CommunicationsMagazine, 4299097, 2004.2 Robert Berezdivin, Robert Breinig, and Randy Topp. Nextgenerationwireless communications concepts and technologies. IEEE Communications Magazine, 403108116, 2002.3 John Boyd. A discourse on winning and losing Patterns of conflict.1986.4 Eli Brookner. Tracking and Kalman Filtering Made Easy. WileyInterscience, 1998.5 Erol Gelenbe, Ricardo Lent, and Zhiguang Xu. Design and performanceof cognitive packet networks. Performance Evaluation, 4623155176, 2001.6 Michelle Gong. Improving the Capacity in Wireless Ad Hoc Networksthrough Multiple Channel Operation Design Principles and Protocols.PhD thesis, Virginia Polyechnic Institute and State University, 2005.7 M. A. Haleem and R. Chandramouli. Adaptive downlink scheduling andrate selection A crosslayer design. IEEE Journal on Selected Areas inCommunications, 23612871297, 2005.8 Simon Haykin. Cognitive radio Brainempowered wireless communication. IEEE Journal on Selected Areas in Communication, 232201220,February 2005.9 Jingwen Jin and K. Nahrstedt. QoS specification languages fordistributed multimedia applications A survey and taxonomy. IEEEMultimedia, 1137487, 2004.10 Vikas Kawadia and P. R. Kumar. A cautionary perspective on crosslayerdesign. IEEE Wireless Communications, 121311, 2005.11 Petri Mhnen, Janne Riihijrvi, Marina Petrova, and Zach Shelby. Hopbyhop toward future mobile broadband IP. IEEE CommunicationsMagazine, 423138146, 2004.12 Joseph Mitola. Cognitive Radio An Integrated Agent Architecture forSoftware Defined Radio. PhD thesis, Royal Institute of TechnologyKTH, 2000.13 Joseph Mitola and G. Q. Maguire. Cognitive radio making softwareradios more personal. IEEE Personal Communications, 641318,1999.14 Kaddour Najim and Alexander S. Poznyak. Learning Automata Theoryand Applications. Pergamon, 1994.15 Kumpati S. Narendra and Mandayam A.L. Thathachar. LearningAutomata An Introduction. Prentice Hall, 1989.16 Nils J. Nilsson. Artificial Intelligence A New Synthesis. MorganKauffman Publishers, 1998.17 Christos H. Papadimitriou. Algorithms, games, and the Internet. InProceedings of STOC 2001, 2001.18 Chris Ramming. Cognitive networks. In DARPATech, 2004.19 Roberto Saracco. Forecasting the future of information technology Howto make research investment more costeffective. IEEE CommunicationsMagazine, 41123845, December 2003.20 Beverly Schwartz, Alden W. Jackson, W. Timothy Strayer, Wenyi Zhou,R. Dennis Rockwell, and Craig Partridge. Smart packets for activenetworks. In OPENARCH 99, pages 9097, 1999.21 M. A. L. Thathachar and P. S. Sastry. Networks of Learning Automata.Kluwer Academic Publishers, 2004.22 Cem Unsal. Intelligent Navigation of Autonomous Vehicles in anAutomated Highway System Learning Methods and Interacting VehiclesApproach. PhD thesis, Virginia Polyechnic Institute and State University,January 1997.23 Kerry Wood and Luiz A. DaSilva. Optimal maxmin lifetime routingof multicasts in adhoc networks with directional antennas. In 2ndInternational Conference on Broadband Networks BROADNETS 05,October 2005.360
