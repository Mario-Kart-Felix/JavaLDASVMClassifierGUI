Algorithms: The Basic Programming Model | BASIC STRUCTURE OF A JAVA PROGRAM | InformIT Home > Articles > Programming > Algorithms Algorithms: The Basic Programming Model By Robert Sedgewick and Kevin Wayne Mar 13, 2014  Contents ␡ BASIC STRUCTURE OF A JAVA PROGRAM PRIMITIVE DATA TYPES AND EXPRESSIONS STATEMENTS SHORTCUT NOTATIONS ARRAYS STATIC METHODS APIs STRINGS INPUT AND OUTPUT BINARY SEARCH PERSPECTIVE Q&A EXERCISES CREATIVE PROBLEMS EXPERIMENTS ⎙ Print + Share This Page 1 of 15 Next > The authors of Algorithms, Part I describe a complete programming model using the Java programming language. This is an excerpt from Algorithms: Part I, 4th Edition , which was published expressly to support the Coursera course, Algorithms: Part I . From the book  From the book Algorithms: Part I, 4th Edition Learn More  Buy From the book From the book  Algorithms: Part I, 4th Edition Learn More  Buy Our study of algorithms is based upon implementing them as programs written in the Java programming language. We do so for several reasons: Our programs are concise, elegant, and complete descriptions of algorithms. You can run the programs to study properties of the algorithms. You can put the algorithms immediately to good use in applications. These are important and significant advantages over the alternatives of working with English-language descriptions of algorithms. A potential downside to this approach is that we have to work with a specific programming language, possibly making it difficult to separate the idea of the algorithm from the details of its implementation. Our implementations are designed to mitigate this difficulty, by using programming constructs that are both found in many modern languages and needed to adequately describe the algorithms. We use only a small subset of Java. While we stop short of formally defining the subset that we use, you will see that we make use of relatively few Java constructs, and that we emphasize those that are found in many modern programming languages. The code that we present is complete, and our expectation is that you will download it and execute it, on our test data or test data of your own choosing. We refer to the programming constructs, software libraries, and operating system features that we use to implement and describe algorithms as our programming model . In this section and Section 1.2, we fully describe this programming model. The treatment is self-contained and primarily intended for documentation and for your reference in understanding any code in the book. The model we describe is the same model introduced in our book An Introduction to Programming in Java: An Interdisciplinary Approach , which provides a slower-paced introduction to the material. For reference, the figure on the facing page depicts a complete Java program that illustrates many of the basic features of our programming model. We use this code for examples when discussing language features, but defer considering it in detail to page 46 (it implements a classic algorithm known as binary search and tests it for an application known as whitelist filtering ). We assume that you have experience programming in some modern language, so that you are likely to recognize many of these features in this code. Page references are included in the annotations to help you find answers to any questions that you might have. Since our code is somewhat stylized and we strive to make consistent use of various Java idioms and constructs, it is worthwhile even for experienced Java programmers to read the information in this section. Figure 1.1 Anatomy of a Java program and its invocation from the command line BASIC STRUCTURE OF A JAVA PROGRAM A Java program ( class ) is either a library of static methods (functions) or a data type definition . To create libraries of static methods and data-type definitions, we use the following five components, the basis of programming in Java and many other modern languages: Primitive data types precisely define the meaning of terms like integer , real number , and boolean value within a computer program. Their definition includes the set of possible values and operations on those values, which can be combined into expressions like mathematical expressions that define values. Statements allow us to define a computation by creating and assigning values to variables , controlling execution flow, or causing side effects. We use six types of statements: declarations , assignments , conditionals , loops , calls , and returns . Arrays allow us to work with multiple values of the same type. Static methods allow us to encapsulate and reuse code and to develop programs as a set of independent modules. Strings are sequences of characters. Some operations on them are built in to Java. Input/output sets up communication between programs and the outside world. Data abstraction extends encapsulation and reuse to allow us to define non-primitive data types, thus supporting object-oriented programming. In this section, we will consider the first five of these in turn. Data abstraction is the topic of the next section. Running a Java program involves interacting with an operating system or a program development environment. For clarity and economy, we describe such actions in terms of a virtual terminal , where we interact with programs by typing commands to the system. See the booksite for details on using a virtual terminal on your system, or for information on using one of the many more advanced program development environments that are available on modern systems. For example, BinarySearch is two static methods, rank() and main() . The first static method, rank() , is four statements: two declarations, a loop (which is itself an assignment and two conditionals), and a return. The second, main() , is three statements: a declaration, a call, and a loop (which is itself an assignment and a conditional). To invoke a Java program, we first compile it using the javac command, then run it using the java command. For example, to run BinarySearch , we first type the command javac BinarySearch.java (which creates a file BinarySearch.class that contains a lower-level version of the program in Java bytecode in the file BinarySearch.class ). Then we type java BinarySearch (followed by a whitelist file name) to transfer control to the bytecode version of the program. To develop a basis for understanding the effect of these actions, we next consider in detail primitive data types and expressions, the various kinds of Java statements, arrays, static methods, strings, and input/output. Page 1 of 15 Next > + Share This  Save To Your Account Related Resources Store Articles Blogs Data Science with Python and R LiveLessons (Anaconda Video Series) By Ian Stokes-Rees Online Video $199.99 Algorithms, Fourth Edition (Deluxe): Book and 24-Part Lecture Series By Robert Sedgewick , Kevin Wayne Book $84.99 Art of Computer Programming, Volume 4, Fascicle 6, The: Satisfiability By Donald E. Knuth Book $23.99 See All Related Store Items the trusted technology learning source   View Your Cart Join | Sign In Search Search  View Your Cart  Sign In Join Store Business & Management Certification Cloud Computing & Virtualization Data Digital Photography Engineering Graphics & Web Design Home & Office Computing Information Technology Mobile Application Development & Programming Networking Open Source Operating Systems, Server Programming Security Software Development & Management Web Development Web Services Formats Books eBooks Practice Tests Software Video Web Editions Deals & Promotions Video Training Safari Imprints Addison-Wesley Professional Adobe Press Cisco Press FT Press IBM Press Microsoft Press Store Peachpit Pearson IT Certification Prentice Hall Professional Que Publishing Sams Publishing VMware Press Explore About Affiliate Program Authors Chapters & Articles Contact Us Deals & Promotions Popular Topics Product Registration Special Offers & Newsletter Video Training Community Press and Media Relations Product Review Team User Groups About Affiliates Contact Us Jobs Legal Notice Privacy Policy Press Promotions Site Map Write for Us © 2017 Pearson Education, Informit . All rights reserved. 800 East 96th Street , Indianapolis , Indiana 46240
