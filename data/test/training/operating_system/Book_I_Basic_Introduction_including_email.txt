Book I. Basic Introduction (including email
Claude Cantin claudecantinnrcca
httpwwwnrccaimsbrcsg
Research Computing Support Group
Information Management Services Branch
National Research Council
February 2,
2This page intentionally left blank
3This document was produced by Claude Cantin of the National Research
Council of Canada. Reproductions are permitted for nonprot purposes
provided the origin of the document is acknowledged
Claude Cantin
National Research Council of Canada
4History of printing
Date Copies
March 2001
June 1999
November 1997
July 1996
November 1995
March 1995
February 1994
October 1993
August 1993
February 1993
November 1992
September 1992
February 1992
December 1991
April 1991
September 1990
January 1990
Table 1: Printings
Contents
1 Introduction
1.1 History . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.1.1 BSD: Berkeley System Distribution . . . . . . . . . . . .
1.1.2 XENIX . . . . . . . . . . . . . . . . . . . . . . . . . .
1.1.3 Linux . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.1.4 System V (formerly known as \AT&T" System V) . .
1.2 History (continued) . . . . . . . . . . . . . . . . . . . . . . . .
1.3 The UNIX Operating System . . . . . . . . . . . . . . . . . .
1.3.1 Multi-tasking, Time Sharing . . . . . . . . . . . . . . .
1.3.2 Multi-user . . . . . . . . . . . . . . . . . . . . . . . . .
1.3.3 Network Capabilities . . . . . . . . . . . . . . . . . . .
1.3.4 Portability . . . . . . . . . . . . . . . . . . . . . . . . .
1.3.5 Flexibility . . . . . . . . . . . . . . . . . . . . . . . . .
1.3.6 Software Available . . . . . . . . . . . . . . . . . . . .
1.3.7 Virtual Memory . . . . . . . . . . . . . . . . . . . . . .
1.3.8 Case Sensitivity . . . . . . . . . . . . . . . . . . . . . .
1.4 UNIX Philosophy . . . . . . . . . . . . . . . . . . . . . . . . .
1.5 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2 File System
2.1 File and Directory Names . . . . . . . . . . . . . . . . . . . .
2.1.1 Length . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.1.2 Conventions . . . . . . . . . . . . . . . . . . . . . . . .
2.2 Structure of Directories, Files . . . . . . . . . . . . . . . . . .
2.3 Permissions/File Access Modes . . . . . . . . . . . . . . . . .
2.3.1 chmod: Change Mode (Permissions) . . . . . . . . . .
2.4 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
i
ii CONTENTS
3 Tour of the File system
3.1 /: Root . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.2 /bin and /usr/bin: Commands . . . . . . . . . . . . . . . . .
3.3 /dev: Devices . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.4 /etc and /usr/etc: Management . . . . . . . . . . . . . . . .
3.5 Home Directories . . . . . . . . . . . . . . . . . . . . . . . . .
3.6 /lib and /usr/lib: Libraries . . . . . . . . . . . . . . . . . .
3.7 /tmp: Temporary Directories . . . . . . . . . . . . . . . . . . .
3.8 /var: Directories . . . . . . . . . . . . . . . . . . . . . . . . .
3.8.1 /var/adm: Administration . . . . . . . . . . . . . . . .
3.8.2 /var/mail: System Mailboxes . . . . . . . . . . . . . .
3.8.3 /var/spool: Spooling Areas . . . . . . . . . . . . . . .
3.8.4 /var/tmp: Temporary Directory . . . . . . . . . . . . .
3.9 /usr: Directories . . . . . . . . . . . . . . . . . . . . . . . . .
3.9.1 /usr/bsd: Berkeley Binaries . . . . . . . . . . . . . . .
3.9.2 /usr/demos: Demonstration . . . . . . . . . . . . . . .
3.9.3 /usr/include: Include Files . . . . . . . . . . . . . . .
3.9.4 /usr/local: Local Programs . . . . . . . . . . . . . .
3.9.5 /usr/sbin: More Binaries . . . . . . . . . . . . . . . .
3.9.6 /usr/share: Shareable Directories . . . . . . . . . . .
/usr/share/lib/dict: Dictionary . . . . . . . . . . .
/usr/share/lib/Insight: Documentation . . . . . . .
/usr/share/lib/spell: Speller . . . . . . . . . . . . .
/usr/share/lib/terminfo: Terminal Database . . . .
/usr/share/man and /usr/share/catman: Manuals .
3.9.7 /usr/tmp: Temporary . . . . . . . . . . . . . . . . . .
3.10 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4 Shells I
4.1 Input/Output Redirection . . . . . . . . . . . . . . . . . . . .
4.1.1 <: Input Redirection . . . . . . . . . . . . . . . . . . .
4.1.2 >, >>: Standard Output . . . . . . . . . . . . . . . .
4.1.3 2>, >&: Standard Diagnostic (Error) Output . . . . .
4.2 j: Pipes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4.3 Pipes and Redirections . . . . . . . . . . . . . . . . . . . . . .
4.4 &: Background Processing . . . . . . . . . . . . . . . . . . . .
4.5 Metacharacters (Wildcards) . . . . . . . . . . . . . . . . . .
4.5.1 Any Character(s) . . . . . . . . . . . . . . . . . . .
CONTENTS iii
4.5.2 [,]: List of Characters . . . . . . . . . . . . . . . . . .
4.5.3 ?: Any Single Character . . . . . . . . . . . . . . . . .
4.5.4 f,g: Alternatives (except Korn Shell) . . . . . . . . . .
4.5.5 n: Escape . . . . . . . . . . . . . . . . . . . . . . . . .
4.6 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5 Basic Security
5.1 File Permissions . . . . . . . . . . . . . . . . . . . . . . . . . .
5.2 Passwords . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5.3 Root Password . . . . . . . . . . . . . . . . . . . . . . . . . .
5.4 SSH . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5.5 TCP Wrappers . . . . . . . . . . . . . . . . . . . . . . . . . .
5.6 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
6 Commands I
6.1 A Command is a File . . . . . . . . . . . . . . . . . . . . . . .
6.2 Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
6.3 Login Related Commands . . . . . . . . . . . . . . . . . . . .
6.3.1 Logging On . . . . . . . . . . . . . . . . . . . . . . . .
6.3.2 Changing Password . . . . . . . . . . . . . . . . . . . .
6.3.3 Logging Out . . . . . . . . . . . . . . . . . . . . . . . .
6.4 Help . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
6.4.1 man: Manual Pages . . . . . . . . . . . . . . . . . . . .
6.4.2 Manuals on CDs . . . . . . . . . . . . . . . . . . . . .
6.5 File system Commands: Directories . . . . . . . . . . . . . . .
6.5.1 cd: Change Directory . . . . . . . . . . . . . . . . . . .
6.5.2 mkdir: Make Directory . . . . . . . . . . . . . . . . . .
6.5.3 rmdir: Remove Directory . . . . . . . . . . . . . . . .
6.5.4 pwd: Print Working Directory . . . . . . . . . . . . . .
6.5.5 cp: Copy . . . . . . . . . . . . . . . . . . . . . . . . .
6.5.6 mv: Move . . . . . . . . . . . . . . . . . . . . . . . . .
6.6 File system Commands: Files . . . . . . . . . . . . . . . . . .
6.6.1 ls: Listing . . . . . . . . . . . . . . . . . . . . . . . . .
6.6.2 cp: Copy . . . . . . . . . . . . . . . . . . . . . . . . .
6.6.3 mv: Move . . . . . . . . . . . . . . . . . . . . . . . . .
6.6.4 touch: Update . . . . . . . . . . . . . . . . . . . . . .
6.6.5 rm: Remove . . . . . . . . . . . . . . . . . . . . . . . .
6.6.6 cat: Concatenate . . . . . . . . . . . . . . . . . . . . .
iv CONTENTS
6.6.7 more: Browser . . . . . . . . . . . . . . . . . . . . . . .
6.6.8 head: Header . . . . . . . . . . . . . . . . . . . . . . .
6.6.9 tail: Tail End . . . . . . . . . . . . . . . . . . . . . .
6.6.10 wc: Word Count . . . . . . . . . . . . . . . . . . . . . .
6.6.11 diff: Dierence . . . . . . . . . . . . . . . . . . . . . .
6.6.12 file: Type of File . . . . . . . . . . . . . . . . . . . .
6.7 Printer Commands . . . . . . . . . . . . . . . . . . . . . . . .
6.7.1 lpr/lp: Line Printer . . . . . . . . . . . . . . . . . . .
6.7.2 lpq/lpstat: Line Printer Queue, Statistics . . . . . .
6.7.3 lprm: Line Printer Remove . . . . . . . . . . . . . . . .
6.8 User Related Commands . . . . . . . . . . . . . . . . . . . . .
6.8.1 who: Who is On . . . . . . . . . . . . . . . . . . . . . .
6.8.2 who am i, whoami: Who Am I . . . . . . . . . . . . . .
6.9 Other Miscellaneous Commands . . . . . . . . . . . . . . . . .
6.9.1 date: Display Date . . . . . . . . . . . . . . . . . . . .
6.9.2 clear: Clear the Screen . . . . . . . . . . . . . . . . .
6.10 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7 Editors
7.1 \ed" Editor . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7.1.1 Accessing ed . . . . . . . . . . . . . . . . . . . . . . . .
7.1.2 Moving Within a File . . . . . . . . . . . . . . . . . . .
7.1.3 Finding a Pattern . . . . . . . . . . . . . . . . . . . . .
7.1.4 \s" Substitute . . . . . . . . . . . . . . . . . . . . . . .
7.1.5 \c" Change Line . . . . . . . . . . . . . . . . . . . . .
7.1.6 \a" Append Text . . . . . . . . . . . . . . . . . . . . .
7.1.7 \i" Input Text . . . . . . . . . . . . . . . . . . . . . .
7.1.8 \." Current Line . . . . . . . . . . . . . . . . . . . . .
7.1.9 \p" Print Line(s) . . . . . . . . . . . . . . . . . . . . .
7.1.10 \d" Delete . . . . . . . . . . . . . . . . . . . . . . . . .
7.1.11 \w" Write . . . . . . . . . . . . . . . . . . . . . . . . .
7.1.12 \q" Quit . . . . . . . . . . . . . . . . . . . . . . . . . .
7.2 \vi" Visual Editor { Introduction . . . . . . . . . . . . . . . .
7.2.1 Invoking vi . . . . . . . . . . . . . . . . . . . . . . . .
7.2.2 vi, command and input modes . . . . . . . . . . . . . .
7.2.3 \vi" visual Editor { vi mode . . . . . . . . . . . . . .
7.2.4 Moving the Cursor . . . . . . . . . . . . . . . . . . . .
7.2.5 \^f" Forward One Screen . . . . . . . . . . . . . . . .
CONTENTS v
7.2.6 \^b" Backwards One Screen . . . . . . . . . . . . . . .
7.2.7 \G" End of File . . . . . . . . . . . . . . . . . . . . . .
7.2.8 \x, d" Delete Character . . . . . . . . . . . . . . . . .
7.2.9 \dd" Delete Line . . . . . . . . . . . . . . . . . . . . .
7.2.10 \yy" Copy Line in buer . . . . . . . . . . . . . . . . .
7.2.11 \p" Put Buer . . . . . . . . . . . . . . . . . . . . . .
7.2.12 \u" Undo . . . . . . . . . . . . . . . . . . . . . . . . .
7.2.13 \." (dot) Repeat . . . . . . . . . . . . . . . . . . . . .
7.2.14 \vi" visual Editor { command mode . . . . . . . . . . .
7.2.15 \:q" Quit . . . . . . . . . . . . . . . . . . . . . . . . .
7.2.16 \:w" Write . . . . . . . . . . . . . . . . . . . . . . . .
7.2.17 \:r" Read . . . . . . . . . . . . . . . . . . . . . . . . .
7.2.18 \:num" Line Number . . . . . . . . . . . . . . . . . .
7.2.19 \/string/" Finding a Pattern . . . . . . . . . . . . . .
7.2.20 \n" Next . . . . . . . . . . . . . . . . . . . . . . . . . .
7.2.21 :set all . . . . . . . . . . . . . . . . . . . . . . . . .
7.2.22 \vi" visual Editor { input mode . . . . . . . . . . . .
7.2.23 \i" Insert Mode . . . . . . . . . . . . . . . . . . . . . .
7.2.24 \a" Append to Character Mode . . . . . . . . . . . . .
7.2.25 \A" Append to Line Mode . . . . . . . . . . . . . . . .
7.2.26 \r" Replace Character . . . . . . . . . . . . . . . . . .
7.2.27 \R" Replace Characters . . . . . . . . . . . . . . . . . .
7.2.28 \cw" Change Word . . . . . . . . . . . . . . . . . . . .
7.3 Other Editors . . . . . . . . . . . . . . . . . . . . . . . . . . .
7.3.1 GNU Emacs . . . . . . . . . . . . . . . . . . . . . . . . .
7.3.2 textedit . . . . . . . . . . . . . . . . . . . . . . . . .
7.3.3 jot . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7.3.4 vuepad . . . . . . . . . . . . . . . . . . . . . . . . . . .
7.3.5 nedit . . . . . . . . . . . . . . . . . . . . . . . . . . .
7.3.6 pico . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7.4 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8 Electronic Mail
8.1 Mail interfaces at NRC . . . . . . . . . . . . . . . . . . . . . .
8.1.1 mail: System V based . . . . . . . . . . . . . . . . . .
8.1.2 Mail/mail: BSD based . . . . . . . . . . . . . . . . . .
8.1.3 elm/mail: public domain mail interface . . . . . . . . .
8.1.4 pine/mail: public domain mail interface . . . . . . . .
vi CONTENTS
8.2 Internet node: Machine Naming Convention . . . . . . . . . .
8.3 Mail Servers . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.4 Sending Mail . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.4.1 BSD . . . . . . . . . . . . . . . . . . . . . . . . . . . .
~r Read Filename . . . . . . . . . . . . . . .
~v: Invoking the Visual Editor . . . . . . . . . . . . . .
8.4.2 elm . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Standalone Mode . . . . . . . . . . . . . . . . . . . . .
Within the Interface . . . . . . . . . . . . . . . . . . .
Batch Mode . . . . . . . . . . . . . . . . . . . . . . . .
8.4.3 pine . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Standalone Mode . . . . . . . . . . . . . . . . . . . . .
Within the Interface . . . . . . . . . . . . . . . . . . .
Batch Mode . . . . . . . . . . . . . . . . . . . . . . . .
8.5 Reading Mail . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.5.1 BSD . . . . . . . . . . . . . . . . . . . . . . . . . . . .
n: Next . . . . . . . . . . . . . . . . . . . . . . . . . .
p: Print . . . . . . . . . . . . . . . . . . . . . . . . . .
num: Print message num . . . . . . . . . . . . . . . . .
s: Save . . . . . . . . . . . . . . . . . . . . . . . . . . .
Sending a to a printer . . . . . . . . . . . . . . . .
h: Header . . . . . . . . . . . . . . . . . . . . . . . . .
d: Delete . . . . . . . . . . . . . . . . . . . . . . . . . .
r: Reply . . . . . . . . . . . . . . . . . . . . . . . . . .
s: Forward . . . . . . . . . . . . . . . . . . . . . . . .
~m: Incorporating current message . . . . . . . . . . . .
q: Quit . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.5.2 elm . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
n: Next . . . . . . . . . . . . . . . . . . . . . . . . . .
s: Save . . . . . . . . . . . . . . . . . . . . . . . . . . .
p: Printing to a printer . . . . . . . . . . . . . . . . . .
d: Delete current message . . . . . . . . . . . . . . . .
r: Reply to sender . . . . . . . . . . . . . . . . . . . .
f: Forward . . . . . . . . . . . . . . . . . . . . . . . .
q: Quit . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.5.3 pine . . . . . . . . . . . . . . . . . . . . . . . . . . . .
n: Next . . . . . . . . . . . . . . . . . . . . . . . . . .
s: Save . . . . . . . . . . . . . . . . . . . . . . . . . . .
CONTENTS vii
p: Printing to a printer . . . . . . . . . . . . . . . . . .
d: Delete current message . . . . . . . . . . . . . . . .
r: Reply to sender . . . . . . . . . . . . . . . . . . . .
f: Forward . . . . . . . . . . . . . . . . . . . . . . . .
q: Quit . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.6 Conguring Mail Behaviour . . . . . . . . . . . . . . . . . . .
8.6.1 BSD . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.6.2 elm . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.6.3 pine . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.7 Mail Folders . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.7.1 BSD . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Creating a Folder . . . . . . . . . . . . . . . . . . . . .
Reading from a Folder . . . . . . . . . . . . . . . . . .
.record, a special folder . . . . . . . . . . . . . . . . .
8.7.2 elm . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Creating a Folder . . . . . . . . . . . . . . . . . . . . .
Reading from a Folder . . . . . . . . . . . . . . . . . .
Changing Folders . . . . . . . . . . . . . . . . . . . . .
8.7.3 pine . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Creating a Folder . . . . . . . . . . . . . . . . . . . . .
Reading from a Folder . . . . . . . . . . . . . . . . . .
Changing Folders . . . . . . . . . . . . . . . . . . . . .
8.8 Signature Files . . . . . . . . . . . . . . . . . . . . . . . . . .
8.9 Mail Aliases . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.9.1 BSD . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.9.2 elm . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.9.3 pine . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.10 MIME: Multi-purpose Internet Mail Extensions . . . . . . . . .
8.10.1 BSD . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.10.2 elm . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.10.3 pine . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Sending MIME messages . . . . . . . . . . . . . . . . .
Receiving MIME messages . . . . . . . . . . . . . . . .
8.11 Forwarding Mail . . . . . . . . . . . . . . . . . . . . . . . . . .
8.12 vacation Program . . . . . . . . . . . . . . . . . . . . . . . .
8.13 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
viii CONTENTS
9 Solutions to Exercises
9.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9.2 File System . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9.3 Tour of the File system . . . . . . . . . . . . . . . . . . . . . .
9.4 Shells . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9.5 Security . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9.6 Commands . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9.7 Editors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9.8 Electronic Mail . . . . . . . . . . . . . . . . . . . . . . . . . .
A vi Quick Reference
B Bibliography
List of Tables
1 Printings. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.1 UNIX variants on the market. . . . . . . . . . . . . . . . . . .
3.1 HOME directories . . . . . . . . . . . . . . . . . . . . . . . . . .
4.1 Redirections and Pipes. . . . . . . . . . . . . . . . . . . . . . .
6.1 Sun, SGI and Linux man page sections. . . . . . . . . . . . . .
6.2 Tools to read \CD" manual set. . . . . . . . . . . . . . . . . .
7.1 Summary of vi Commands. . . . . . . . . . . . . . . . . . . .
ix
x LIST OF TABLES
List of Figures
1.1 History of UNIX . . . . . . . . . . . . . . . . . . . . . . . . .
1.2 UNIX Systems . . . . . . . . . . . . . . . . . . . . . . . . . .
2.1 Structure of File System . . . . . . . . . . . . . . . . . . . . .
8.1 elm interface. . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.2 pine interface. . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.3 pine: Sending Mail. . . . . . . . . . . . . . . . . . . . . . . .
8.4 elm Interface: Expert User Level Menu. . . . . . . . . . . . . .
8.5 pine interface. . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.6 elm Options Menu. . . . . . . . . . . . . . . . . . . . . . . . .
8.7 pine Conguration Menu. . . . . . . . . . . . . . . . . . . . .
8.8 elm Alias Interface. . . . . . . . . . . . . . . . . . . . . . . . .
8.9 Content of .elm/aliases.text . . . . . . . . . . . . . . . . .
8.10 pine ADDRESS BOOK menu structure . . . . . . . . . . . .
8.11 pine Attachments Menu . . . . . . . . . . . . . . . . . . . . .

2 LIST OF FIGURES
Chapter
Introduction
This course is intended for people not familiar with the UNIX/linux operating
system, but familiar with other computer systems such as MSWindows, DOS
or VMS. It is meant as an introduction for beginners to help them understand
concepts behind the UNIX/linux operating system. Intermediate users may
the course useful as a refresher
Most of the command examples used throughout the text were performed
using a Silicon Graphics O2, running IRIX 6.5. Unless otherwise indicated
the outputs shown were from the Silicon Graphics O2. Sun SPARCsta
tions running Solaris, Hewlett-Packard workstations running HP/UX, IBM
RS/6000 workstations running AIX and most PCs running linux use most of
the commands described in this manual. They use the same basic commands
although some of the options used may vary slightly between the dierent
architectures
In specic cases, the book uses commands based on linux. The distribu
tion used was SuSE version
NOTES
This book refers to various UNIX derivatives running on worksta
tions
The author's denition of \workstation" includes systems such as the
Sun Microsystems SPARCstation family, the Silicon Graphics Personal
IRIS, Indigo, Indigo2, Power Series, Challenge, Power Challenge, Onyx
Power Onyx, Indy, O2, Octane and Origin families, the IBM RS
series, the HP 9000 model 700 and 800 families, the Compaq AXP

4 CHAPTER 1. INTRODUCTION
families (systems running True UNIX), and 500+ MHz PCs running
one of the linux distributions
Although most sections refer to UNIX in general, some refer to a specic
architecture. Others may refer to NRCspecic topics. Those sections
are generally clearly indicated
1.1 History
The UNIX story begins in 1969, when AT&T Bell Labs dropped out of a
joint project between themselves, General Electric, and the Massachusetts
Institute of Technology. Multics, the project in question, was an experi
mental operating system on the GE 645 (thanks to Tom Van Vleck from
http://www.multicians.org for correcting details from pre-2002 versions of
the course notes
Ken Thompson and Dennis Ritchie, both from Bell Labs, had been ex
posed to the Multics project. They ported a game, called `Space Travel
from the GE 645 running Multics, onto a PDP-7. To help them do the port
ing, Thompson wrote a \simple system and some utilities for the PDP
[8, p. 3]. This was the birth of UNIX, in 1970 (\UNIX" was meant to be a
pun on Multics
Late in 1970, a PDP-11/20 was purchased, and UNIX became an ocial
Bell Labs project. The UNIX edition \was documented in a manual
authored by Thompson and Ritchie dated November 1971" [1, p. 2]. Most of
the ideas found in today's UNIX systems were incorporated in this edition
The second edition, 1972, incorporated the piping concept
In 1973, UNIX was re-written in C, by Thompson and Ritchie. Note
that Ritchie developed the C language (derived from the B language by
Thompson) at approximately the same time
UNIX was distributed in May 1975 for a nominal fee. This was UNIX
Version
In 1979, a more portable version of UNIX (Version 7) was released for
general use; from here, three major UNIX versions emerged: BSD Berkeley
System Distribution), XENIX, and AT&T's System V
1.1. HISTORY
1.1.1 BSD: Berkeley System Distribution
The University of California at Berkeley acquired Version 4 of UNIX in
In 1975, during a sabbatical leave from Bell Labs, Ken Thompson went to
Berkeley and helped install UNIX Version 6 on a PDP-11/70. \The same
year, two graduate students also arrived at Berkeley: Bill Joy and Chuck Ha
ley" [8, p. 5] : they were to play an important role in the BSD developments
Joy wrote the vi editor, and the C shell. Bill Joy is also one of the
co-founders of Sun Microsystems
In 1978, 2BSD was released
In 1979, a combination of improved 2BSD and UNIX Version 7 was re
leased as BSD
DARPA (the Defence Advanced Research Project Agency) funded the
development of 4BSD and 4.1BSD. The Fast File System was included in
4.2BSD which was released in
Finally, 4.3BSD was released in
Berkeley's development of its BSD UNIX ended with the release of its last
major version, 4.4BSD, in 1992. Then, late in 1994, it released BSDlite
Many UNIX variants are based on that last version, written to run better
on PC's based on the Intel '486 and PentiumCPUs, namely FreeBSD, NetBSD
and BSD/OS. New versions of these versions became available in
1.1.2 XENIX
XENIX is directly based on UNIX Version 7. Its version, 2.3, was
released in 1980 by Microsoft for use on microcomputers (IBMPCs or clones
XENIX 3.0, released in 1983, included new features from 4.1BSD and
from AT&T's System III
Finally, the latest version, XENIX 5.0 was released in 1985, and conforms
to the System V Interface Denition
1.1.3 Linux
linux is a version of UNIX (some would say a \UNIX clone"), based on the
original kernel work by Linus Torvalds in Helsinki, Finland. It runs mostly
on the x86 and Pentium family of micro-processors, but is being ported to
other architectures
6 CHAPTER 1. INTRODUCTION
The original kernel work by Linus Torvalds was done in the early s
Full linux distributions appeared circa 1993. They were (still are) based
on Torvalds' kernel, but consisted mostly of software/applications openly
available for anyone wishing to use it
Dierent distributions of linux include Red Hat, Slackware, Caldera
Debian, SuSE, Mandrake and many others
Although linux may be downloaded at no charge (for free), it has a
copyright. It follows the GNU General Pulic License (GPL), in that it is
freely available, but if sold, a copy of the source code must be provided
Details on GNU's GPL is available at
httpwwwgnuorgcopyleftgplhtml
1.1.4 System V (formerly known as \AT&T" System
V
Because of a \1956 consent decree, AT&T was limited in the businesses
that they could engage in and the patents they could licence..." [8, p.
This consent decree delayed the introduction of AT&T's commercial
release by a few years. This ocial release occurred in
and was called System III. This version did not include \important Berkeley
innovations, such as the C shell and screen editing capabilities" [8, p.
The next version, System V, followed in 1983. This version did include
utilities such as vi and curses from the BSD
System V Release 2 was released in 1984, and System V Release 3 in

Finally, System V Release 4 was ocially announced on Nov 1, 1989, and
was released in 1990. This version combines System V Release 3, BSD
XENIX, SunOS and new features in one operating system
Figure 1.1 oers a graphical view of the evolution of the UNIX operating
system
1.2 History continued
In 1988, two major competing UNIX groups emerged: the OSF (Open Soft
ware Foundation) and UI (UNIX International). OSF was lead by IBM
Digital, and HP, whereas UI was lead by AT&T and Sun Microsystems
1.2. HISTORY (CONTINUED)
System VR
System VR
System VR
System V
System III Xenix
BSD
BSD
BSD
Xenix
Xenix
BSD
Version
BSD
Version
BSD
Version
UNIX
BSD
(IRIX
(Solaris
(IRIX 5.3
(Solaris
Linux

Slackware
Debian
RedHat
SuSE


NetBSD
FreeBSD
BSDOS
BSDlite







Figure 1.1: History of UNIX
8 CHAPTER 1. INTRODUCTION
The OSF was formed to counter AT&T's alliance with Sun Microsys
tems to license and enhance the UNIX Operating system. OSF wanted to
write their own version of UNIX, based on IBM's AIX
UNIX International was formed shortly after to promote AT&T's System
V UNIX system. The \special" alliance between AT&T and Sun Microsys
tems was reduced to partnerships between all UI members
Since that summer of 1988, many things have happened, and as of January
1990, UI and its members were applauding the release of UNIX System V
release 4 (SVR4, or V.4), which combines SVR3, BSD, XENIX, and SunOS
Meanwhile, OSF was planning for a release of their operating system
(now based on MACH from Carnegie Mellon University) by the end of
Early in 1993, Sun was shipping Solaris 2.1, completely based on SVR
Silicon Graphics starting shipping IRIX 5.0 in the spring or 1993 and IRIX
5.2 for all their systems in early
IRIX 6.0, a 64bit version, was shipping for the high-end systems in in the
fall of 1994. IRIX 6.2 is SGI's \all-platform" newest release, released in the
Spring of
In January 1993, Novell purchased USL thus taking control of UNIX. In
September 1993, Novell re-organised and formed the UNIX Systems Group
(USG), which took control of UNIX
In late 1995, Novell sold the control of UNIX (including UnixWare, Sys
temVRelease 4.2 code) to the Santa Cruz Operation (SCO). In 2002, Caldera
Systems (a linux vendor) purchased SCO's Server Software Division as well
as SCO's Professional Services Divisions. What is left of SCO is now called
Tarantella, now mostly a \professional services" company. Caldera Systems
changed its name to Caldera International
Most workstation vendors' current 64 bit Operating Systems: SGI with
IRIX 6.5, Compaq (formerly Digital) with Tru64 UNIX (Compaq was ac
quired by HP in 2002), HP with HP/UX 11, Sun with Solaris
1.3 The UNIX Operating System
The UNIX system is mainly composed of three dierent parts: the kernel
the system, and the shell
[The kernel] is that part of the system which manages the re
sources of whatever computer system it lives on, to keep track
1.3. THE UNIX OPERATING SYSTEM
of the disks, tapes, printers, terminals, communication lines and
any other devices
The system is the organising structure for data. The
system is perhaps the most important part of the UNIX operating
system. The system goes beyond being a simple repository
for data, and provides the means of organizing the layout of the
data storage in complex ways
The shell is the command interpreter. Although the shell is just
a utility program, and is not properly a part of the system, it is
the part that the user sees. The shell listens to your terminal and
translates your requests into actions on the part of the kernel and
the many utility programs. [7, p.
systems are discussed in chapters 2 and 3 of this manual, and shells
are discussed in chapter
One can imagine the UNIX system as a series of three concentric circles
with the inner circle representing the kernel, the second circle representing
the programming shell, and the last one representing application programs
Figure 1.2 illustrates that concept
The shell communicates to the kernel, and vice versa. The application
programs can communicate directly with both the shell and the kernel
1.3.1 Multi-tasking, Time Sharing
UNIX is a multi-tasking operating system, which means that a number of
programs can run at the same time. Those programs (called processes) can
communicate with each other
For example, a C program could be compiling as mail is being read or a
is being edited
Processes that \wake-up" occasionally, and/or regularly, are called dae
mons. Daemons are used to synchronise disks, send and receive mail, print
documents, and so on
1.3.2 Multiuser
UNIX is also multi-user: two, three, or more users are able to use the same
processor to execute their programs
10 CHAPTER 1. INTRODUCTION
Application
Programs
Shell
Kernel
Figure 1.2: UNIX Systems
1.3. THE UNIX OPERATING SYSTEM
1.3.3 Network Capabilities
Most of today's UNIX workstations come with TCP/IP and ethernet con
nections. At NRC the ethernet network connects dozens of Suns, Silicon
Graphics, VAXes, IBM RS/6000s, HPs, and an increasing number of PCs
From any of those nodes, it is simple to logon to a remote machine, send
mail to a user on those machines, or transfer to or from those nodes
More on communications in a later chapter
1.3.4 Portability
Traditionally, most operating systems were written in Assembler, for a spe
cic architecture. It was therefore VERY painful { if at all possible { to
`port' the operating system to other architectures
UNIX, on the other hand, is mostly written in the C language. This alone
allows UNIX to be portable to many architectures. Today, UNIX runs on
more architectures than any other operating system in the world. Examples
of such architectures/processors are the Motorola 680X0-based workstations
the 80X86 machines, the RISC based architectures (SPARC, MIPS,
VAXes, IBM mainframes, Amdahl, Cray, and many more
Table 1.1 lists dierent UNIX versions vendors use
1.3.5 Flexibility
UNIX is also a very operating system, both for system administra
tors and users. Program names can be changed. aliases can be dened
Arguments to programs can also be changed. New programs can be built
and put in the user's own bin directory, thus allowing further customisation
of the system
1.3.6 Software Available
Thousands of application packages [12, p. 2] are available for the UNIXlinux
system
In addition to the commercial packages, many programs are written and
made available in the public domain. Examples of such packages are the
X Window system, written at the Massachusetts Institute of Technology
the TEX system produced at Stanford, and many other utilitiesapplications
12 CHAPTER 1. INTRODUCTION
UNIX variant Vendor
SunOS Sun Microsystems
Solaris Sun Microsystems
IRIX Silicon Graphics Inc
AIX IBM
HP-UX Hewlett Packard
ULTRIX Digital
OSF/1 Digital
Digital UNIX Digital
A/UX Apple Computers
SCO Santa Cruz Operation
Destiny ATampT
XENIX Microsoft
UTS Amdahl
UniCos Cray
UXP Fujitsu
Linux Public domain
FreeBSD Public domain
NetBSD Public domain
Table 1.1: UNIX variants on the market
written by individuals and organisations, for the benet of the \Open Source
Community". For many, it is their way of thanking the \Internet Commu
nity" for the vast amount of resources available
Linux is a perfect examples of the incredible amount of software available
at no cost to individuals
1.3.7 Virtual Memory
The UNIX operating system has virtual memory, or swap space, which means
it can run programs bigger than the amount of RAM the computer actually
has! The amount of virtual memory is decided upon by the system adminis
trator
1.4. UNIX PHILOSOPHY
1.3.8 Case Sensitivity
The most common mistake for beginners involves the use of mixed case in
UNIX commands: UNIX is case sensitive, i.e., \a" is dierent from A
1.4 UNIX Philosophy
UNIX's philosophy is the same as the C language's: it assumes users know
what they are doing
1.5 Exercises
1. What is the operating system that covers the widest range of
architectures? Why
2. What are some of the advantages of running UNIX
3. What is UNIX's main philosophy
14 CHAPTER 1. INTRODUCTION
Chapter
File System
The UNIX File System manages and controls access to and directories
It keeps track of opened and closed and manages on the hard disk
2.1 File and Directory Names
2.1.1 Length
The maximum length of directory and names varies from system to sys
tem. Some versions (such as HP's HP/UX) may restrict the names to
characters, whereas most allow much longer and path names
For example, Sun and SGI workstations allows names up to 255 char
acters long, and path names to be as long as 1023 characters (a path name
is the full length of the name, beginning at the top { root { of the
system
2.1.2 Conventions
Naming is very simple: any ASCII character can be used. It is, however
recommended that no metacharacters  f, g, [, ], ?, $, n, ~, >, <, j, amp
be used. It is also recommended to simply use letters, digits, underscore (
hyphen (-) and the dot
By convention, ending with .c are C language File names ending
with .p, .f, .s are respectively PASCAL, FORTRAN, and assembler program
Header (include) usually end with h

16 CHAPTER 2. FILE SYSTEM
File names beginning with a . (dot) are hidden they do not appear
when are listed. Those are typically conguration Usually
their name consists of the package they represent followed by the rc run
command) string. .mailrc and .newsrc are two examples
Any name may contain several dots and/or underscores. These are
NOT separators
2.2 Structure of Directories, Files
The structure of the UNIX operating system is hierarchical. It is a
tree structured system, completely open (assuming necessary permissions
to every user on the system, with everything emerging from / (root) at the
top
Figure 2.1 illustrates this concept
Every directory has a parent, and|possibly|one or more children
Those children can in turn be parents
A directory is a special type of A and a directory of the same
name within the same directory is therefore impossible
NOTE that a is a linear sequence of characters, including line feeds
(nn); there is no specic structure
Everything in UNIX is considered a a directory is a special kind of
and so is the keyboard (/dev/kbd) and the system's console devconsole
2.3 Permissions/File Access Modes
A permission denes the ownership of a and the access of all users to
that (or directory
Each and directory has permissions associated with it. Those permis
sions are made up of three groups of three characters: rwx rwx rwx read
write and execute). The group represents the owner permissions on the
the second group represents the group permissions on the and the
third group represents the world permissions on the
The owner is the user owning the
Each user has an internal user number (UID), and an internal group
number (GID), set by the system administrator. Everyone with the same
2.3. PERMISSIONS/FILE ACCESS MODES
dev
root
bin prog cshrc
libc.a libm.a class1 cantin podaima vi
passwd hosts lib people bin
etc tmp usr var
mail spoolbsd
talk
tmpfile adm tmp
Figure 2.1: Structure of File System
group number is said to be in the same group. Group permissions apply to
everyone else with the same group number
world is everyone else
For example, the phone.numbers may have permissions set as
rwxrwxr--. This would mean that the owner of the can read the
write to it, and execute it. People in his/her group have the same privileges
Everyone else can only read the they cannot change, or execute it
The permissions of a can be changed with the chmod com
mand
18 CHAPTER 2. FILE SYSTEM
2.3.1 chmod: Change Mode Permissions
The chmod command allows a user to change the permissions of a
To use chmod, the user must be the owner of the
The syntax of the command is
chmod [-R] mode
-R is an option
-R (Recursively) will cause all and directories within underneath
the whose permissions are being changed to take those
permissions
mode may be specied as three octal values (one for each of the three sets
of permissions): if any of the permission bits r,w, or x is set, the corresponding
permission is enabled: give it a 1. If not, give it a 0. Then, for each of
the three permission groups, interpret the three binary numbers as an octal
number
Using the above example of the phone.numbers, which had the
rwxrwxr-- permissions, it would translate to 111 111 100, or
rwx rwx r
111 111
7 7
If write permission for world (sometimes called others) is added, mode is
changed to 776 (or 111 111
mode may also be specied symbolically as +r which would add read
permissions to everyone, or as -w which would take away write permissions
from everyone (all groups
may be one or more and/or one or more directories
separated by blank spaces
For example, to change the permissions on phone.numbers, from
rwxrwxr-- to rwxrwxrw-, the command
chmod 776 phonenumbers
or
chmod +w phonenumbers
2.4. EXERCISES
or (because we are changing it only in the others group
chmod go+w phonenumbers
which means \group others add write", could be used
The general syntax, using the conventional method is
chmod [ugo]+j-[rwx]
Where
u : permission for userowner
g : permission for group
o : permission for others
r : read permission
w : write permission
x : execute permission
Any combination of ugo, rwx may be used. If none is used, then all three
are assumed
It is also acceptable to put a combination of \[ugo]+j-[rwx]", as long as
they are separated by a comma
Typing the command
chmod
by itself will display the usage of the command
Refer to the UNIX manual of your machine for more options on the
command
2.4 Exercises
1. My friend just created a in his/her directory. Can I go and change
permissions on it? Why, or why not
2. I just created a new in my directory, but I would like it to have
rwx permissions for me, and r permissions for everyone else. What
command can I use to change those permissions
20 CHAPTER 2. FILE SYSTEM
3. I have a with permissions rwxrwxr-x. I want it to have rwxrxrx
permissions. What commands (I want two) can be used to change the
permissions on it
4. Take the same I want to remove all execute permissions for every
one, except myself. Again, which command can be used to achieve my
goal
Chapter
Tour of the File system
3.1 /: Root
/ by itself is the root or the top, the beginning of the system. super
user" is usually the only user allowed to write to that directory. Each direc
tory contains (and directories) related to one group of subjects
Some of those directories are discussed below. For more information on
any of them, please see [3, pp.
3.2 /bin and /usr/bin: Commands
The /bin and /usr/bin directories contain public commands. Those com
mands may be in binary, or in shell format
Binary format commands are those written in C, C++, FORTRAN, or
any other compiler language. The shell format commands are interpreted by
the C or Bourne shells, whichever executes them (more on shells later
When UNIX was written, /bin and /usr/bin physically resided on
two dierent disks: /bin being on a smaller faster (more expensive) disk, and
/usr/bin on a bigger slower disk. Now, /bin is a symbolic link to usrbin
they are essentially the same directory

22 CHAPTER 3. TOUR OF THE FILE SYSTEM
3.3 /dev: Devices
In UNIX, every output device is referred to as a For writing to the
console (the monitor), the to write to is /dev/console. To write to
tape, the is /dev/nrst0 (on a Sun SPARCstation 2). Even the keyboard
writes to a (/dev/kbd) which is read by the operating system
3.4 /etc and /usr/etc: Management
The /etc and /usr/etc directories are the \management" directories. etc
and /usr/etc contain programs used by the system administrator to admin
ister and congure the system to the needs of the users
One of the most important of the /etc directory is the passwd pro
nounced \password") The passwd contains basic information about
each user's account, including the logon and, in some cases, the password
(encrypted) of every user (in the other cases, the encrypted passwords are in
a called /etc/shadow which only the super user has access
Again, the commands are in two dierent directories simply for historical
reasons
3.5 Home Directories
The HOME directory is the directory in which the user lands when logging
into the system. Dierent vendors use dierent conventions for their HOME
directory
Vendor HOME directory
Digital usruserslogin
HP userslogin
IBM ulogin
Linux homelogin
Silicon Graphics usrpeoplelogin
SUN (SunOS) /home/machine namelogin
SUN (Solaris) userslogin
Table 3.1: HOME directories
3.6. /LIB AND /USR/LIB: LIBRARIES
login refers to the user's account name whereas machine name refers to
the name of the system where the account resides
3.6 /lib and /usr/lib: Libraries
\These areas were originally intended for libraries of compiled subroutines, to
be searched during the linking phase following the compilation of a program
[3, p. 27]. Those areas now also contain programs not directly available to
users but used by other programs, such as compilers. They also contain
databases (fonts, conversion units, etc.) used by programs
IRIX 5.2 (from SGI) has 5 in /lib. /usr/libhas a few thousand. On
other systems, like Suns, /lib points to /usr/lib. Hence, both directories
share the same information
3.7 /tmp: Temporary Directories
/tmp is a necessary \temporary" directory. It is available to all users to read
from and write into. But, along with /var/tmp and /usr/tmp, it is mostly
used by compilers and by UNIX as temporary storage for intermediate
3.8 /var: Directories
The philosophy behind the /var directory structure is that it contains direc
tories that vary in size and that tend to grow if not maintained properly
3.8.1 /var/adm: Administration
Administration information is kept in this directory. Logins|who logged on
when and for how long|are also kept here. Messages output to the console
system crashes and accounting information for each user are kept in specic
that grow continuously
The system administrator can monitor which commands are most often
used by referring to database from this directory. He/she may out
how much CPU time a specic account uses, even the commands used by
specic users (if the necessary congurations have been made
24 CHAPTER 3. TOUR OF THE FILE SYSTEM
The system administrator may or may not choose to keep accounting and
administration data
3.8.2 /var/mail: System Mailboxes
/var/mail contains every user's system mailbox. /var/mail/user contains
user's incoming mail, and any mail not moved out of the mailbox
3.8.3 /var/spool: Spooling Areas
Mail waiting to be sent, and waiting to be printed are stored in this area
of the system
/var/spool/lpd contains waiting to be printed on the printer
/var/spool/mqueue contains mail messages waiting to be sent out, or to
be received in the local mailboxes
3.8.4 /var/tmp: Temporary Directory
Is a temporary directory for users to use at their leisure. It is also used
by programs as temporary storage. Its content is guaranteed only for the
duration of the session
3.9 /usr: Directories
/usr contains a series of directories containing specic more permanent in
formation
What follows is a description of a number of directories within the usr
directory
3.9.1 /usr/bsd: Berkeley Binaries
This directory contains some of the binaries \borrowed" from the UNIX BSD
version
3.9.2 /usr/demos: Demonstration
Demonstration programs are kept in this directory. Some systems don't have
it; others don't make it available to users
3.9. /USR: DIRECTORIES
Sun's version of that directory is /usr/demo (no s
3.9.3 /usr/include: Include Files
Many C programs have #include <file> statements. This directory con
tains the referenced by those statements
Many of the contain information on data structure for reading specic
UNIX or for getting particular information from the operating system
(such as who is logged on, what is the type of a specic etc.). Other
simply assign a name to an integer value: an example is the EOF string
dened as (-1) in usrincludestdioh
3.9.4 /usr/local: Local Programs
Most sites have their own set of local utilities, programs and applications
To distinguish those from the system ones, they are placed in a directory
separate from the standard operating system: usrlocal
By following that convention, operating system upgrades do not aect
\public domain" and \homegrown" software
3.9.5 /usr/sbin: More Binaries
This directory contains an ever increasing number of binary, or executable

3.9.6 /usr/share: Shareable Directories
Those are typically directories that can be shared with other systems, allow
ing a saving of disk space
The information in those directories are typically independent of the
model of the workstation (for the same vendor
/usr/share/lib/dict: Dictionary
The /usr/share/lib/dict/words contains over twenty-four thousand
(24,000) words, in readable ASCII format. It is generally used by speller
utilities
In Linux and Solaris, that is is usrdictwords
26 CHAPTER 3. TOUR OF THE FILE SYSTEM
/usr/share/lib/Insight: Documentation
On Silicon Graphics, the on-line documentation (other than man pages) are
store in this directory
/usr/share/lib/spell: Speller
The hlista, hlistb, and hstop contain a list of \American-only words
British-only words, and `stop-words' (words which the program may think
acceptable, but which are not) for the spell command" [3, p. 39]. These
three are hashed (i.e., we can't read them
/usr/share/lib/terminfo: Terminal Database
This directory contains the description of terminals, ranging from the ansi
to the vt
/usr/share/man and /usr/share/catman: Manuals
On-line documentation resides in /usr/share/man and usrsharecatman
The manual pages are kept in several dierent directories, depending on what
type of information the \man page" (for manual page) holds. Typically
section 1 holds documentation for common commands, section 2 contains
information concerning system calls, and so on
The manual pages are read using the man command
The /usr/share/catman directory contains the pre-formatted man
pages
3.9.7 /usr/tmp: Temporary
This is not a real directory. Instead, it is a symbolic link to vartmp
3.10 Exercises
1. You want to see which demonstration programs you have on your sys
tem. In which directory are you more likely to these programs
2. Where would the most used commands be
3.10. EXERCISES
3. Where would the dictionary be on your system
4. Where would your home directory be
28 CHAPTER 3. TOUR OF THE FILE SYSTEM
Chapter
Shells I
A shell is a program that interprets and runs the commands typed at the
console by the user. The shell sends requests to the kernel, which executes
them
On most workstations, UNIX comes with three shells: the C Shell
the Bourne Shell and the Korn Shell. Each shell can be programmed
Programs containing shell commands, are called C shell scripts, Bourne
shell scripts or Korn shell scripts. They each have their advantages
\The general consensus of views from users familiar with both (C and Bourne
shells appears to be that the C shell is superior for interactive work, because
of its process control features, while the Bourne shell has more powerful lan
guage constructs, and so is better for use in shell scripts" [3, p. 72]. The Korn
Shell is newer, and incorporates the features and functionality of both the C
and Bourne shells, while retaining the speed of the Bourne shell (with which
it is also upward compatible
Many systems at the NRC are using a fourth shell: the Tenex shell
most commonly known as the T shell. This is a public domain shell, which
contains all features of the C shell, plus a series of extensions. The T shell
was originally downloaded from the archive tesla.ee.cornell.edu, but is
now included in some versions UNIX, including IRIX
Typical Linux installations use the bash shell (Bourne Again SHell) as its
default shell. bash contains the same feature as the Bourne and Korn shells
while retaining the and the features of the C and Tenex shells
This chapter will describe the features common to the shells
such as input/output redirection, and metacharacters (wildcards). Specics
about the shells will be discussed in Part 2 of the manual

30 CHAPTER 4. SHELLS I
4.1 Input/Output Redirection
Most UNIX commands expect input to come from a and produce
output to another \One of these is the Standard Input, and is the
place from which a program expects to read its input. Another is called the
Standard Output, and it is the to which the program writes its results
The third is the Diagnostic Output (also called Standard Error), and it
is a to which the program writes any error responses" [7, p.
Table 4.1 shows a summary on how input/output redirection may be used
Generally, the standard input is taken to be the keyboard (input is typed
by the user), the standard output is the terminal screen, as is the standard
error. They are known as descriptor 0, 1 and 2 respectively
4.1.1 <: Input Redirection
For commands expecting the input to come from the keyboard, < can be
used to get the input from a instead of having to type it in. A simple
example is
cat <
This will cause file to be displayed on the screen (the standard output
Note that it so happens that cat can take a as an input parameter
so
cat
would result in the exact same response
A more typical example is the use of a Fortran or C program (say prog
which takes data from the keyboard. If the user knows in advance what the
data will be, the program could be run this way
prog < data
where data contains the data to be read by the program
4.1.2 >, >>: Standard Output
Just as < is used as the standard input, > is used as the standard output
redirection
4.1. INPUT/OUTPUT REDIRECTION
cat
usually displays the results on the terminal screen
By concatenating > outfile to the command, as in
cat > outle
the output will be redirected to outfile. If outfile did not exist, it is
created. If it does exist, the previous contents are lost, and replaced with
the new output
This problem can be avoided by using gtgt
cat >> outle
where file will be appended to outfile
4.1.3 2>, >&: Standard Diagnostic (Error) Output
The redirection of the standard diagnostic output is not quite as simple as
for input and output redirections. It is actually dierent in the C shell and
in the Bourne shell
In the C shell, >& is used to redirect both the output AND the diagnostic
message(s) to a Therefore, using the previous example
cat >>& outle
would cause both the output and the error messages (diagnostic output) to
be appended to outfile
The standard output and error may be sent to two dierent by using
(cat > outle >& errle
In the Bourne, Korn and Bash shells, it is possible to separate the diag
nostic output from the standard output
cat >> outle 2> errle
will cause the output of cat to append to outfile, and the error messages
to go to errfile. Note that the redirection is gt
In order for the error and output to go to the same place, the following
is used
32 CHAPTER 4. SHELLS I
cat >> outle gtamp
(the &1 really means the descriptor, which happens to be the new stan
dard output). If the error messages are to be ignored
cat >> outle 2> devnull
/dev/null is a special which acts like an innite sink
4.2 j: Pipes
The concept of using a command's output for another command's input is
called piping. A pipe eliminates the need for temporary instead, the
output of one command goes directly to the input of the next
A pipe is not only faster than creating temporary it is faster than
using redirection: when using redirection, the system has to wait until all
data has been redirected to begin the next command, whereas with piping
the next command is started as soon as data is available to it
As a pipe example, let's out how many users are logged onto the
system
who j wc l
where who is the command to display all users on the system (one line per
user), and wc -l is the command to count how many lines the input
contains (i.e. the number of users
Without the pipe command, the following would have to be used
who > tmptemple
wc -l < tmptemple
Note that the sign for pipe is a vertical bar j
4.3 Pipes and Redirections
When piping a command, only the standard output is sent through the pipe
To send the standard error as well, we use
cmd1 j& cmd
in the C and Tenex shells. In the Bourne/Korn/Bash shells
cmd1 2>&1 j cmd
4.4. &: BACKGROUND PROCESSING
Redirection C/Tenex shell Bourne/Korn/Bash shell
standard input cmd < inle cmd < inle
standard output cmd > outle cmd > outle
standard error only (cmd > outle >& errle cmd 2> errle
standard output and error cmd >& outle cmd > outle gtamp
pipe cmd1 j cmd2 cmd1 j cmd
std output and error to pipe cmd1 j& cmd2 cmd1 2>&1 j cmd
Table 4.1: Redirections and Pipes
4.4 &: Background Processing
UNIX is a multitasking operating system. Sure, but how does one run a
number of programs? One answer: use the background process facility
When typing command names and waiting for the output, the user is said
to be in foreground mode: the user has to wait for the programcommand
to executing before typing the next one. But if the user types an am
persand (&) at the end of the command line, that particular command is
executed in the background, and the command prompt immediately reap
pears, along with a process id number, called pid, as in
prompt> latex bigletex > tex.out amp
[1]
latex bigfile.tex displays messages onto the standard output. But
in this case, it has been redirected to tex.out. 1198 is the pid of the job
Upon completion, the message
[1] Done latex bigfile.tex > texout
will be displayed on the screen
NOTE : if the terminal used is connected to a serial port on the UNIX
system, then all background processes should be before logging out
If, at logout time, there are still jobs running in background mode, then
this could potentially hang the serial port the terminal is connected to
In this case, batch (explained in a later chapter) should be used
34 CHAPTER 4. SHELLS I
4.5 Metacharacters Wildcards
All shells use the concept of metacharacters. Metacharacters are special
characters used to specify a set of names
4.5.1 Any Characters
An matches any combination of characters, including the null string. The
could be used to erase all ending with .log by using
rm
where rm is the command to erase a
4.5.2 [,]: List of Characters
To express a list of characters, or numbers, [ and ] are used. The comma is
used as a separator between the characters. If a hyphen is used, a range of
characters is represented
For example, all ending with 1, 2, 3, 5, 6, 7, and 9 could be repre
sented as

or all ending with an upper case letter

4.5.3 ?: Any Single Character
The ? is used to represent any single character. ?? would represent any
combination of two characters
For example, all beginning with ar and four characters long are
represented by
ar
4.6. EXERCISES
4.5.4 f,g: Alternatives (except Korn Shell
Consider a directory with most beginning with fil. Two of those
are filling, and filler. An easy way to erase those is to use
rm
This is equivalent to issuing
rm
rm
The shell interprets the commandwith the entry within brackets
then with the second (then third, fourth
4.5.5 n: Escape
Any metacharacter can be represented as a normal ASCII character by pre
ceding it with the n backslash
For example
rm
would delete name filer NOT all names beginning with fi and
ending with ler
4.6 Exercises
1. I have a program, called names, which prompts the user for a series of
names and telephone numbers. But I also have a containing all that
information, in the right order. How can I run names without having
to type all the information on the keyboard
2. Take the same program names. Assume that the program usually reads
all the information, then sorts the information by last name, and
nally outputs the sorted information on the screen. But I want it in a
How can I do that? What if I want to append it to a called
sortednames
3. I want to get rid of ALL my object (they all end with .o). What
one command can I use
36 CHAPTER 4. SHELLS I
4. I want to remove all my beginning with a number, but also end
with an upper case character. How do I do it in one command
5. I want to remove all four-character beginning with z. What com
mand can I use
6. List all equivalent commands (no wildcards) to
rm myffilcapge
7. I have a containing an asterisk (*). How can I remove it
8. Assume I have a program that displays a list of dates on the screen
Let's call it display.dates. I then want to take that information
and count how many lines have been processed (I am not interested in
seeing the intermediate output { all I want to know is how many lines
were processed). What one-line command can I use
9. I am working on an ASCII terminal, and I need to run a job that takes
(15) minutes to execute. But I also have to write and send a
piece of mail to my boss. I have no window system, and I need to leave
in 15 minutes. How can I resolve my problem
Chapter
Basic Security
In computing and in any operating system, security is becoming more and
more of an issue
The following few sections will introduce basic security measures every
user and system administrator should take
5.1 File Permissions
File permissions have already been introduced in the File System chapter
USE them. If you have a or a directory which contains sensitive infor
mation, close it to everyone but yourself (using chmod 700 If a is to
be run, but the contents should not be seen by any user, do not allow read
permissions to anyone (use chmod 700
Many users completely close their home directory to other users, using
the chmod command
To system administrators: most outside of /tmp, /var/tmp and the
user areas should be write protected
5.2 Passwords
USE A PASSWORD
do not choose a password that exists in the dictionary
usrsharelibdictwords
change your password regularly

38 CHAPTER 5. BASIC SECURITY
use a combination of letters and numbers, if possible
your password must be longer than characters
do not write your password anywhere
do not share your password with everyone who asks for it
5.3 Root Password
To system administrators
use the above rules
make sure every user uses a password
limit the number of people who know the root password, to at least
one more than yourself, but not too many
use the root account only when performing system administration
work
5.4 SSH
SSH (Secure SHell) is a protocol used to provide secure connections between
two hosts. The secure connection is provided by encrypting the entire session
between the two systems
Each system has a pair of keys: a private and a public key. The keys are
created at the same time, so they do have a direct relationship between each
other
The public key is made available to anyone who requests it. It is used to
encrypt messages to be sent to its original owner
The private key is the only key able to decrypt messages produced by its
own public key. Needless to say, the private key may only be seen/read by
its own owner
The result is that any system wanting to communicate with your system
must have your public key. And your system must have the public key of any
system you wish to contact
5.5. TCP WRAPPERS
This allows two systems to have private conversations, even if someone is
eavesdropping on their conversation
SSH is installed on all systems maintained by the Research Computing
Support Group. In fact, as of May 2001, any session requiring a password
with any UNIX system maintained by the Group will be required to be done
using the SSH protocol. This includes transfers and reading mail using
remote clients
5.5 TCP Wrappers
Traditionally, UNIX systems allow any host, from anywhere, to connect to
its various services (such as telnetd, ftpd, POP/IMAP). Since the majority of
NRC's systems are connected directly o the Internet, it means anyone may
have access to the systems and their services
To restrict who has access to which service, TCP wrappers are used to
control which system has access to which service
An access control /etc/hosts.allow (or etchostsdeny
contains a list of services, and a list of hostsdomains
allowed (or denied) access to those services. Only hosts and
services) listed in /etc/hosts.allow are allowed execution by
remote and local systems. A typical last line in the access
crontrol file is
ALL : ALL : severity auth.crit : deny
which would deny access to all services/systems not mentioned
prior to it
/etc/hosts.deny would also typically have that same last
line
This allows us to greatly enhance our control on who has
access to which service on which system
5.6 Exercises
1. Why should I use a password on my account
2. What should my password look like
40 CHAPTER 5. BASIC SECURITY
3. I am the system administrator for a few workstations
Should I give the root password to every user? Why, or why
not? Should I always log in as root? Why, or why not
Chapter
Commands I
UNIX was originally written for people using slow and clumsy
teletype (hardcopy) terminals. The fewer the number of
characters typed the better. For that reason, many UNIX
commands are very short: two or three letters. The options
called flags, are also very short: usually one character
The syntax for some commands will be described in this
chapter along with some of the options, or flags. However
as this is only an introduction to UNIX, many flags for
many commands will NOT be mentioned. It is the users
responsibility to verify which flags/options are available
on their machine
Short commands are usually not very mnemonic. But there are
always tricks to help remember their meaning
6.1 A Command is a File
A command is a file that can be executed simply by typing the
file name. Most commands are in the /usr/bin, /usr/bsd, sbin
/usr/sbin, or /usr/local/bin directories although they may be
located anywhere in the directory structure
A command is found by looking in the directories defined by
the path environment variable and searching this structure
Commands can be created by users. The only criteria is that
the file (representing the command) be executable

42 CHAPTER 6. COMMANDS I
6.2 Syntax
The general syntax of a command is
command [-flag(s) ] [filename(s)
where
command is the filename representing the command
flag(s) are option(s) to the command. Most start with a
minus (-) sign, followed by a number of single characters
each with a special meaning for the command
filename(s) are files (input and/or output) to be used by
the command
6.3 Login Related Commands
This section will deal with how to log on to the UNIX system
and how to log out
6.3.1 Logging On
Initially, a user needs to get a userid and, optionally, a
password. The userid is typed in at the login prompt, which
usually looks like
login
Following the logon, the password prompt will appear
password
When the password is typed, it will not be echoed back to
the display terminal for security reasons
The first time a user logs on, a password may not
be required. In this case, the user will be logged on
automatically
Upon logging on, a number of special files will be executed
These will be discussed in the Special Files chapter in Book
II: Advanced Introduction (including Internet
6.4. HELP
6.3.2 Changing Password
Upon logging onto UNIX for the first time, it is STRONGLY
recommended that the user change his/her password, using the
passwd command
passwd
UNIX will ask for the old password, then the new one
(twice), always with the echo turned off
Some systems will provide restrictions on the password
IRIX will insist on a password of at least five characters and
at least ones non-alphabetic character
Also note that a maximum length of eight characters is used
by the password algorithm: any password longer than eight
characters will be truncated to eight
6.3.3 Logging Out
Three commands can be used to log out of the UNIX session
These are: logout, exit, and CTL-D. Some systems may not
accept the CTL-D or exit. They are roughly equivalent when
logging out from the console
6.4 Help
UNIX assumes the user knows what he/she is doing. For that
reason, specific help files do not exist
There is, however, a set of on-line manual pages which may
or may not be on your particular system. The man-pages are
accessed using the man command
6.4.1 man: Manual Pages
man man page
or
man -k key word
44 CHAPTER 6. COMMANDS I
where man page is either a command, or a special file. man
then displays documentation on the standard output, one
screenful at a time. To see the next screenful, press the
space bar (man works very similarly to the more command with a
reduced functionality
key word is a keyword that is found in the description of a
man page. When
man -k key word
is issued, all commands which will be listed contain in their
description, the word key word
man pages are typically divided into eight sections; some
Linux distributions may have a 9th one, specifically for kernel
routines (very rarely used; its man pages even say section 9 is
obsolete
The following table illustrates most man page sections on
a Sun (mostly Berkeley based), on a Silicon Graphics System
V based) system, and on the SuSE 7.3 and Red-Hat 7.2 linux
distribution
Content SUN SGI Linux
User commands. 1 1
Administrative commands. 1M 1M
System calls. 2 2
C routines. 3 3C
Fortran routines. 3 3F
Graphics routines. N/A 3G NA
Streams routines. 3V 3S
X11 routines. 3 3X11
Audio routines. N/A 3A NA
Special 4 7
Conguration 5 4
Games. 6 N/A
Demos. 6 6D NA
Maintenance. 8 8
Table 6.1: Sun, SGI and Linux man page sections
6.5. FILE SYSTEM COMMANDS: DIRECTORIES
Table content based on [4, p.
6.4.2 Manuals on CDs
Since early 1993, most vendors include electronic versions of
UNIX manuals with the OS release. Utilities to read them are
included in the operating system
The table below enumerates the vendor and the name of their
on-line manual utility
Vendor Product Name Command
Hewlett Packard Laserrom lrom
IBM InfoExplorer info
Silicon Graphics Insight insight
Sun Microsystems AnswerBook answerbook
Digital Bookreader bookreader
Table 6.2: Tools to read \CD" manual set
Most Linux distributions do not include such a tool. But
the /usr/doc directory contains documentation on many of the
packages, most of which is in HTML so can be read with any Web
Browser
6.5 File system Commands: Directories
Now that the UNIX tree-structured file system has been
introduced, it would be useful to know how to find our way
through the system and how to create files, delete them and
rename them
This section deals with commands directly related to
directories: how to create or remove them, and how to move
from one to another
The next section will deal strictly with file manipulations
46 CHAPTER 6. COMMANDS I
6.5.1 cd: Change Directory
To move from one directory to another the cd command is used
Use as
cd [directory
directory may be an absolute, or a relative pathname. Or
it may be nothing at all: if cd is used by itself, the user
returns to his/her home directory
An absolute---or full---pathname starts with /. In other
words, the path taken to get to the directory is given from
the top of the tree, through all the nodes, to the destination
directory
The relative pathname of the directory gives the route taken
from the current directory, to the destination directory
Note that . (dot) means this current directory, .. (dot dot
means the previous directory, and that ~ (tilde) means the
user's home directory. For example
cd testdir
means go up one directory, then down into the testdir directory
at that node
cd (by itself) is equivalent to cd
6.5.2 mkdir: Make Directory
To create a new directory, mkdir is used, as
mkdir [-p] directory
-p means create parent directories, if needed. directory
may be an absolute or relative directory name
The user must have write permission on the parent directory
to create a new directory
6.5.3 rmdir: Remove Directory
A directory can be removed with
6.5. FILE SYSTEM COMMANDS: DIRECTORIES
rmdir directory
and again, directory may be an absolute or relative path name
The directory being deleted must be empty (i.e., cannot have
any child directories, or files), and the user must have write
permission
6.5.4 pwd: Print Working Directory
The command pwd is used to display the full pathname of the
current directory; the display is always in the absolute
format
Example
prompt> pwd
usrpeoplecantindocsunix
6.5.5 cp: Copy
To copy the contents of a directory into another directory, the
following is used
cp -r [-ip] directory1 directory
or
cp -R [-ip] directory1 directory2 (not linux
or
cp -r [-ipd] directory1 directory2 (linux only
where directory1 and directory2 are directories
The contents of directory1 will be copied into directory
If directory2 does not exist if will be created. If it
exists, a copy of directory1 will be created as a subdirectory
of directory2. In both cases, a new directory will be
created
-r (recursive) is a recursive copy. When a directory is
encountered, its files are also copied
48 CHAPTER 6. COMMANDS I
-R (recursive) is a recursive copy. When a directory is
encountered, its files are also copied
If a file/directory is a symbolic link, the link is
copied, not the content of the file
-d (preserve link) is used by linux. If the filedirectory
is a symblic link, it preserves that link
-i (interactive) will prompt the user for confirmation if a
file will be overwritten during the copy
-p (preserve) will keep the time-stamps and permissions of
the original files
6.5.6 mv: Move
In UNIX, mv means move, or rename
mv [-i] directory1 directory
where directory1 and directory2 are directories
This command will simply rename directory1 to directory
If directory2 exists, the files of directory1 will be moved
into directory
-i will prompt the user for confirmation if a file is to be
overwritten
6.6 File system Commands: Files
By this time, the user should know how to find his/her way
through the file system. The contents of the major directories
should be understood
The user should also be able to create new directories, and
remove them
This section is concerned with the creation, deletion, and
manipulation of files. By the end of this section, the user
should be able to identify all files within a directory, create
new ones, remove others, display the contents of some, rename
others, and more
6.6. FILE SYSTEM COMMANDS: FILES
6.6.1 ls: Listing
The contents of a directory can be displayed using the ls
command
ls [-alRC] filename
where filename... is one or more file or directory names
-a list all files, including those beginning with ``." and

-l produce a long listing
-R produce a recursive listing
-C force multi-column output
Examples of the above flags follow
Note: many more flags are available. For more information
see the documentation relating to your system or use man ls
ls by itself lists the content of the current working
directory, in alphabetical order
prompt> ls
course.tex course.toc unixug
The -a (all) option, lists all files, including those
beginning with a dot (.). The current directory is represented
as . (dot) and the parent directory, by .. (dot dot
prompt> ls a
. .. course.tex course.toc unixug
The -l (long) flag will produce a long listing
prompt> ls l
50 CHAPTER 6. COMMANDS I
total
-rw-r--r-- 1 cantin saoscs 19347 Dec 11 10:12 coursetex
-rw-r--r-- 1 cantin saoscs 2520 Dec 11 09:53 coursetoc
-rw-r--r-- 1 cantin saoscs 1978 Dec 7 09:14 unixug
The first line of the listing gives the total storage area
taken by this directory, in kilobytes
The first character of the first field indicates the type of
file (- means an ASCII file, d a directory, l a symbolic link
The next nine characters indicate the permissions on the file
The next field is the number of links, i.e. the number of
copies of that file on the file system (normally 1). The third
field shows the owner, followed by the group name of the owner
the fifth, the size of the file (in bytes), the sixth the last
modified time, and the last field the name of the file
Any combination of flags is allowed
prompt> ls la
total
drwxr-xr-x 2 cantin saoscs 512 Dec 11 10:14
drwxr--r-- 9 cantin saoscs 512 Dec 5 12:09
-rw-r--r-- 1 cantin saoscs 19347 Dec 11 10:12 coursetex
-rw-r--r-- 1 cantin saoscs 2520 Dec 11 09:53 coursetoc
-rw-r--r-- 1 cantin saoscs 1978 Dec 7 09:14 unixug
6.6.2 cp: Copy
Files can be copied onto other files using the cp command
cp [-ipR] filename1 filename2 (not linux
or
cp [-ipRd] filename1 filename2 (linux only
where filename1 and filename2 are files, not directories
-i (interactive) will prompt the user if filename1 will
overwrite filename
-p (preserve) will keep the time-stamps and permissions of
the original file
6.6. FILE SYSTEM COMMANDS: FILES
-R (recursive) is a recursive copy. When a directory is
encountered, its files are also copied
If a file/directory is a symbolic link, the link is
copied, not the content of the file
-d (preserve link) is used by linux. If the filedirectory
is a symblic link, it preserves that link
filename1 will be copied onto filename2. If filename2 does
not exist, it will be created. If it exists, its contents will
be overwritten
A second method, involving directories, has been discussed
in the previous section
Files can also be copied using the following syntax
cp [-ip] filename... directory
where filename may be one or more files. These files will be
copied into directory
6.6.3 mv: Move
mv [-i] filename1 filename
means change the name of filename1 to filename2. If filename
already exists, mv overwrites the old file, unless the i
option is used, in which case a confirmation from the user
will be requested
mv [-i] filename... directory
will move filename..., i.e., a number of files, into directory
directory. If a filename already exists within directory, it
will be overwritten unless the -i option was used, in which
case a confirmation by the user will be needed
Write permission on directory is essential
52 CHAPTER 6. COMMANDS I
6.6.4 touch: Update
touch filename
where filename... is one or more files
If filename... does not exist touch creates it. Its
contents will be the null string (i.e., no contents
If filename... already exists, touch will update its time
stamp to the current time
6.6.5 rm: Remove
rm [-rf] filename
where filename... is one or more files
-r : ``remove recursively". In other words, if the file to
be removed is a directory, it will delete it along with
all its files and/or sub-directories and their contents
Be careful with the -r option
-f : do not output any error messages; do not prompt and
remove even if file is write-protected (but file must
still be owned by user
6.6.6 cat: Concatenate
cat filename
where filename... may be one or more files
cat displays the content of filename... on the standard
output. If more than one file is listed, they are displayed
one after the other
Output redirection may be used to copy the contents of files
into another file. An example is
cat *.c > totcprog
This will copy the contents of all files ending with c
into file tot.cprog. The order of the files within totcprog
will be alphabetical
cat can be used to append one file to another
6.6. FILE SYSTEM COMMANDS: FILES
cat >>
will append file2 to file
6.6.7 more: Browser
more filename
This command displays the named file(s) on the standard
output, but one screenful at a time. At the end of each
screenful, the percentage of the file already shown is
displayed. Pressing the space bar displays the next screenful
while pressing the carriage return key moves forward only one
line. A number followed by a carriage return displays this
additional number of lines
If more than one file is specified, a heading preceding each
file is displayed, to identify the file that will follow
prompt> more

file

this is the first line in file
this is the second line in the file

file

this is the beginning of file
more lines here
end of file
To go back one screen, the ``b" command is used. To stop
(quit), press q
An alternative command to more is page. Their usage is
identical
6.6.8 head: Header
head [-n] filename
54 CHAPTER 6. COMMANDS I
where the default for n is
head copies the first n lines of each file to the standard
output. If filename... lists more than one file
==>filename lt
is displayed before each file
prompt> head
==> file1 lt
this is file
==> file2 lt
this is file
6.6.9 tail: Tail End
As head is used to display the heading of a file, tail is used
to display the end of a file
tail [+j-n [lbc]] filename
NOTE : only one filename may be used at once
If + is used, the display starts n lines, characters, or
units of blocks (depending which of l, b, or c is used) after
the beginning of the file
If - is used, the display starts at n lines, characters, or
units of blocks from the end of the file
The default is for tail to show the last ten lines of the
file
6.6.10 wc: Word Count
wc [-lwc] filename
The default is to use all three flags
l -- lines
w -- words
6.6. FILE SYSTEM COMMANDS: FILES
c -- characters
Here is an example
prompt> wc course.tex courseaux
810 4137 27849 coursetex
51 200 5095 courseaux
861 4337 32944 total
The first field is the line count, the second field is the
word count, the third field is the character count (size of the
file) and the last field is the name of the file (only if more
than one file is used
6.6.11 diff: Dierence
di [-bitw] old file new file
displays the differences between old file and new file on the
standard output
-b ignores trailing blanks
-i ignores the case of the letters (upper is treated the same
as lower case
-t expands tab characters into blanks
-w ignores all blank characters
6.6.12 file: Type of File
filename
file displays the type definition of file filename..., in
a two-column format: the first column shows the file name
and the second shows the file type (examples are ascii, data
C-shell commands, PostScript document, directory, commands
text, assembler, etc
56 CHAPTER 6. COMMANDS I
prompt> course.tex courseps
course.tex: ascii text
course.ps: PostScript document
If the parameter to the file command is core, file will
return the name of the executable file which caused the core
file to be created (a core file is a file containing the memory
content used by a program that crashed; that file may be used
to debug the program
6.7 Printer Commands
There are two types of printer commands: Berkeley based, and
System V based. They are named as such because of the origin
of the UNIX version they were first written on
Most systems today support both types
This section will discuss briefly the basic printer
commands. The Commands section in Book II: Advanced
Introduction (including Internet will discuss them in much
more detail
6.7.1 lpr/lp: Line Printer
lpr [-Pprinter] filename
lp [-dprinter] filename
lpr/lp sends a request to the operating system for filename
to be printed on printer printer
6.7.2 lpq/lpstat: Line Printer Queue, Statistics
lpq
lpstat
lpq/lpstat simply displays the queue of printer jobs
6.8. USER RELATED COMMANDS
6.7.3 lprm: Line Printer Remove
To remove a job from the printer queue, simply type
lprm job
cancel job
where job is the job number in the printer spooler obtained
from lpqlpstat
6.8 User Related Commands
Up to now, the commands were file and/or directory related
This section will treat user related commands: how to find out
who is logged on to the system, how to exchange messages with
another user
6.8.1 who: Who is On
Typing
who
will display on the standard output the logon names of the
users on the system, and the time at which they logged on
prompt> who
cantin ttyq1 Jan 12
cantin ttyq3 Jan 12
proulxm ttym1 Jan 12
tells us that user cantin is logged on two times: once on the
virtual device ttyq1 and once in another window, ttyq
proulx is logged in from a modem, or serial port
If the output had included
cantin ttyq0 Jan 12 08:46 nickelsaonrcca
this would mean that cantin is logged onto the current machine
remotely, from a system whose name is nickelsaonrcca
58 CHAPTER 6. COMMANDS I
6.8.2 who am i, whoami: Who Am I
who am i
tells me who I am
prompt> who am i
nickel!cantin ttyq0 Jan 12
On the other hand
whoami
displays the effective current username
prompt> whoami
cantin
6.9 Other Miscellaneous Commands
This section deals with a number of miscellaneous commands
6.9.1 date: Display Date
date
displays the date and time on the standard output
Example
prompt> date
Thu Feb 23 14:12:39 EST
date can also be used to display specific fields of the
date. The next example shows how to display the current hour
and minute
prompt> date "+%H M
14
6.10. EXERCISES
6.9.2 clear: Clear the Screen
This will clear the screen, bringing the cursor to the top left
corner of the monitor
6.10 Exercises
1. How do you give option(s) to a command
2. You would like to change your password. How do you do
it? Change it to my pssd. Logout, then log back in to
make sure it worked. Change it back to something only you
know
3. You would like to use the rm command, but do not know how
to use it. You do not have system manuals close by. What
command can you use to get help? Try it
4. Now that you know how to move within the directory
structure of your system, go and see where the dictionary
resides. Which directory is it in? How big is the words
file? Who owns it
5. How do you find out which directory you are currently in
Issue the command and see what happens
6. Assume you are lost. How do you return to your home
directory? Assuming you don't remember the full pathname
of your home directory, how can you get there
7. In your account, create a new directory, called tempdir
Copy the two files /etc/hosts and /etc/fstab into it as
hosts and fstab respectively
8. Again from your home directory, create a second directory
called temp2.dir. Copy the content of temp.dir into it
9. Remove the entire temp.dir and tempdir
10. You have a file called list.names in your directory. How
can you find out the last time you wrote to that file
60 CHAPTER 6. COMMANDS I
11. Everyone has files beginning with a dot (.). These are
called hidden files. How can you list them
12. Create a file called myfile, with length zero
13. Now rename myfile to hisfile
14. Do a long listing of all files in the /bin directory and
place it into file hisfile
15. How can you look at the content of the file, one screenful
at a time
16. You want to see the first twenty lines of that file
Which command is used? Do it
17. How about the last fifteen lines
18. Who is logged on to the system at the moment
19. You want to communicate interactively with one of those
users. Which commands could you use
Chapter
Editors
Now that the user is familiar with some of the commands, UNIX
standard editors will be introduced. The first one is ed, a
line editor used on line-mode terminals. For terminals with
full-screen capability, vi is more suitable
NOTE that all UNIX editors use buffers as work areas in
which they manipulate the files. The original file is updated
only when the buffer is written to the file, which is done by
the user: if the user simply ``quits", only the changes prior
to the last write will be reflected in the file!!! For that
reason, you must first save the file, then exit the editor
7.1 \ed" Editor
ed is the most basic UNIX editor, and is found in every UNIX
system. It operates in line-mode, which means that
the basic unit for change is a line (a string of
characters terminated by a newline character). You
can give commands to the editor to perform various
operations on the lines: lines can be printed
(displayed); lines can be changed; new lines can be
inserted; existing lines can be deleted; lines can be
moved or copied to a different place within the file
substitutions of character strings can be made within
a line or group of lines [7, p.

62 CHAPTER 7. EDITORS
Most people use ed only if the terminal they are using at
the time cannot support a screen editor. For this reason
only the most basic commands will be introduced here. More
information can be found in [7, pp.
7.1.1 Accessing ed
ed filename
where filename must exist. If filename does not exist, use
the touch command to create it
ed will then display the number of characters (num) in the
file and wait (there is no prompt). This means that ed loaded
num bytes into the editing buffer. ed is now sitting at the
end of the document, waiting for the user to tell it what to
do
Changes made while in ed are made to the contents of the
buffer and are not permanent until a w write command is issued
7.1.2 Moving Within a File
Typing a number followed by a carriage return will bring you to
that line number in the file. Hence, to go to the top of the
file, type

To go to line 5 of the file, type

To go up num lines, type
num
To go down num lines, type
num
If ed can't get you to that line, it will respond with a

7.1. \ED" EDITOR
7.1.3 Finding a Pattern
To find one specific string, use
/string
where string is the literal to be found. The search starts
at the current line going down in the file to the end, then
goes back to the top of the file down to the current line. The
search will stop upon finding string
7.1.4 \s" Substitute
To substitute a string for another, the format is
[line b[,line e ]]s/string 1 / string
where line b and line e are the range of the operation, and
string 1 and string 2 are the string-to-be-replaced and
new-string respectively
For example, to substitute the word mine for his on the
first fifteen lines of the document, use
sminehis
7.1.5 \c" Change Line
c
will enter input mode, and change the current line to the text
that will be entered. More lines may be added. A dot (.) on
a line by itself must be entered to leave input mode
7.1.6 \a" Append Text
To append text immediately after the last displayed line, type
a
ed will then wait for the user to input text. It will leave
append mode when a dot (.) is typed as the first and only
character on a line, or when <CTL-D> is typed
64 CHAPTER 7. EDITORS
7.1.7 \i" Input Text
i
is the same as append, but puts the text before the current
line
A dot (.) on a line by itself must be typed to leave input
mode
7.1.8 \." Current Line
Typing a dot (.) will display the current line
7.1.9 \p" Print Lines
[line b [,line e p
where line b and line e are respectively the beginning line
and the end line to be displayed. line b must be smaller than
line e
So, to print (display) lines 3 to 6, one would use
p
The line numbers are optional. If no line numbers are
given, the current line will be displayed
To display only one line, the command is simply
nump
A dollar sign ($) is used to represent the last line number
Hence, to display lines 6 to the end of the file, type
p
NOTE : the l command is similar to p with the addition that
it displays non-printable characters
7.1.10 \d" Delete
d
will delete the current line. If a range (x,x+y) precedes d
then y+1 lines will be deleted
7.2. \VI" VISUAL EDITOR { INTRODUCTION
7.1.11 \w" Write
w
writes the content of the buffer into the file being edited
replacing the original version
7.1.12 \q" Quit
Typing
q
ends the session, but only if no changes have been made in the
buffer since the last write to the file. This is to remind the
user that perhaps the changes made should be saved. In this
case, ed comes back with

If q is entered a second time, the command will then be
executed. Changes since the last write will not be saved
and the user will return to the calling shell
7.2 \vi" Visual Editor { Introduction
vi is a screen editor
where a portion of the file is displayed on the
terminal screen, and the cursor can be moved around
the screen to indicate where you want to make
changes. You can select which part of the file you
want to have displayed. Screen editors are also
called display editors, or visual editors . vi is
one of the more popular screen editors that run on
the UNIX system [7, p.
This editor relies heavily on the cursor keys to move
around. Again, only the basic commands will be introduced
66 CHAPTER 7. EDITORS
Once in vi, commands must be invoked for anything to happen
These commands can be anything from :q to i to ltCTLfgt
Following the philosophy of UNIX, vi assumes the user knows
what he/she is doing
NOTE : if a command puts the user into a mode input
append, replace), the escape key must be pressed to get OUT
of that mode
For more information on vi, see [7, pp.
7.2.1 Invoking vi
vi filename
will put filename into a buffer, and display the file on the
screen. If the file is larger than the screen can display, the
screen will act as a window into the file. At the beginning of
a session, the screen will display the first part of the file
If filename does not exist, vi will create it
Upon entry to vi, the bottom of the screen will print the
name of the file being edited, the number of lines in the file
and the size of the file (in characters
7.2.2 vi, command and input modes
One of the most important aspects to remember about vi is that
most of the commands fall into one of three modes
1. vi mode: in this mode, most keys on the keyboard are
defined to be a specific command. As the key or key
sequence is issued, that command is executed
This is the mode vi starts in
At any time, pressing the <ESC> key returns the user to
vi mode
2. command mode: to reach that mode, one must first be in
vi mode, then issue a colon (``:"). That same colon will
appear at the bottom left corner of the screen. Then the
command may be issued following the colon
7.2. \VI" VISUAL EDITOR { INTRODUCTION
One exception to this rule is the search command; a
forward slash is issued instead of the colon
3. input mode: this is where most users expect an editor to
start. This ``mode" actually refers to commands issued
from vi mode but that allow the user to start inputing
data into the file
The vi commands introduced will be grouped in the three
major mode types. Table 7.1 displays the most basic commands
vi mode input mode command mode
<ESC> to end input
# " ! - cursor i - insert :q - quit
h j k l - cursor a - append :q! - quit no save
CTL-f - forward screen A - append at EOL :w - write
CTL-b - backward screen O - open line :wq - write and quit
G - end of r - replace character :num goto line num
x - delete character R - overwrite /str - str
dw - delete word :set all - vi settings
dd - delete line :r - import
yy - copy line in buer
D - delete to EOL
p - paste/put buer
u - undo last command
CTL-r - redo last undo linuxvim
. - repeat last editing command
n - next occurrence of string
cw - change word
# command - repeate command # times
Table 7.1: Summary of vi Commands
68 CHAPTER 7. EDITORS
7.2.3 \vi" visual Editor { vi mode
7.2.4 Moving the Cursor
To move around in the file, use the arrow keys: the up arrow
will move the cursor up one line, the down arrow down one line
The right arrow will cause the cursor to move one position to
the right. From the end of a line, it will go to the beginning
of the next line
The left arrow will move the cursor one position to the
left. If the cursor was at the beginning of a line, it will
not move (the same as the up arrow when the cursor is already
at the beginning of the file, and the down arrow when the
cursor is already at the bottom of the file
If number is typed immediately before pressing the arrow
key, the position of the cursor will move number positions in
the direction of the arrow. If number was too large, a beep
will be heard, and nothing will happen
For terminals with no functional arrow keys, four keys will
move the cursor around
h left arrow
j down arrow
k up arrow
l right arrow
7.2.5 \^f" Forward One Screen
^f <CTL-f> will move the user forward one screenful in the
file
7.2.6 \^b" Backwards One Screen
^b <CTL-b> will move the window backwards (up) one screenful
in the file
7.2. \VI" VISUAL EDITOR { INTRODUCTION
7.2.7 \G" End of File
G will move the window to the end of the file. Note, again
that vi, like any other UNIX utility, is always case sensitive
7.2.8 \x, d" Delete Character
x or d space (d, followed by a space) will delete one
character. To delete many characters in a row, num x or num
d space
dw would delete to the end of the word
7.2.9 \dd" Delete Line
[num ] dd will delete num lines beginning at the current line
The default num is
D deletes until the end of the line
7.2.10 \yy" Copy Line in buer
[num ] yy will copy num lines beginning at the current line
into a buffer. The default num is
7.2.11 \p" Put Buer
When a line is deleted with dd (num dd), these lines are
copied into a special buffer. p will put that buffer after
the current line
Note that the contents of that buffer are not erased; they
can be put (recovered) as many times as desired
7.2.12 \u" Undo
This is a very useful command. It cancels the effect of the
previously executed command
vim, a vi clone used mosly on linux distibutions, has an
unlimitted undo. To redo the undone change, use CTLR
70 CHAPTER 7. EDITORS
7.2.13 \." (dot) Repeat
(dot) by itself will cause the last editing command to be
repeated. That command may be dd, or i followed by some text
or a pattern find, or any legal command
Cursor movement commands will not be repeated by a dot
7.2.14 \vi" visual Editor { command mode
7.2.15 \:q" Quit
When in vi, typing

will bring the user into command mode. As the : is typed, it
will be displayed on the last line of the screen, and vi will
wait for a command to be typed
q is such a command. This will exit vi, if no changes have
been made since the last write-to-file command
:q! (with an exclamation mark) will exit, even if the
buffer has not been written to the file
7.2.16 \:w" Write
w
will cause the contents of the buffer to be written to the
file
:wq will write the buffer to the file, and exit to the
calling shell
7.2.17 \:r" Read
:r
will bring the content of filename beginning at the cursor
position
7.2. \VI" VISUAL EDITOR { INTRODUCTION
7.2.18 \:num" Line Number
num
will bring the cursor to line num
7.2.19 \/string/" Finding a Pattern
To find a specific string, use
/string
where string is the literal to be found
Upon finding string, the cursor will position itself at the
beginning of the literal
7.2.20 \n" Next
After searching and finding a string (using the forward slash
"/"), n will find the next occurrence of that same string
7.2.21 :set all
This command displays a number of variables that can be altered
to configure the editor. An example of such a variable is set
number, which would then number the lines in the buffer
7.2.22 \vi" visual Editor { input mode
7.2.23 \i" Insert Mode
Pressing i will bring the user into input mode. Anything
typed after that will be inserted before the original cursor
position
ESC (escape) exits the insert mode
7.2.24 \a" Append to Character Mode
a will enter append mode, with the text inserted after the
original cursor position
ESC (escape) exits the append mode
72 CHAPTER 7. EDITORS
7.2.25 \A" Append to Line Mode
A will bring the cursor to the end of the current line, and
enter append mode
ESC (escape) exits the append mode
Similar to that command O starts a new line of input
7.2.26 \r" Replace Character
To replace one character, r followed by the new character will
replace the current character (where the cursor is) with the
newly typed one
7.2.27 \R" Replace Characters
To replace a string of characters, R will enter replace mode
and anything typed will overwrite the existing characters
ESC (escape) exits the replace mode
7.2.28 \cw" Change Word
To replace a word, bring the cursor to the beginning of the
word, then issue cw. From that point on, the current word
will be replaced with the input, until the ESC escape
character is entered
7.3 Other Editors
vi and ed are the two editors included in most UNIX systems
Other editors may be included with UNIX, or can be separately
purchased. The next few sections will indicate some of these
editors
7.3.1 GNU Emacs
GNU (Gnu's Not Unx Emacs is a public domain editor, available
from MIT (prep.ai.mit.edu or 18.71.0.38), or from anyone who
has a copy of the software
7.4. EXERCISES
GNU Emacs is a full screen editor, which relies on control
keys for commands
7.3.2 textedit
textedit is Sun's GUI (Graphical User Interface) editor. It
works only inside the window system (Open Look), and relies
heavily on the mouse
textedit is easier to use than most other editors because it
follows the ``point-and-click" concept
7.3.3 jot
jot is Silicon Graphics' equivalent of textedit
7.3.4 vuepad
vuepad is available on HP's and is mouse based (point and
click
7.3.5 nedit
This is an X-based, point and click editor, in the public
domain. Most servers maintained by the Research Computing
Support Group have it installed
7.3.6 pico
This is another public domain editor. It is ASCII based
and very easy to use. As with nedit, it is installed on most
servers maintained by the Research Computing Support Group
7.4 Exercises
1. Assume you have a standard UNIX system, and that you are
logged on to it via a VT100 terminal. Which editors are
available to you? Which should you use
74 CHAPTER 7. EDITORS
Chapter
Electronic Mail
8.1 Mail interfaces at NRC
This section will briefly discuss three ASCII-based mail
interfaces used on the different UNIX systems at NRC
1. System V mail
2. Berkeley Mail
3. Public domain elm
4. Public domain pine
It will not cover the X-based interfaces such as xmh or
mailtool, also found on campus
8.1.1 mail: System V based
This is the least used of the four main mail interface programs
used at NRC. This interface will not be covered in these course
notes
If the command
mail
returns
No Mail
then the System V mailer is being used

76 CHAPTER 8. ELECTRONIC MAIL
8.1.2 Mail/mail: BSD based
Most systems include this program. Some vendors invoke the
program with mail whereas other use Mail
If the command
mail
returns
No Mail for user
the BSD mailer is being used
8.1.3 elm/mail: public domain mail interface
This interface is very widely used. It has been compiled on
all major platforms (Digital, SUN, IBM, SGI, HP) and is even
bundled with the HP workstations
Most of the Science Institute servers use elm as their
default mailer (the mail command is aliased to the elm command
If the command
mail
returns a full screen interface similar to 8.1, then elm is
being used
8.1.4 pine/mail: public domain mail interface
Some versions of elm have difficulties with MIME-type messages
(discussed later). pine, developped at the University of
Washington, is a menu driven mail interface, which handles
those MIME messages fairly well
pine
would show an interface similar to
8.1. MAIL INTERFACES AT NRC
Mailbox is '/usr/mail/cantin' with 2 messages [ELM 2.4ME+ PL11
1 Apr 30 To cantin@neon.sao
2 Mar 4 To Claude Cantin (15) itest
|=pipe, !=shell, ?=help, <n>=set current to n, /=search pattern
a)lias, C)opy, c)hange folder, d)elete, e)dit, f)orward, g)roup reply, mail
n)ext, o)ptions, p)rint, q)uit, r)eply, s)ave, t)ag, u)ndelete, or exit
Command
Figure 8.1: elm interface
78 CHAPTER 8. ELECTRONIC MAIL
PINE 3.91 MAIN MENU Folder: INBOX 2 Messages
? HELP - Get help using Pine
C COMPOSE MESSAGE - Compose and send/post a message
I FOLDER INDEX - View messages in current folder
L FOLDER LIST - Select a folder OR news group to view
A ADDRESS BOOK - Update address book
S SETUP - Configure or update Pine
Q QUIT - Exit the Pine program
Copyright 1989-94. PINE is a trademark of the University of Washington
[Folder "INBOX" opened with 2 messages
? Help P PrevCmd R RelNotes
O OTHER CMDS L [ListFldrs] N NextCmd K KBLock
Figure 8.2: pine interface
8.2. INTERNET NODE: MACHINE NAMING CONVENTION
8.2 Internet node: Machine Naming Conven
tion
A node is the name of a computer. The computer may be a PC
a workstation, a mini, a mainframe, or a supercomputer. An
Internet node can be any machine in the world, as long as it
is on the Internet network, which NRC is a member (the Internet
is discussed in the Networking section of Book II: Advanced
Introduction
The convention for a node on the Internet network is
machine.section.organization.type of organization
where type of organization may be edu, mil, gov, com, org, net
or, outside of the United States, country code
As of 2001, type of organization also includes aero, biz
coop, info, museum, name and pro. The networking section part
II of the course notes) will explain in more details what they
are
At the National Research Council, a node is defined as
machineinstitutenrcca
The Research Computing Support Group's SGI Indy is
nickel.sao.nrc.ca for the outside world, nickel.sao for people
within NRC and nickel for people within RPSOSCSG
8.3 Mail Servers
Quite often a mail address will be of the form
mail user@company.type of organization
For example
mail claudecantinnrcca
This obviously does not follow the above discussion on Machine
Naming Convention
80 CHAPTER 8. ELECTRONIC MAIL
In such cases, mail is sent to a mail server (in the above
example, nrc.ca), which then forwards the mail to user within
the organization
At NRC, user tends to be the user's first name, followed by
a period, followed by his/her last name (ex: ClaudeCantin
This convention makes it easy for people to send mail to an NRC
employee
Another advantage of using that method is that when an
employee is transfered to another department, no electronic
mail address needs to be changed: only the entry in the mail
server needs to be modified. This alleviates the problem of
contacting all colleagues to let them know of the change of
address
This method is also used by all organizations with an
installed firewall (a firewall is the result of a procedure
used to isolate a local network from the Internet; this is
usually done for security reasons
8.4 Sending Mail
8.4.1 BSD
To send mail to a user
mail user node
where user is the logon name of the recipient, and node is
his/her machine
After invoking mail, UNIX will come back and prompt the user
for the subject of the message, as in
prompt> mail cantin
Subject
This is optional
Once the subject is entered (and the carriage return
pressed), mail is in input mode: anything entered is part
of the message. End the message by entering a . (dot) on a
line by itself, or press ltCTLdgt
At that time, a
8.4. SENDING MAIL
Cc
prompt will be displayed, allowing the sender to send copies to
other users. Cc stands for Complimentary (or Courtesy) copy
Again, this is optional
Enter a carriage return, and the piece of mail is sent out
If the entire message has been previously created with an
editor, and placed in file , it can be sent to user with
mail user < file
~r Read Filename
To incorporate a previously edited file into the message, issue
~r filename
where filename is the name of an ASCII file to be incorporated
in the body of the message. The tilde MUST be the first
character of the line
If filename is not an ASCII file, use uuencode to encode it
into an ASCII sequence
Note that this must be done while writing the message. Here
is a short mail session
prompt> mail cantin
Subject
the course.tex will appear following this line
~r coursetex
"course.tex"
notice that the name of the its number of lines, and
the size of it (in bytes) were displayed by the utility, not
myself
The dot on the next line indicates the end of the message

Cc: stan
82 CHAPTER 8. ELECTRONIC MAIL
~v: Invoking the Visual Editor
v
When writing the body of the message, this command will invoke
vi. Once in vi, edit the letter. Exiting vi (write, and quit
will come back to the body of the message (at that time the
file being edited by vi will have been written---although the
user can't see it
Enter a dot on a line by itself to end the composition of
the message
Electronic mail can now be sent from any UNIX system on
the NRC Ethernet network to any other machine (UNIX or not
connected to the Ethernet. To get the node name of the
receiving system, contact its system administrator
8.4.2 elm
Standalone Mode
elm user node
will invoke elm in sending mode. The message
To: usernode
Subject
will then be displayed. After entering the subject, the string
Copies to
will prompt you for additional recipient names. A carriage
return will leave that field empty
The editor (pico by default) will be invoked, and the
composition of the message may begin. The editor invoked may
be changed by using the option menu, discussed in the previous
section
If you use pico, elm will prompt you to save the (it will give
you a suggested name). It does need to save the before sending
it
When the message is ready to be sent, issue the editor
command to save the file. elm will come back with the message
8.4. SENDING MAIL
And now: s
e)dit message, h)eaders, c)opy, i)spell, !)shell, s)end, or forget
pgp
message. Answering to that message will leave elm completely
and bring you to the UNIX prompt
Within the Interface
elm
will invoke the interface
m
will start the program used to send mail, much the same way as
in the previous section
Batch Mode
Mail could finally be sent in batch mode (or as a oneline
command) with
elm user@node -ssubject <
where filename is the name of the file which contains the
message to be sent
8.4.3 pine
Standalone Mode
pine user node
will invoke the full screen interface, as shown in Figure
using cantin@nickel.sao.nrc.ca as a example email address
The up/down arrow keys are used to cycle through the
headings
The last two lines at the bottom of the screen represent the
commands used to perform specific tasks. For examples
X
is used to Send the mail message (user will be prompted for
confirmation
84 CHAPTER 8. ELECTRONIC MAIL
PINE 3.91 COMPOSE MESSAGE </usr/people/cantin/Mail/[]> (CLOSED) 0 Msgs
To : cantinnickelsaonrcca
Cc
Attchmnt
Subject
----- Message Text
^G Help ^X Send ^R Rich Hdr ^Y PrvPg/Top ^K Cut Line ^O Postpone
^C Cancel ^D Del Char ^J Attach ^V NxtPg/End ^U UnDel Line^T To AddrBk
Figure 8.3: pine: Sending Mail
8.5. READING MAIL
Within the Interface
pine
will invoke the interface
c
will start the program used to send mail, much the same way as
in standalone mode
Batch Mode
pine does not work in batch mode. It must be used
interactively
8.5 Reading Mail
8.5.1 BSD
Invoking
mail [-f folder name
allows mail to be read
Upon entering mail, one of two things may happen depending
on how the system was set up
1. For each piece of mail waiting to be read, one line
contains information concerning who the mail comes from
when it was received, and (part of) the subject line of
that message. mail prompts the user to enter a command
2. The last message received is displayed. mail prompts the
user to decide what to do with this piece of mail
Some of the most common commands are explained in the
following sections
86 CHAPTER 8. ELECTRONIC MAIL
n: Next
n or simply ltCRgt
displays the next message
p: Print
p
displays (prints) the current message on the standard output
NOTE : p stands for print, but really means display on the
screen. The reason is historical: first UNIX users were using
teletype terminals, thus any output was printed on hardcopy
num: Print message num
num
displays (prints) message num on the standard output
s: Save
s filename
If filename does not exist, it will be created. The current
message will be appended to that file
If +filename was used, filename would be in the folder
directory
Sending a to a printer
A variation of the save command can be used to pipe the message
to a command. For example
s j command
will pipe the current message into command. If command happens
to be lpr or lp, the file will be sent to the printer
8.5. READING MAIL
h: Header
h
displays the headers of the active messages
d: Delete
d
deletes the current message. d also takes a range of message
numbers
r: Reply
r
allows the user to reply to the sender with another message
s: Forward
s j mail user
will forward the mail to user
~m: Incorporating current message
m
will incorporate the current message (just read) to the message
being sent out. The incorporated message will be indented one
tab within the message currently being written
This option is very useful when forwarding a message to
another user
q: Quit
q
will exit mail, and save all undeleted mail messages back into
the mailbox, usually usrmailuser
88 CHAPTER 8. ELECTRONIC MAIL
8.5.2 elm
elm
will invoke the interface to read your mail. The interface
will look much like Figure
Enter the message number to read a specific message, or
press ENTER to read the current one (it is highlighted
n: Next
To read the next message, enter
n
or return to the message list (press i) and move the
highlighted bar to the message to be read
To view message num, enter the message index number
s: Save
s
will save the message in a specified mail folder
p: Printing to a printer
p
will send the current message to the printer, according to the
command defined by the ``P)rint mail using" string within the
option menu, explained in the Configuring elm section later
d: Delete current message
d
will perform that operation
Deleted messages will be tagged with a ``D" in the main
menu
8.5. READING MAIL
Mailbox is '/usr/mail/cantin' with 113 messages [ELM 2.4 PL24 ME
1 Nov 7 SGI Support Mail (84) CREATE CASE/LOG SUCCESS
2 Nov 7 Geof Aers (22) Rick's machinecm
3 Nov 7 Geof Aers (22) Rick's new enclosure
4 Nov 7 flash@FlashBack.co (826) sunflash
D 5 Nov 7 flash@FlashBack.co (239) flashback
r 6 Nov 6 Greg Kresko (20) VCR to borrow
7 Nov 6 Mauro Tomietto (32) Itsssss back
8 Nov 6 Stan Zurawski (24) "phone" fixed
9 Nov 6 SGI Support Mail (72) CREATE CASE/LOG SUCCESS
r 10 Nov 6 Clarify user (52) Email out for Case
11 Nov 6 Clarify user (49) Email out for Case
12 Nov 6 SGI Support Mail (73) CREATE CASE/LOG SUCCESS
13 Nov 6 Stan Zurawski (52) Re: whois
14 Nov 6 Clarify user (47) Email out for Case
15 Nov 6 Jerome, Ron (29) UUG list server
16 Nov 6 Geof Aers (20) Re: IMS home page
17 Nov 3 Wayne Podaima (22) To bug you
18 Nov 3 Geof Aers (23) ims pages on gold
r 19 Nov 3 Wayne Podaima (60) Re: IRIX 6.1 upgrade
20 Nov 3 Wayne Podaima (26) (Very) Late Monday AM
|=pipe, !=shell, ?=help, <n>=set current to n, /=search pattern
a)lias, C)py, c)hange folder, d)el, e)dit, f)orward, g)rp reply, mail
n)ext, o)pts, p)rint, q)uit, r)eply, s)ave, t)ag, u)ndel, or exit
Command
Figure 8.4: elm Interface: Expert User Level Menu
90 CHAPTER 8. ELECTRONIC MAIL
r: Reply to sender
r
will allow the user to reply to the sender, with the option of
including/modifying the original message
Once a message has been replied to, an ``r" will be placed
on the left hand side of the message header in the main
menu. Figure 8.4 shows a few messages for which a reply was
performed
f: Forward
f
will give the option of editing the current message, then
prompt for the user to forward the message to, and will give
the option of changing the mail message
elm will then display
And now: s
e)dit message, h)eaders, c)opy, i)spell, !)shell, s)end, or forget
pgp
and will await further instructions
q: Quit
q
will end the current elm session
8.5.3 pine
pine
will bring the interface, as shown in Figure
Pressing
i
8.5. READING MAIL
PINE 3.91 FOLDER INDEX Folder: /var/mail/cantin Message 145 of
121 Jun 27 Clarify user (1,960) Email out for Case
+ 122 Jun 27 Wayne Podaima (545) Official maple Update
+ 123 Jun 28 Andrew Booth (1,281) Re: Server rights for Dave Rogers
+ 124 Jun 28 Wayne Podaima (827) Return Old M-60 Door Access Cards
+ 125 Jun 30 Wayne Podaima (1,271) Re: softwindows on neon
126 Jul 2 Ratilal Haria (697) New DB
+ 127 Jul 3 Michel Proulx (1,370) isdn
+ 128 Jul 4 Wayne Podaima (597) 64-bit IMSL for SGI
+ 129 Jul 4 Michel Proulx (424) stationctn
+ 130 Jul 5 Wayne Podaima (744) objectserver Resets
+ 131 Jul 8 Jamie Bennett (644) xwinnmr
+ 132 Jul 8 Andrew Booth (527) cgi-bin scripts
+ 133 Jul 8 Wayne Podaima (940) xdvi Size Problem
+ 134 Jul 9 To: cantin@nickel. (2,610) (fwd) Re: Anyone know of a Camera New
+ 135 Jul 10 Daryoush Sheikh-Ba (2,147) If it's possible
+ 136 Jul 10 Steve Myers (1,061) Server Extensions
+ 137 Jul 10 Steve Myers (37,168) Readme Files
138 Jul 10 Attila Berces (534) disk on tc
139 Jul 10 Laura Vais (3,041) IRIS On-Line Update
140 Jul 11 Robertson, Gilles (885) Unix
141 Jul 8 Zborowski, Mary D (1,486) FW: link or pointer needed
+ 142 Jul 11 Wayne Podaima (512) Blank root menu problem
143 Jul 11 To: MINOLTA-L@list (2,449) FS: Minolta SRT
+ 144 Jul 11 Andrew Booth (1,836) Re: Server rights for Dave Rogers
145 Jul 11 akachhy@hogpa.ho.a (1,185) Re: FS: Minolta SRT
? Help M Main Menu P PrevMsg - PrevPage D Delete R Reply
O OTHER CMDS V [ViewMsg] N NextMsg Spc NextPage U Undelete F Forward
Figure 8.5: pine interface
92 CHAPTER 8. ELECTRONIC MAIL
will display the mail messages in your current folder
the new interface will now look similar to Figure
Press the Enter key to read the highlighed message
The last two lines on the interface also suggests commands
you may use
n: Next
To read the next message, enter
n
or return to the message list (press i) and move the
highlighted bar to the message to be read
To view message num, enter
j
followed by the message index number
s: Save
s
will save the message in a specified mail folder
p: Printing to a printer
y
will invoke the printer command defined using the SETUP menu
off the main pine interface (lp is set by default
d: Delete current message
d
will perform that operation
Deleted messages will be tagged with a ``D" in the main
menu. They may be undeleted by using
u
8.6. CONFIGURING MAIL BEHAVIOUR
r: Reply to sender
r
will allow the user to reply to the sender, with the option of
including/modifying the original message
Once a message has been replied to, a ``A" will be placed on
the left hand side of the messages interface
f: Forward
f
will use the same interface as sending mail, but with the
message to be forwarded included in the message body
q: Quit
q
will end the current pine session
8.6 Conguring Mail Behaviour
8.6.1 BSD
When the mail system is invoked, either for reading or sending
mail, a system-wide mail configuration file usrlibMailrc
is read. Then, if it exists, file $HOME/.mailrc is also read
That file may contain, among mail configuration commands
aliases for mail to use. An example of such an alias could be
claude cantin@nickel.sao.nrc.ca cantin
wayne wayne.podaima@nrc.ca wayne
group claude stan
If mail is sent to group, it will then automatically
be sent to both claude and wayne, which actually means
cantin@nickel.sao.nrc.ca, the mail folder cantin
wayne.podaima@nrc.ca and the mail folder wayne
For more information on the .mailrc file, see the Special
Files chapter of Book II: Advanced Introduction
94 CHAPTER 8. ELECTRONIC MAIL
8.6.2 elm
The elm configuration file is stored in the .elm hidden
directory in your login directory. The configuration file
itself is elmrc. This file can be modified with an editor to
suit the user's individual tastes, or may be modified with the
help of an interactive menu utility invoked within elm itself
by issuing the option command
o
The interface should look similar to Figure
-- ELM Options Editor
C)alendar file : usrpeoplecantincalendar
D)isplay mail using : builtin
E)ditor : vi
F)older directory : usrpeoplecantinMail
S)orting criteria : Reverse Date Mail Sent
O)utbound mail saved : sent
P)rint mail using : /usr/local/bin/apr s
Y)our full name : Claude Cantin
A)rrow cursor : OFF
M)enu display : ON
U)ser level : Expert User
N)ames only : ON
Select first letter of option line, '>' to save, or 'i' to return to index
Command
Figure 8.6: elm Options Menu
NOTE that this configuration menu only changes a small
number of parameters. Many other elm features may be modified
8.6. CONFIGURING MAIL BEHAVIOUR
by using an editor on elmrc
The main options users may want to change are the editor
they would prefer using during the composition of the message
(press ``e" within the options menu), and the command used to
send the current message to a printer (press ``p" within the
options menu
Another option to consider is the ``level" of the elm menu
seen at the bottom of the screen. The higher the level, the
more menu items are displayed! Following that logic, most
users should select expert as their User level. However, even
though a menu item is not displayed, it is still accessible by
typing the character representing it. Help (?) may be used to
list the available options
Once the choices are saved (using >), one can return to the
main menu using ``i". Note that most commands within elm do
NOT need to be followed by a carriage return ltCRgt
Modifying the file .elm/elmrc allows you to modify
The name of the file all outgoing messages are to be
stored in. That feature may be turned ON, or OFF
The lines in .elm/elmrc allowing to keep outgoing messages
in a file called Mail/outbound would look like
# save a copy of all outbound messages
copy = ON
# where to save copies of outgoing mail to, default file is sent
sentmail = HOMEMailoutbound
The name of your ``signature" file. That file is
automatically appended to any mail sent out
For example
# remote ".signature" file to append to appropriate messages
remotesignature = rsignature
# local ".signature" file to append to appropriate messages
localsignature = lsignature
96 CHAPTER 8. ELECTRONIC MAIL
The behaviour of the mailer once a message is read. Is
the mail deleted? Is it automatically moved to a read
folder
Should the interface prompt for the cc
The lines in .elm/elmrc could be
# would you like to be asked for Carbon-Copies information each m
askcc = ON
Many other features
8.6.3 pine
pine may be configured by either modifying its startup file
(.pinerc) or by using the
SETUP
menu off the Main Menu
The SETUP menu offers a number of different settings
Selecting
S
will give
Choose a setup task from the menu below
^G Help P [Printer] C Config
^C Cancel N Newpassword U Update
Selecting
c Config
will display something very similar to Figure 8.7. That figure
only shows a portion of the configurable options
Modifying .pinerc also works (a default configuration file
may be found in usrlocallibpineconf
8.6. CONFIGURING MAIL BEHAVIOUR
PINE 3.91 SETUP CONFIGURATION Folder: /tmp/junkmail 145 Messages
personal-name = <No Value Set: using "Claude Cantingt
user-domain = <No Value Setgt
smtp-server = <No Value Setgt
nntp-server = <No Value Set: using newsnrccagt
inbox-path = <No Value Set: using inboxgt
folder-collections = <No Value Set: using usrpeoplecantinMailgt
news-collections = <No Value Set: using newsnrccanntpgt
default-fcc = <No Value Set: using sentmailgt
postponed-folder = <No Value Set: using postponedmsgsgt
read-message-folder = <No Value Setgt
signature-file = <No Value Set: using signaturegt
global-address-book = <No Value Setgt
address-book = <No Value Set: using addressbookgt
feature-list
Set Feature Name
---
[ ] assumeslowlink
[ ] automovereadmsgs
[ ] autoopennextunread
[ ] composerejectsunqualifiedaddrs
[ ] composesetsnewsgroupwithoutconfirm
[ ] deleteskipsdeleted
[ ] enableaggregatecommandset
[ ] enablealternateeditorcmd
[ ] enablealternateeditorimplicitly
[ ] enablebouncecmd
[ ] enableflagcmd
[ ] enablefullheadercmd
[ ] enableincomingfolders
[ ] enablejumpshortcut
[ ] enablemailcheckcue
[ ] enablesuspend
[ ] enabletabcompletion
[ ] enableunixpipecmd
[ ] expandedviewofaddressbooks
[ ] expandedviewoffolders
? Help E Exit Config P Prev - PrevPage A Add Value
C [Change Val] N Next Spc NextPage D Delete Val W WhereIs
Figure 8.7: pine Conguration Menu
98 CHAPTER 8. ELECTRONIC MAIL
8.7 Mail Folders
A mail folder is a collection of mail messages stored in a
single file. By convention, all folders are stored within a
directory called $HOME/mail or $HOME/Mail (directory mail in
the user's home directory
8.7.1 BSD
A folder is usually referred to as
+folder name
where the plus (+) sign means that the file is residing (or is
to be residing) in the folder directory HOMEmail
Creating a Folder
While reading mail, a message can be saved in a folder with
s +folder name
If the folder already exists, the mail message will be appended
to the end of it. If the folder does NOT exist, then the file
will be created
Reading from a Folder
To read from a folder
mail -f +folder name
is used. If only ``mail" is issued, the default folder is
varmailUSER
.record, a special folder
All outgoing mail messages are, by convention, saved in a
special folder called .record. This file always grows in size
so it is recommended to periodically clean it up, or rename it
8.7. MAIL FOLDERS
8.7.2 elm
elm folders are stored within the directory defined by the
F)older directory field in the option menu (or the maildir
variable in mailrc). The default is HOMEMail
The folder may be referred to as
+folder name
or
=folder name
where the plus or equal (+/=) sign means that the file is
residing (or is to be residing) in the folder directory. If
the plus (+) or equal (=) sign is not used, the folder will
reside in the directory from which elm was invoked
Creating a Folder
While reading mail, a message can be saved in a folder with
s +folder name
If the folder already exists, the mail message will be appended
to the end of it. If the folder does NOT exist, then the file
will be created
Reading from a Folder
To read from a folder
elm -f +folder name
is used. If only ``elm" is issued the default folder
/var/mail/$USER is read
Changing Folders
Within the main elm menu, pressing
c
100 CHAPTER 8. ELECTRONIC MAIL
will replace the current mailbox with another, represented by a
folder. It is the equivalent of leaving elm, then reinvoking
it with a folder name as an argument
After entering ``c", a number of strings may be entered
! : Will read the incoming (system) mailbox
< : Will read the folder into which outgoing messages are
kept (if so defined in .elm/elmrc, the elm configuration
file
folder : Will read the contents of folder folder
If folder includes wildcards which expand into more than
one folder name, all folder names will be displayed. It
would then be possible to choose any one of these
For example, an asterisk (*) will show all folders
8.7.3 pine
pine folders are stored, by default in $HOME/Mail. It is
configurable in the SETUP menu interface, under
foldercollections
The folder may be referred to as its name (no prefix). To
use files not located in the folder directory, the full path
name must be used
Creating a Folder
While reading mail, a message can be saved in a folder with
s folder name
If the folder already exists, the mail message will be appended
to the end of it. If the folder does NOT exist, then the file
will be created (after being prompted
8.8. SIGNATURE FILES
Reading from a Folder
To read from a folder
pine -f folder name
is used. If only ``pine" is issued the default folder
/var/mail/$USER is read
Changing Folders
Within the main pine menu, pressing
l (FOLDER LIST
(followed by pressing the Enter key in the next menu) will
display the various folder names. The folder may be selecting
using the arrow keys to navigate
8.8 Signature Files
A typical mail program will allow one or more signature files
A signature file is a file which contains any information
one would like to append at the end of a mail message. It
could look like

Claude Cantin Claude Cantin
Rm 2025, 100 Sussex Dr. Piece 2025, 100 Prom. Sussex
Research Computing Support Soutien informatique en recherche
Information Management Services Services de gestion de linformation
National Research Council Conseil National de Recherches
Ottawa, Canada (K1A 0R6) Ottawa, Canada (K1A R
claude.cantin@nrc.ca 1-613-993-0822 (FAX:

A typical signature filename is signature
Often, two such files are used: one for local mail mail
to addresses on the local system) and one for mail to remote
102 CHAPTER 8. ELECTRONIC MAIL
users. The file names could be .lsignature and rsignature
where local signature files are used for addresses without the
at ("@") sign
8.9 Mail Aliases
8.9.1 BSD
BSD mail aliases are put in file
mailrc
and are of the form
alias nickname real address
or
alias nickname addr 1 addr
8.9.2 elm
Mail aliases allow the use of shorter, more meaningful
addresses instead of their long form. For example
mail claude
could be used instead of
mail claudecantinnrcca
aliases are created, modified and deleted with the use of
the alias menu, shown in Figure
Five (5) aliases are defined, four (4) of which are of type
Person and one of which is a type Group alias. The actual
alias file (.elm/aliases.text) is seen in Figure 8.9. It could
be edited manually, within elm (by pressing ``e"), or by using
commands within the aliases menu
Figure 8.8 shows a number of options
c : Change/modify the current alias
d : Tag the current alias for deletion
8.9. MAIL ALIASES
Alias mode: 5 aliases [ELM 2.4 PL24 ME
1 Claude Cantin Person cantinc
2 Ratilal Haria Person ratilal
3 Some Group Name Group group
4 Wayne Podaima Person wayne
5 Stan Zurawski Person stan
Alias commands: ?=help, <n>=set current to n, /=search pattern
a)lias current, c)hange, d)elete, e)dit aliases.text, f)ully expand
l)imit display, m)ail, n)ew alias, r)eturn, t)ag, u)ndelete, or exit
Alias
Figure 8.8: elm Alias Interface
104 CHAPTER 8. ELECTRONIC MAIL
e : Edit the .elm/aliases.text file, using vi. This is
often the quickest way to add/modify/delete aliases
Note: group aliases must not include addresses with an
symbol; it should only include either aliases previously
defined or addresses without the @ symbol
f : Show the real address of the alias
l : Select only specific aliases to be displayed
m : Mail to that alias
n : Create a new alias
r : Return to the main elm menu
t : Tag the current alias
u : If the current alias is marked for deletion, untag
the alias
x : Exit this menu, without saving any changes made
wayne = Wayne Podaima = podaimaneonsaonrcca
ratilal = Ratilal Haria = ratilalharianrcca
stan = Zurawski; Stan = zurawskisysdinrcca
cantinc = Claude Cantin = claudecantinnrcca
group = Some Group Name = wayne, ratilal, stan, cantinc
Figure 8.9: Content of elmaliasestext
The alias file may also be edited manually by modifying file
elmaliasestext
Once the changes are made, the command
newalias
must be run. That command creates the aliases.hash file elm
uses for aliases
8.9. MAIL ALIASES
8.9.3 pine
Aliases are handled within the
ADDRESS BOOK
menu, within pine's main menu (enter a in the main menu
The ADDRESS BOOK menu looks similar to Figure
PINE 3.91 ADDRESS BOOK Folder: /tmp/junkmail Message 145 of
cantinc Claude Cantin cantinnickelsaonrcca
ratilal Ratilal Haria ratilalharianrcca
wayne Wayne Podaima wayneneonsaonrcca
group UNIX People DISTRIBUTION LIST
cantinc
ratilal
wayne
zurawskipalladiumsaonrcca
[Now in addressbook addressbook
? Help M MainMenu P PrevEntry - PrevPage D Delete S CreateList
O OTHER CMDS E [Edit] N NextEntry Spc NextPage A Add Z AddToList
Figure 8.10: pine ADDRESS BOOK menu structure
Functions available to the user include
e : Change/modify specific parts of the alias
p : Move pointer (highlighted line) to previous entry
n : Move pointer (highlighted line) to next entry
- : Move pointer to previous page (assuming a large list of
aliases
Spc : Move pointer to next page (assuming a large list of
aliases
106 CHAPTER 8. ELECTRONIC MAIL
d : Delete current alias
a : Add a new alias
s : Create a new alias representing a group of people
z : Add to a group
w : Find an word within the alias file
c : Compose a message for that alias
Aliases may also be altered by modifying file addressbook
8.10 MIME: Multi-purpose Internet Mail Ex
tensions
The MIME protocol is a standard used to include (or attach
additional information to a mail message. That additional
information may be an ASCII file, a binary file, a video clip
an audio file, an image, or another object
A MIME compliant mail program will follow the directives
embedded in the mail message to prompt the user to save the
attachment as a file, play the video/audio clip, or perform
a certain function according to the information stored in the
attachment
Not all mail reader programs are MIME compliant
8.10.1 BSD
Does not support MIME-based messages
8.10.2 elm
Because of some problems with the current version, that
facility was taken out of elm
It may be enabled at a later date
8.11. FORWARDING MAIL
8.10.3 pine
pine was written with MIME in mind
Sending MIME messages
To incorporate an attachment to your message, enter the file
name after the
Attchmnt
subheading
Receiving MIME messages
When reading a MIME-encoded message, a menu similar to Figure
8.11 will be seen
To see the attachment, press
v
This will start the companion program used to view the
attachment
In this case, the program xv will be used to display the
content of the GIF file
8.11 Forwarding Mail
Often, one has more than one account but want mail to be
forwarded to one specific machine. This is done by created
file
forward
in the $HOME directory
The content of .forward is the full address to which mail
is to be forwarded. For example, if your account contains a
.forward file with
claudecantinnrcca
then all mail sent to your account will be forwarded to
claudecantinnrcca
108 CHAPTER 8. ELECTRONIC MAIL
PINE 3.91 MESSAGE TEXT Folder: /tmp/junkmail Message 150 of 150 ALL
Date: Fri, 12 Jul 1996 10:32:21 -0400 EDT
From: Claude Cantin ltcantinnickelsaonrccagt
To: Claude Cantin ltcantinnickelsaonrccagt
Subject: gif mime file
Partsattachments
1 Shown 16 lines Text
2 OK 155 KB Image,

This message includes a GIF image (file camgif
Claude

Claude Cantin Claude Cantin
Rm 2025, 100 Sussex Dr. Piece 2025, 100 Prom. Sussex
Research Computing Support Soutien informatique en recherche
Information Services Management Services de gestion de linformation
National Research Council Conseil National de Recherches
Ottawa, Canada (K1A 0R6) Ottawa, Canada (K1A R
claude.cantin@nrc.ca 1-613-993-0822 (FAX:
httpwwwnrccarpsoscsg

[Part 2, "" Image/GIF KB
[Not Shown. Use the "V" command to view or save this part
? Help M Main Menu P PrevMsg - PrevPage D Delete R Reply
O OTHER CMDS V ViewAttch N NextMsg Spc NextPage U Undelete F Forward
Figure 8.11: pine Attachments Menu
8.12. VACATION PROGRAM
8.12 vacation Program
The mail system may be set up to automatically respond to
incoming mail with a specific message. This is usually done
when gone for an extended period of time of longer than a few
days
This is done using the vacation program
1. Create file .vacation.msg, in your main directory. That
file would look similar to
Re: away until May th
I am out of the office from April 26 until May th
Your mail has been received, and will be read upon my return
Regards
Claude
2. Create file .forward, in your main directory
\login_name, "|/usr/sbin/vacation loginname
where login name is your login name on your system
3. As soon as you have created .forward, initialise the
vacation procedure
vacation -i -r interval
where interval is the reply interval, in days. This
is the interval in which a user will receive your reply
(content off your .vacation.msg file), no matter how many
message he sent you
110 CHAPTER 8. ELECTRONIC MAIL
Default is 7 days (2 or 3 is fine). 0 is for every
message -- NOT RECOMMENDED as it would interfere with
mailing lists, discussion groups, etc
To disable the facility: remove forward
8.13 Exercises
1. What is the identifying name of the UNIX system you are
using
2. Send yourself a piece of mail
3. Send someone else a piece of electronic mail
4. Send someone else on another system a mail message
5. Send yourself a piece of mail, and include inside it one
of your files
6. In a file, write a short message. Then, send yourself
that file using mail (hint: one command followed by a
redirection
7. Read the mail you have sent to yourself. Issue a ? and
try some of those facilities. Save the piece of mail in a
folder. Reply to yourself
8. You have sent a piece of mail to a friend. He/she has
lost it, so he/she asks you to send it again. Where can
it be found
9. Using elm, change the user level of the menu system
10. Using elm, create an alias, and send a piece of mail to
that alias
11. Using elm, repeat questions 2 through to
12. Using pine, repeat questions 2 through to
Chapter
Solutions to Exercises
This section represents possible solutions to the exercises
in the course material. The subsection numbers represent the
section covered, and the solution number corresponds to the
question number within that section. Solutions to each chapter
of the book (except for Chapter 1) will start on a new page
9.1 Introduction
1. UNIX is the operating system that covers the widest range
of architectures. You can find UNIX on PCs (SCO, BSDOS
FreeBSD, NetBSD, Linux), workstations (Solaris, IRIX
HP/UX, A/UX, AIX), mainframes (Amdhal and UNISYS have it
and supercomputers (UniCOS on the Cray
Why is it on so many architectures? As it is mostly
written in the C language, it is very easy to port from
one processor to another. It is found on proprietary
chips as well as on the 80x86+Pentium, 68000 family, MIPS
Rf3,4,8g000 families, SPARC families, 88000 family, and
others
2. Some of the advantages of running UNIX are its
multi-tasking, time sharing, multi-user and network
capabilities. It is also very flexible, portable and has
virtual memory. Thousands of programs are available for

112 CHAPTER 9. SOLUTIONS TO EXERCISES
it both in the commercial world and in the public domain
3. UNIX's main philosophy is that it assumes the user knows
what he/she is doing. If the user tells UNIX to erase
his/her entire home directory, it will go ahead and do
it... no questions asked
9.2. FILE SYSTEM
9.2 File System
1. You cannot change permissions on someone else's file. You
must be the owner of the file to do so
On Sun workstations
chmod: file: Not owner
will be the error message. On Silicon Graphics systems
chmod: WARNING: can't change file
will be echoed back
2. Assuming I don't know what the present permissions are
the only command recommended is
chmod 744 filename
3. The two possible commands to change the permissions from
rwxrwxr-x to rwxr-xr-x are
chmod 755 filename
chmod g-w filename
4. I simply want to disable the execute privilege on the
file. The only command to be used is chmod go-x filename
I could not use chmod with octal values because I was not
sure what the remaining permissions are
114 CHAPTER 9. SOLUTIONS TO EXERCISES
9.3 Tour of the File system
1. The demonstration programs, if available on your system
could be in
/usr/demos on Silicon Graphics systems
2. Most of the commands used are found in the following
directories
usrbin
usrbsd
usrsbin
bin
usrlocalbin
3. Most likely in /usr/share/lib/dict, file words
4. On Sun workstations, your home directory would most likely
be in /home/machine name/your login
On Silicon Graphics workstations, it would most likely be
in /usr/people/your login
For the other vendors, issue
echo HOME
9.4. SHELLS
9.4 Shells
1. The easiest way to do this is to use the input redirection
sign as
names < file of names
2. This time, the input redirection would be used to read the
data, then the output redirection would be used to capture
what would normally be displayed on the screen
names < file of names > sortednames
To append to sorted.names, use >> instead of gt
3. I could use the rm command with a wild-card, as
rm o
(be careful when using *: type ls *.o before the rm o
4. Again, use a combination of different types of wildcards
rm AZ
5. This time, use
rm z
6. rm myffil,capge[1-4,7,9] is equivalent to
rm myfile
rm myfile
rm myfile
rm myfile
rm myfile
rm myfile
rm mycape
rm mycape
rm mycape
rm mycape
rm mycape
rm mycape
116 CHAPTER 9. SOLUTIONS TO EXERCISES
7. To remove any file whose name contains a wildcard
character, use the escape character (the backslash) as
in rm namner
9.5. SECURITY
9.5 Security
1. I should use a password to prevent people from using my
account, and corrupt some of the data I have
I should also use a password because my system is probably
on a network, and anyone from the network could get into
my account easily, gain special privileges, and corrupt
not only my account but other accounts on the system
If the Internet Worm of November 1988 were reproduced
today, our systems would be affected, just like the
that were affected at the time
To see if any account does not have a password, simply
look at the /etc/passwd file. The second field of that
file is the encrypted password: if it is empty, no
passwords are needed to get into that account
2. Passwords should be at least five characters long, and
contain one of the special characters (space, asterisk
comma, bracket, etc). The password used should NOT be a
word contained in the on-line dictionary
3. I am a system administrator for a group of workstations
Only myself, my backup and my supervisor should know the
root password of that system. This will restrict the
number of people that can do damage to the system: the
fewer people involved, the better
Remember: root has super-user privileges. There is
nothing root cannot do in the file system, including
deleting EVERYTHING and/or corrupting the system. An
inexperienced person could easily remove essential files
Even experienced people do
Also, one person should be the ``major" administrator
that person should keep a log containing the changes made
in the system, packages added, files modified, etc. That
information becomes EXTREMELY handy, even essential, when
the system crashes
118 CHAPTER 9. SOLUTIONS TO EXERCISES
The system administrator should login as root ONLY when
performing functions that REQUIRE root privileges
Otherwise, he/she should log into his/her personal
account: this will prevent accidental deletions of
critical files
9.6. COMMANDS
9.6 Commands
1. Options to commands are given using a dash followed
immediately by the options desired
For example
ls
lists all files within the current directory. Adding the
option of listing all the files (including ones that start
with a period) changes the command to
ls a
If another option is added, the character representing
that option is simply added to the string immediately
following the dash, such as
ls as
If a third option is required, the option string will then
be three characters long
2. Your password is changed using the passwd command. What
follows is a transcript of what to do to change the
password (NOTE : the password is actually NOT echoed back
to the user
prompt> passwd
Changing password for cantin
Old password: old password
New password: new password
Re-enter new password: new password
prompt> exit
Most recent versions of the operating system will
also not accept the password if it does not contain a
non-alphabetic character
120 CHAPTER 9. SOLUTIONS TO EXERCISES
3. Most systems have on-line manuals, accessible using the
man command
To see how the rm command works, one simply types
man rm
and the syntax and description of the command is displayed
on the screen
For many commands, issuing the command itself without any
arguments returns its usage. rm is one such command
prompt> rm
usage: rm [-rif] file
4. The dictionary should be in /usr/share/lib/dict, file
words
There are many ways to find out how big that file is. Two
ways will be shown here
wc words
ls -l words
root owns it
5. Two commands could be used: pwd, and echo '$cwd'. Both
will give the same answer, although echo '$cwd' will be
done quicker since cwd is a variable whose value is the
current working directory, whereas pwd has to go and
calculate it
6. One of the following three simple commands can be used to
return to your home directory
cd
cd HOME
cd
7. The first step is to create the directory. Once thats
done, simply use cp to copy the files over
9.6. COMMANDS
cd
mkdir tempdir
cd tempdir
cp /etc/hosts
cp /etc/fstab
This is one way of using the cp command to do that. There
are many variations, all as good as the one shown
8. Again, create the new directory, then copy the first one
into the second
cd
mkdir tempdir
cp temp.dir/* tempdir
Another, simpler way of doing it is
cp -r temp.dir tempdir
but the results will be slightly different (temp.dir would
be another directory within tempdir
9. To remove the two directories along with their content
rm -rf temp.dir tempdir
The rf flag will perform a recursive remove. If the file
does not exist, or if you own the file but do not have
write permission, it will not issue an error message
10. The time a file was last changed can be found by doing a
long listing on that file (ls -l list.names). The sixth
column (on SGI's) will tell you the last time the file was
updated. On Suns, this is the fifth field
That field will tell you the Month, Day and time. If the
file is more than one year old, the format will be Month
Day and Year
122 CHAPTER 9. SOLUTIONS TO EXERCISES
11. Hidden files can be listed using the a option on the ls
command (ls a
All files beginning with a dot (.) will be displayed
12. To create a file of length zero, use the touch command
this updates the time stamp of the file to "now" if the
file exists, or creates the file with length zero if the
file does not exist
13. There is no ``rename" command. Instead use the mv move
command, as in
mv myfile hisfile
14. To capture the long listing of /bin into hisfile, use the
output redirection sign
ls /bin/* > hisfile
15. To look at the content of a file, one screenful at a time
use the more command: it will display one screenful
worth of the file; pressing the space bar will display
the next screenful; pressing the return key will display
one additional line
16. To see the first twenty lines of a file, use the head
command, with the -count flag
head -20 hisfile
No options on the command displays the first 10 lines
17. The last fifteen lines can be seen with the tail command
using the -count option
tail -15 hisfile
The default value again is ten lines. Experiment with
different values. What happens if you put a + instead of
the
9.6. COMMANDS
18. To find out who is logged on to the system at this moment
issue the who command
19. To communicate interactively, there are two commands to
use, depending on whether both users can use full screen
mode, or simply line mode
In full screen mode, use the talk user @node command
This will split your screen in half, and send a
message to the remote user you want to talk with
He/she will then answer back with the same command
and his/her screen will also be split horizontally in
half
Your upper half of the screen reflects what you type
as you type it. This is the remote user's bottom
half. When the remote user types on the keyboard
what he/she types is reflected on his/her upper
screen, and your lower screen
To exit that mode, issue CTLC
In line mode, use the write command. This puts you
in write mode: when you press RETURN, what you just
typed is sent to the user. It stays in that mode
until you hit CTLD
124 CHAPTER 9. SOLUTIONS TO EXERCISES
9.7 Editors
1. You are at a VT100 terminal. Most UNIX systems understand
what a VT100 terminal is, but they may not automatically
know that you are a VT100 type terminal
To tell UNIX you are using a VT100 type terminal, issue
setenv TERM VT
You could then use vi in its full screen mode. Other
editors which may be available are emacs, edt and xe
If your UNIX system does not understand VT100 terminals
you would have to use a line editor, such as ed
9.8. ELECTRONIC MAIL
9.8 Electronic Mail
1. The name of the system you are using is usually found by
issuing the command
hostname
2. To send yourself some mail, simply use the mail command
such as
mail my logon
and fill up the subject line (if any). Write a line or
two, then enter a dot (.) on a line by itself to finish
the main body of the letter
You may then see a Cc:. The system is asking if you want
to send a complimentary copy to someone else. Press the
return key, and mail will be sent
3. To send someone else a message, follow the same procedure
as outlined above, but use their logon name for my logon
4. Assume the remote user is cantin and that his FULL system
name is nickel.sao.nrc.ca. To send him mail
mail cantinnickelsaonrcca
is used, and the same procedure outlined above follows
BUT: your system has to be configured to use mail. If it
is not, contact your system administrator
5. When writing a message, a file can be inserted using
~r filename
on a line by itself (that is ``tilde"-r filename
6. If the message to be sent is already in a file (let's call
it message), and my user name is cantin, I can send myself
that file via mail using
126 CHAPTER 9. SOLUTIONS TO EXERCISES
mail -s "Subject of this Message" cantin lt
message
7. Mail can be read using
mail
When reading mail, the current letter can be saved in the
folder folder by issuing the s +folder command. The plus
sign (+) means that the following file is to be a folder
To reply to yourself, simply enter
r
at the mail command line
8. Any outgoing mail is saved in a file called .record in
your own $HOME/mail directory. To send the mail to your
friend, use the mail command to read the .record folder
save the message in a file by itself, and reply to your
friend, using the content of the new file for the body of
the message
9. Issue elm to enter the package. From within the package
``o" will bring the menu option. Issue ``u" to go to
the user level menu, and press the space bar for your
selection
Save your selection by pressing the greater than gt
sign
10. Re-enter elm. Issue ``a" to bring the aliases menu
Follow the directions elm issues
Appendix A
vi Quick Reference
This table is taken from Sun Microsystems' User's Guide
Getting Started (pp. 5-25 to
Starting vi
vi filename open or create file
vi +18 filename open to line
vi +/"mustard" filename open file to first occurence of mustard
vi -r filename recover crashed file
view filename open file readonly
Cursor Commands
h move left
j move down
k move up
l move down
w move right one word
W move right one word (past punctuation
b move left one word
B move left one word (past punctuation
Return move down one line
Back Space move left one character
Space Bar move right one character
H move to top screen
M move to middle of screen
L move to bottom of screen

128 APPENDIX A. VI QUICK REFERENCE
Ctl-F scroll forward one screen
Ctrl-D scroll forward one-half screen
Ctrl-B scroll backward one screen
Ctrl-U scroll backward one-half screen
Insterting Characters and Lines
a insert characters to right of cursor
A insert characters to right of cursor, at end of line
i insert characters to left of cursor
I insert characters to left of cursor, at beginning of l
o insert line below cursor
O insert line above cursor
Changing Text
cw change word (or part of word right of cursor
cc change line
C change part of line to right of cursor
s substitute string for character under cursor
r replace character under cursor with one other characte
r-Return break line
J join current line and line below
xp transpose character at cursor & character to right
change case of letter (upper or lower
u undo previous command
U undo all changes to line
:u undo previous last-line command
Deleting Text
x delete character
dw delete word (or part of word to right of cursor
dd delete line
D delete part of line to right of cursor
:5,10 d delete lines
Copying and Moving Text
yy yank or copy line
Y yank or copy line

dd delete line
p put yanked or deleted line below current line
P (upper case) put yanked or deleted line above current line
:1,2 co 3 copy lines 1-2 and put after line
:4,5 m 6 move lines 4-5 and put after line
Setting Line Numbers
:set nu show line numbers
:set nonu hide line numbers
Finding a Line
G go to last line of file
21G go to line
Searching and Replacing
/string/ search for string
?string? search backwards for string
n find next (or previous) occurence of string
:g/search/s//replace/gc search and replace, consult at each occurence
Clearing the Screen
Ctrl-L clear scrambled screen
Inserting a File Into a File
:r filename insert (read) filename after cursor
:34 r filename insert filename after line
Saving and Quitting
:w save changes (write buffer
:w filename write buffer to filename
:wq save changes and quit vi
ZZ save changes and quit vi
:q! quit without saving changes
130 APPENDIX A. VI QUICK REFERENCE
Appendix B
Bibliography

132 APPENDIX B. BIBLIOGRAPHY
Bibliography
[1] Stephen R. Bourne. The UNIX System V environment
Addison-Wesley Publishing Company. Don Mills, Ontario

[2] D. Dougherty, R. Koman, and P. Ferguson. The Mosaic
Handbook for the X Window System. O'Reilly & Associates
Inc. Sebastopol, California.
[3] E. Foxley. UNIX for Super-Users. AddisonWesley
Publishing Company. Don Mills, Ontario.
[4] Frisch. Essential System Administration. O'Reilly amp
Associates, Inc. Sebastopol, California.
[5] Ed Krol. The Whole INTERNET User's Guide & Catalogue
O'Reilly & Associates, Inc. Sebastopol, California.
[6] Jerry Peek, Tim O'Reilly, and Mike Loukides. UNIX Power
Tools. O'Reilly & Associates, Inc. Sebastopol, California

[7] H. McGilton and R. Morgan. Introducing the UNIX SYSTEM
McGraw-Hill Software Series for Computer Professionals
Toronto.
[8] R. Thomas, and R. Farrow. UNIX Administration Guide for
System V. Prentice Hall. Englewood Cliffs, New Jersey

[9] Silicon Graphics Inc. IRIS-4D User's Guide, man pages
[10] Sun Microsystems. SunOS 4.0, 4.1 Reference Manuals

134 BIBLIOGRAPHY
[11] SuSE Linux LTD. SuSE Linux 7.3 Reference Manual
[12] UNIX International. The UNIX Operating System: A
Commercial Success Story. Nov 1, 1989. Parsippany, NJ
[13] http://www.canarie.ca; November 1997 version

