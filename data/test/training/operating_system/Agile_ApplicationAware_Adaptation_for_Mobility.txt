Agile ApplicationAware Adaptation for Mobility Brian D. Noble, M. Satyanarayanan, Dushyanth Narayanan, James Eric Tilton, Jason Flinn, Kevin R. Walker . School of Computer Science Carnegie Mellon University Abstract In this paper we show that applicationaware adaptation, a collaborative partnership between the operating system and applications, offers the most general and effective approach to mobile information access. We describe the design of Odyssey, a prototype implementing this approach, and show how it supports concurrent execution of diverse mobile ap plications. We identify agility as a key attribute of adap tive systems, and describe how to quantify and measure it. We present the results of our evaluation of Odyssey, indi cating performance improvements up to a factor of 5 on a benchmark of three applications concurrently using remote services over a network with highly variable bandwidth. 1 Introduction Adaptation is the key to mobility. Only through alertness and prompt reactions can a mobile client offer acceptable service in spite of the many problems that plague its existence. These in clude unpredictable variation in network quality, wide disparity in the availability of remote services, limitations on local resources imposed by weight and size constraints, concern for battery power consumption, and lowered trust and robustness resulting from ex posure and motion S, 15,311. Once the need for adaptation is recognized, many questions fol low. What form should such adaptation take Which system com ponents should bear responsibility for adaptation How does one characterize the adaptive capability of a mobile client How does one compare alternative designs from the perspective of adaptation We present our answers to these and related questions in this pa per. We describe the design and implementation of a software plat form called Odyssey, and show how it provides effective support for concurrent execution of diverse mobile applications. We iden tify agility as a key attribute of adaptive systems, and describe how to quantify and measure it. Finally, we present the results of our evaluation of the Odyssey prototype to confirm the benefits of our approach. These results indicate performance improvementsup to a factor of 5 on a benchmark of three applications concurrently using remote services over a network with highly variable bandwidth. This research was supported by the Air Force Materiel Command AFMC under DARPA contract numbers F1962893GO193 and F1962896GOO61. Additional support was providedby ATT, Hughes, IBM, and Intel. The views and conclusions contained here are those of the authors and should not be interpreted as necessarily representingthe official policies or endorsements,either express or implied. of AFMC, DARPA, ATT, Hughes, IBM, Intel. Carnegie Mellon University, or theU.S. Govem ment. Permission to make digitalhard copy of part or all rhis work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advan tage, the copyright notice, the title of the publication and its date appear, and notice is given that copying is by permission of ACM, Inc. To copy otherwise, to republish, to post on servers, or to redistribute to lists, requires prior specific permission andor a fee. SOSPI 6 1 O97 SaintMalo, France Q 1997 ACM 0697919165970010...3.50 2 Design Rationale Odyssey is a set of extensions to the NetBSD operating system to support adaptation for a broad range of mobile informnation access applications. These applications execute on mobile clients but read or update remote data on servers. Our goal in building Odyssey is to enable mobile scenarios such as the following one. 2.1 Motivation Consider a hypothetical scenario in which a tourist with a weamblc computer running Odyssey is walking in an urban setting A wlrc less overlay network 16 provides the computer with a variety of connection alternatives, which differ in bandwidth, coverage, cosf, and reliability. The higherbandwidth alternatives are more sensi tive to fading and signal loss as the user moves in and out of the radio shadows of buildings. As he walks, the user interacts with his computer through spoken commands he receives output through a headmounted displny or synthesized speech. The speech software exploits remote compute servers when connected, but is capable of degraded interactions us ing a tiny vocabulary when disconnected. One application provides a video narration of local history, with content delivered from a re mote server. Another application is a Web browser that can respond to queries about the local environment. Odyssey monitors resources such as bandwidth, CPU cycles, and battery power, and interacts with each application to best exploit them. For example, when highbandwidth connectivity is lost due to a radio shadow, Odyssey detects the change and notifies inter ested applications. The video application responds by skipping frames, thus displaying fewer frames per minute, while the Web ap plication responds by displaying degmded versions of large images, When the user emerges from the radio shadow, Odyssey dctccts a substantial improvement in bandwidth and notifies applications, They then revert to their original behaviors. Although the user is aware of changing application behavior dur ing his walk, he does not have to initiate adaptation or be involved in its details. Rather, he can delegate these decisions to Odyssey, confident that reasonable tradeoffs will be made. While mobile scenarios such as this motivated the design of Odyssey, its benefits may be valuable in a broader context. For ex ample, large bandwidth variations can arise in widearea networks with fluctuating loads. The adaptation supported by Odyssey can be valuable in coping with such variation. 2.2 Fidelity As the example in the previous section illustrates, the data accessed by an Odyssey application may be stored in one or more gcncral purpose repositories such as file servers, SQL servers, or Web servers. Alternatively, it may be stored in more specialized rcposl tories such as video libraries, querybyimagecontent databases, or back ends of geographical information systems. The constraints of mobility complicate data access from such servers. Ideally, a data item available on a mobile client should be indistinguishable from that available to the accessing application if it were to be executed on the server storing that item. But this corrc spondencemay be difficult to preserve as resources become scarce 276 some form of degradation may be inevitable. We definefidelity as the degree to which dam presented at a client matches the reference copy at the server. Fidelity has many dimensions. One wellknown, universal di mension is consisfency. Systems such as Coda l32, Ficus 28 and Bayou 38 expose potentially stale data to applications when network connectivity is poor or nonexistent. Other dimensions of fidelity depend on the type of data in question. For example, video data has at least two additional dimensions frame rate and image quality of individual frames. Spatial data, such as topographical maps, has dimensions of minimum feature size or resolution. For telemetry data, appropriate dimensions include sampling rate and timeliness. The dimensions of fidelity are natural axes of adaptation for mobility, However, the adaptation cannot be solely determined by the type of data it also depends on the application. Different ap plications using the same data may make different tradeoffs among dimensions of fidelity. A key goal of Odyssey is to provide a framework within which diverse notions of fidelity can easily be incorporated. Our focus on mobile information access allows us to bound this diversity to manageable proportions. Specifically excluded from our purview are applications that involve stringent realtime constraints, such as video conferencing and multiclient interactive games. Supporting multiple levels of fidelity complicates the task of evaluation. Since adaptive applications trade fidelity of data for performance, focusing solely on the latter can result in a mislead ing evaluation. For example, by forcing applications to operate at their lowest fidelity levels at all times, a system could ensure better performance than a competing system that strives to support higher fidelity levels when possible. Yet, this degenerate approach vio lates our intuitive notion of what constitutes a good system. Hence, the evaluation of an adaptive system must take into account both fidelity and performance. 2.3 Concurrency The ability to execute multiple independent applications concur rently on a mobile client is vital. Although this ability is taken for granted on desktop operating systems, there continues to be skep ticism about its value in mobile clients. This skepticism is fueled by the popularity of devices such as PDAs I and pocket organiz ers 39, which execute only one application at a time. While such specialized mobile devices fill an important niche, we are convinced that many mobile users will find it valuable to run background applications in addition to the foreground application that dominates their attention. For example, an information filter ing application may run in the background monitoring data such as stock prices or enemy movements, and alert the user as appro priate, As another example, an application used in emergency re sponse situations may monitor physical location and motion, and prefetch damageassessment information for the areas to be tra versed shortly. To effectively support concurrent applications, one must control their use of limited resources. In other words, there needs to be centralized monitoring and coordinated resource management on a mobile client, Operating systems, which have historically per formed this role for CPU cycles and memory, must now manage a broader range of resources such as network bandwidth, disk cache space and battery power. The need to coordinate resource management across applications mutes the effectiveness of many current approaches to mobile com puting. For example, commercial applications such as Eudora 29 provide vertically integrated support for mobility, where each appli cation assumes that it has full use of available network bandwidth. Even a more sophisticated toolkit approach such as Rover 13 only pays minimal attention to resource coordination. 2.4 Agility Sound adaptation decisions require accurate and timely knowledge of resource availability. Ideally, a mobile client should always have perfect knowledge of current resource levels. In other words, there should be no time lag between a change in resource availability and its detection. Further, if this change is sufficient to warrant modification of client behavior, that too should be accomplished without delay. Of course, no physical system can meet this ideal. The best we can hope for is to build close approximations through good design and engineering. Thus, a key property of an adaptive system is the speed and accuracy with which it detects and responds to changes in resource availability. We call this property the agil of the sys tem. When changes are large and erratic, only a highly agile system can function effectively. In more stable environments, less agile systems may suffice. Agility is thus the property of a mobile sys tem that determines the most turbulent environment in which it can function acceptably. Agility is a complex property with many components. One source of complexity is differing sensitivity to different resources. For example, a system may be much more sensitive to changes in network bandwidth than to changes in battery power level. An other source of complexity is differing origins of changes in re source availability. The change may be caused by variation in the supply of a resource due to mobility, or by changed demand for it by concurrent applications. Since different mechanisms may be in volved in detecting these two different types of changes, it may be necessary to distinguish these components of agility. 2.5 Minimalism Rather than using a cleansheet approach to designing Odyssey, we decided to extend an existing system. We chose NetBSD, a vari ant of the 4.4 BSD Unix operating system 23, as the starting point. NetBSD source code is publicly available withoutcencum brance, thus allowing free distribution of derivatives. The popular ity of NetBSD also offers the possibility of attracting a substantial Odyssey user community. We avoided changes to the NetBSD API and internal structure unless essential, and made the few necessary changes consistent with NetBSD idiom. Thus, Odyssey should be viewed as an ex ercise in minimalism it represents the smallest set of interface and code extensions we believe necessary for agile adaptation in mobile environments. 3 ApplicationAware Adaptation 3.1 Model of Adaptation Odysseys approach to adaptation is best characterized as applicationaware adaptation. The essence of this model is a col laborative partnership between the system and individual applica tions. The system monitors resource levels, notifies applications of relevant changes, and enforces resource allocation decisions. Each application independently decides how best to adapt when notified. This division of responsibility directly addresses the issues of ap plication diversity and concurrency. Diversity is accommodated by allowing applications to determine the mapping of resource levels to fidelity levels. Concurrency is supported by allowing the sys tem to retain control of resource monitoring and arbitration. The challenge is to design a system that can support this separation of concerns without compromising agility. 277 Applicationaware WJY t Lahsezfake Eudora Y t Applicationtransparent Coda Figure 1 Models of Adaptation Figure 1 places applicationaware adaptation in context, span ning the range between two extremes. At one extreme, adaptation is entirely the of individual This laissez approach, used commercial software such as dora, avoids need for support. But, discussed in tion it fails to address the issue of application concurrency. At the other extreme, uppicufiontransparent udaprufion, the system bears full responsibility for both adaptation and resource manage ment. This approach, exemplified by Coda, is especially attractive for legacy applications because they can run unmodified. Applica tion concurrency is supported, but diversity is since control fidelity is in the of the 3.2 Realizing Model The approach to applicationaware adapta would be directly reflect separation of in the architecture. In an architecture, code would data generically applications would entirely re for differential handling of data types. Unfortunately, the wide disparity in the physical and logical properties of various data types requires that some form of type awareness be incorporated into the system for efficient resource us age. For example, the size distribution and consistency require ments of data from an server differ from those relational database Image data be highly using one but not Video data be efficiently using a protocol that drops rather than retrans mits lost data in contrast, only reliable transmissions are accept able for file or database updates. It is impossible to optimize for such differences without some systemlevel knowledge of type. These considerations lead to a more sophisticated architecture in which Odyssey has two responsibilities. It must be of shared to remote by concurrent so that can prop manage resources. the same it must typespecific knowledge allow effective management actions. knowledge is for example, estimate the costs and of compressing cached item flushing it refetching it Odyssey incorporates via specialized com ponents wardens. A encapsulates the support at client necessary effectively manage data type. fully support new dam an appropriate has to writ ten incorporated Odyssey at each client. The wardens are subordinate to a typeindependent component called the viceroy, which is responsible for centralized resource management. The collabqrative relationship envisioned in applicationaware adaptation is thus realized in two parts. The first, between the viceroy and its wardens, is datacentric it defines lev els each data and factors into resource The second, applications and is actioncentric provides applications control over selection of levels supported the wardens. 4 Design and An implementation Odyssey must an application l operate on Odyssey objects, 0 express resource expectations, l be notified when expectations are no longer met, and l respond by changing fidelity. The Odyssey mechanisms supporting each of these requirements are described in the following sections. 4.1 Operating on Odyssey Objects Consistent with our goal of minimalism, we have built upon NetBSD file system calls rather than defining a completely new in terface. Thus, Odyssey is integrated into NetBSD as a new VFS 810 system 19. In addition, we have found it necessary to add a few new system calls. As shown in Figure 2, we have implemented the viceroy and war dens in user space rather than in the kernel. Operations on Odyssey objects are redirected to the viceroy by a small inkernel inrercepfor module. All other system calls are handled directly by NetBSD. Odyssey Figure 2 Odyssey Client Architecture Wardens are statically linked with the viceroy, and the ensemble executes in a single address space with userlevel threads. Com munication between the viceroy and wardens is through procedure calls and shared data structures. The wardens are entirely respon sible for communicating with servers and caching data from them when appropriate applications never contact servers directly. Our implementation of Odyssey outside the kernel is consistent with the philosophy of modem operating system designs such as Exokemel6 and SPIN 3. Since extensibility is the motivation for such systems, their use in the context of Odyssey should result in improved agility and easier installation of new wardens. Integrating Odyssey with the file system yields several key ad vantages. It gives us a wellunderstood framework for integmtion as well as useful infrastructure to simplify implementation. Since file opemtions are performed on Odyssey objects by the appropriate warden, their semantics can be customized to provide a modicum of typeawareness without new system calls. At the same time, our, approach imposes certain limitations, Some data types do not naturally fit either the naming or access methods provided by the file system. Further, there are no standard file operations corresponding to fidelity changes. For naming, wo incorpomteextensions similar in spirit to virW directories 9. For access methods and fidelity changes, we rely on a generalpurpose mechanism described in Section 4.4. As Odyssey matures, we may discover that further improvc ments in functionality or agility are impossible unless we move the viceroy and wardens into the kernel. Until there is compelling cvi dence of this, however, we plan to retain the current architecture. 278 requestin path, in resourcedescriptor, out requestid cancelin requestid a Resource Negotiation Operations resourceid lower bound upper bound name of uucall handler b Resource Descriptor Fields c Generic Resources in Odyssey 1 handlerin requestid, in resourceid, in resourcelevel 1 d Upcall Handler tsopin path, in opcode, in insize, in inbuf, inout outsize, out outbuf e QpeSpecific Operations This figure shows Odysseys extensions to the NetBSD prom ming interface. Note that the request and tsop calls have vari ants that identify Odyssey objects by file descriptors rather than pathnames. Figure 3 Odyssey API 4.2 Expressing Resource Expectations Applications communicate resource expectations to Odyssey using the request system call shown in Figure 3a. The call takes a resource descriptor identifying a resource and specifying a window oftolerance on its availability. This call expresses the applications desire to be told if the availability of the resource strays outside the window. If, at the time of the request, the availability of the resource is within the window of tolerance, the viceroy registers the request and returns a unique identifier for it. This identifier can be used by the viceroy in notifying the application that the resource has left the requested bounds, or by the application in a future cancel system call to discard the registered request. If the resource is currently outside the bounds of the tolerance window, an error code and the current available resource level are returned. The application is then expected to try again, with a new window of tolerance corresponding to a new fidelity level. The fields of a resourcedescriptor are shown in Figure 3b. Each resource is named by a unique resource identifier. Figure 3c lists the generic resources we plan to manage in Odyssey. At present the prototype only manages the most critical resource in mobile com puting network bandwidth. The window of tolerance is indicated by lower and upper bounds. A resource descriptor also specifies the name of a procedure that will be called to notify the application that the resource has left the window. 4.3 Notifying Applications When the viceroy discovers that the availability of a resource has strayed outside a registered window of tolerance, it generates an upcull to the corresponding application. The application adjusts its fidelity according to its individual policy. It then issues another request call to register a revised window of tolerance appropriate to the new fidelity. An upcall handler is invoked with three parameters, as shown in Figure 3d. The first parameter identifies the request operation on whose behalf the upcall is being delivered. The second param eter identifies the resource whose availability has changed, and the third parameter gives the new availability. Upcalls closely resemble Unix signals, but offer improved func tionality. Like signals, upcalls can be sent to one or more processes, can be blocked or ignored, and have similar inheritance semantics on process fork. Unlike signals, upcalls offer exactlyonce, inorder semantics for each receiver of a particular upcall. Further, upcalls allow parameters to be passed to target processes and results to be returned. 4.4 Changing Fidelity Requests for fidelity changes do not map well to the NetBSD file system interface. Further, many data types have natural access methods that are not well supported by the untyped byte stream model. To address these shortcomings, we have included a general purposeescapemechanismcalled tsop, ortypespecificoperation, shown in Figure 3e. The arguments to tsop specify an Odyssey object and the opcode of a typespecific operation to be performed on it. Input and output parameters are specified as unstructured memory buffers, in the spirit of the ioctl system call. 5 Example Applications To explore Odysseys ability to support application diversity, we modified three very different applications to run on it. The first two applications are drawn from the domain of mobile information access a video player whose source code we have access to, and a Web browser whose source code is not publicly available. The third application, a speech recognizer, was chosen to explore the effectiveness of Odyssey outside its original target domain. Each application requires a different strategy for integration into Odyssey, and each has distinct notions of fidelity. Collectively, these applications serve as a vehicle to explore the generality and performance characteristics of Odyssey. 5.1 Video Player Our support for video is based on xanim, a publicdomain software package that can generate video animation from data stored in vari ous formats in a local file. As shown in Figure 4, we split its mono lithic implementation into a client and server, and wrote a warden to satisfy client requests and fetch data from the server. . . . . .......................... Client .  3  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Figure 4 Video Player in Odyssey 279 Each movie is stored in multiple tracks at the server, one track per fidelity level. We have incorporated three levels of fidelity for Quicktime 1111 video data JPEGcompressed 1421 color frames at qualities 99 and 50, and blackandwhite frames. Storing all three tracks incurs only modest overhead, typically about 60 more than storing just the highest fidelity track. The warden supports two tsops to read a movies medata, and to get a particular frame from a specified track. The warden performs readahead of frames to lower latency. When the player opens a movie, it calculates the bandwidth re quirements of each track from the movie medata. The player begins the movie at highest possible quality, and registers the cor responding window of tolerance with Odyssey. When it is notified of a significant change in bandwidth, the player determines a new fidelity level and switches to the corresponding track. If the player switches from a low fidelity track to a higher one, the warden dis cards the prefetched lowquality frames. 5.2 Web Browser Netscape Navigator, or simply Netscape, is a widelyused tool for accessing the WorldWide Web. It is an especially interesting ap. plication for Odyssey because we do not have access to its source code. Since we cannot directly modify Netscape to take advantage of Odyssey, we exploit its proxy facility as shown in Figure 5. ,................................... Client .  Figure 5 Extending Netscape for Odyssey All of Netscapes requests are redirected to a client module called the cellophane. Together, Netscape and the cellophane constitute a single application from the viewpoint of Odyssey. The cellophane makes use of the Odyssey API and selects fidelity levels. Netscape passively benefits from the adaptation initiated by the cellophane. The cellophane transforms HTTP requests from Netscape into file operations on Odyssey Web objects. The Web warden forwards these requests via the clients mobile network connection to a dis Mation server. The latter provides multiple levels of fidelity for images along the lines suggested by Fox et al 7. Since images tend to be large and constitute a substantial fraction of HTTP traftic, focusing on them has a high payoff. At the highest fidelity, images are uncompressed. Progressively lower levels correspond to JPEG compressed images of decreasing quality. The warden provides a tsop to set the fidelity level. The distillation server fetches requested objects from the appro priate Web server, distills them to the requested fidelity level, and sends the results to the warden. The data is then passed to Netscape via the cellophane. These steps are completely transparent to both Netscape and the Web server each perceives normal Web access. Netscape exemplifies the unfortunate reality that source code is not publicly available for a growing number of important applica tions. Code interpositioning. the approach described above, repre sents only one way for such shrinkwrapped applications to benefit from Odyssey. Other possibilities include static binary rewriting of executables and dynamic modification of system calls. 5.3 Speech Recognizer  1 Speech recognition offers considerablepotential as well as chal lenge for mobile computing. It is especially useful when mobilo because it leaves the users hands and eyes free for other actlvb ties such as driving 34. However, the resource requirements for highaccuracy speech recognition are substantial, especially when mobile, since background noise is often high. Adding higherlevel semantic processing, such as language translation, leads to even greater demands on computing resources. This combination of op porhmity and challenge led us to implement speech recognition as an Odyssey application, even though it falls outside our primary domain of mobile information access. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  Client Figure 6 Speech Recognition in Odyssey Figure 6 illustrates our support for speech recognition in Odyssey. The starting point for this implementation is a speech recognition system called Janus 41, whose source code is avall able to us. We have split this system into a client and server, and constructed a speech warden. The server accepts two forms of lnd put a raw utterance, or an utterance that has already been processed by the first of several phases of Janus. This preprocessing ylclds a compression ratio of approximately 5l at modest CPU cost. The speech frontend captures a raw speech utterance and then writes it to an object in the Odyssey namespace. The warden, using the current bandwidth estimate, decides whether it is faster to per form the first pass of the recognition on the local, slower CPU, or to ship the larger, raw utterance to the server. In the extreme case of disconnection, the local Janus is capable of recognizing the ut terance, but at a severe CPU and memory cost, When the uttemncc is recognized, the resulting text is made available to the frontend through a read operation. We are currently refining our imple mentation to support multiple levels of recognition fidelity. 6 Evaluation Three central questions drove our evaluation of Odyssey l How agile is Odyssey in the face of changing network bnnd width l How beneficial is it for applications to exploit the dynamic adaptation made possible by Odyssey l How important is centralized resource management for con current applications In posing these questions, two secondary questions come to light, First, how should the concept of agility be quantified Second, what experimental methodology should we use to obtain agility metrics We address these secondary questions first, in Section 6,1, and present our answers to the primary questions in Section 6.2. 280 6.1 Evaluation Strategy 6.1.1 Agility Metrics Our approach to quantifying agility draws upon wellestablished principles for measuring dynamic response from the field of control sysns 4,30. The accepted practice in that field is to characterize the adaptive ability of a system with respect to a particular output in terms of its responses to a set of input reference wavefomts. Each reference waveform is conceptually simple, yet greatly stresses the adaptive ability of the system by varying the input in some sharp and substantial manner. il 1 a StepUp I b StepDown nll c ImpulseUp d ImpuIseDown The StepUp and StepDown waveforms are each 60 seconds long, with a single, abrupt transition at the midpoint. The ImpulseUp and ImpulseDown waveforms are approximations to the ideal impulse, which is a spike of infinitesimal width and infinite height. We ap proximate the ideal with twosecond wide excursions in the middle of a 60.second period. Our choice of parameters for these wave forms is based on ourestimateof the basic network time constants of tvoicaldistributed svstems todav 30 secondsshoutd be long enough fj a system to reaih steady se after a bandwidth pertuationa 2 second perturbation is large enough to be detectable by a sensitive system, yet small enough to be missed by an insensitive one. Figure 7 Reference Waveforms for Agility Experiments Figure 7 illustrates the reference waveforms used in our evaht ation. Although these waveforms are idealized, approximations to them can occur in practice. The step waveforms can arise in over lay networks, where a mobile client may seamlesslyswitch between different network interfaces. Further, virtual radios such as Spec bumware 37 may allow sharp bandwidth degradation. Impulse waveforms can arise as a result of frequent transitions in either of these situations, or in the presence of bursty background traffic. 6.1.2 Experimental Methodology Generating Discontinuous Waveforms To subject Odyssey and its applications to these reference waveforms, we need to generate sharp discontinuities in network bandwidth. Accomplishing this in a repeatable and reliable manner is extremely difficult on any real network or combination of networks. We solve this problem through a technique called truce modulation 26,33. Trace modulation performs applicationtransparent emulation of a slower target network over a faster, wired LAN. It is implemented in two parts a layer inserted in the protocol stack betweenthe trans port and network layers, and a userlevel daemon. The added layer delays all traffic into and out of the modified host according to a simple linear model combining latency and bandwidthinduced de lays, The daemon reads a list of model parameters, called a re play trace, from a file and feeds it to the delay layer. We have created synthetic replay traces to obtain the bandwidth variations corresponding to the reference waveforms. Interpreting Results Since Odyssey applications trade fidelity for performance, interpreting the results of experiments requires some care. In comparing two strategies, one is strictly better than the other if it provides better fidelity with comparable performance, or better performance with comparabIe fidelity. In other cases, the comparison must take into account the applications goals. These comparisons are clearly dependent on the choice of fidelity metrics. However, since only relative comparisons are made within a single application, the only requirement on fidelity is that it be strictly increasing as the quality of presented data increases. 6.13 Experimental Conditions AII of our experiments used identical hardware and software con figurations a single 90 MHz Pentium client with 32 MB of mem ory, and a collection of 200 MHz Pentium Pro servers with 64 MB of memory. These machines were running a NetBSD 1.2 kernel customized to include Odyssey and trace modulation extensions modulation was performed at the client. The bandwidth levels encoded in our modulation traces were chosen with two constraints in mind. First, they must be reasonably achieved on current wireIess hardware. Second, they must provide for interesting tradeoffs when running our sample applications. We chose 120 KBls kilobytes per second and 40 KBls for the high and low bandwidth levels. The protocol round trip time measured on our setup was 21 ms for both bandwidths. 6.2 Experimental Results 6.2.1 How Agile is Odyssey In order to allow applications to makeintelligent tradeoffs between performance and quality, Odyssey must track changes in both the supply of and demand for network bandwidth. Because Odyssey may often be used in weaklyconnected environments, we rely on purely passive observations rather than an active approach such as that suggested by Keshav 17. These observations are logged by our userlevel RPC mechanism 25 which is impkmented on UDP. This mechanism combines a conventional RPC protocol for small exchanges with a slidingwindow, selectiveacknowledgement pro tocol for bulk data transfer. Each distinct endpoint has its own log, and observations for different endpoints are recorded indepen dently. Log entries are of two kinds roundtrip entries that are recorded for smal exchanges, and throughput entries that arise from bulk transfers. Each round trip entry records the time, Trtt, to send a request to a server and receive a response, less server computation time. Each throughput entry records Twin, which is either the time for a receiver to request and receive a windows worth, D. of data, or for a sender to transmit that data and receive an acknowledge ment. Round trip and throughput estimates are both smoothed by the viceroy using the following equation new  cumeasured  1  cuoId 1 Our implementation uses an CY of 0.75 for round trip time, and 0.875 for throughput. To obtain a bandwidth estimate, we observe that the transmis sion time for D bytes is T minus the time for transmitting the acknowledgement or the time to transmit the request. Assuming symmetrical data rates, both of these are Trtt2. This yields the following expression for bandwidth   T,, T, 2 Noise in round trip estimates can severely impact bandwidth es timates to discount anomalous increases in round trip time, we cap the percentage rise possible at each estimate. This has the effect of erring on the side of caution and underestimating bandwidth in certain situations, but eliminates anomalies introduced by our user level implementation. The viceroy collects information from ail logs to estimate the to tal bandwidth available to the client. It then estimates the fraction 281 of this bandwidth likely to be available to each connection. A con nection estimate is composed of hvo parts a competedforpart pro portional to recent use, and a fairshare part reflecting an expected lower bound. Varying Supply To measure agility with respect to bandwidth supply, we ran a synthetic Odyssey application, bitstream, that con sumed data as fast as possible through a streaming warden over a single connection from a server. During data transfer, we varied network bandwidth in accordancewith the reference waveforms of Figure 7. To ensure that the system was in steady state, we primed it for thirty seconds prior to observation. The bandwidth estimated by Odyssey for each waveform is shown in Figure 8. Figure 8a shows that Odyssey demonstrates excellent agility on the StepUp waveform by detecting its bandwidth increase al most instantaneously. The second graph, Figure 8b, shows that agility on the StepDown waveform is not quite as good as on Step Up. The settling time for this waveform  the time required to reach and stay within the nominal bandwidth range  is 2.0 sec onds. The slower downward transition is caused by the fact that we generate a throughput estimate only at the end of a window of data. If bandwidth falls abruptly while a large window of data is being transmitted, the drop is not recorded until the last packet of the window arrives. Figures 8c and 8d show agility for the ImpulseUp and ImpulseDown waveforms. The leading edge of the upward im pulse is accurately traced, but the trailing edge has a noticeable set tling time. The downward impulse is too short for estimation to settle accurately, and there is again a noticeable settling time on the trailing edge of the impulse. Varying Demand We next examine agility with respect to band width demand. We began these experiments with a single bitstream application running on a client. As before, we primed the system for thirty seconds to ensure that it was in steady state before beginning observation. After thirty seconds of observation, we introduced a second, identical bitstream client. To study sensitivity of the re sults to offered load, we repeated the experiments with each appli cation attempting to consume IO, 45, and 100 of the nominal throughput. All experiments were conducted at the higher of our two modulated bandwidths. Figures 9a9c show the viceroys estimation of the bandwidth available to the two competing streams, In all experiments, the sec ond stream causes some transient effects when it is started. This transient is much more pronounced in the two higherload experi ments in the fullutilization case it takes almost 5 seconds to settle back to the nominal value. At low utilization, the second stream reaches its nominal value almost immediately in the other two cases, this takes longer. Higher rates of consumption by the first stream give it more weight compared to the startup of the second stream. Hence the first stream is given more of the competedfor bandwidth until the sec ond stream has established itself. 6.2.2 How Beneficial is Adaptation We next compare the performance and fidelity of adaptive applica tions using Odyssey with versions of these applications using static policies, In this comparison, we represent fidelity as a number be tween zero and one that indicates, in an applicationspecific man ner, the quality of data delivered. In our experiments, each application executed the same workload using an adaptive strategy as well as one fixed strategy per fidelity level. Each execution was repeated for all the reference waveforms. As before, we primed the experiment with a thirty second period of constant bandwidth to eliminate startup transients. o 0 20 40 1 EIaprad thllo , PO. a StepUp Waveform I g ..i S  ,s.7 1 5 m P w B so E f sIy....  w t I 20 I 0 40 ElaDscd thlle t. b StepDown Waveform . . .lSO a  z. r loo i 2 4 J s m 2 f so  .. .. , w P0 c ImpulseUp Waveform B  ,  5 i  I 0100  1. . I.4 T  P,v t  2  I 0 20 40 f Elapsed thlls y d ImpulseDown Waveform This figure shows the agility of bandwidth estimation in the face of varying supply. Each graph merges the results from five trials, and each bandwidth observation is represented by a single dot on tho graph. The dashed lines represent the theoretical bandwidth of the emulated network, as specified by the synthetic traces used for cmu lation. The dotted lines are the measured,instantaneous throughputs obtained using a large bulk transfer between client and server. Idc ally, all samples would lie between the dashed and dotted lines. Figure 8 Supply Estimation Agility 282 p . ho.  1. S.A. E  m  .. 8 50..FS  f  0 40 Elapsed time sy a 10 utilizationstream , 0 i0 LO Elapsed Ume s. b 45 u tiliza tionlstream i150  fwo D m x z50 0 , 20 40 Elapsed time sy c 100 attempted utilizationstream This figure shows the agility of bandwidth estimation note that we measure avaihrbility, not consumption. The upper curve is the total estimated bandwidth the lower is the bandwidth available to the see ond stream, which starts after 30 seconds. The pairs of straight lines show the nominal ranges for each curve a perfectly agile system would always show the upper and lower curves within their respec tive pairs. Each graph depicts the results of five trials. The solid lines show averages, and gray regions show the spread between observed maximum and minimum values. Figure 9 Demand Estimation Agility Video Player We compare the adaptive behavior of the Odyssey video player to three fixed policies always JPEG99, always JPEGSO, and always blackandwhite. The higher bandwidth is sufficient to fetch JPEG99 frames. At the low bandwidth, JPEG50 frames can be fetched without loss. All movie tracks are encoded at ten frames per second, with 600 frames to display during each trial. JPEG99 frames are assigneda fidelity of 1.0, JPEG50 frames have a fidelity of 0.5, and bIackandwhite frames a fidelity of 0.01. The fidelity for a single execution of xanim is the average fidelity of frames displayed. Thus a movie with half of its frames displayed from each of the two best tracks would have a fidelity of 0.75. The performance metric is frames dropped. Xanims adaptation goal is to play the highest quality possible without dropping frames. Other applications might choose, instead, to preserve frame quality but reduce the frame rate. Figure 10 summarizes the results of the xanim benchmark. In both Step waveforms, roughly half the frames displayed by Odyssey are JPEG50 frames, and the other half JPEG99 frames. For ImpulseUp, Odyssey shows only JPEG50 frames, and for ImpulseDown almost all JPEG99 frames. Thus, the adaptive xanim nearly always displays the optimal quality frame. For all waveforms other than ImpulseUp, Odyssey achieves a much better fidelity than JPEG50. with only a modest increase in dropped frames. For all waveforms other than ImpulseDown, Odyssey drops many fewer frames than the JPEG99 strategy by reverting to JPEG50 frames at low bandwidth. For Impulse Down, Odyssey is indistinguishable from the JPEG99 strategy. In the adaptive strategy, dropped frames occur primarily during the downward bandwidth transitions. It takes at least one data trans fer for Odyssey to notice the drop in bandwidth, and that transfer is fetching highquality frames, which are destined to be late. Web Browser For the Web browser experiments, we repeatedly fetched a 22KB image as fast as possible. To preserve experimental control, the image was stored on a Web server on the test network, with a distillation server interposed between the client and the Web server. The cellophane could choose one of four levels of fidelity original quality or JPEG compression at quality levels 50, 25, or 5. The fidelity of each of these levels is 1.0, 0.5, 0.25, and 0.05 respectively. The fidelity for an experiment is the average fidelity of all images fetched in that experiment. The performance metric is the average time to fetch and display an image during an execution. For the baseline against which to compare, we executed the trace on an unmodified, private Ethernet. Our Web clients adaptation goal is to display the best quality image that can be fetched within twice the Ethernet time, in this case 0.4 seconds. With this goal, fullquality images can be fetched at the high bandwidth. At low bandwidth JPEGS0 is the best possible. Figure 11 summarizes the results of the Web benchmark. The static strategy of fetching fullquality images only meets our per formance goals in the ImpulseDown case. This is not surprising, as most of that trace provides sufficient bandwidth for fullquality images. In contrast, Odyssey meets our performance goal in all cases, and does so at better quality than any of the sufficiently fast static strategies. In the ImpulseUp case, Odyssey is fooled into fetching better quality images for a brief period by the impulses transient increase in bandwidth. Speech Recognizer For the speech experiments, we recognized a single, short phrase, repeating the recognition as quickly as possi ble. Since the quality of recognition does not vary, the only inter esting metric is the speed with which recognitions take place. Fig ure 12 gives the recognition times for the three possible strategies always hybrid, always remote, and adaptive. At the bandwidths in our reference traces, hybrid translation is always the correct strategy when speech is the sole application. As Figure 12 shows, Odyssey duplicates the alwayshybrid strategy. We have confirmed, through experiments not reported here, that at higher bandwidths an adaptive strategy has benefits. 6.23 How Important is Centralized Resource Management Finally we examine the usefulness of Odysseys centralized re source management. We do this by comparing Odyssey with two forms of uncoordinated resource management, with all three appli cations concurrently running on the much longer synthetic wave form shown in Figure 13. As a basis of comparison we modified the viceroy to support Zaissezfaire resource management rather than combining infor mation from all logs as in Section 6.2.1, each log is examined in isolation. This reflects what applications would discover on their own information is less accurate than that globally obtained but with similar delays in discovery. 283 I Waveform I BW JPEGS0 JPEG99 Odyssey Fidelity  0.01 Fidelity  0.5 Fidelity  1.0 Drops I Drops 1 Drops 1 Drops Fidelity 0 0.0 1 3 1.8 1 169 0.8 1 7 2.2 0.73 0.01 0 0.0 5 11.2 169 2.4 25 8.9 0.76 0.01 0 0.0 3 0.7 325 4.3 23 7.4 0.50 0.01 0 0.0 0 0.0 12 5.7 14 6.5 0.98 0.01 This table gives the fidelity and number of frames dropped by xanhn under various strategies for each of the four reference waveforms, Note that larger fidelity values represent better quality, while fewer dropped frames indicates better performance. Each observation is the mean of five trials, with standard deviations given in parentheses. Notice that Odyssey achieves fidelity as good as or better than the JPEG50 stmtegy in all cases, but performs as well or better than JPEG99 within experimentalerror. Figure 10 Video Player Performance and Fidelity JPEG5 JPEG25 JPEG50 Full Quality Odyssey Waveform Fidelity  0.05 Fidelity  0.25 Fidelity  0.5 Fidelity  1.0 Time s Time s Time s Time s Time s Fidelity Ethernet    0.20 co.ooj   stepup 0.25 0.01 0.30 0.01 0.29 0.01 0.46 0.01 0.35 0.05 0.78 0.08 StepDown 0.25 0.01 0.30 0.01 0.29 0.01 0.46 0.00 0.35 0.03 0.77 0.04 ImpulseUp 0.27 0.01 0.33 0.01 0.34 0.00 0.71 0.00 0.42 0.06 0.63 0.08 ImpulseDown 0.24 0.01 0.27 0.02 0.29 0.01 0.34 0.01 0.36 0.02 0.99 0.01 This table gives the fidelity and average time for Netscape to fetch and display our test image under various strategies for each of the four refer ence waveforms. Note that larger fidelity numbers represent better quality while smaller times indicate better performance. Each observation is the mean of five trials standard deviations axe. given in parentheses. Notice that Odyssey achieves a better fidelity than JPEGS0 in nll cases and, unlike the fullquality strategy, meets our performancegoal within experimental error for all cases. Figure 11 Web Browser Performance and Fidelity I I Recognition Trme sec. I Always I Always I Waveform 1 Hybdd 1 Reme 1 Odyssey StepUp 1 0.80 0.00 1 0.91 o.00 I 0.80 0.00 This table gives the average time, in seconds, for a recognition by the speech application for each of the two static strategies as well as the adaptive strategy for each of the four reference waveforms. Each observation is the mean of five trials. Standard deviations are shown in parentheses. Note that Odyssey correctly reproduces the always hybrid case, which is optimal at our reference bandwidth levels. Figure 12 Speech Recognizer Performance 7llrLr 111 4 This ISminutesynthetic trace models the bandwidth variation seen by a user walking through a hypotheticalan setting. Each number indicates the time duration of the correspondingsegmentin minutes. The high and low bandwidths are as indicated in Section 6.1.3. The user begins wellconnected but soon enters aregion of intermittent quality. She then enters the radio shadow caused by a large building, and finally returns to good connectivity. Figure 13 Bandwidth Variation in Urban Scenario One could also imagine the networking layer of an opemt ing system immediately notifying applications when switching be tween nehvorking technologies. We have implemented this stmt egy, which we call blindoptimism, by passingthe theoretical band width to the viceroy at each transition via an upcall. The viceroy then notifies any interested applications. This informadon is less accurate becauseit does not reflect the impact of any other nppltcn tions, but is delivered without the delay of bandwidth discovery, Figure 14presents the results of this experiment. The fidelity and performance metrics as well as the application goals for this expcr iment are the same as in Section 6.2.2. The messageof Figure 14 is that Odysseys centralized resource estimation provides significant benefits over both laissezfaire and blindoptimism. By correctly accounting for bandwidth competition, the Odyssey Web browser and video player fetch data at lower fidelity, thus enabling all appll cations to come much closer to their performance goals. Odyssey drops a factor of 2 to 5 fewer frames than the other strategies, and Web pages are loaded and displayed roughly twice as fast, The rc sultingdecreasein network utilization improves speech recognition time as well. 7 Related Work To the best of our knowledge, Odyssey is the first system to simul taneously address the problems of adaptation for mobility, applica tion diversity, and application concurrency. It is the first effort to propose and implement an architecture for applicationaware adap tation that pays careful attention to the needs of mobile computing, The identification of agility as a key attribute for mobile systems, and the first approach to evaluating it, have both occurred in the context of Odyssey. At the same time, Odyssey has benefited considembly from much 284 This table demonstrates the benefit of Odysseys centraked resource managementby comparing it to two implementations of uncoordinated resource management. The fidelity and performance metrics for this experiment am the same as in Figures 1012. Notice that by degrading the fidelity of fetched video and web data, Odyssey comes closer to each application performance goals by factors of 25. Such a tradeoff is made possible by Odysseys more accurate estimation of bandwidth available to each application. Each observation in this table is the mean of five trials, with standard deviations given in parentheses. Figure 14 Performance and Fidelity of Concurrent Applications previous work. A substantial debt is owed to Coda, which first demonstrated that client resources could be effectively used to insu late users and applications from the vagaries of mobile information access. The strategy of trading lowered consistency for improved availability was shown to be effective and usable by Coda and re lated systems such as Ficus and Bayou. It was the recognition that consistency represented a particular dimension of the broader con cept of fidelity that led to the design of Odyssey. Many aspects of the Odyssey prototype, such as its implementation in user space and its use of a logbased mechanism for monitoring network quality, were based on positive experience with similar strategies in Coda. Many systems together served as a backdrop to our thinking on fidelity the Rover toolkit mobile Web software such as Mobi saic 40 and W4 2 software embodying concepts such as dy namic documents 14 and distillation 7 commercial email pack ages such as Eudora and numerous PDAs and pocket organiz ers. Examination of these systems also helped us identify an es sential missing ingredient in all of their designs effective man agement of scarce resources across multiple applications. These systems, in conjunction with Coda, helped us formulate our tax onomy of adaptation strategies  laissezfaire, applicationaware, and applicationtransparent. The issues of resource reservation and guarantees lie at the heart of realtime systems 24, and have become important in high per formance networking 8 J. These communities have recently applied reservation techniques, with two changes, to mobile clients 20,27. First, rather than reserving a particular quantity of a resource, they reserve a range the underlying system transparently adapts within the range. Second, if the range is exceeded or the client moves, a renegotiation involving some or all of the endtoend path is initi ated. In contrast to these systems, Odyssey abandons the reservation model entirely either the reserved bounds would be so wide as to degenerate to applicationtransparent adaptation, or costly renegoti ations on behalf of a mobile host would be too frequent. Framed as an endtoend consideration,ultimate responsibility for coping with changesin resourcelevels resides with applications. Odysseys role is only to improve efficiency, agility and fairness by insulating ap plications from insignificant variations in resource levels, and by providing a focal point for resource monitoring and allocation. Recent adaptive systems, such as McCannes FM 22 and In ouyes video player 12, employ feedbackdriven adaptation rather than Odysseys measurementbased approach. Such systems scale back quality, and hence resource consumption, when application performance is poor, and they attempt to discover additional re sources by optimistically scaling up usage. Using application specific feedback relieves such systems of the need to calibrate to individual resources, but this feedback is perapplication. As this paper has shown, this kind of laissezfaire approach does not pm vide for application concurrency, even though it works well for in dividual applications. Further, attempts to increase resource usage amount to active rather than passive resource monitoring, a ques tionable strategy when bandwidth is scarce. Finally, the installation of pieces of code at low levels of the sys tem to encapsulatespecializedknowledge about different data types is a common practice in databases IO. The primary purpose of such code is to improve disk management. The use of wardens in Odysseyresembles this practice, but differs in that wardens support multiple fidelity levels. 8 Future Work We see many short, medium, and longterm tasks ahead of us. The prototype improvements already alluded to will constitute our shortterm tasks. Specifically, we intend to incorporate adaptation for objects other than images in the Web application of Section 5.2. We also plan to add support for multiple levels of fidelity in the speechapplication of Section 5.3. In the medium term, we plan to enhance the prototype and gain experience with it in real use. First, we will broaden support for resource management to the fbll range of resources in Figure 3c, and correspondingly expand the scope of our evaluation. This will enable Odyssey to support a broader class of applications, making it attractive as a platform for serious use. We then expect to deploy Odyssey to a small user community, and to gain empirical feedback to complement our evaluation through controlled experiments. Our longterm plans are more speculative. Currently, we expect to work in three broad areas l The speech application of Section 5.3 suggests the importance of being able to dynamically decide whether to ship data or computation. This capability is currently provided in an ad hoc manner by the speech warden. Extending Odyssey to pro vide full support for deciding between dynamicfunction or data shipping would enable us to more thoroughly explore this tradeoff in mobile computing. l Search of distributed repositories performs poorly when mo bile because it lacks the temporal locality needed for caching to be effective in compensating for poor bandwidth. We plan to explore a solution that uses dynamic sets 35, 361 in con junction with support for dynamic function versus data ship ping. l The design of adaptive mobile systems is currently a black art. Developing systematic principles for their design, as well as techniques for analyzing their agility and stability before they are built. would be valuable. 285 9 Conchsion The need for adaptation in mobile information access is now widely accepted. In this paper, we put forth the view that applicationaware adaptation offers the most general and effective approach to ad dressing this need. The essence of our approach is a collaborative partnership between applications and the system, with a clear sepa ration of concerns. We argue that previous approaches to adaptation represent limiting cases of this general approach. The Odyssey architecture supports applicationaware adaptation while paying careful attention to a variety of practical considera tions. Our prototype confirms the feasibility of realizing this archi tecture, and its ability to support a wide range of applications. Our evaluation identifies agility as a key enabling attribute of an adap tive system, describes how to measure it, and reports on the agility of the Odyssey prototype. The evaluation confirms that the pro totype does a good job of balancing performance and fidelity, and confirms the importance of centralized resource management. At the same time, it suggests avenues for further improvement. Over all, Odyssey promises to be a versatile and effective platform for further research in mobile computing. Acknowledgements  Markus Baur and Jie Yang helped us considerably in understand ing and using Janus. Our use of xanim was made possible by Mark Podlipec. Bob Baron provided valuable assistance with NetBSD on innumerable occasions. Geoff Kuenning, David Maltz, Lily Mum mert, Wayne Sawdon, and our SOSP shepherd, Jeff Mogul, pro vided insightful comments that substantially improved this paper. Finally, the careful and detailed feedback from our anonymous re viewers led to significant improvements in content and presentation. References 111 PI 31 141 PI 161 71 Apple Computer Inc., Cupertino, CA. Newton Message Pad Handbook, 1993. J. F. Bartlett. W4  The Wireless World Wide Web. In Pro ceedingsof the IEEE Workshop on Mobile Computing Systems and Applications, Santa Cmz, CA, December 1994. B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. Fiuczyn ski, D. Becker, C.tChambers, and S. Eggers. Extensibility, Safety and Performance in the SPIN Operating System. In Proceedings of the I5th ACM Symposium on Operating Sys tem Principles, Copper Mountain, CO, December 1995. R. C. Dorf, editor. The Electrical Engineering Handbook, chapter 93 Control Systems. CRC Press, 1993. D. Duchamp. Issues in Wireless Mobile Computing. In Pro ceedings of the Third IEEE Workshop on Workstation Operat ing Systems, Key Biscayne, FL, April 1992. D. R. Engler, M. F. Kaashoek, and J. OToole Jr. Exokemek An Operating System Architecture for ApplicationLevel Re source Management. In Proceedingsof the 15th ACM Sympo sium on Operating System Principles, Copper Mountain, CO, December 1995. A. Fox, S. D. Grlbble, E. A. Brewer, and E. Amir. Adapting to Network and Client Variability via OnDemand Dynamic Dis tillation. In Proceedings of the Seventh International ACM Conference on Architectural Support for Programming Lan guages and Operating Systems, Cambridge, MA, October 1996. a PI r101 ill WI 1131 P41 WI WI 1171 1181 WI tw PU WI 31 WI L. Georgiadis, R. Guerin, V. Petis, and R. Rajan. Efficient Support of Delay and Rate Guarantees in an Internet. In Pro ceedings of the ACM SIGCOMM96 Conference, Stanford, CA, August 1996. D. K. Gifford, P. Jouvelot, M. A. Sheldon, and J. W, OToole Jr. Semantic File Systems. In Proceedings of the 13th ACM Symposium on Operating System Principles, 199 1, J. Gray and A. Reuter. Transaction Processing Concepts and Techniques. Morgan Kaufmann, 1993. Apple Computer Inc. Inside Macintosh Quicktime. Addison Wesley Publishing Co., Reading, MA, 1993. J. Inouye, S. Cen, C. Pu, and J. Walpole. System Support for Mobile Multimedia Applications. In Proceedings of the 7th International Workshop on Network and Operating Systems Supportfor Digital Audio and video, St. Louis, MO, May 1997. A. D. Joseph, A. F. delespinasse, J. A. Tauber, D, K. Gifford, and M. F. Kaashoek. Rover. A Toolkit for Mobile Information Access. In Proceedings of the I5th ACM Symposium on Op erating System Principles, Copper Mountain, CO, December 1995. M. F. Kaashoek,T. Pinckney, and J. A. Ihuber. Dynamic Doc uments Mobile Wireless Access to the WWW. In Proceed ings of the IEEE Workshop on Mobile Computing Systems and Applications, Santa Cruz, CA, December 1994. R. H. Katz. Adaptation and Mobility in Wireless Information Systems. IEEE Personal Communications, ll, 1996, R. H. Katz and E. A. Brewer. The Case for Wireless Ovcrlny Networks. In SPIE Multimedia and Netlvorking Conference, January 1996. S. Keshav. PacketPair Flow Control. To appear in IEEEACM Transactions on Networking. J. J. Kistler and M. Satyanarayanan. Disconnected Opemtion in the Coda File System. ACM Transactions on Computer Systems, 10l, Febmary 1992. S.R. Kleiman. Vnodes An Architecture for Multiple File Sys tem Types in Sun UNIX. In Summer Usenljr Conference Pro ceedings, 1986. S. Lu, K.W. Lee, and V. Bharghavan. Adaptive Service in Mobile Computing Environments. In FijU IFIP International Workshop on Quality of Service, New York, NY, May 1997. A. Luotonen and K. Altis. WorldWide Web Proxies. Com puter Networks and ISDN Systems, 27, September 1994. S. McCanne, V. Jacobsen, and M. Vetterli. Receiverdriven LayeredMulticast. In ProceedingsoftheACMSIGCOMM96 Conference,Stanford, CA, August 1996. M. K. McKusick, K. Bostic, M. J. Karels, and J. S. Quarter man. The Design and Implementation of the 4.4BSD Operat ing System. Addison Wesley, 1996. C. W. Mercer, S. Savage, and H. Tokuda. Processor Capacity Reserves for Multimedia Operating Systems. In Proceedings of the IEEE International Conference on Multimedia Cornput. ing and Systems, May 1994. 286 25 L. B. Mummert. Exploiting Weak Connectivity in a Dis tributed File System. PhD thesis, Carnegie Mellon University, School of Computer Science, 1996. CMUCS96195. 1421 G. K. Wallace. TheJPEG Still Picture Compression Standard. Communications ofthe ACM, 344, April 1991. 26 B. D. Noble, M. Satyanarayanan, G. T. Nguyen, and R. H. Katz. TraceBased Mobile Network Emulation. In Pro ceedings of ACM SIGCOMM97 Conference, Cannes, France, September 1997. 27 S. Pope and P. Webster. QoS Support for Mobile Computing. In Fh IFIP International Workshop on Quality of Service, New York, NY, May 1997. 28 G. J. Popek, R. G. Guy, T. W. Page, and J. S. Heidemann. Replication in Ficus Distributed File Systems. In Proceedings of the IEEE Workshop on Management of Replicated Data, Houston, TX, November 1990. 29 Qualcomm Inc., San Diego, CA. Eudora Macintosh User Manual, 1993. 30 0. Rubin. The Design of Automatic Control Systems. Artech House, Norwood, MA, 1986. 31 M. Satyanarayanan. Mobile Information Access. IEEE Per sonal Communications, 3l, February 1996. 32 M. Satyanarayanan, J. J. Kistler, P. Kumar, M. E. Okasaki, E. H. Siegel, and D. C. Steere. Coda A Highly Available File System for a Distributed Workstation Environment. IEEE Transactions on Computers, 394, April 1990. 33 M. Satyanarayanan and B. Noble. The Role of Trace Modula tion in Building Mobile Computing Systems. In Proceedings of the Sixth IEEE Workshop on Hot Topics in Operating Sys tems, Chatham, MA, May 1997. 34 A. Smailagic and D. R Siewiorek. Modalities of Interaction with CMU Wearable Computers. IEEE Personal Communi cations, 3l, February 1996. 35 D. C. Steere. Exploiting NonDeterminism in Set Iterators to Reduce IO Latency. In Proceedings of the 16th ACM Sym posium on Operating System Principles, Saint Malo, France, October 1997. 36 D. C. Steere. Using Dynamic Sets to Reduce the Aggregate Latency of Data Access. PhD thesis, Carnegie Mellon Univer sity, School of Computer Science, 1997. CMUCS96194. 37 D. L. Tennenhouse, T. Turletti, and V. G. Bose. The Spec trumWare Testbed for ATMbased Software Radios. In IEEE International Conferenceon Universal PersonalCommunica tions, September 1996. 38 D. B. Terry, M. M. Theimer, K. Petersen, and A. J. Demers. Managing Update Conflicts in Bayou, a Weakly Connected Replicated Storage System. In Proceedings of the Ih ACM Symposium on Operating System Principles, Copper Moun tain, CO, December 199.5. 39 U.S. Robotics, Inc., Los Altos, CA. Pilot Handbook, 1996. Part Number 4230001. 40 G. M. Voelker and B. N. Bershad. Mobisaic An Informa tion System for a Mobile Wireless Computing Environment. In Proceedings of the IEEE Workshop on Mobile Computing Systems andApplications, Santa Cruz, CA, December 1994. 41 A. Waibel. Interactive Translation of Conversational Speech. IEEE Computer, 297, July 1996. 287
