Introducing Tweet-a-Program—Wolfram Blog WolframAlpha.com WolframCloud.com All Sites & Public Resources... Products & Services Mathematica Mathematica Online Development Platform Programming Lab Data Science Platform Finance Platform SystemModeler Enterprise Private Cloud Enterprise Mathematica Wolfram|Alpha Appliance Enterprise Solutions Corporate Consulting Technical Services Wolfram|Alpha Business Solutions Products for Education Wolfram|Alpha Wolfram|Alpha Pro Problem Generator API Data Drop Mobile Apps Wolfram Cloud App Wolfram|Alpha for Mobile Wolfram|Alpha-Powered Apps Services Paid Project Support Training Summer Programs All Products & Services » Technologies Wolfram Language Revolutionary knowledge-based programming language. Wolfram Cloud Central infrastructure for Wolfram's cloud products & services. Wolfram Science Technology-enabling science of the computational universe. Computable Document Format Computation-powered interactive documents. Wolfram Engine Software engine implementing the Wolfram Language. Wolfram Natural Language Understanding System Knowledge-based broadly deployed natural language. Wolfram Data Framework Semantic framework for real-world data. Wolfram Universal Deployment System Instant deployment across cloud, desktop, mobile, and more. Wolfram Knowledgebase Curated computable knowledge powering Wolfram|Alpha. All Technologies » Solutions Engineering, R&D Aerospace & Defense Chemical Engineering Control Systems Electrical Engineering Image Processing Industrial Engineering Mechanical Engineering Operations Research More... Education All Solutions for Education Web & Software Authoring & Publishing Interface Development Software Engineering Web Development Finance, Statistics & Business Analysis Actuarial Sciences Bioinformatics Data Science Econometrics Financial Risk Management Statistics More... Sciences Astronomy Biology Chemistry More... Trends Internet of Things High-Performance Computing Hackathons All Solutions » Support & Learning Learning Wolfram Language Documentation Fast Introduction for Programmers Training Videos & Screencasts   Wolfram Language Introductory Book Virtual Workshops Summer Programs Books Need Help? Support FAQ Wolfram Community Contact Support Premium Support Premier Service Technical Services All Support & Learning » Company About Company Background Wolfram Blog Announcements Events Contact Us Work with Us Careers at Wolfram Internships Other Wolfram Language Jobs Initiatives Wolfram Foundation MathWorld Computer-Based Math A New Kind of Science Wolfram Technology for Hackathons Student Ambassador Program   Wolfram for Startups Demonstrations Project Wolfram Innovator Awards Wolfram + Raspberry Pi Summer Programs More... All Company » Search Introducing Tweet-a-Program September 18, 2014 — Stephen Wolfram In the Wolfram Language a little code can go a long way. And to use that fact to let everyone have some fun, today we’re introducing Tweet-a-Program . Compose a tweet-length Wolfram Language program, and tweet it to @WolframTaP . Our Twitter bot will run your program in the Wolfram Cloud and tweet back the result. One can do a lot with Wolfram Language programs that fit in a tweet. Like here’s a 78-character program that generates a color cube made of spheres: It’s easy to make interesting patterns: Here’s a 44-character program that seems to express itself like an executable poem: Going even shorter, here’s a little “fractal hack”, in just 36 characters: Putting in some math makes it easy to get all sorts of elaborate structures and patterns: You don’t have to make pictures. Here, for instance, are the first 1000 digits of π, sized according to their magnitudes (notice that run of 9s!): The Wolfram Language not only knows how to compute π, as well as a zillion other algorithms ; it also has a huge amount of built-in knowledge about the real world. So right in the language, you can talk about movies or countries or chemicals or whatever. And here’s a 78-character program that makes a collage of the flags of Europe, sized according to country population: We can make this even shorter if we use some free-form natural language in the program. In a typical Wolfram notebook interface, you do this using , but in Tweet-a-Program, you can do it just using =[...]: The Wolfram Language knows a lot about geography . Here’s a program that makes a “powers of 10” sequence of disks, centered on the Eiffel Tower: There are many, many kinds of real-world knowledge built into the Wolfram Language, including some pretty obscure ones. Here’s a map of all the shipwrecks it knows in the Atlantic: The Wolfram Language deals with images too. Here’s a program that gets images of the planets , then randomly scrambles their colors to give them a more exotic look: Here’s an image of me, repeatedly edge-detected: Or, for something more “pop culture” (and ready for image analysis etc.), here’s an array of random movie posters: The Wolfram Language does really well with words and text too. Like here’s a program that generates an “infographic” showing the relative frequencies of first letters for words in English and in Spanish: And here—just fitting in a tweet—is a program that computes a smoothed estimate of the frequencies of “Alice” and “Queen” going through the text of Alice in Wonderland : Networks are good fodder for Tweet-a-Program too. Like here’s a program that generates a sequence of networks: And here—just below the tweet length limit—is a program that generates a random cloud of polyhedra: What’s the shortest “interesting program” in the Wolfram Language? In some languages, it might be a “quine”—a program that outputs its own code. But in the Wolfram Language, quines are completely trivial. Since everything is symbolic, all it takes to make a quine is a single character: Using the built-in knowledge in the Wolfram Language, you can make some very short programs with interesting output. Like here’s a 15-character program that generates an image from built-in data about knots : Some short programs are very easy to understand: It’s fun to make short “mystery” programs. What’s this one doing? Or this one ? Or, much more challengingly , this one: I’ve actually spent many years of my life studying short programs and what they do—and building up a whole science of the computational universe , described in my big book A New Kind of Science . It all started more than three decades ago—with a computer experiment that I can now do with just a single tweet: My all-time favorite discovery is tweetable too: If you go out searching in the computational universe, it’s easy to find all sorts of amazing things: An ultimate question is whether somewhere out there in the computational universe there is a program that represents our whole physical universe. And is that program short enough to be tweetable in the Wolfram Language? But regardless of this, we already know that the Wolfram Language lets us write amazing tweetable programs about an incredible diversity of things. It’s taken more than a quarter of a century to build the huge tower of knowledge and automation that’s now in the Wolfram Language. But this richness is what makes it possible to express so much in the space of a tweet. In the past, only ordinary human languages were rich enough to be meaningfully used for tweeting. But what’s exciting now is that it seems like the Wolfram Language has passed a kind of threshold of general expressiveness that lets it, too, be meaningfully tweetable. For like ordinary human languages, it can talk about all sorts of things, and represent all sorts of ideas. But there’s also something else about it: unlike ordinary human languages, everything in it always has a precisely defined meaning—and what you write is not just readable, but also runnable. Tweets in an ordinary human language are (presumably) intended to have some effect on the mind of whoever reads them. But the effect may be different on different minds, and it’s usually hard to know exactly what it is. But tweets in the Wolfram Language have a well-defined effect—which you see when they’re run. It’s interesting to compare the Wolfram Language to ordinary human languages. An ordinary language, like English, has a few tens of thousands of reasonably common “built-in” words, excluding proper names etc. The Wolfram Language has about 5000 built-in named objects , excluding constructs like entities specified by proper names. And one thing that’s important about the Wolfram Language—that it shares with ordinary human languages—is that it’s not only writable by humans, but also readable by them. There’s vocabulary to acquire, and there are a few principles to learn —but it doesn’t take long before, as a human, one can start to understand typical Wolfram Language programs. Sometimes it’s fairly easy to give at least a rough translation (or “explanation”) of a Wolfram Language program in ordinary human language. But it’s very common for a Wolfram Language program to express something that’s quite difficult to communicate—at least at all succinctly—in ordinary human language. And inevitably this means that there are things that are easy to think about in the Wolfram Language, but difficult to think about in ordinary human language. Just like with an ordinary language, there are language arts for the Wolfram Language. There’s reading and comprehension. And there’s writing and composition. Always with lots of ways to express something, but now with a precise notion of correctness, as well as all sorts of measures like speed of execution. And like with ordinary human language, there’s also the matter of elegance. One can look at both meaning and presentation. And one can think of distilling the essence of things to create a kind of “code poetry”. When I first came up with Tweet-a-Program it seemed mostly like a neat hack. But what I’ve realized is that it’s actually a window into a new kind of expression—and a form of communication that humans and computers can share. Of course, it’s also intended to be fun. And certainly for me there’s great satisfaction in creating a tiny, elegant gem of a program that produces something amazing. And now I’m excited to see what everyone will do with it. What kinds of things will be created? What popular “code postcards” will there be? Who will be inspired to code? What puzzles will be posed and solved? What competitions will be defined and won? And what great code artists and code poets will emerge? Now that we have tweetable programs, let’s go find what’s possible… To develop and test programs for Tweet-a-Program , you can log in free to the Wolfram Programming Cloud , or use any other Wolfram Language system , on the desktop or in the cloud. Check out some details here . Posted in: Wolfram Language
