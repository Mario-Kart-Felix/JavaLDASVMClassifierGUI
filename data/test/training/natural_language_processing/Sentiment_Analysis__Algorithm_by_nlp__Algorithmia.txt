Sentiment Analysis - Algorithm by nlp - Algorithmia Toggle navigation Algorithms requests Algorithms Docs More App Developers Getting Started Browse Use Cases Explore Algorithms Pricing Algorithm Developers Algorithm Developer Program Explore Bounties Not a Developer? Find a Partner Create a Bounty Enterprise CODEX Sign Up Sign In × Sign In Forgot password? Sign In Sentiment Analysis nlp /SentimentAnalysis Determine positive or negative sentiment from text Version 1.0.3 Royalty-free APL · Internet Access · Calls Other Algorithms View Source stars followers API calls Description Pricing Permissions No algorithm description given Table of Contents Introduction Examples Credits Introduction Identify and extract sentiment in given string. Sentiment analysis (also known as opinion mining) refers to the use of natural language processing, text analysis and computational linguistics  to identify  and extract subjective information in  source materials . This algorithm takes an input string and assigns a sentiment rating in the range [-1 t0 1] (very negative to very positive). Input: (Required):  JSON Object with the key "document", which contains a sentence or paragraph. (for batch, send as a list of objects). Note: sending a bare string instead of a JSON Object is deprecated from a previous version, and may yield unexpected results Output: Sentiment value between -1 and 1 (very negative to very positive) Examples Example 1. Parameter 1: Positive sentence. {&#10; "document": "I really like eating ice cream in the morning!"&#10;} Output: [&#10; {&#10; "sentiment": 0.474,&#10; "document": "I really like eating ice cream in the morning!"&#10; }&#10;] Example 2. Parameter 1: Negative sentece. {&#10; "document": "I really hate you, you are the worst!"&#10;} Output: [&#10; {&#10; "sentiment": -0.855,&#10; "document": "I really hate you, you are the worst!"&#10; }&#10;] Example 3. Parameter 1: Batch of sentences. [&#10; {&#10; "document": "I really hate you, you are the worst!"&#10; },&#10; {&#10; "document": "I really like eating ice cream in the morning!"&#10; }&#10;] Output: [&#10; {&#10; "sentiment": -0.855,&#10; "document": "I really hate you, you are the worst!"&#10; },&#10; {&#10; "sentiment": 0.474,&#10; "document": "I really like eating ice cream in the morning!"&#10; }&#10;] Credits For more information, please refer to  http://nlp.stanford.edu/software/corenlp.shtml  or Manning, Christopher D., Surdeanu, Mihai, Bauer, John, Finkel, Jenny, Bethard, Steven J., and McClosky, David. 2014.  The Stanford CoreNLP Natural Language Processing Toolkit . In  Proceedings of 52nd Annual Meeting of the Association for Computational Linguistics: System Demonstrations , pp. 55-60.  For more information, please refer to  http://www.socialai.gatech.edu/  or Hutto, C.J. & Gilbert, E.E. (2014).  VADER: A Parsimonious Rule-based Model for Sentiment Analysis of Social Media Text .  Eighth International Conference on Weblogs and Social Media (ICWSM-14). Ann Arbor, MI, June 2014.   Tags (no tags) × Cancel Add Tag Cost Breakdown 0 cr royalty per call 1 cr usage per second avg duration This algorithm has permission to call other algorithms which may incur separate royalty and usage costs. Cost Calculator API call duration (sec) × API calls = Estimated cost per calls Contact Us for large volume discounts For additional details on how pricing works, see Algorithmia pricing . Internet access This algorithm has Internet access. This is necessary for algorithms that rely on external services, however it also implies that this algorithm is able to send your input data outside of the Algorithmia platform. Calls other algorithms This algorithm has permission to call other algorithms. This allows an algorithm to compose sophisticated functionality using other algorithms as building blocks, however it also carries the potential of incurring additional royalty and usage costs from any algorithm that it calls. To understand more about how algorithm permissions work, see the permissions documentation . 1. Type your input Signup for free to run 2. See the result Running algorithm... 3. Use this algorithm cURL CLI Go Java JavaScript NodeJS Python R Ruby Rust Scala Swift curl -X POST -d '{{input | formatInput:"curl"}}' -H 'Content-Type: application/json' -H 'Authorization: Simple YOUR_API_KEY' https://api.algorithmia.com/v1/algo/nlp/SentimentAnalysis/1.0.3 View cURL Docs algo auth # Enter API Key: YOUR_API_KEY algo run algo://nlp/SentimentAnalysis/1.0.3 -d '{{input | formatInput:"cli"}}' View CLI Docs import ( algorithmia "github.com/algorithmiaio/algorithmia-go" ) input := {{input | formatInput:"go"}} var client = algorithmia.NewClient("YOUR_API_KEY", "") algo, _ := client.Algo("algo://nlp/SentimentAnalysis/1.0.3") resp, _ := algo.Pipe(input) response := resp.(*algorithmia.AlgoResponse) fmt.Println(response.Result) View Go Docs import com.algorithmia.*; import com.algorithmia.algo.*; String input = "{{input | formatInput:"java"}}"; AlgorithmiaClient client = Algorithmia.client("YOUR_API_KEY"); Algorithm algo = client.algo("algo://nlp/SentimentAnalysis/1.0.3"); AlgoResponse result = algo.pipeJson(input); System.out.println(result.asJsonString()); View Java Docs import com.algorithmia._ import com.algorithmia.algo._ val input = {{input | formatInput:"scala"}} val client = Algorithmia.client("YOUR_API_KEY") val algo = client.algo("algo://nlp/SentimentAnalysis/1.0.3") val result = algo.pipeJson(input) System.out.println(result.asJsonString) View Scala Docs var input = {{input | formatInput:"javascript"}}; Algorithmia.client("YOUR_API_KEY") .algo("algo://nlp/SentimentAnalysis/1.0.3") .pipe(input) .then(function(output) { console.log(output); }); View Javascript Docs var input = {{input | formatInput:"javascript"}}; Algorithmia.client("YOUR_API_KEY") .algo("algo://nlp/SentimentAnalysis/1.0.3") .pipe(input) .then(function(response) { console.log(response.get()); }); View NodeJS Docs import Algorithmia input = {{input | formatInput:"python"}} client = Algorithmia.client('YOUR_API_KEY') algo = client.algo('nlp/SentimentAnalysis/1.0.3') print algo.pipe(input) View Python Docs library(algorithmia) input <- {{input | formatInput:"r"}} client <- getAlgorithmiaClient("YOUR_API_KEY") algo <- client$algo("nlp/SentimentAnalysis/1.0.3") result <- algo$pipe(input)$result print(result) View R Docs require 'algorithmia' input = {{input | formatInput:"ruby"}} client = Algorithmia.client('YOUR_API_KEY') algo = client.algo('nlp/SentimentAnalysis/1.0.3') puts algo.pipe(input).result View Ruby Docs use algorithmia::*; let input = {{input | formatInput:"rust"}}; let client = Algorithmia::client("YOUR_API_KEY"); let algo = client.algo("nlp/SentimentAnalysis/1.0.3"); let response = algo.pipe(input); View Rust Docs import Algorithmia let input = "{{input | formatInput:"swift"}}"; let client = Algorithmia.client(simpleKey: "YOUR_API_KEY") let algo = client.algo(algoUri: "nlp/SentimentAnalysis/1.0.3") { resp, error in print(resp) } View Swift Docs Discussion Algorithmia 2017 About Terms Pricing Privacy Press Partners Blog Jobs Contact
