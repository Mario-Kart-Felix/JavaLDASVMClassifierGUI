BOINC A System for PublicResource Computing and StorageDavid P. AndersonSpace Sciences LaboratoryUniversity of California at Berkeleydaveassl.berkeley.eduAbstractBOINC Berkeley Open Infrastructure for Network Computing is a software system that makes it easy for scientiststo create and operate publicresource computing projects.It supports diverse applications, including those with largestorage or communication requirements. PC owners canparticipate in multiple BOINC projects, and can specifyhow their resources are allocated among these projects. Wedescribe the goals of BOINC, the design issues that we confronted, and our solutions to these problems.1 PublicResource ComputingThe worlds computing power and disk space is nolonger primarily concentrated in supercomputer centers andmachine rooms. Instead it is distributed in hundreds of millions of personal computers and game consoles belongingto the general public. Publicresource computing alsoknown as Global Computing or Peertopeer computing uses these resources to do scientific supercomputing. Thisparadigm enables previously infeasible research. It also encourages public awareness of current scientific research, itcatalyzes global communities centered around scientific interests, and it gives the public a measure of control over thedirections of scientific progress.Publicresource computing emerged in the mid1990swith two projects, GIMPS and Distributed.net. In 1999, ourgroup launched SETIhome 1, which has attracted millions of participants worldwide. SETIhome now runs onabout 1 million computers, providing a sustained processingrate of over 70 TeraFLOPS in contrast, the largest conventional supercomputer, the NEC Earth Simulator, providesabout 35 TeraFLOPs.The potential resource is much larger. The number ofInternetconnected PCs is growing rapidly, and is projectedto reach 1 billion by 2015. Together, these PCs could provide many PetaFLOPs of computing power. The publicresource approach applies to storage as well as computing.If 100 million computer users each provide 10 Gigabytes ofstorage, the total one Exabyte, or 1018 bytes would exceedthe capacity of any centralized storage system.In spite of this resource, and an abundance of promising applications, relatively few largescale publicresourceprojects have emerged. This is due in part to the lack of appropriate middleware client and server software, management tools, usercentered web features, and so on. Someopensource systems have been developed, such as Cosm,jxta, and XtremWeb 4, but these systems provide only partof the necessary functionality. Commercial systems such asEntropia 2 and United Devices are more fullfeatured butnot free.1.1 Contrast with Grid computingPublicresource computing and Grid computingshare the goal of better utilizing existing computing resources. However, there are profound differences betweenthe two paradigms, and it is unlikely that current Grid middleware 5 will be suitable for publicresource computing.Grid computing involves organizationallyowned resources supercomputers, clusters, and PCs owned by universities, research labs, and companies. These resources arecentrally managed by IT professionals, are powered on mostof the time, and are connected by fulltime, highbandwidthnetwork links. There is a symmetric relationship betweenorganizations each one can either provide or use resources.Malicious behavior such as intentional falsification of results would be handled outside the system, e.g. by firing theperpetrator.In contrast, public resource computing involves anasymmetric relationship between projects and participants.Projects are typically small academic research groups withlimited computer expertise and manpower. Most participants are individuals who own Windows, Macintosh andLinux PCs, connected to the Internet by telephone or cablemodems or DSL, and often behind networkaddress translators NATs or firewalls. The computers are frequentlyturned off or disconnected from the Internet. Participantsare not computer experts, and participate in a project onlyif they are interested in it and receive incentives such ascredit and screensaver graphics. Projects have no controlover participants, and cannot prevent malicious behavior.Accordingly there are different requirements on middleware for public resource computing than for Grid computing. For example, BOINCs features such as redundant computing, cheatresistant accounting, and support foruserconfigurable application graphics are not necessary ina Grid system in fact, most of the features described in theremainder of this paper apply primarily to publicresourcecomputing.Conversely, Grid computing has many requirements thatpublicresource computing does not. A Grid architecture must accommodate many existing commercial andresearchoriented academic systems, and must provide ageneral mechanism for resource discovery and access. Infact, it must address all the issues of dynamic heterogeneousdistributed systems, an active area of Computer Science research for several decades. This has led to architecture suchas Open Grid Services Architecture 7, which achieve generality at the price of complexity and, to some extent, performance.2 BOINCBOINC Berkeley Open Infrastructure for NetworkComputing is an platform for publicresource distributedcomputing. BOINC is being developed at U.C. BerkeleySpaces Sciences Laboratory by the group that developedand continues to operate SETIhome. BOINC is opensource and is available at httpboinc.berkeley.edu.2.1 Goals of BOINCBOINCs general goal is to advance the public resource computing paradigm to encourage the creation ofmany projects, and to encourage a large fraction of theworlds computer owners to participate in one or moreprojects. Specific goals includeReduce the barriers of entry to publicresource computing. BOINC allows a research scientist with moderatecomputer skills to create and operate a large publicresourcecomputing project with about a week of initial work and anhour per week of maintenance. The server for a BOINCbased project can consist of a single machine configuredwith common opensource software Linux, Apache, PHP,MySQL, Python.Share resources among autonomous projects.BOINCbased projects are autonomous. Projects are notcentrally authorized or registered. Each project operatesits own servers and stands completely on its own. Nevertheless, PC owners can seamlessly participate in multipleprojects, and can assign to each project a resource sharedetermining how scarce resource such as CPU and diskspace are divided among projects. If most participantsregister with multiple projects, then overall resource utilization is improved while one project is closed for repairs,other projects temporarily inherit its computing power. Ona particular computer, the CPU might work for one projectwhile the network is transferring files for another.Support diverse applications. BOINC accommodatesa wide range of applications it provides flexible and scalable mechanism for distributing data, and its scheduling algorithms intelligently match requirements with resources.Existing applications in common languages C, C, FORTRAN can run as BOINC applications with little or nomodification. An application can consist of several filese.g. multiple programs and a coordinating script. Newversions of applications can be deployed with no participantinvolvement.Reward participants. Publicresource computingprojects must provide incentives in order to attract andretain participants. The primary incentive for many participants is credit a numeric measure of how much computation they have contributed. BOINC provides a creditaccounting system that reflects usage of multiple resourcetypes CPU, network, disk, is common across multipleprojects, and is highly resistant to cheating attempts togain undeserved credit. BOINC also makes it easy forprojects to add visualization graphics to their applications,which can provide screensaver graphics.2.2 Projects using BOINCA number of publicresource computing projectsare using BOINC. The requirements of these projects haveshaped the design of BOINC.SETIhome, a continuation of the originalSETIhome project 1, performs digital signal processing of radio telescope data from the Arecibo radioobservatory. A BOINCbased version of this projecthas been developed, and we are currently shifting theexisting SETIhome user base over 500,000 activeparticipants to the BOINCbased version. The BOINCbased SETIhome will use client disks to archive data,eliminating the need for its central tape archive.Predictorhome 11 This project, based at TheScripps Research Institute, studies protein behavior usingCHARMM, a FORTRAN program for macromolecular dynamics and mechanics. It is operational within Scripps, andis being readied for a public launch.Foldinghome 10. This project is based at StanfordUniversity. It studies protein folding, misfolding, aggregation, and related diseases. It uses novel computational methods and distributed computing to simulate time scales thousands to millions of times longer than previously achieved.A BOINCbased project has been implemented and is beingtested.Climateprediction.net 14. The aim of this projectbased at Oxford University is to quantify and reduce theuncertainties in longterm climate prediction based on computer simulations. This is accomplished by running largenumbers of simulations with varying forcing scenarios initial and boundary conditions, including natural and manmade components and internal model parameters. The Climateprediction.net application a millionline FORTRANprogram produces a 2 GB detailed output file for each50year simulation run which takes about 3 PCmonths.These output files need to be uploaded and examined in asmall fraction of cases  for example, when the smaller summary output file indicates a possible bug in the model.Climatehome. This project is a collaboration ofresearchers at NCAR, MIT, UCAR, Rutgers, LawrenceBerkeley Lab, and U.C. Berkeley. Its scientific goals aresimilar to those of Climateprediction.net, but it will be usingthe NCAR Community Climate System Model CCSM.It will collaborate with Climateprediction.net to maximizecompatibility and minimize redundant effort, and to enablea systematic comparison of different climate models.CERN projects. CERN in Geneva, Switzerland is deploying a BOINCbased project on 1,000 inhouse PCs, andplans to launch the project publicly in coordination with its50th anniversary in October 2004. The projects current application is a FORTRAN program that simulates the behavior of the LHC Large Hadron Collider as a function of theparameters of individual superconducting magnets. CERNresearchers are investigating other applications.Einsteinhome. This project involves researchers fromUniversity of Wisconsin, U.C. Berkeley, California Institute of Technology, LIGO Hanford Observatory, Universityof Glasgow, and the Albert Einstein Institute. Its purpose isto detect certain types of gravitational waves, such as thosefrom spinning neutron stars, that can be detected only byusing highly selective filtering techniques that require extreme computing power. It will analyze data from the LaserInterferometry Gravitational Observatory LIGO and theBritishGerman GEO6000 gravitational wave detector.UCBIntel study of Internet resources. This project,a collaboration between researchers at the U.C. BerkeleyComputer Sciences Department and the Intel Berkeley Research Laboratory, seeks to study the structure and performance of the consumer Internet, together with the performance, dependability and usage characteristics of homePCs, in an effort to understand what resources are available for peertopeer services. This project need to performactions at specific times of day, or in certain time ranges.While performing these actions other BOINC applicationsmust be suspended. The BOINC API supports these requirements.2.3 Overview of the BOINC implementationA BOINC project corresponds to an organization or research group that does publicresource computing. It isidentified by a single master URL, which is the home pageof its web site and also serves as a directory of schedulingservers. Participants register with projects. A project can involve one or more applications, and the set of applicationscan change over time.The server complex of a BOINC project is centeredaround a relational database that stores descriptions of applications, platforms, versions, workunits, results, accounts,teams, and so on. Server functions are performed by a setof web services and daemon processes Scheduling servershandles RPCs from clients it issues work and handles reports of completed results. Data servers handles file uploads using a certificatebased mechanism to ensure thatonly legitimate files, with prescribed size limits, can be uploaded. File downloads are handled by plain HTTP.BOINC provides tools Python scripts and C interfaces for creating, starting, stopping and querying projectsadding new applications, platforms, and application versions, creating workunits, and monitoring server performance. BOINC is designed to be used by scientists, notsystem programmers or IT professionals the tools are simple and welldocumented, and a fullfeatured project can becreated in a few hours.Participants join a BOINCbased project by visiting theprojects web site, filling out a registration form, and downloading the BOINC client. The client can operate in severalmodes as a screensaver that shows the graphics of runningapplications as a Windows service, which runs even whenno users are logged in and logs errors to a database as anapplication that provides a tabular view of projects, work,file transfers, and disk usage, and as a UNIX commandlineprogram that communicates through stdin, stdout and stderr,and can be run from a cron job or startup file.BOINC provides tools that let participants remotely install the client software on large numbers of machines, andattach the client to accounts on multiple projects.3 Design issues and solutions3.1 Describing computation and dataBOINC uses a simple but rich set of abstractions forfiles, applications, and data. A project defines applicationversions for various platforms Windows, Linuxx86, MacOSX, etc.. An application can consist of an arbitrary setof files.A workunit represents the inputs to a computation theapplication but not a particular version a set of referencesinput files, and sets of commandline arguments and environment variables. Each workunit has parameters suchas compute, memory and storage requirements and a softdeadline for completion. A result represents the result of acomputation it consists of a reference to a workunit and alist of references to output files.Files associated with application versions, workunits, orresults have projectwide unique names and are immutable.Files can be replicated the description of a file includes alist of URLs from which it may be downloaded or uploaded.Files can have associated attributes indicating, for example,that they should remain resident on a host after their initialuse, that they must be validated with a digital signature, orthat they must be compressed before network transfer.When the BOINC client communicates with a scheduling server it reports completed work, and receives an XMLdocument describing a collection of the above entities. Theclient then downloads and uploads files and runs applications it maximizes concurrency, using multiple CPUs whenpossible and overlapping communication and computation.BOINCs computational system also provides a distributed storage facility of computational inputs or results, or of data not related to distributed computation asa byproduct. This storage facility is much different frompeertopeer storage systems such as Gnutella, PAST 13and Oceanstore 9. In these systems, files can be createdby any peer, and there is no central database of file locations. This leads to a set of technical problems e.g. namingand file location that are not present in the BOINC facility.3.2 Redundant computingPublicresource computing projects must deal with erroneous computational results. These results arise from malfunctioning computers typically induced by overclockingand occasionally from malicious participants.BOINC provides support for redundant computing, amechanism for identifying and rejecting erroneous results.A project can specify that N results should be created foreach workunit. Once M  N of these have been distributedand completed, an applicationspecific function is called tocompare the results and possibly select a canonical result.If no consensus is found, or if results fail, BOINC createsnew results for the workunit, and continues this processuntil either a maximum result count or a timeout limit isreached.Malicious participants can potentially game the systemby obtaining large numbers of results and detecting groupsof results that comprise a quorum. BOINC makes this difficult by a workdistribution policy that sends only at mostone result of a given workunit to a given user. Projects canalso limit the total number of results sent to a given host perday.BOINC implements redundant computing using severalserver daemon processes The transitioner implements the redundant computing logic it generates new results as needed and identifies error conditions. The validater examines sets of results and selectscanonical results. It includes an applicationspecificresultcomparison function. The assimilater handles newlyfound canonical results. Includes an applicationspecific function whichtypically parses the result and inserts it into a sciencedatabase. The file deleter deletes input and output files from dataservers when they are no longer needed.In this architecture servers and daemons can run on different hosts and can be replicated, so BOINC servers arescalable. Availability is enhanced because some daemonscan run even while parts of the project are down for example, the scheduler server and transitioner can operate evenif the science database is down.Some numerical applications produce different outcomes for a given workunit depending on the machine architecture, operating system, compiler, and compiler flags.In such cases it may be difficult to distinguish between results that are correct but differ because of numerical variation, and results that are erroneous. BOINC provides afeature called homogeneous redundancy for such applications. When this feature is enabled, the BOINC schedulersend results for a given workunit only to hosts with the sameoperation system name and CPU vendor. In this case, strictequality can be used to compare results. BOINC is compatible with other schemes for ensuring result correctness8.3.3 Failure and backoffPublicresource computing projects may have millionsof participants and a relatively modest server complex. Ifall the participants simultaneously try to connect to theserver, a disastrous overload condition will generally develop. BOINC has a number of mechanisms to prevent this.All clientserver communication uses exponential backoffin the case of failure. Thus, if a BOINC server comes up after an extended outage, its connection rate will be the longterm average.The exponential backoff scheme is extended to computational errors as well. If, for some reason, an applicationfails immediately on a given host, the BOINC client will notrepeatedly contact the server instead, it will delay based onthe number of failures.3.4 Participant preferencesComputer owners generally participate in distributedcomputing projects only if they incur no significant inconvenience, cost, or risk by doing so. BOINC lets participants control how and when their resources are used.Using these controls, called general preferences, participants specify the hysteresis limits of work buffering on machines which determines the frequency of network activity whether BOINC can do work while mousekeyboardinput is active during what hours can BOINC do work howmuch disk space can BOINC use how much network bandwidth can BOINC use and so on. These preferences areedited via a web interface, and are propagated to all hostsattached to the account. Participants can create separate setsof preferences for computers at home, work, and school.Some nonobvious controls are important to certainclasses of participants. For example, DSL service insome countries has monthly transfer limits typically a fewhundred MB. BOINC provides a preference for upload,download and combined transfer limits over arbitrary periods. Some BOINCbased applications perform computations that are so floatingpoint intensive that they cause CPUchips to overheat. BOINC allows users to specify a duty cycle for such applications on a given CPU.3.5 Credit and accountingBOINC provides an accounting system in which there isa single unit of credit, a weighted combination of computation, storage, and network transfer. This can be metered in various ways. By default, the BOINC client runsbenchmarks on each CPU, and a results claimed creditis based on this benchmark and elapsed CPU time. Creditcheating is made difficult using the redundancy mechanism described above Each result claims a certain amountof credit, but is granted only the average or minimum thepolicy is projectspecificed of the claimed credit of correctresults.Our experience with SETIhome has shown that participants are highly motivated by credit, and are particularlyinterested in their ranking relative to other users. This information is typically displayed on webbased leaderboardsshowing the ranking of participants or teams of participants.There are many ways in which leaderboards can be subdivided, filtered, ordered, and displayed. For example, aleaderboard might show only participants from a particular country, or only those using a single PC and it mightrank entities by total or recent average credit. Rather thansupply all these views, BOINC provides a mechanism thatexports creditrelated data at the level of participant, team,and host in XML files that can be downloaded and processed by credit statistics sites operated by third parties.Several of these currently exist.As part of the accounting system, BOINC providesa crossproject identification mechanism that allows accounts on different projects with the same email address toidentified, in a way that doesnt allow email addresses to beinferred. This mechanism allows leaderboard sites to display credit statistics summed over multiple BOINCbasedprojects.Participants demand immediate gratification they wantto see their credit totals increase at least daily. Thusprojects with long workunits such as the climate prediction projects need to grant credit incrementally as theworkunit is being processed. BOINC offers a trickle messages mechanism, providing bidirectional, asynchronous,reliable, ordered messages, piggybacked onto the regularclientserver RPC traffic. This can be used to convey creditor to report a summary of computational state in the lattercase, reply messages can abort wayward computations.Some projects use nonCPU computational resources.For example, SETIhome is working with NVIDIA tomake a version of its application that can do a major portionof the signal processing on an NVIDIA graphics coprocessor chip. This imposes several requirements on BOINC. Tomaximize resource usage, the local scheduler must run suchapplications concurrently with CPUintensive applications.The BOINC API allows applications to report computationin units of FLOPs, for example to the core client, sincecomputation can no longer be measured in terms of benchmarks and CPU times. The BOINC API also allows applications to describe the specific architectural features e.g.the presence of a GPU, and its model number so that thisinformation can be stored in the database and made available for debugging and resource analysis.3.6 User community featuresBOINC provides participantoriented web sites featuressuch as The ability to form teams. The ability to create and browse user profiles including text and images. Message boards, including a dynamic FAQ systemthat encourages participants to answer each othersquestions. These facilities are integrated with the accounting system credit and seniority provide a formof reputation system 12.These features are important in attracting and retainingparticipants, and in providing a customer support mechanism that consumes little project resources.3.7 Handling large numbers of platformsAlthough the bulk of public computing resources use theWindowsIntel platform, there are many other platforms,far more than can easily be accessed by a typical project.BOINC provides a flexible and novel framework for distributing application executables. Normally, these are compiled and distributed by the project itself, for a given set ofplatforms those accessible to the project. This mechanismis fine for most participants, but its inadequate for some,such as Participants who, for security reasons, want to only runexecutables they have compiled themselves. Participants whose computers have platforms not supported by the project. Participants who want to optimize applications for particular architectures.To meet these needs BOINC provides an anonymousplatform mechanism, usable with projects that make theirapplication source code available. Participants can download and compile the application source code or obtain executables from a thirdparty source and, via an XML configuration file, inform the BOINC client of these application versions. Then, when the client communicates withthat projects server, it indicates that its platform is anonymous and supplies a list of available application versionsthe server supplies workunits but not application versionsaccordingly.3.8 Graphics and screensaver behaviorThe BOINC client software appears monolithic to participants but actually consists of several components The core client performs network communicationwith scheduling and data servers, executes and monitors applications, and enforces preferences. It is implemented as a hierarchy of interacting finitestate machines, can manage unlimited concurrency of networktransfers and computations, and is highly portable. A client GUI provides a spreadsheettype view of theprojects to which the host is attached, the work andfile transfers in progress, and the disk usage. It alsoprovides an interface for operations such as joining andquitting projects. It communicates with the core clientvia XMLRPC over a local TCP connection. An API, linked with application executables, that interacts with the core client to report CPU usage andfraction done, to handle requests to provide graphics,and to provide heartbeat functionality. A screensaver program implemented within theplatformspecific screensaver framework which,when activated, instructs the core client to providescreensaver graphics. The core client generallydelegates graphics this to a running graphicscapableapplication if there is none, it generates graphicsitself.BOINC also provides a framework for project preferences, specific to individual projects this can be used, forexample, to control the appearance of visualization graphics.3.9 Local schedulingThe BOINC core client, in its decisions of when to getwork and from what project, and what tasks to execute at agiven point, implements a local scheduling policy. Thispolicy has several goals To maximize resource usage i.e. to keep all processorsbusy To satisfy result deadlines To respect the participants resource share allocationamong projects To maintain a minimal variety among projects. Thisgoal stems from user perception in the presence of longworkunits. Participants will become bored or confusedif they have registered for several projects and see onlyone project running for several months.The core client implements a scheduling policy, based ona dynamic resource debt to each project, that is guided bythese goals.4 ConclusionWe have described the publicresource computingparadigm, contrasted it with Grid computing, and presented the design of a software system, BOINC, that facilitates it. BOINC is being used by several existingprojects SETIhome, Predictorhome, climateprediction.net and by several other projects in development.Many areas of the BOINC design are incomplete. Forexample, some projects require efficient data replicationEinsteinhome uses large 40 MB input files, and a giveninput file may be sent to a large number of hosts in contrast with projects like SETIhome, where each input fileis different. In its initial form, Einsteinhome will simply send the files separately to each host, using a system ofreplicated data servers. Eventually we plan to use a mechanism such as BitTorrent 3 for efficiently replicating filesusing peertopeer communication.We are studying policies and mechanisms for dealingwith scarceresource situations i.e., when disks become fulldue to expanding BOINC or nonBOINC disk usage, orwhen user preferences change. These mechanisms mustenforce the participants resource shares. They must deletefiles in a rational order based on resource share, replication level, projectspecified priority, and so on. We are alsostudying the issue of multiple disks BOINC now uses storage only on the disk or filesystem on which it is installed.This mechanism must allow user to specify preferences forwhether and how alternate disks are used, and it must dealwith situations where hosts share networkattached storage.References1 D. P. Anderson, J. Cobb, E. Korpela, M. Lebofsky, andD. Werthimer. SETIhome An experiment in publicresource computing. Communications of the ACM,Nov. 2002, Vol. 45 No. 11, pp. 5661.2 A. Chien, B. Calder, S. Elbert, K. Bhatia. Entropiaarchitecture and performance of an enterprise desktopgrid system. Journal of Parallel and Distributed Computing 63, 5. P. 597610, May 20033 B. Cohen. Incentives Build Robustness in BitTorrent,Workshop on Economics of P2P systems. June 2003.4 Gilles Fedak, Cecile Germain, Vincent Neri, FranckCappello. XtremWeb A Generic Global Computing Platform. IEEEACM  CCGRID2001 SpecialSession Global Computing on Personal Devices, May2001, IEEE press5 I. Foster and C, Kesselman. Globus A metacomputing infrastructure toolkit. Intl Supercomputer Applications, 112, p. 115128, 1997.6 I. Foster and A. Iamnitchi. Death, Taxes, and theConvergence of PeertoPeer and Grid Computing. In2nd International Workshop on PeertoPeer SystemsIPTPS 03, Feb. 2003.7 I. Foster, C. Kesselman, J.M. Nick and S. Tuecke. GridServices for Distributed Systems Integration, IEEEComputer, 35 6. 2002.8 C. Germain. Result Checking in Global ComputingSystems. ACM Int. Conf. on Supercomputing ICS03. 2003. P. 226233.9 J. Kubiatowicz, D. Bindel, Y. Chen, P. Eaton, D. Geels,R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer,C. Wells, B. Zhao. Oceanstore An Architecture forGlobalscale Persistent Storage. Proceedings of CAMASPLOS, November 2000.10 V. Pande et al., Atomistic Protein Folding Simulations on the Submillisecond Time Scale Using Worldwide Distributed Computing. Biopolymers, Vol. 68.2003. P. 91109.11 Predictorhome httppredictor.scripps.edu12 Paul Resnick, Ko Kuwabara, Richard Zeckhauser,Eric Friedman. Reputation systems, Communications of the ACM, v.43 n.12, p.4548, Dec. 200013 A. Rowstron and P. Druschel. Storage managementand caching in PAST, a largescale persistent peertopeer storage facility. Symposium on Operating SystemPrinciples. P. 188201. 2001.14 D. Stainforth et al., Climateprediction.net DesignPrinciples for PublicResource Modeling Research,Proceedings of the 14th IASTED International Conference on Parallel and Distributed Computing Systems.2002.
