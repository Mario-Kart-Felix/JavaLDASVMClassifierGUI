The Globus Project A Status ReportIan Foster Carl KesselmanMathematics and Computer Science Division Information Sciences InstituteArgonne National Laboratory University of Southern CaliforniaArgonne, IL 60439 Marina Del Rey, CA 902926695AbstractThe Globus project is a multiinstitutional researcheffort that seeks to enable the construction of computational grids providing pervasive, dependable, andconsistent access to highperformance computationalresources, despite geographical distribution of both resources and users. Computational grid technologyis being viewed as a critical element of future highperformance computing environments that will enableentirely new classes of computationoriented applications, much as the World Wide Web fostered the development of new classes of informationoriented applications. In this paper, we report on the status ofthe Globus project as of early 1998. We describe theprogress that has been achieved to date in the development of the Globus toolkit, a set of core servicesfor constructing grid tools and applications. We alsodiscuss the Globus Ubiquitous Supercomputing TestbedGUSTO that we have constructed to enable largescale evaluation of Globus technologies, and we reviewearly experiences with the development of largescalegrid applications on the GUSTO testbed.1 IntroductionAdvances in networking technology and computational infrastructure make it possible to constructlargescale highperformance distributed computingenvironments, or computational grids that provide dependable, consistent, and pervasive access to highendcomputational resources. These environments havethe potential to change fundamentally the way wethink about computing, as our ability to compute willno longer be limited to the resources we currentlyhave on hand. For example, the ability to integrateTFLOPs computing resources on demand will allowus to integrate sophisticated analysis, image processing, and realtime control into scientific instrumentssuch as microscopes, telescopes, and MRI machines.Or, we can call upon the resources of a nationwidestrategic computing reserve to perform timecriticalcomputational tasks in times of crisis, for example toperform diverse simulations as we plan responses toan oil spill.In the past, highperformance distributed computation has been achieved on a limited scale by heroicefforts such as the CASA Gigabit testbed 26 and theIWAY 12. The work of ourselves and others on computational grids differs from these groundbreaking efforts in that we seek to make commonplace the integration of remote resources into a computation. To alarge extent, the development of usable computationalgrids is hindered not by available hardware capabilities but by limitations in the software abstractionsand services that are currently in use. Existing network tools are focused on supporting communication,not computation, while current distributed computing systems are not performance driven and typicallyare limited to clientserver models of computation.Clearly, the success of computational grids will dependon the existence of gridspecific middleware that addresses the needs of computations including dynamicresource allocation, resource coallocation, heterogeneous and dynamic computational and communication substrates, and processoriented security.We have been studying the problems associatedwith constructing usable computational grids since1995, first in the context of the IWAY networkingexperiment 12 and subsequently as part of a projectcalled Globus. The goal of Globus is to understandapplication requirements for a usable grid and to develop the essential technologies required to meet theserequirements. In pursuit of this goal, we have developed a research program comprising three broad activities developing the basic technology and highleveltools required for computational grids constructing a largescale, prototype computational grid i.e., testbed using the basic technologies and tools we have developed and executing realistic applications on the prototypegrid, in order to evaluate the utility of our technologies and of the grid concept.In this paper, we describe the status of the Globusproject in each of these three areas, as of early1998. This description updates the original Globus paper 13 and a subsequent project summary in 14 byproviding a more complete and uptodate descriptionof the Globus toolkit and by reviewing early experiments with the Globus Ubiquitous SupercomputingTestbed GUSTO grid prototype, the largest computational grid constructed to date.The organization of this paper is as follows. In thenext section, we outline the basic architecture of theGlobus system, identifying the basic principles thatmotivate its design. In Sections 37, we describe theset of basic services that constitute the Globus toolkitthat underlies our approach, and in Section 8 we review some of the higherlevel tools that have been constructed with this toolkit. In Section 9, we describeour experiences deploying these tools in the GUSTOgrid testbed, and in Section 10 we review our experiences developing applications. We conclude the paperwith a brief survey of some related work Section 11and a description of our future plans Section 12.2 Globus OverviewA central element of the Globus system is theGlobus Metacomputing Toolkit, which defines the basic services and capabilities required to construct acomputational grid. The design of this toolkit wasguided by the following basic principles.The toolkit comprises a set of components that implement basic services for security, resource location,resource management, communication, etc.. The services currently defined by Globus are listed in Table 1.Computational grids must support a wide variety ofapplications and programming models. Hence, ratherthan providing a uniform programming model, suchas the objectoriented model defined by the Legionsystem 18, the Globus toolkit provides a bag of services from which developers of specific tools or applications can select to meet their needs.Because services are distinct and have welldefinedinterfaces, they can be incorporated into applicationsor tools in an incremental fashion. We illustrate thismixandmatch approach to metacomputing in Sections 8 and 10, where we describe how different paralleltools and a large application can be made grid awareby incorporating different services.The toolkit distinguishes between local services,which are kept simple to facilitate deployment, andglobal services, which are constructed on top of local services and may be more complex. Computational grids require that a wide range of services besupported on a highly heterogeneous mix of systemsand that it be possible to define new services without changing the underlying infrastructure. An established architectural principle in such situations, as exemplified by the Internet Protocol suite 6, is to adopta layered architecture with an hourglass shape Figure 1. A simple, welldefined interfacethe neck ofthe hourglassprovides uniform access to diverse implementations of local services higherlevel global services are then defined in terms of this interface. Toparticipate in a grid, a local site need provide only theservices defined at the neck, and new global servicescan be added without local changes. We discuss thisorganization in greater detail in Section 3.Interfaces are defined so as to manage heterogeneity, rather than hiding it. These socalled translucentinterfaces provide structured mechanisms by whichtools and applications can discover and control aspects of the underlying system. Such translucencycan have significant performance advantages because,if an implementation of a higherlevel service can understand characteristics of the lowerlevel services onwhich the interface is layered, then the higherlevelservice can either control specific behaviors of the underlying service or adapt its own behavior to that ofthe underlying service. Translucent interfaces do notimply complex interfaces. Indeed, we will show thattranslucency can be provided via simple techniques,such as adding an attribute argument to the interface.We discuss these issues at greater length in Section 4,when we describe Globus communication services.An information service is an integral component ofthe toolkit. Computational grids are in a constantstate of flux as utilization and availability of resourceschange, computers and networks fail, old componentsare retired, new systems are added, and software andhardware on existing systems are updated and modified. It is rarely feasible for programmers to rely onstandard or default configurations when building applications. Rather, applications must discover characteristics of their execution environment dynamicallyand then either configure aspects of system and application behavior for efficient, robust execution oradapt behavior during program execution. A fundamental requirement for discovery, configuration, andadaptation is an informationrich environment thatprovides pervasive and uniform access to informationabout the current state of the grid and its underlying components. In the Globus toolkit, a componentTable 1 Core Globus services. As of early 1998, these include only those services deemed essential for an evaluationof the Globus design philosophy on realistic applications and in mediumscale grid environments. Other servicessuch as accounting, auditing, and instrumentation will be addressed in future workService Name DescriptionResource management GRAM Resource allocation and process managementCommunication Nexus Unicast and multicast communication servicesSecurity GSI Authentication and related security servicesInformation MDS Distributed access to structure and state informationHealth and status HBM Monitoring of health and status of system componentsRemote data access GASS Remote access to data via sequential and parallel interfacesExecutable management GEM Construction, caching, and location of executablesInternetProtocolEthernet    FDDI    . . .  ATM     SONETTCP    FTP    HTTP  VICVAT     . . .GRAMProtocolNexusProtocolCondor    LSF    NQE  LoadLeveler   EASYLLIP    MessagepassingSharedmemory    ATMResource brokersResource coallocatorsMPI    CC    HPCPAWS    CORBA     . . .Figure 1 The hourglass principle, as applied in the Internet Protocol suite, Globus resource management services,and Globus communication servicescalled the Metacomputing Directory Service 9, discussed in Section 5, fulfills this role.The toolkit uses standards whenever possible forboth interfaces and implementations. We envisioncomputational grids as supporting an important nicheof applications that must coexist with more generalpurpose distributed and networked computing applications such as CORBA, DCE, DCOM, and Webbased technologies. The Internet community andother groups are moving rapidly to develop official andde facto standards for interfaces, protocols, and services in many areas relevant to computational grids.There is considerable value in adopting these standards whenever they do not interfere with other goals.Consequently, the Globus components we will describeare not, in general, meant to replace existing interfaces, but rather seek to augment them. The utility ofstandards is emphasized in Section 6, which describesthe Globus security infrastructure.3 Resource ManagementWe now dexcribe more fully the Globus components listed in Table 1. We start by considering resource management. Both this discussion and the current Globus implementation focus on the managementof computational resources. Management of memory,storage, networks, and other resources is clearly alsoimportant and is being considered in current research.Globus is a layered architecture in which highlevelglobal services are built on top of an essential set ofcore local services. At the bottom of this layered architecture, the Globus Resource Allocation ManagerGRAM provides the local component for resourcemanagement 8. Each GRAM is responsible for a setof resources operating under the same sitespecific allocation policy, often implemented by a local resourcemanagement system, such as Load Sharing FacilityLSF or Condor. For example, a single manager couldprovide access to the nodes of a parallel computer,a cluster of workstations, or a set of machines operating within a Condor pool 25. Thus, a computational grid built with Globus typically contains manyGRAMs, each responsible for a particular local setof resources.GRAM provides a standard networkenabled interface to local resource management systems. Hence,computational grid tools and applications can expressresource allocation and process management requestsin terms of a standard application programming interface API, while individual sites are not constrainedin their choice of resource management tools. GRAMcan currently operate in conjunction with six differentlocal resource management tools Network QueuingEnvironment NQE, EASYLL, LSF, LoadLeveler,Condor, and a simple fork daemon. Within theGRAM API, resource requests are expressed in termsof an extensible resource specification language RSLas we describe below, this language plays a critical rolein the definition of global services.GRAM services provide building blocks from whichwe can construct a range of global resource management strategies. Building on GRAM, we have definedthe general resource management architecture 8 illustrated in Figure 2. RSL is used throughout thisarchitecture as a common notation for expressing resource requirements. Resource requirements are expressed by an application in terms of a highlevel RSLexpression. A variety of resource brokers implementdomainspecific resource discovery and selection policies by transforming abstract RSL expressions intoprogressively more specific requirements until a specific set of resources is identified. For example, an application might specify a computational requirementin terms of floatingpoint performance MFLOPs. Ahighlevel broker might narrow this requirement to aspecific type of computer an IBM SP2, for example,while another broker might identify a specific set ofSP2 computers that can fulfill that request. At thispoint, we have a socalled ground RSL expression inwhich a specific set of GRAMs are identified.The final step in the resource allocation process isto decompose the RSL into a set of separate resourceallocation requests and to dispatch each request tothe appropriate GRAM. In highperformance computations, it is often important to coallocate resourcesat this point, ensuring that a given set of resourcesis available for use simultaneously. Within Globus, aresource coallocator is responsible for providing thisservice breaking the RSL into pieces, distributing itto the GRAMs, and coordinating the return values.Different coallocators can be constructed to implement different approaches to the problems of allocating and managing ensembles of resources. We currently have two allocation services implemented. Thefirst defines a simple atomic coallocation semantics.If any of the requested resources are unavailable forsome reason, the entire coallocation request fails. Inpractice, this strategy has proven to be too inflexiblein many situations. Based on this experience, we haveimplemented a second coallocator, which allows components of the submitted RSL expression to be modified until the application or broker issues a commitoperation.Notice that a consequence of the Globus resourcemanagement architecture is that resource and comGRAM GRAM GRAMLSF EASYLL NQEApplicationRSLSimple ground RSLInformationServiceLocalresourcemanagersRSLspecializationBrokerGroundRSLCoallocatorQueries InfoFigure 2 The Globus resource management architecture, showing how RSL specifications pass between application, resource brokers, resource coallocators, and local managers GRAMs. Notice the central role of theinformation service.putation management services are implemented in ahierarchical fashion. An individual GRAM supportsthe creation and management of a set of processes, orGlobus job, on a set of local resources. A computationcreated by a global service may then consist of one ormore jobs, each created by a request to a GRAM andmanaged via management functions implemented bythat GRAM.This discussion of Globus resource management services illustrates how simple local services, if appropriately designed, can be used to support a rich set ofglobal functionality.4 CommunicationCommunication services within the Globus toolkitare provided by the Nexus communication library 15.As illustrated in Figure 1, Nexus defines a relativelylowlevel communication API that is then used to support a wide range of higherlevel communication libraries and languages, based on programming models as diverse as message passing, as in the MessagePassing Interface MPI 10 remote procedure call,as in CC 5 striped transfer, as in the Parallel Application Workspace PAWS and distributeddatabase updates for collaborative environments, asin CAVERNsoft. Nexus communication services arealso used extensively in the implementation of otherGlobus modules.The communication needs of computational gridapplications are diverse, ranging from pointtopointmessage passing to unreliable multicast communication. Many applications, such as instrument controland teleimmersion, use several modes of communication simultaneously. In our view, the Internet Protocol does not meet these needs its overheads are high,particularly on specialized platforms such as parallelcomputers the TCP streaming model is not appropriate for many interactions and its interface provides little control over lowlevel behavior. Yet traditional highperformance computing communicationinterfaces such as MPI do not provide the rich rangeof communication abstractions that grid applicationswill require. Hence, we define an alternative communication interface designed to support the wide variety ofunderlying communication protocols and methods encountered in grid environments and to provide higherlevel tools with a high degree of control over the mapping between highlevel communication requests andunderlying protocol operations. We call this interfaceNexus 15, 11.Communication in Nexus is defined in terms of twobasic abstractions. A communication link is formed bybinding a communication startpoint to a communication endpoint Figure 4 a communication operationis initiated by applying a remote service request RSRto a startpoint. This onesided, asynchronous remoteprocedure call transfers data from the startpoint to theassociated endpoints and then integrates the datainto the processes containing the endpoints by invoking a function in the processes. More than onestartpoint can be bound to an endpoint and vice versa,I want to run adistributed interactivesimulation involving100,000 entitiesI want to performa parameter studyinvolving 10,000separate trialsI want to create ashared virtual spacewith participants X,Y, and ZDISspecificbrokerParameter studyspecific brokerCollaborativeenvironmentspecificresource brokerSupercomputersproviding 100 Gflops,100 GB,  100 mseclatency80 nodes on Argonne SP,256 nodes on CIT Exemplar,300 nodes on NCSA O2000Supercomputerresource brokerArgonneresourcemanagerCITresourcemanagerNCSAresourcemanager . . .Simultaneousstartcoallocator . . .InformationserviceRun SFExpresson 80 nodes Run SFExpresson 300 nodesRun SFExpresson 256 nodesFigure 3 This view of the Globus resource management architecture shows how different types of broker canparticipate in a single resource requestallowing for the construction of complex communication structures.The communication linkRSR communicationmodel can be mapped into many different communication methods, each with potentially different performance characteristics 11. Communication methodsinclude not only communication protocols, but alsoother aspects of communication such as security, reliability, quality of service, and compression. By associating attributes with a specific startpoint or endpoint,an application can control the communication methodused on a perlink basis. For example, an applicationin which some communications must be reliable whileothers require low latencies can establish two links between two processes, with one configured for reliableand potentially highlatencycommunication and theother for lowlatency unreliable communication.Highlevel selection and configuration of lowlevelmethods is useful only if the information required tomake intelligent decisions is readily available. WithinGlobus, MDS discussed in Section 5 maintains awealth of dynamic information about underlying communication networks and protocols, including networkconnectivity, protocols supported, and network bandwidth and latency. Applications, tools, and higherlevel libraries can use this information to identify available methods and select those best suited for a particular purpose.Highlevel management of lowlevel communicationmethods has many uses. For example, an MPI implementation layered on top of Nexus primitives can notonly select alternative lowlevel protocols e.g., message passing, IP, or shared memory based on networktopology and the location of sender and receiver 10,but can simultaneously apply selective use of encryption based on the source and destination of a message.The ability to attach network quality of service specifications to communication links is also useful.Nexus illustrates how Globus services use translucent interfaces to allow applications to manage ratherthan hide heterogeneity. An application or higherlevel library can express all operations in terms ofa single uniform API the resulting programs areportable across, and will execute efficiently on, a widevariety of computing platforms and networks. To thisextent Nexus, like other Globus services, hides heterogeneity. However, in situations where performanceis critical, properties of lowlevel services can be discovered. The higherlevel library or application canthen either adapt its behavior appropriately or use acontrol API to manage just how highlevel behavior isimplemented for example, by specifying that it is acSPSPSPEP0 1 2EPFigure 4 Nexus communication mechanisms. The figure shows three processes and three communication links.Three startpoints in process 1 reference endpoints in processes 0 and 2.ceptable to use an unreliable communication protocolfor a particular set of communications.5 InformationThe dynamic nature of grid environments meansthat toolkit components, programming tools, and applications must be able to adapt their behavior in response to changes in system structure and state. TheGlobus Metacomputing Directory Service MDS 9is designed to support this type of adaptation by providing an informationrich environment in which information about system components is always available. MDS stores and makes accessible informationsuch as the architecture type, operating system version and amount of memory on a computer, networkbandwidth and latency, available communication protocols, and the mapping between IP addresses andnetwork technology.MDS provides a suite of tools and APIs for discovering, publishing, and accessing information aboutthe structure and state of a computational grid. Asin other Globus components, official or de facto standards are used in MDS whenever possible. In this case,the standards in question are the data representationand API defined by the Lightweight Directory AccessProtocol LDAP 22, which together provide a uniform, extensible representation for information aboutgrid components. LDAP defines a hierarchical, treestructured name space called a directory informationtree and is designed as a distributed service arbitrary subtrees can be associated with distinct servers.Hence, the local service required to support MDS is exactly an LDAP server or a gateway to another LDAPserver, if multiple sites share a server, plus the utilities used to populate this server with uptodate information about the structure and state of the resourceswithin that site. The global MDS service is simply theensemble of all these servers.An informationrich environment is more than justmechanisms for naming and disseminating information it also requires agents that produce useful information and components that access and use thatinformation. Within Globus, both these roles are distributed over every system componentand potentially over every application. Every Globus serviceis responsible for producing information that users ofthat service may find useful, and for using informationto enhance its flexibility and performance. For example, each local resource manager Section 3 incorporates a component called the GRAM reporter responsible for collecting and publishing information aboutthe type of resources being managed, their availability, and so forth. Resource brokers use this and otherinformation for resource discovery.6 SecuritySecurity in computational grids is a multifaceted issue, encompassing authentication, authorization, privacy, and other concerns. While the basic cryptographic algorithms that form the basis of most security systemssuch as public key cryptographyarerelatively simple, it is a challenging task to use thesealgorithms to meet diverse security goals in complex,dynamic grid environments, with large and dynamicsets of users and resources and fluid relationships between users and resources.The Globus security infrastructure developed forthe initial Globus toolkit focuses on just one problem, authentication the process by which one entityverifies the identity of another. We focus on authentication because it is the foundation on which othersecurity services, such as authorization and encryption, are built these issues will be addressed in futurework.Authentication solutions for computational gridsmust solve two problems not commonly addressed bystandard authentication technologies. The first problem that must be addressed by a grid authenticationsolution is support for local heterogeneity. Grid resources are operated by a diverse range of entities,each defining a different administrative domain. Eachdomain will have its own requirements for authentication and authorization, and consequently, domainswill have different local security solutions, mechanisms, and policies, such as onetime passwords, Kerberos 29, and Secure Shell. We will have limitedability to change these administrative decisions, andany security solution must confront this heterogeneity.The second problem facing security solutions forcomputational grids is the need to support Nway security contexts. In traditional clientserver applications, authentication involves just a single client anda single server. In contrast, a grid computation mayacquire, start processes on, and release many resourcesdynamically during its execution. These processes willcommunicate by using a variety of mechanisms, including unicast and multicast. These processes forma single, fully connected logical entity, although lowlevel communication connections e.g., TCPIP sockets may be created and deleted dynamically duringprogram execution. A security solution for a computational grid must enable the establishment of a securityrelationship between any two processes in a computation.A first important step in the design of a securityarchitecture, often overlooked, is to define a security policy that is, to provide a precise definition ofwhat it means for the system in question to be secure. This policy identifies what components are tobe protected and what these components are to beprotected against, and defines security operations interms of abstract algorithms. The policy defined forGlobus is shaped by the need to support Nway security contexts and local heterogeneity. The policyspecifies that a user authenticate just once per computation, at which time a credential is generated thatallows processes created on behalf of the user to acquire resources, and so forth, without additional userintervention. Local heterogeneity is handled by mapping a users Globus identity into local user identitiesat each resource.One important aspect of the security policy defined by Globus is that encrypted channels are notused. Globus is intended to be used internationally,and several countries including the United States andFrance have restrictive laws with respect to encryption technology. The Globus policy relies only on digital signature mechanisms, which are more easily exportable from the United States.The Globus security policy is implemented by theGlobus security infrastructure GSI. GSI, like otherGlobus components, has a modular design in whichdiverse global services are constructed on top of a simple local service that addresses issues of local heterogeneity. As illustrated in Figure 5, the local securityservice implements a security gateway that maps authenticated Globus credentials into locally recognizedcredentials at a particular site for example, Kerberostickets, or local user names and passwords. A benefit of this approach is that we do not require groupaccounts and so can preserve the integrity of local accounting and auditing mechanisms.The internal design of GSI emphasizes the important role that standards have to play in the definitionof grid services and toolkits. Several of the problemsthat GSI is designed to solve, namely, support for different local mechanisms and Nway security contexts,are not supported by any existing system. Nevertheless, GSIs ability to interoperate with other systems,to achieve independence from lowlevel mechanisms,and to leverage existing code is enhanced by codingall security algorithms in terms of the Generic Security Service GSS standard 24. GSS defines astandard procedure and API for obtaining credentialspasswords or certificates, for mutual authenticationclient and server, and for messageoriented signature, encryption and decryption. GSS is independentof any particular security mechanism and can be layered on top of different security methods. To promoteinteroperability, the GSS standard defines how GSSfunctionality should be implemented on top of Kerberos and public key cryptography. GSS also definesa negotiation mechanism that allows two parties to select a mutually agreeable suite of security mechanisms,should alternatives exist.GSI currently supports two security mechanisms,both accessible through the GSS interface. The firstis a plaintext password system, which basically implements Unix rlogin type authentication. The plaintext implementation has the advantage of being easyto develop and debug and is not encumbered by exportcontrols. The second mechanism uses public key cryptography and is based on the authentication protocoldefined by the Secure Socket Layer SSL 21. Thisimplementation has the advantages of much strongersecurity and interoperability with a variety of commodity services, including LDAP and HTTP. We notethat GSS supports a negotiation mechanism, whichallows us to support both security mechanisms simultaneously in the Globus environment.7 Other Globus ServicesWe briefly describe the other three Globus services listed in Table 1 health and status monitoring,remote access to files, and executable management.GRAMGSIPublic KeyCertificateUser ProcessUser ProcessUser ProcessSite 1GRAMGSIKerberosCertificateUser ProcessUser ProcessUser ProcessSite 2Authenticated interprocesscommunicationUserUser ProxyGlobus credentialCredentialFigure 5 The Globus security infrastructure, showing its support for single signon and local heterogeneityThe Heartbeat Monitor HBM service provides simple mechanisms for monitoring the health and statusof a distributed set of processes. The HBM architecture comprises a client interface and a datacollectorAPI. The client interface allows a process to registerwith the HBM service, which then expects to receiveregular heartbeats from the process. If a heartbeat isnot received, the HBM service attempts to determinewhether the process itself is faulty or whether the underlying network or computer has failed. The datacollector API allows another process to obtain information regarding the status of registered process thisinformation can then be used to implement a variety offault detection and, potentially, fault recovery mechanisms. HBM mechanisms are used to monitor the status of core Globus services, such as GRAM and MDS.They can also be used to monitor distributed applications and to implement applicationspecific fault recovery strategies.Access to remote files is provided by the Global Access to Secondary Storage GASS subsystem. Thissystem allows programs that use the C standardIO library to open and subsequently read and writefiles located on remote computers, without requiringchanges to the code used to perform the reading andwriting. As illustrated in Figure 6, files opened forreading are copied to a local file cache when they areopened, hence permitting subsequent read operationsto proceed without communication and also avoidingrepeated fetches of the same file. Reference countingis used to determine when files can be deleted fromthe cache. Similarly, files opened for writing are created locally and copied to their destination only whenthey are closed. A similar copying strategy is usedin UFO 2, but our implementation does not rely onthe Unixspecific proc file system. GASS also allowsfiles to be opened for remote appending, in which casedata is communicated to the remote file as soon as itis written this mode is useful for log files, for example. In addition, GASS supports remote operationson caches and hence, for example, programdirectedprestaging and migration of data. HTTP, FTP, andspecialized GASS servers are supported.Finally, the Globus Executable ManagementGEM service, still being designed as of January1998, is intended to support the identification, location, and creation of executables in heterogeneous environments. GEM provides mechanisms for matchingthe characteristics of a computer in a computationalgrid with the runtime requirements of an executableor library. These mechanisms can be used in conjunction with other Globus services to implement a variety of distributed code management strategies, basedfor example on online executable archives and compileservers.8 HighLevel ToolsWhile Globus services can be used directly by application programmers, they are more commonly acP1P2P4databasefile0864file9629file7823xgassmcs.anl.gov6453data1file0864 1rwhttpdsl.mcs.anl.govcoordsfile9629 4Rftpftp.isi.edupubglobusdatafilefile7823 1rwP3GASSserverFile cacheopen for read onlyhttpdsl.mcs.anl.govcoordsopen for read onlyhttpdsl.mcs.anl.govcoordsopen for reading  writingxgassmcs.anl.gov6453data1open for appendingxgassmcs.anl.gov6453logopen for read onlyhttpdsl.mcs.anl.govcoordsopen for reading  writingftpftp.isi.edupubglobusdata2FTPserverHTTPserverFigure 6 The Global Access to Secondary Storage GASS subsystem allows processes on local computers toread and write remote files. Copies of remote files opened for reading andor writing are maintained in a local filecache. A simple database keeps track of the local file name, access mode, reference count, and remote file URL.cessed via higherlevel tools developed by tool developers. We illustrate this type of use with four examplesa messagepassing library, a parallel language, a remote IO library, and a parameter study system. Eachtool uses different Globus services in a different wayto support a particular programming model in eachcase, availability of the Globus toolkit has allowed existing tools to be adapted for widearea execution withrelatively little effort.The Message Passing Interface MPI defines astandard API for writing messagepassing programsand is widely used in parallel computing. For gridapplications, message passing has the advantage ofproviding a higherlevel view of communication thanTCPIP sockets, while preserving for the programmer a high degree of control over how and whencommunication occurs. Globus services have beenused to develop a gridenabled MPI 10 based onthe MPICH library 20, with Nexus used for communication, GRAM services for resource allocation,and GSI services for authentication. The result is asystem that allows programmers to use simple, standard commands to run MPI programs in a variety ofmetacomputing environments freely combining heterogeneous workstation and MPP metacomputing resources, while making efficient use of underlying networks. In future work, the developers of this systemplan to use MDS information to construct communication structuresin particular, collective operationsthat are optimized for widearea execution.Compositional C 5, or CC, is a highlevel parallel programming language based on C.CC defines a global name space through theuse of global pointers, dynamic resource allocation,and support for threading and remote procedure callstyle communication. The Globus implementation ofCC uses the same services as the gridenabled MPI,except that while the MPI implementation relies onGlobus coallocation services for resource allocation,the taskparallel CC model interfaces to GRAMdirectly.The Remote IO RIO library 16 is a tool forachieving highspeed access from parallel programs tofiles located on remote filesystems. RIO adopts theparallel IO interface defined by MPIIO 7, 27 andhence allows any program that uses MPIIO to operate unchanged in a widearea environment. The RIOimplementation, like that of MPI, is constructed byusing Globus services to adapt an existing systemthe ROMIO implementation of MPIIOto supportwidearea execution. Specifically, Nexus services areused for communication, GSI services for authentication, and MDS services for configuration.NimrodG is a widearea version of Nimrod 1, atool that automates the creation and management oflarge parametric experiments. Nimrod allows a userto run a single application under a wide range of input conditions and then to aggregate the results ofthese different runs for interpretation. In effect, ittransforms filebased programs into interactive metaapplications that invoke user programs much as wemight call subroutines. NimrodG uses MDS servicesto locate suitable resources when a user first requestsa computational experiment, and GSI and GRAM services to schedule jobs to resources identified by MDSqueries. In effect, NimrodG implements resource brokering services specialized for a particular class of application.9 The GUSTO TestbedGlobus technologies have been deployed inthe Globus Ubiquitous Supercomputing TestbedGUSTO, by several measures the largest computational grid testbed ever constructed as of early 1998.This testbed uses both dedicated OC3 and commodity Internet services to link as of early 1998 17 sites,330 computers, and 3600 processors, providing an aggregate peak performance of 2 Tflops. GUSTO sitesspan the continental United States, Hawaii, Sweden,and Germany additional sites are being added rapidly.We discuss briefly our experiences deploying, administering, and using this testbed.GUSTO was created during the three months priorto the November 1997 Supercomputing conference,held in San Jose. During this time, the first versionof the Globus toolkit was completed, deployed at 15sites, and applied in 10 different application projects.One lesson learned early during this effort was thatthe approach of defining simple local services and theconsiderable effort put into automatic configurationand information discovery tools was a big win wewere able to deploy Globus software at 15 sites withrelative ease, admittedly with considerable help fromlocal staff in some cases. At several sites, computersecurity officers reviewed and approved our code. Thehardest part of the deployment process was typicallythe development of the GRAM interface to the localscheduler.Once Globus was deployed, MDS and HBM provedvaluable as tools for administering a complex collection of computer systems. The standard interface provided by MDS ensured that GUSTO administratorsalways had uptodate information about the structure and state of the system at their fingertips. Thisinformation was accessed via both an MDS browserand various specialized Webbased tools developed topublish specific views of the testbed.Ten different groups developed applications forGUSTO. One of these applications is discussed in thenext section others included remote visualization ofscientific simulations, realtime analysis of data fromscientific instruments meteorological satellite and Xray source, and distributed parameter studies. Thetools and services used by these different applicationsvaried tremendously, with some programming in sockets and using just the bare minimum of Globus services, and others exploiting the full range of services.The security model used for initial GUSTO deployment was based on the plaintext GSS implementationthat we have developed. While the plaintext authentication model is quite weak, it had the advantage ofavoiding export control issues. However, the need forthe stronger, public key implementation was universally expressed. An export license for this technologyis pending, and the currently deployed system will beupgraded to this authentication mechanism once sucha license is issued.10 Application OverviewWe provide a brief description of one applicationdemonstrated on the initial GUSTO prototype. SFExpress is a distributed interactive simulation DISapplication that harnesses multiple supercomputersto meet the computational demands of largescalenetworkbased simulation environments. A large simulation may involve many tens of thousands of entitiesand requires thousands of processors. Globus servicescan be used to locate, assemble, and manage thoseresources. For example, in one experiment in November 1997, SFExpress was run on 852 processors distributed over 6 GUSTO sites. A more detailed discussion of SFExpress and how Globus is being used tosupport its execution across multiple supercomputerscan be found in 4An advantage of the Globus bag of services architecture is that an application need not be entirely rewritten before it can operate in a grid environment services can be introduced into an application incrementally, with functionality increasing at each step. Asillustrated in Table 2 and described briefly in the following, this approach is being followed as the originalSFExpress is converted into a gridenabled application.SFExpress Startup and Configuration Prior tothe use of Globus services, simply starting SFExpresson multiple supercomputers was a painful task. Theuser had to log in to each site in turn and recall the arcane commands needed to allocate resources and starta program. This obstacle to the use of distributed resources was overcome by encoding resource allocationrequests in terms of the GRAM API. GRAM and associated GSI services are used to handle authentication,resource allocation, and process creation at each site.Table 2 A gridaware version of SFExpress is being constructed incrementally Globus services are incorporatedone by one to improve functionality and reduce application complexity. The Status field indicates code status asof early 1998 techniques are in use Y, are experimental or in partial use y, or remain to be applied in thefuture blank.Services How used Benefits StatusGRAM, GSI Start SFExpress Avoid need to log in to Yon supercomputers and schedule each system Coallocator Distributed startup Avoid applicationlevel Yand management checkin and shutdown MDS Use MDS information Performance, portability yto configure computation Resource broker Use broker to locate Code reuse, portability yappropriate computers Nexus Encode communication Uniformity of interface, yas Nexus RSRs access to unreliable comms HBM Components check in with Provides degree of Yapplicationlevel monitor fault tolerance GASS Use to access terrain Avoid need to prestagedatabase files etc. data files GEM Use to generate and Avoid configurationstage executables problemsCurrently, the resources used for a simulation aremanually specified, using MDS tools to help locate,select, and construct RSL specifications for appropriate supercomputers. As illustrated in Figure 2, thesetasks can be avoided if we have access to resourcebrokers that can automatically construct the requiredRSL, using information such as the available networkbandwidth and CPU power to determine the numberof nodes required from the number of entities beingsimulated, and the number of nodes each router canhandle. Once the resource set is identified and theRSL specification generated, Globus coallocation services are employed to coordinate startup across multiple supercomputers, ensuring that the application hasstarted on the desired resources before allowing thesimulation to proceed.After startup, the simulation must configure itself.In order to execute efficiently on parallel computersthat have nonuniform access to network interfaces orsecondary storage, SFExpress is organized such thatintercomputer communication and IO activities areperformed only within specialized servers. Using information contained in the MDS, SFExpress can configure itself to place these services on appropriate nodeswithin a parallel computer, that is, the node with theattached disk or network interface card.Finally, SFExpress must read various files describing the simulation scenario and the terrain on whichthe simulation is to be performed. In the initial SFExpress prototype, these files had to be staged manually to each site at which SFExpress executed. Tosimplify this task, we are migrating these file operations to use the GASS service provided in the Globustoolkit.Communication. The SFExpress demonstratedat SC97 uses MPI for communication within a simulation group, but handwritten socket code for communication between routers. This approach leads toconsiderable application code complexity and hindersportability. One approach we are considering is torewrite the intersupercomputer communication codeto use MPI. The gridenabled MPI discussed in Section 8 can then be used, eliminating the need for application socket code.A second approach is to rewrite SFExpress so thatcommunication operations are expressed directly byusing Nexus operations. SFExpress communicationoperations are concerned primarily with the remoteenqueing of simulation events and, hence, are expressed more naturally as Nexus RSRs than as MPIcalls. A second benefit to using Nexus is that wecan then, as discussed in Section 4, select an unreliable communication protocol for the distribution ofinformation to routers. This usage is desirable because SFExpress, unlike many other distributed simulations, does not maintain a global simulation clock.Instead, nodes simply discard incoming events withtimestamps earlier than the local simulation clock.Hence, an unreliable protocol that tends to delivermost events sooner than an equivalent reliable protocol may be preferable.11 Related WorkThe primary purpose of this paper is to report onthe current status of the Globus project rather thanto provide detailed comparisons with related work.Hence, we provide pointers here to just a few representative efforts the reader is referred to our other paperslisted in the references for more detailed discussion.The Legion project 19, like Globus, is investigating issues relating to software architectures and basetechnologies for grid environments. In contrast to theGlobus bag of services architecture, Legion is organized around an objectoriented model in which every component of the system is represented by an object 23. In principle, Globus services can be usedto implement the Legion object model, so the twoprojects are in many respects pursuing complementary goals.Condor 25 is a highthroughput computing environment whose goal is to deliver large amounts of computational capability over long periods of time weeksor months, rather than peak capacity for limited timedurations hours or days. Condor addresses the needsof a limited, although important class of applicationswhose components are loosely coupled, often organized into a taskpool style computation. Currently,the GRAM interface to Condor enables Globus usersto submit jobs to Condor pools. We are working withthe Condor team to integrate other aspects of the systems, such as authentication.A number of projects are attempting to build distributed computing environments on top of technologies and infrastructure developed for the World WideWeb. These include specialized systems such as SuperWeb 3 and WebOS 30 as well as systems leveragingbasic Web technologies, such as Java Remote MethodInvocation.SNIPE 28 is a metacomputing project that buildson the resource management and communication facilities provided by the PVM messagepassing library 17. Like Globus, SNIPE recognizes the importance of information services and uses the ResourceCataloging and Distribution System to provide accessto system resources and metadata.12 Summary and Future WorkWe have described the current status of the Globusproject, which seeks to develop the basic technologiesrequired to support the construction and use of computational grids. A particular focus of the Globuseffort is the development of a small metacomputingtoolkit providing essential services that can then beused to implement a variety of higherlevel programming models, tools, and applications. As we have explained in this brief review, Globus components havebeen deployed in large testbeds and used to implementa variety of applications.We have referred above to the advantages that weperceive in the Globus toolkit approach in particular, the wide range of global services that can be supported, because of the decoupling of global and localservices, and the ability to construct gridenabledapplications incrementally, by incorporating servicesone by one andor by taking increasing advantageof translucent interfaces. Identification of the weaknesses of the approach will require the construction oflarger testbeds and further experimentation with applications. One concern is that the basic techniquesmight not scale, perhaps because the local services defined by the Globus toolkit are too complex for broaddeployment, or because the accuracy of the information provided by MDS declines below a useful level.We are investigating these issues.We believe that the creation of largescale testbedsmust be a central part of any computational gridproject. Hence, we are working with a variety of institutions around the world to create a permanent infrastructure to support experimentation with grid applications and grid software. The initial version of thisGUSTO testbed already includes resources at some 17institutions, and we expect this number to increase.In current work, we are investigating both grid applications and more sophisticated grid services. Wehave started to investigate the construction of sophisticated resource brokers and robust coallocationstrategies. We are also studying how MDS can be usedto support dynamic configuration and adaptation, sothat applications can maintain high levels of performance in the face of dynamic changes in underlying system infrastructure. Finally, we are integratingquality of service mechanisms into the Globus framework. Our initial focus is on guaranteeing communication performance. However, we will also be studying how to integrate processor and memory schedulinginto this framework.For more information on the Globus project andtoolkit, see the papers cited here and also the materialat www.globus.org.AcknowledgmentsWe gratefully acknowledge the numerous contributions of the Globus team, without which the accomplishments detailed here would not have been possiblein particular, Steven Tuecke, Joe Bester, Joe Insley,Nick Karonis, Gregor von Laszewski, Stuart Martin,Warren Smith, and Brian Toonen at Argonne NationalLaboratory Karl Czajkowski and Steve Fitzgerald atUSCISI and Craig Lee and Paul Stelling at TheAerospace Corporation. SFExpress was developed bySharon Brunett, Paul Messina, and others at Caltechand JPL. The development of GUSTO was made possible by the considerable assistance offered by staff ateach participating site.This work was supported in part by the Mathematical, Information, and Computational SciencesDivision subprogram of the Office of Computationaland Technology Research, U.S. Department of Energy, under Contract W31109Eng38 by the Defense Advanced Research Projects Agency under contract N6600196C8523 and by the National ScienceFoundation.Author BiographiesIan Foster received his Ph.D. in computer sciencefrom Imperial College, England. He holds a joint appointment as a scientist at Argonne National Laboratory and associate professor in the Department ofComputer Science at the University of Chicago. Heis the author of three books and over 100 articles andreports on various topics relating to parallel and distributed computing and computational science. In1995, he led development of the software infrastructure for the IWAY networking experiment. Dr. Foster coleads the Globus project with Carl Kesselman.Carl Kesselman is a project Leader at the Information Sciences Institute and a research associateprofessor in computer science at the University ofSouthern California. He received a Ph.D. in computer science at the University of California at LosAngeles. He coleads the Globus project with Ian Foster. Dr. Kesselmans research interests include highperformance distributed computing, parallel computing, and parallel programming languages.References1 D. Abramson, R. Sosic, J. Giddy, and B. Hall.Nimrod A tool for performing parameterisedsimulations using distributed workstations. InProc. 4th IEEE Symp. on High PerformanceDistributed Computing. IEEE Computer SocietyPress, 1995.2 A. D. Alexandrov, M. Ibel, K. E. Schauser, andC. J. Scheiman. Extending the operating systemat the user level The UFO global file system.In 1997 Annual Technical Conference on UNIXand Advanced Computing Systems USENIX97,January 1997.3 A. D. Alexandrov, M. Ibel, K. E. Schauser, andC. J. Scheiman. Superweb Towards a globalwebbased parallel computing infrastructure. In11th International Parallel Processing Symposium, April 1997.4 S. Brunett, D. Davis, T. Gottschalk, P. Messina,and C. Kesselman. Implementing distributed synthetic forces simulations in metacomputing environments. In Proceedings of the HeterogeneousComputing Workshop, 1998. to appear.5 K. M. Chandy and C. Kesselman. CC Adeclarative concurrent object oriented programming notation. In Research Directions in ObjectOriented Programming, pages 281313. The MITPress, 1993.6 D. E. Comer. Internetworking with TCPIP.Prentice Hall, 3rd edition, 1995.7 P. Corbett, D. Feitelson, Y. Hsu, J.P. Prost,M. Snir, S. Fineberg, B. Nitzberg, B. Traversat, and P. Wong. MPIIO A parallel file IOinterface for MPI. Technical Report NAS95002, NAS, NASA Ames Research Center, MoffettField, CA, January 1995. Version 0.3.8 K. Czajkowski, I. Foster, C. Kesselman, S. Martin, W. Smith, and S. Tuecke. A resource management architecture for metacomputing systems.Technical report, Mathematics and ComputerScience Division, Argonne National Laboratory,Argonne, Ill., 1997. Submitted.9 S. Fitzgerald, I. Foster, C. Kesselman, G. vonLaszewski, W. Smith, and S. Tuecke. A directory service for configuring highperformancedistributed computations. In Proc. 6th IEEESymp. on High Performance Distributed Computing, pages 365375. IEEE Computer SocietyPress, 1997.10 I. Foster, J. Geisler, W. Gropp, N. Karonis,E. Lusk, G. Thiruvathukal, and S. Tuecke. Awidearea implementation of the Message PassingInterface. Parallel Computing, 1998. to appear.11 I. Foster, J. Geisler, C. Kesselman, and S. Tuecke.Managing multiple communication methods inhighperformance networked computing systems.Journal of Parallel and Distributed Computing,403548, 1997.12 I. Foster, J. Geisler, W. Nickless, W. Smith, andS. Tuecke. Software infrastructure for the IWAYmetacomputing experiment. Concurrency Practice  Experience. to appear.13 I. Foster and C. Kesselman. Globus A metacomputing infrastructure toolkit. International Journal of Supercomputer Applications, 112115128, 1997.14 I. Foster and C. Kesselman, editors. Computational Grids The Future of HighPerformanceDistributed Computing. Morgan Kaufmann Publishers, 1998.15 I. Foster, C. Kesselman, and S. Tuecke. TheNexus approach to integrating multithreadingand communication. Journal of Parallel and Distributed Computing, 377082, 1996.16 I. Foster, D. Kohr, R. Krishnaiyer, and J. Mogill.Remote IO Fast access to distant storage. InProc. IOPADS97, pages 1425. ACM Press,1997.17 A. Geist, A. Beguelin, J. Dongarra, W. Jiang,B. Manchek, and V. Sunderam. PVM Parallel Virtual MachineA Users Guide and Tutorial for Network Parallel Computing. MIT Press,1994.18 A. Grimshaw, A. NguyenTuong, and W. Wulf.Campuswide computing Results using Legionat the University of Virginia. Technical ReportCS9519, University of Virginia, 1995.19 A. Grimshaw, W. Wulf, J. French, A. Weaver,and P. Reynolds, Jr. Legion The next logicalstep toward a nationwide virtual computer. Technical Report CS9421, Department of ComputerScience, University of Virginia, 1994.20 W. Gropp, E. Lusk, N. Doss, and A. Skjellum.A highperformance, portable implementation ofthe MPI message passing interface standard. Parallel Computing, 22789828, 1996.21 K. Hickman. The SSL protocol. Internet DraftRFC, 1995.22 T. Howes and M. Smith. The ldap applicationprogram interface. RFC 1823, 0809 1995.23 M. Lewis and A. Grimshaw. The core Legionobject model. In Proc. 5th IEEE Symp. on HighPerformance Distributed Computing, pages 562571. IEEE Computer Society Press, 1996.24 J. Linn. Generic security service application program interface. Internet RFC 1508, 1993.25 M. Litzkow, M. Livny, and M. Mutka. Condor a hunter of idle workstations. In Proc. 8th IntlConf. on Distributed Computing Systems, pages104111, 1988.26 P. Lyster, L. Bergman, P. Li, D. Stanfill, B. Crippe, R. Blom, C. Pardo, andD. Okaya. CASA gigabit supercomputing network CALCRUST threedimensional realtimemultidataset rendering. In Proc. Supercomputing 92, 1992.27 Message Passing Interface Forum. MPI2 Extensions to the MessagePassing Interface, 1997.httpwww.mpiforum.org.28 K. Moore, G. Fagg, A. Geist, and J. Dongarra.Scalable networked information processing environment SNIPE. In Proceedings of Supercomputing 97, 1997.httpscxy.tc.cornell.edusc97proceedingsTECHMOOREIN29 J. Steiner, B. C. Neuman, and J. Schiller. Kerberos An authentication system for open network systems. In Usenix Conference Proceedings,pages 191202. 1988.30 A. Vahdat, P. Eastham, C. Yoshikawa, E. Belani,T. Anderson, D. Culler, and M. Dahlin. WebOSOperating system services for wide area applications. Technical Report UCB CSD97938, U.C.Berkeley, 1997.
