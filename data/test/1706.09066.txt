On the complexity of finding internally
vertex-disjoint long directed paths∗
Júlio Araújo1, Victor A. Campos2, Ana Karolinna Maia2, Ignasi
Sau1,3, and Ana Silva1
1 Departamento de Matemática, ParGO research group, Universidade Federal
do Ceará, Fortaleza, Brazil
2 Departamento de Computação, ParGO research group, Universidade Federal
do Ceará, Fortaleza, Brazil
3 CNRS, AlGCo project team, LIRMM, Montpellier, France
Abstract
For two positive integers k and `, a (k × `)-spindle is the union of k pairwise internally vertex-
disjoint directed paths with ` arcs between two vertices u and v. We are interested in the
(parameterized) complexity of several problems consisting in deciding whether a given digraph
contains a subdivision of a spindle, which generalize both the Maximum Flow and Longest
Path problems. We obtain the following complexity dichotomy: for a fixed ` ≥ 1, finding the
largest k such that an input digraph G contains a subdivision of a (k × `)-spindle is polynomial-
time solvable if ` ≤ 3, and NP-hard otherwise. We place special emphasis on finding spindles
with exactly two paths and present FPT algorithms that are asymptotically optimal under the
ETH. These algorithms are based on the technique of representative families in matroids, and
use also color-coding as a subroutine. Finally, we study the case where the input graph is acyclic,
and present several algorithmic and hardness results.
1998 ACM Subject Classification F.2.2 Nonnumerical Algorithms and Problems, G.2.2 Graph
Theory.
Keywords and phrases digraph subdivision; spindle; parameterized complexity; FPT algorithm;
representative family; complexity dichotomy.
Digital Object Identifier 10.4230/LIPIcs...
1 Introduction
A subdivision of a digraph F is a digraph obtained from F by replacing each arc (u, v)
of F by a directed (u, v)-path. We are interested in the (parameterized) complexity of
several problems consisting in deciding whether a given digraph contains as a subdigraph a
subdivision of a spindle, defined as follows. For k positive integers `1, . . . , `k, a (`1, . . . , `k)-
spindle is the digraph containing k paths P1, . . . , Pk from a vertex u to a vertex v, such
that |E(Pi)| = `i for 1 ≤ i ≤ k and V (Pi) ∩ V (Pj) = {u, v} for 1 ≤ i 6= j ≤ k. If `i = ` for
1 ≤ i ≤ k, a (`1, . . . , `k)-spindle is also called a (k × `)-spindle. See Figure 1 for an example.
Note that a digraph G contains a subdivision of a (k, 1)-spindle if and only if there exist
two vertices u and v and k internally vertex-disjoint paths from u to v. On the other hand,
G contains a subdivision of a (1, `)-spindle if and only if G contains a path of length at
∗ Emails of authors: julio@mat.ufc.br, campos@lia.ufc.br, karolmaia@lia.ufc.br,
ignasi.sau@lirmm.fr, anasilva@mat.ufc.br.
Work supported by DE-MO-GRAPH grant ANR-16-CE40-0028 and CNPq grant 306262/2014-2.
© Júlio Araújo, Victor A. Campos, Ana Karolinna Maia, Ignasi Sau, and Ana Silva;
licensed under Creative Commons License CC-BY
Editors: John Q. Open and Joan R. Acces; Article No. ; pp. :1–:20
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany
ar
X
iv
:1
70
6.
09
06
6v
1 
 [
cs
.D
S]
  2
7 
Ju
n 
20
17
XX:2 On the complexity of finding internally vertex-disjoint long directed paths
u v
Figure 1 A (4, 3, 2)-spindle. This digraph contains a subdivision of a (3× 2)-spindle, but not of
a (3× 3)-spindle.
least `. Hence, finding a subdivision of a spindle generalizes both the Maximum Flow and
Longest Path problems.
Subdivisions of spindles were considered by Bang-Jensen et al. [3], who introduced the
general problem of finding a subdivision of a fixed digraph F and presented NP-hardness
results and polynomial-time algorithms for several choices of F . In particular, they proved
that when F is a spindle, the problem can be solved in time nO(|V (F )|) by a simple combination
of brute force and a flow algorithm. Using terminology from parameterized complexity, this
means that the problem is in XP parameterized by the size of F , and they left open whether
it is FPT. Note that on undirected graphs the notion of subdivision coincides with that of
topological minor, hence by the results of Grohe et al. [16] the problem is FPT parameterized
by the size of F , for a general digraph F . We refer to the introduction of [3] for a more
detailed discussion about problems related to containment relations on graphs and digraphs.
We first consider the following two optimization problems about finding subdivisions of
spindles:
(1) for a fixed positive integer k, given an input digraph G, find the largest integer ` such
that G contains a subdivision of a (k × `)-spindle, and
(2) for a fixed positive integer `, given an input digraph G, find the largest integer k such
that G contains a subdivision of a (k × `)-spindle.
We call these problems Max (k × •)-Spindle Subdivision and Max (• × `)-Spindle
Subdivision, respectively. We prove that the first problem is NP-hard for any integer k ≥ 1,
by a simple reduction from Longest Path. The second problem turns out to be much more
interesting, and we achieve the following dichotomy.
I Theorem 1. Let ` ≥ 1 be a fixed integer. Max (•×`)-Spindle Subdivision is polynomial-
time solvable if ` ≤ 3, and NP-hard otherwise, even restricted to acyclic digraphs.
The reduction for the NP-hard cases is inspired by a result of Brewster et al. [7] to prove
the NP-hardness of packing vertex-disjoint paths on digraphs. Concerning the polynomial
algorithms, to solve the case ` = 3, which is the only non-trivial one, we use a vertex splitting
procedure that builds on ideas of Schrijver [27] on undirected graphs and by Kriesell [21] on
directed graphs (see also [2, Section 5.9]).
It it worth mentioning that both the positive and negative results of Theorem 1 hold
as well for the case where the endvertices of the desired spindle are fixed. Itai et al. [19]
considered the problems of, given a digraph G and two distinct vertices s and t, finding
the maximum number of internally vertex-disjoint (s, t)-paths whose lengths are at most
or exactly equal to a fixed constant `, and achieved dichotomies for both cases. Note that
the problem we consider corresponds to a constraint of type ‘at least’ on the lengths of the
desired paths. Hence, Theorem 1 together with the results of Itai et al. [19] provide a full
picture of the complexity of finding a maximum number of length-constrained internally
vertex-disjoint directed (s, t)-paths.
J. Araújo, V. A. Campos, A. K. Maia, I. Sau, and A. Silva XX:3
We place special emphasis on finding subdivisions of spindles with exactly two paths,
which we call 2-spindles. The existence of subdivisions of 2-spindles has attracted some
interest in the literature. Indeed, Benhocine and Wojda [4] showed that a tournament on
n ≥ 7 vertices always contains a subdivision of a (`1, `2)-spindle such that `1 + `2 = n. More
recently, Cohen et al. [9] showed that a strongly connected digraph with chromatic number
Ω((`1 + `2)4) contains a subdivision of a (`1, `2)-spindle, and this bound was subsequently
improved to Ω((`1 + `2)2) by Kim et al. [20], who also provided improved bounds for
Hamiltonian digraphs.
We consider two problems concerning the existence of subdivisions of 2-spindles. The
first one is, given an input digraph G, find the largest integer ` such that G contains a
subdivision of a (`1, `2)-spindle with min{`1, `2} ≥ 1 and `1 + `2 = `. We call this problem
Max (•, •)-Spindle Subdivision, and we show the following results.
I Theorem 2. Given a digraph G and a positive integer `, the problem of deciding whether
there exist two strictly positive integers `1, `2 with `1 + `2 = ` such that G contains a
subdivision of a (`1, `2)-spindle is NP-hard and FPT parameterized by `. The running time
of the FPT algorithm is 2O(`) · nO(1), which is asymptotically optimal unless the ETH fails.
Moreover, the problem does not admit polynomial kernels unless NP ⊆ coNP/poly.
The second problem is, for a fixed strictly positive integer `1, given an input digraph G,
find the largest integer `2 such that G contains a subdivision of a (`1, `2)-spindle. We call
this problem Max (`1, •)-Spindle Subdivision, and we show the following results.
I Theorem 3. Given a digraph G and two integers `1, `2 with `2 ≥ `1 ≥ 1, the problem
of deciding whether G contains a subdivision of a (`1, `2)-spindle can be solved in time
2O(`2) · nO(`1). When `1 is a constant, the problem remains NP-hard and the running time
of the FPT algorithm parameterized by `2 is asymptotically optimal unless the ETH fails.
Moreover, the problem does not admit polynomial kernels unless NP ⊆ coNP/poly.
The hardness results of Theorems 2 and 3 are based on a simple reduction from Directed
Hamiltonian Cycle. Both FPT algorithms, which are our main technical contribution, are
based on the technique of representative families in matroids introduced by Monien [24], and
in particular its improved version recently presented by Fomin et al. [14]. The FPT algorithm
of Theorem 3 also uses the color-coding technique of Alon et al. [1] as a subroutine.
Finally, we consider the case where the input digraph G is acyclic. We prove the following
result by using a standard dynamic programming algorithm.
I Theorem 4. Given an acyclic digraph G and two positive integers k, `, the problem
of deciding whether G contains a subdivision of a (k × `)-spindle can be solved in time
O(`k · n2k+1).
The above theorem implies, in particular, that when k is a constant the problem is
polynomial-time solvable on acyclic digraphs, which generalizes the fact that Longest Path,
which corresponds to the case k = 1, is polynomial-time solvable on acyclic digraphs (cf. [28]).
As observed by Bang-Jensen et al. [3], from the fact that the k-Linkage problem is in
XP on acyclic digraphs [23], it easily follows that finding a subdivision of a general digraph
F is in XP on DAGs parameterized by |V (F )|. Motivated by this, we prove two further
hardness results about finding subdivisions of spindles on DAGs. Namely, we prove that if F
is the disjoint union of (2× 1)-spindles, then finding a subdivision of F is NP-complete on
planar DAGs, and that if F is the disjoint union of a (k1 × 1)-spindle and a (k2 × 1)-spindle,
then finding a subdivision of F is W[1]-hard on DAGs parameterized by k1 + k2. These two
CVIT 2017
XX:4 On the complexity of finding internally vertex-disjoint long directed paths
results should be compared to the fact that finding a subdivision of a single (k × 1)-spindle
can be solved in polynomial time on general digraphs by a flow algorithm.
Organization of the paper. In Section 2 we provide some definitions about (di)graphs,
parameterized complexity, and matroids. In Section 3 we prove Theorem 1, and in Section 4
we prove Theorem 2 and Theorem 3. In Section 5 we focus on acyclic digraphs and we prove,
in particular, Theorem 4. In Section 6 we present some open problems for further research.
2 Preliminaries
Graphs and digraphs. We use standard graph-theoretic notation, and we refer the reader
to the books [11] and [2] for any undefined notation about graphs and directed graphs,
respectively.
A directed graph G, or just digraph, consists of a non-empty set V (G) of elements called
vertices and a finite (multi)set A(G) of ordered pairs of distinct vertices called arcs. All our
positive results hold even for digraphs where multiple arcs between the same pair of vertices
are allowed. We denote by (u, v) an arc from a vertex u to a vertex v. Vertex u is called the
tail and vertex v is called the head of an arc (u, v), and we say that (u, v) is an arc outgoing
from u and incoming at v.
For a vertex v in a digraph G, we let N+G (v) = {u ∈ V (G) \ {v} : (v, u) ∈ A(G)},
N−G (v) = {w ∈ V (G) \ {v} : (w, v) ∈ A(G)}, and NG(v) = N
+
G (v) ∪ N
−
G (v), and we call
these sets the out-neighborhood, in-neighborhood, and neighborhood of v, respectively. The
out-degree (resp. in-degree) of a vertex v is the number of arcs outgoing from (resp. incoming
at) v, and its degree is the sum of its out-degree and its in-degree. In all these notations, we
may omit the subscripts if the digraph G is clear from the context.
A subdigraph of a digraph G = (V, A) is a digraph H = (V ′, A′) such that V ′ ⊆ V and
A′ ⊆ A. A path from a vertex u to a vertex v in a digraph, also called (u, v)-path, is a
subdigraph obtained from an undirected path between u and v by orienting all edges toward
v. The length of a path is its number of arcs, and by an `-path we denote a path of length `.
A (v1, vk)-path visiting vertices v1, v2, . . . , vk, in this order, is denoted by (v1, v2, . . . , vk). A
directed acyclic graph, or DAG for short, is a digraph with no directed cycles. It is easy to
prove that a digraph G is a DAG if and only if there exists a total ordering of V (G), called a
topological ordering, so that all arcs of G go from smaller to greater vertices in this ordering.
For two positive integers k and `, a (k × `)-spindle is the union of k pairwise internally
vertex-disjoint directed (u, v)-paths of length ` between two vertices u and v, which are called
the endpoints of the spindle. More precisely, u is called the tail and v the head of a spindle.
A 2-spindle is any (`1, `2)-spindle with `1, `2 ≥ 1.
For an undirected graph G, we denote by {u, v} an edge between two vertices u and v. A
matching in a graph is a set of pairwise disjoint edges. A vertex v is saturated by a matching
M if v is an endpoint of one of the edges in M . In that case, we say that v is M -saturated.
Given two matchings M and N in a graph, we let M4N denote their symmetric difference,
that is, M4N = (M \N) ∪ (N \M).
Parameterized complexity. We refer the reader to [10,12,13,25] for basic background on
parameterized complexity, and we recall here only some basic definitions. A parameterized
problem is a decision problem whose instances are pairs (x, k) ∈ Σ∗ × N, where k is called
the parameter. A parameterized problem is fixed-parameter tractable (FPT) if there exists
an algorithm A, a computable function f , and a constant c such that given an instance
I = (x, k), A (called an FPT algorithm) correctly decides whether I ∈ L in time bounded by
f(k) · |I|c. A parameterized problem is slice-wise polynomial (XP) if there exists an algorithm
J. Araújo, V. A. Campos, A. K. Maia, I. Sau, and A. Silva XX:5
A and two computable functions f, g such that given an instance I = (x, k), A (called an XP
algorithm) correctly decides whether I ∈ L in time bounded by f(k) · |I|g(k).
Within parameterized problems, the class W[1] may be seen as the parameterized equi-
valent to the class NP of classical optimization problems. Without entering into details
(see [10, 12, 13, 25] for the formal definitions), a parameterized problem being W[1]-hard
can be seen as a strong evidence that this problem is not FPT. The canonical example of
W[1]-hard problem is Independent Set parameterized by the size of the solution. To
transfer W[1]-hardness from one problem to another, one uses a parameterized reduction,
which given an input I = (x, k) of the source problem, computes in time f(k) · |I|c, for
some computable function f and a constant c, an equivalent instance I ′ = (x′, k′) of the
target problem, such that k′ is bounded by a function depending only on k. An equivalent
definition of W[1]-hard problem is any problem that admits a parameterized reduction from
Independent Set parameterized by the size of the solution.
Matroids. A pairM = (E, I), where E is a ground set and I is a family of subsets of E, is
a matroid if it satisfies the following three axioms:
1. ∅ ∈ I.
2. If A′ ⊆ A and A ∈ I, then A′ ∈ I.
3. If A, B ∈ I and |A| < |B|, then there is e ∈ B \A such that A ∪ {e} ∈ I.
The sets in I are called the independent sets of the matroid. An inclusion-wise maximal set
of I is called a basis of the matroid. Using the third axiom, it is easy to show that all the
bases of a matroidM have the same size, which is called the rank ofM. A pairM = (E, I)
over an n-element ground set E is called a uniform matroid if I = {A ⊆ E : |A| ≤ k} for
some for constant k. For a broader overview on matroids, we refer to [26].
For a positive integer k, we denote by [k] the set of all integers i such that 1 ≤ i ≤ k.
Throughout the article, unless stated otherwise, we let n denote the number of vertices of
the input digraph of the problem under consideration.
3 Complexity dichotomy in terms of the length of the paths
In this section we focus on the two natural optimization versions of finding subdivisions of
spindles mentioned in the introduction, namely Max (k × •)-Spindle Subdivision and
Max (• × `)-Spindle Subdivision.
It is easy to prove that the first problem is NP-hard for any integer k ≥ 1, by a simple
reduction from Longest Path.
I Theorem 5. Let k ≥ 1 be a fixed integer. The Max (k×•)-Spindle Subdivision problem
is NP-hard.
Proof. We provide a polynomial reduction from the Longest Path problem on general
digraphs, which is NP-hard as it generalizes Hamiltonian Path [15]. For k = 1, Max
(k × •)-Spindle Subdivision is exactly the Longest Path problem, and the result follows.
For k > 1, let G be an instance of Longest Path with n vertices, and we build an instance
G′ of Max (k×•)-Spindle Subdivision as follows. We start with G and we add to it 2k−2
new vertices s1, . . . , sk−1, t1, . . . , tk−1. For i ∈ [k − 1], we add an arc from every vertex of G
to si, and arc from ti to every vertex of G, and a path from si to ti with n edges through
n − 1 new vertices. This completes the construction of G′. It is clear that the length of
a longest path in G equals the largest integer k such that G′ contains a subdivision of a
(k × `)-spindle, concluding the proof. J
CVIT 2017
XX:6 On the complexity of finding internally vertex-disjoint long directed paths
We now present the complexity dichotomy for the second problem, in order to prove
Theorem 1. We start with the hardness result.
I Theorem 6. Let ` ≥ 4 be a fixed integer. The Max (•× `)-Spindle Subdivision problem
is NP-hard, even when restricted to DAGs.
Proof. We provide a polynomial reduction from 3-Dimensional Matching, which is NP-
hard [15]. In the 3-Dimensional Matching problem, we are given three sets A, B, C of the
same size and a set of triples T ⊆ A×B×C. The objective is to decide whether there exists
a set T ′ ⊆ T of pairwise disjoint triples with |T ′| = |A|. Given an instance (A, B, C, T ) of
3-Dimensional Matching, with |A| = n and T = m, we construct an instance G of Max
(• × `)-Spindle Subdivision as follows. We first present the reduction for ` = 4, and then
we explain how to modify it for a general ` > 4.
For every i ∈ [n], we add to G three vertices ai, bi, ci, corresponding to the elements in the
sets A, B, C, respectively. Let H the digraph with vertices x0, x1, y0, y1, z0, z1, a, b, c and arcs
(x0, x1), (x1, a), (x1, y0), (y0, y1), (y1, b), (x0, z0), (z0, z1), (z1, c) (see Figure 2(a)). For every
triple T ∈ T , with T = (ai, bj , cp), we add to G a copy of H and we identify vertex a with
ai, vertex b with bj , and vertex c with cp. Finally, we add a new vertex s that we connect
to all other vertices introduced so far, and another vertex t to which we connect all other
vertices introduced so far except s.
a
x1
x0
y0 y1 b
z0 z1 c
(a)
ai
x1
x0
y0 y1 bj
z0 z1 cp
(b)
ai
x1
x0
y0 y1 bj
z0 z1 cp
(c)
Figure 2 (a) Digraph H. (b) Selected paths when T ∈ T ′. (c) Selected paths when T ∈ T \ T ′.
The constructed digraph G is easily seen to be a DAG. Indeed, we can define a topological
ordering of V (G) so that all arcs go from left to right as follows. We select s (resp. t) as the
leftmost (resp. rightmost) vertex. We divide the remaining vertices of G into two blocks. On
the right, we place all the vertices {ai, bi, ci : i ∈ [n]}, and we order them arbitrarily. On
the left, we place the remaining vertices of G, which we also order arbitrarily, except that
for every triple T ∈ T , we order the vertices in its copy of H, distinct from a, b, c, such that
x0 < x1 < y0 < y1 < z0 < z1 holds. One can check that, with respect to this ordering, all
the arcs of G go from left to right.
Note that |V (G)| = 3n + 6m + 2, and therefore the largest integer k for which G contains
a subdivision of a (k × 4)-spindle is k∗ := n + 2m, as each path involved in such a spindle
contains at least three vertices distinct from its endpoints. We claim that (A, B, C, T ) is a
Yes-instance of 3-Dimensional Matching if and only if G contains a subdivision of a
(k∗ × 4)-spindle.
Suppose first that (A, B, C, T ) is a Yes-instance, and let T ′ ⊆ T be a solution. We
proceed to define a set P of n + 2m vertex-disjoint 2-paths in G \ {s, t}, which together with
s and t yield the desired spindle. For every T ∈ T ′, with T = (ai, bj , cp), we add to P the
three paths (x0, x1, ai), (y0, y1, bj), and (z0, z1, cp) (see the thick arcs in Figure 2(b)). On the
other hand, for every T ∈ T \ T ′, with T = (ai, bj , cp), we add to P the two paths (x1, y0, y1)
and (x0, z0, z1) (see the thick arcs in Figure 2(c)). Since T ′ is a solution of 3-Dimensional
Matching, it holds that |T ′| = n, and thus P = 3n + 2(m− n) = n + 2m, as required.
J. Araújo, V. A. Campos, A. K. Maia, I. Sau, and A. Silva XX:7
Conversely, suppose that G contains a subdivision of a (k∗ × 4)-spindle S. Since s and t
are the only vertices in G with in-degree and out-degree at least k∗, respectively, necessarily
they are the endpoints of S. Since |V (G) \ {s, t}| = 3k∗, it follows that S \ {s, t} consists of
a collection P of k∗ vertex-disjoint 2-paths that covers all the vertices in V (G) \ {s, t}. Let
H be the subdigraph in G associated with an arbitrary triple T ∈ T , and consider P ∩H.
By construction of H, it follows that if P ∩ H is not equal to one of the configurations
corresponding to the thick arcs of Figure 2(b) or Figure 2(c), necessarily at least one vertex
in V (H) would not be covered by P, a contradiction. Let T ′ be the set of triples in
T such that the corresponding gadget H intersects P as in Figure 2(b). It follows that
3|T ′|+ 2(m− |T ′|) = |P| = k∗ = n + 2m, and therefore |T ′| = n. Since all the 2-paths in
P associated with the triples in T ′ are vertex-disjoint, we have that T ′ is a collection of n
pairwise disjoint triples, hence a solution of 3-Dimensional Matching.
For a general ` > 4, we define the digraph G in the same way, except that we subdivide
the arcs outgoing from s exactly `− 4 times. The rest of the proof is essentially the same,
and the result follows. J
We now turn to the cases that can be solved in polynomial time. We first need some
ingredients to deal with the case ` = 3, which is the most interesting one. Let G be a digraph
and let X and Y be two subsets of V (G). We say that a path P is directed from X to Y if
P is a directed path with first vertex x and last vertex y such that x ∈ X and y ∈ Y . The
path P is nontrivial if its endpoints are distinct.
The following proposition will be the key ingredient in the proof of Theorem 8. Its proof
is inspired by similar constructions given by Schrijver [27] on undirected graphs and by
Kriesell [21] on directed graphs, usually called vertex splitting procedure (see [2, Section 5.9]).
I Proposition 7. Let G be a digraph and let X and Y be two subsets of V (G). The maximum
number of vertex-disjoint directed nontrivial paths from X to Y can be computed in polynomial
time.
Proof. Let P be any collection of vertex-disjoint directed nontrivial paths from X to Y in
G. We can rebuild each path in P so that it has no internal vertices in X ∪ Y . Therefore,
we can assume G has no arcs to a vertex in X \ Y or from a vertex in Y \X.
Let G′ be the undirected graph built from G as follows. The vertex set of G′ is obtained
from V (G) by adding a copy v′ of each vertex v not in X ∪ Y . We build the edge set of G′
starting from the empty set as follows. For every vertex v not in X ∪ Y , add the edge {v, v′}.
For each arc (u, v) in G, we add the edge {u, v} if v ∈ X ∪ Y and the edge {u, v′} otherwise.
See Figure 3(a)-(b) for an example.
u1
v1 v2 v3
u2 u3 u4
G
(b) (c)(a)
u1 u2 u3 u4
v2
v′2
G′
v1
v′1
v3
v′3
v2
v′2
G′
v1
v′1
v3
v′3
u1 u2 u3 u4
Figure 3 (a) Digraph G with X = {u1, u2, u3} and Y = {u3, u4}. (b) Graph G′ associated with
G. (c) The thick edges define a matching of size five in G′, corresponding to the two vertex-disjoint
directed nontrivial paths (u1, v1, u3) and (u2, v3, u4) from X to Y in G.
CVIT 2017
XX:8 On the complexity of finding internally vertex-disjoint long directed paths
I Claim 1. The digraph G contains a family of k vertex-disjoint directed nontrivial paths
from X to Y if and only if G′ has a matching of size k + |V (G) \ (X ∪ Y )|.
Proof of the claim. Let P be a family of k vertex-disjoint directed nontrivial paths from X
to Y in G. We may assume every path in P has no internal vertices in X ∪ Y . Let U be the
subset of vertices of V (G) \ (X ∪ Y ) that are not in a path in P.
We build a matching M of G′ starting with M = {{u, u′} : u ∈ U} as follows. For every
arc (u, v) used in some path of P, we add {u, v} to M if v ∈ X ∪ Y , and {u, v′} otherwise
(see Figure 3(c)). Note that M is indeed a matching, as vertices in X ∪ Y appear in at most
one arc on a path in P. For a vertex v not in X ∪ Y , v appears at most once as an internal
vertex in a path P of P. Therefore, it appears in exactly two arcs of P and exactly once in
an arc to v and once in an arc from v.
We now claim that the number of M -saturated vertices in G′ is 2(k + |V (G) \ (X ∪ Y )|).
This claim implies that M has k + |V (G) \ (X ∪ Y )| edges. To prove this claim, first note
that all vertices in V (G) \ (X ∪ Y ) are saturated. Indeed, if v is in U , then both v and v′
are initially saturated. Otherwise, v is an internal vertex of a path in P and is contained
in two edges that saturate both v and v′. To conclude, note that every path in P contains
exactly two vertices in X ∪ Y , namely its endpoints, and, therefore, saturates exactly two
vertices of X ∪ Y in G′.
Now, let M be a matching of G′ of size k + |V (G) \ (X ∪ Y )|. Let N be the matching
{{v, v′} : v ∈ V (G) \ (X ∪ Y )} and H = G[M4N ]. Since |M | = k + |N |, H contains at least
k components with more edges in M than in N . We claim that from these components we
can obtain k vertex-disjoint nontrivial paths in G.
To prove this claim, let C be a component of H with more edges in M than in N . Since
C has more edges in M , then it is a path alternating between edges of M and N that starts
and ends with an edge of M , its endpoints are N -unsaturated and its internal vertices are
N -saturated. Thus, the endpoints of C are its only vertices in X ∪ Y . Also note that if a
vertex w of V (C) ∩ V (G) is not in X ∪ Y , then both w and w′ are in C and neither w nor
w′ appear in any other component of H.
Let u and v be the endpoints of C and the set W of internal vertices of C that are
also in V (G) be {w1, . . . , w`}. Note that u 6= v as C contains at least one edge in M . If
W = ∅, then uv is an edge of G′ and assume the edge {u, v} is directed in G from u to
v. If W 6= ∅, then assume the transversal of C from u to v visits the vertices in the order
u, w′1, w1, w
′
2, w2, . . . , w
′
`, w`, v. In both cases, note that u, w1, . . . , w`, v is the transversal of
a directed path from u to v in G. Since G has no edge leaving a vertex of Y \X and no edge
going into a vertex of X \ Y , then u ∈ X and v ∈ Y . 
Claim 1 tells us that we can obtain a maximum number of vertex-disjoint nontrivial paths
from X to Y in G by finding a maximum matching in the graph G′, which can be done in
polynomial time [11]. The proposition follows. J
We are now ready to prove the main algorithmic result of this section.
I Theorem 8. Let ` ≤ 3 be a fixed integer. The Max (•× `)-Spindle Subdivision problem
can be solved in polynomial time.
Proof. If ` = 1, then the problem can be solved just by computing a maximum flow between
every pair of vertices of the input digraph, which can be done in polynomial time [2]. If
` = 2, we use the same algorithm, except that for every pair of vertices we first delete all the
arcs between them before computing a maximum flow, as the paths of length one are the
only forbidden ones in a subdivision of a (k × 2)-spindle.
J. Araújo, V. A. Campos, A. K. Maia, I. Sau, and A. Silva XX:9
Let us now focus on the case ` = 3. We first guess a pair of vertices s and t of V (G) as
candidates for being the tail and head of the desired spindle, respectively, and we delete
the arcs between s and t, if any. The crucial observation is that the largest integer k such
that G contains a (k × 3)-spindle having s and t as tail and head, respectively, equals the
maximum number of vertex-disjoint directed nontrivial paths from N+(s) to N−(t) in the
digraph G \ {s, t}. Now the result follows directly by applying the polynomial-time algorithm
given by Proposition 7 with input graph G \ {s, t}, X = N+(s), and Y = N−(t). J
We now prove a generalization of the result given in Theorem 8, but using a much
more powerful tool. Namely, instead of reducing the problem to finding a matching of
appropriate size in an auxiliary graph, as in the proof of Proposition 7, we use as a black
box an algorithm of Lovász [22] to solve the matroid matching problem in polynomial time
for linearly-represented matroids (see [26] for any missing definition about matroids).
I Theorem 9. Given a digraph G and three non-negative integers k1, k2, k2, deciding whether
G contains a subdivision of a (`11, . . . , `1k1 , `
2
1, . . . , `
2
k2
, `31, . . . , `
3
k3
)-spindle such that, for j ∈ [3]
and i ∈ [kj ], `ji = j, can be solved in polynomial time.
Proof. We iterate on pairs of vertices s and t in G to decide if the desired spindle exists
with tail s and head t. From now on, we consider a fixed pair of vertices s and t. If a
(`11, . . . , `1k1 , `
2
1, . . . , `
2
k2
, `31, . . . , `
3
k3
)-spindle subdivision exists with tail s and head t, let S be
one such subdivision.
Let p be the number of arcs with tail s and head t. Note that if S exists, it can use at
most min{p, k1} arcs between s and t. In fact, we can assume S uses exactly min{p, k1} arcs
between s and t as, otherwise, there is a 1-path which was subdivided and can be changed to
an unused arc from s to t. All other 1-paths of the spindle must have been subdivided and have
length at least two in S. Therefore, S exists if and only if there is a (`21, . . . , `2k′2 , `
3
1, . . . , `
3
k3
)-
spindle subdivision with tail s and head t with k′2 = k2 + k1 −min{p, k1}. From now on,
assume k1 = 0.
Let X = N+(s) and Y = N−(t). For a non-negative integer r, let mr be the maximum
number of nontrivial vertex-disjoint paths from X to Y such that at least r vertices of X ∩Y
are not used by these paths. We claim that S exists if and only if r + mr ≥ k2 + k3 for
some integer r with 0 ≤ r ≤ min{k2, |X ∩ Y |}. If r + mr ≥ k2 + k3, then we can find S by
joining s and t to nontrivial paths from X to Y to find k2 + k3 − r paths of length at least
three. The remaining paths are built as 2-paths through r vertices in X ∩ Y not used by the
nontrivial paths. On the other hand, if S exists, let r be the number of its 2-paths which are
not subdivided in G, and note that 0 ≤ r ≤ min{k2, |X ∩ Y |}. These r paths each contain
s, t, and a vertex of X ∩ Y . The k2 − r 2-paths which are subdivided in G have length at
least 3 in G. Thus, by deleting s and t from S, we have k2 − r + k3 nontrivial vertex-disjoint
paths from X to Y disjoint from the r vertices used 2-paths of S in G. Therefore, we have
mr ≥ k2 − r + k3, which is equivalent to r + mr ≥ k2 + k3.
We iterate on values of r with 0 ≤ r ≤ min{k2, |X ∩ Y |} to decide if S exists. We finish
this proof by showing how to find the value of mr in polynomial time for a fixed integer r.
Namely, we use the matroid matching algorithm of Lovász [22]. For a graph H and a linear
matroid M over V (H), this algorithm finds in polynomial time a maximum matching in G
whose saturated vertices form an independent set of M .
For the graph H above, we use the graph G′ built in Proposition 7. Recall that Claim 1
shows that a matching in H of size k + |V (G) \ (X ∪ Y )| exists if and only if there are k
vertex-disjoint directed nontrivial paths from X to Y . Furthermore, it can be also proved
that the saturated vertices in X ∪ Y by the matching correspond precisely to the endpoints
CVIT 2017
XX:10 On the complexity of finding internally vertex-disjoint long directed paths
of the nontrivial paths from X to Y . The linear matroid M is such that a set of vertices of
H is independent in M if it is disjoint from at least r vertices of X ∩ Y . To see that M is a
linear matroid, note that M is the dual of the r-uniform matroid over X ∩ Y by extending
its ground set to V (H) without changing the independent sets.
Now, a matching in H of size k + |V (G) \ (X ∪ Y )| that is independent in M corresponds
precisely to k vertex-disjoint directed nontrivial paths from X to Y that are disjoint from a
set of r vertices of X ∩ Y , and the matroid matching algorithm [22] can find the value of
mr. J
4 Finding subdivisions of 2-spindles
In this section we focus on finding subdivisions of 2-spindles, and we prove Theorem 2 and
Theorem 3. We prove the negative and the positive results of both theorems separately.
Namely, we provide the hardness results in Section 4.1 and we focus on the FPT algorithms
in Section 4.2.
4.1 Hardness results
We start by proving the NP-hardness results.
I Proposition 10. The Max (•, •)-Spindle Subdivision problem is NP-hard. For every
fixed integer `1 ≥ 1, the Max (`1, •)-Spindle Subdivision problem is NP-hard.
Proof. For both problems, we present a reduction from the Directed Hamiltonian (s, t)-
Path problem, which consists in, given a digraph G and two vertices s, t ⊆ V (G), deciding
whether G has an (s, t)-path that is Hamiltonian. This problem is easily seen to be NP-
hard by a simple reduction from Directed Hamiltonian Cycle, which is known to be
NP-hard [15]: given an instance G of Directed Hamiltonian Cycle, construct from G
an instance G′ of Directed Hamiltonian (s, t)-Path by choosing an arbitrary vertex
v ∈ V (G) and splitting it into two vertices s and t such that s (resp. t) is incident to exactly
those arcs in G that were outgoing from (resp. incoming at) v.
We first prove the hardness of Max (•, •)-Spindle Subdivision. Given an instance G
of Directed Hamiltonian (s, t)-Path, with |V (G)| = n, build an instance G′ of Max
(•, •)-Spindle Subdivision as follows. Start from G, and delete all the arcs incoming at s
or outgoing from t, if any. Finally, add a new vertex v and arcs (s, v) and (v, t). We claim
that G has a Hamiltonian (s, t)-path if and only if G′ contains a subdivision of a (`1, `2)-
spindle with min{`1, `2} ≥ 1 and `1 + `2 = n + 1. Assume first that G has a Hamiltonian
(s, t)-path P . Then G′ contains a (2, n− 1)-spindle defined by the 2-path (s, v, t) together
with the Hamiltonian (s, t)-path P . Conversely, assume that G′ contains a subdivision S of
a (`1, `2)-spindle with min{`1, `2} ≥ 1 and `1 + `2 = n + 1. Suppose that the newly added
vertex v ∈ V (G′) does not belong to S, which implies that |V (S)| ≤ |V (G)| = n. Since a
(`1, `2)-spindle contains exactly `1 + `2 vertices, if follows that |V (S)| ≥ `1 + `2 = n + 1, a
contradiction to the previous sentence. Therefore, v ∈ V (S) and so (s, v, t) is one of the two
paths of S. Thus, the remaining path of S is an (s, t)-path of length n− 1 in G, that is, a
Hamiltonian (s, t)-path in G.
We now prove the hardness of Max (`1, •)-Spindle Subdivision for every fixed integer
`1 ≥ 1. Given an instance G of Directed Hamiltonian (s, t)-Path, with |V (G)| = n,
build an instance G′ of Max (`1, •)-Spindle Subdivision as follows. Start from G, and
delete all the arcs incoming at s (resp. outgoing from t), if any, and the arc (s, t), if it exists.
Finally, add an (s, t)-path with `1 arcs consisting of new vertices and arcs. One can easily
J. Araújo, V. A. Campos, A. K. Maia, I. Sau, and A. Silva XX:11
check that G has a Hamiltonian (s, t)-path if and only if G′ contains a subdivision of a
(`1, n− 1)-spindle. J
Björklund et al. [5] showed that assuming the Exponential Time Hypothesis1 (ETH) of
Impagliazzo et al. [18], the Directed Hamiltonian Cycle problem cannot be solved in
time 2o(n). This result together with the proof of Proposition 10 directly imply the following
two results assuming the ETH, claimed in Theorem 2 and Theorem 3, respectively. The first
one is that, given a digraph G and a positive integer `, the problem of deciding whether there
exist two strictly positive integers `1, `2 with `1 + `2 = ` such that G contains a subdivision
of a (`1, `2)-spindle cannot be solved in time 2o(`) · nO(1). The second one is that, given
a digraph G and two integers `1, `2 with `2 ≥ `1 ≥ 1, the problem of deciding whether G
contains a subdivision of a (`1, `2)-spindle cannot be solved in time 2o(`2) · nO(`1).
Concerning the existence of polynomial kernels, it is easy to prove that none of the above
problems admits polynomial kernels unless NP ⊆ coNP/poly. Indeed, taking the disjoint
union of t instances of any of these two problems defines a cross-composition, as defined by
Bodlaender et al. [6], from the problem to itself, directly implying the desired results as both
problems are NP-hard by Proposition 10. We refer to [6] for the missing definitions.
4.2 FPT algorithms
Our FPT algorithms for finding subdivisions of (`1, `2)-spindles are based on the technique
of representative families introduced by Monien [24]. We use the improved version of this
technique recently presented by Fomin et al. [14] and, more precisely, our algorithms and
notation are inspired by the ones for Long Directed Cycle given in [14]. We start with
some definitions introduced from [14] that can also be found in [10].
Two independent sets A, B of a matroidM fit if A ∩B = ∅ and A ∪B is independent.
I Definition 11. LetM be a matroid and A be a family of sets of size p inM. A subfamily
A′ ⊆ A is said to q-represent A if for every set B of size q such that there is an A ∈ A that
fits B, there is an A′ ∈ A′ that also fits B. If A′ q-represents A, we write A′ ⊆qrep A.
4.2.1 Finding 2-spindles with large total size
We start with the algorithm to solve the problem of, given a digraph G and a positive integer
`, deciding whether there exist two strictly positive integers `1, `2 with `1 + `2 = ` such that
G contains a subdivision of a (`1, `2)-spindle, running in time 2O(`) · nO(1).
If a subdigraph S of G is a subdivision of a (`1, `2)-spindle, with min{`1, `2} ≥ 1 and
`1 + `2 = `, we say that S is a good spindle. We may assume that max{`1, `2} ≥ 2, as
otherwise the desired spindle is just an arc with multiplicity two, which can be detected in
polynomial time by using a maximum flow algorithm.
The following simple observation, whose proof can be easily verified, will be crucially
used by the algorithm that we propose in the sequel. See Figure 4 for an illustration.
I Lemma 12. A digraph G has a good spindle if and only if there exist vertices u, u1, u2, v,
integers `1, `2 with min{`1, `2} ≥ 1 and `1 +`2 = `, a (u, u1)-path P u1 on `1 vertices, a (u, u2)-
path P u2 on `2 vertices, a (u1, v)-path P v1 , and a (u2, v)-path P v2 such that V (P u1 )∩ V (P u2 ) =
{u}, V (P v1 ) ∩ V (P v2 ) = {v}, V (P u1 ) ∩ V (P v1 ) = {u1}, V (P u2 ) ∩ V (P v2 ) = {u2}, and, if
min{`1, `2} ≥ 2, V (P u1 ) ∩ V (P v2 ) = V (P u2 ) ∩ V (P v1 ) = ∅.
1 The ETH states that there is no algorithm solving 3-SAT on a formula with n variables in time 2o(n).
CVIT 2017
XX:12 On the complexity of finding internally vertex-disjoint long directed paths
In the above lemma, note that if min{`1, `2} = 1 then one of the paths P u1 and P u2 , say
P u1 , may be degenerate to vertex u, and in that case we have that u1 = u.
u v
u1
u2
Pu1 P
v
1
Pu2 P v2
`1
`2
Figure 4 Illustration of the vertices and paths described in Lemma 12.
Motivated by Lemma 14, for every triple of vertices u, u1, u2 ∈ V (G) and positive integers
`1, `2, we define
S`1,`2u,u1,u2 =
{
X : S ⊆ V (G), |X| = `1 + `2 − 1, and G[X] contains a
(u, u1)-path P u1 on `1 vertices and a (u, u2)-path P u2
on `2 vertices such that V (P u1 ) ∩ V (P u2 ) = {u}
}
.
The key idea is to compute efficiently a small family of subsets of V (G) that represents
the above sets, which are too large for our purposes. More precisely, for every triple of
vertices u, u1, u2 ∈ V (G) and positive integers `1, `2, q with `1, `2 ≤ ` and q ≤ 2`− (`1 + `2),
we will compute in time 2O(`) · nO(1) a q-representative family
Ŝ`1,`2,qu,u1,u2 ⊆
q
rep S`1,`2u,u1,u2 .
As in [14], the matroid with respect to which we will define the above q-representative
family Ŝ`1,`2,qu,u1,u2 is the uniform matroid with ground set V (G) and rank ` + q.
We postpone the computation of the above q-representative families in time 2O(`) · nO(1)
to Section 4.2.3, and assume now that we already have these families at hand. The following
lemma states that they are enough to find the desired good spindle.
I Lemma 13. If G contains a good spindle, then there exist vertices u, u1, u2, v, integers `1, `2
with min{`1, `2} ≥ 1 and `1 + `2 = `, a set Ŝu ∈ Ŝ`1,`2,qu,u1,u2 with q ≤ `− 1, a (u1, v)-path P
v
1 ,
and a (u2, v)-path P v2 such that V (P v1 )∩V (P v2 ) = {v} and Ŝu ∩ (V (P v1 )∪V (P v2 )) = {u1, u2}.
Proof. Let S be a good spindle in G with minimum number of vertices, which exists by
hypothesis, and let u and v be the tail and the head of S, respectively. Let P u1 = (u, . . . , u1)
and P u2 = (u, . . . , u2) be two subdipaths in S outgoing from u, on `1 and `2 vertices,
respectively, with `1 + `2 = `. Let also P v1 = (u1, . . . , v) and P v2 = (u2, . . . , v) be the two
subdipaths in S from u1 and u2 to v, respectively (see Figure 4). Let Su = V (P u1 ) ∪ V (P u2 ),
and note that Su ∈ S`1,`2u,u1,u2 .
In order to apply the properties of q-representative families, we define a vertex set
B ⊆ V (S) as follows. If |V (S)\Su| ≤ `−2, let B = V (S)\Su. Otherwise, let B be the union
of two subdipaths P B1 = (v1, . . . , v) and P B2 = (v2, . . . , v) in S with V (P B1 ) ∩ V (P B1 ) = {v}
and |V (P B1 ) ∪ V (P B1 )| = `− 1. Note that there may be several choices for the lengths of P B1
and P B2 , as far as their joint number of vertices is equal to `− 1. Note also that P B1 (resp.
P B2 ) is a subdipath of P v1 (resp. P v2 ).
Let q = |B| ≤ `− 1. Since Su ∈ S`1,`2u,u1,u2 and Su ∩B = ∅, by definition of q-representative
family there exists Ŝu ∈ Ŝ`1,`2,qu,u1,u2 such that Ŝu∩B = ∅. We claim that Ŝu∩(V (P
v
1 )∪V (P v2 )) =
J. Araújo, V. A. Campos, A. K. Maia, I. Sau, and A. Silva XX:13
{u1, u2}, which concludes the proof of the lemma. If |B| ≤ `− 2, the claim follows easily as
Ŝu∩B = ∅ and B contains all the vertices in V (S)\Su. Suppose henceforth that |B| ≥ `− 1,
and let P̂ u1 and P̂ u2 be the two paths in G[Ŝu] with V (P̂ u1 ) ∩ V (P̂ u1 ) = {u}. Assume for
contradiction that (Ŝu ∩ (V (P v1 ) ∪ V (P v2 ))) \ {u1, u2} 6= ∅, and we distinguish two cases.
Suppose first that each of the paths P̂ u1 and P̂ u2 intersects exactly one of the paths P v1
and P v2 . By hypothesis, there exists a vertex w ∈ (Ŝu ∩ (V (P v1 ) ∪ V (P v2 ))) \ {u1, u2}, and
suppose without loss of generality that w ∈ V (P̂ u1 )∩V (P v1 ); see Figure 5(a) for an illustration.
We define a good spindle Ŝ in G as follows. The tail and head of Ŝ are vertices u and v,
respectively. The first path of Ŝ starts at u, follows P̂ u1 until its first intersection with P v1
(vertex w in Figure 5(a)), which is distinct from u1 by hypothesis, and then follows P v1 until
v. The second path of Ŝ starts at u, follows P̂ u2 until its first intersection with P v2 , which
may be vertex u2, and then follows P v2 until v. Since |B| ≥ ` − 1 and each of P̂ u1 and P̂ u2
intersects exactly one of P v1 and P v2 , it follows that Ŝ is indeed a good spindle. On the other
hand, since |V (P̂ u1 )∪V (P̂ u2 )| = |V ((P u1 )∪V (P u2 )| and vertex w comes strictly after u1 in P v1 ,
it follows that the first path of Ŝ is strictly shorter than the corresponding path of S, while
the second one is not longer. Therefore, |V (Ŝ)| < |V (S)|, a contradiction to the choice of S.
u v
u1
u2
Pu1
PB1
Pu2
PB2
v1
v2
P̂u1
P̂u2
(b)
u v
u1
u2
Pu1 PB1
Pu2 PB2
v1
v2
w
P̂u1
P̂u2
(a)
w1
w2
Figure 5 Illustration of the two cases in the proof of Lemma 13.
Suppose now that one of the paths P̂ u1 and P̂ u2 , say P̂ u1 , intersects both P v1 and P v2 .
Without loss of generality, suppose that, starting from u, P̂ u1 meets P v1 before than P v2 . Let
w1 and w2 be vertices of P̂ u1 such that w1 ∈ V (P v1 ), w2 ∈ V (P v2 ), and there is no vertex of
P̂ u1 between w1 and w2 that belongs to V (P v1 ) ∪ V (P v2 ); see Figure 5(b) for an illustration.
We define a good spindle Ŝ in G as follows. The tail and head of Ŝ are vertices w1 and v,
respectively. The first path of Ŝ starts at w1 and follows P v1 until v. The second path of
Ŝ starts at w1, follows P̂ u1 until w2, and then follows P v2 until v. By the choice of w1 and
w2 and since |B| ≥ `− 1, it follows that Ŝ is indeed a good spindle. On the other hand, by
construction |V (Ŝ)| ≤ |V (S)| − |V (P̂ u2 )| < |V (S)|, contradicting again the choice of S. J
Wrapping up the algorithm. We finally have all the ingredients to describe our algorithm,
which proceeds as follows. First, for every triple of vertices u, u1, u2 ∈ V (G) and positive
integers `1, `2, q with `1, `2 ≤ ` and q ≤ 2` − (`1 + `2), we compute, as explained in
Section 4.2.3, a q-representative family Ŝ`1,`2,qu,u1,u2 ⊆
q
rep S`1,`2u,u1,u2 of size 2
O(`) in time 2O(`) ·nO(1).
Then the algorithm checks, for each u, u1, u2, v ∈ V (G), integers `1, `2, q with min{`1, `2} ≥ 1,
`1 + `2 = `, and q ≤ `− 1, and set S ∈ Ŝ`1,`2,qu,u1,u2 , whether G contains a (u1, v)-path P
v
1 and a
(u2, v)-path P v2 such that V (P v1 ) ∩ V (P v2 ) = {v} and S ∩ (V (P v1 ) ∪ V (P v2 )) = {u1, u2}. Note
that the latter check can be easily performed in polynomial time by a flow algorithm [2]. The
correctness of the algorithm follows directly from Lemma 12 and Lemma 13, and its running
CVIT 2017
XX:14 On the complexity of finding internally vertex-disjoint long directed paths
time is 2O(`) · nO(1), as claimed. In order to keep the exposition as simple as possible, we
did not focus on optimizing either the constants involved in the algorithm or the degree of
the polynomial factor. Nevertheless, explicit small constants can be derived by carefully
following the details in Fomin et al. [14].
4.2.2 Finding 2-spindles with two specified lengths
We now turn to the problem of finding 2-spindles with two specified lengths. Namely, given
a digraph G and two integers `1, `2 with `2 ≥ `1 ≥ 1, our objective is to decide whether G
contains a subdivision of a (`1, `2)-spindle in time 2O(`2) · nO(`1). Note that this problem
differs from the one considered in Section 4.2.1, as now we specify both lengths of the
desired spindle, instead of just its total size. Our approach is similar to the one presented in
Section 4.2.1, although some more technical ingredients are needed, and we need to look at
the problem from a slightly different point of view.
In this section, we say that a subdigraph S of G is a good spindle if it is a subdivision of
a (`1, `2)-spindle. We may again assume that max{`1, `2} ≥ 2. The following lemma plays a
similar role as Lemma 12, but now we will exploit the fact that our algorithm can afford to
guess the first `1 vertices in the “short” path. Its proof is also easy to verify. See Figure 6
for an illustration.
I Lemma 14. A digraph G has a good spindle if and only if there exist vertices u, u′, v, a
(u, v)-path P1 of length at least `1, a (u, u′)-path P u2 on `2 vertices, and a (u′, v)-path P v2
such that V (P1) ∩ V (P u2 ) = {u}, V (P1) ∩ V (P v2 ) = {v}, and V (P u2 ) ∩ V (P v2 ) = {u′}.
u v
u′
P1
Pu2
P v2
`2
`1
Figure 6 Illustration of the vertices and paths described in Lemma 14.
The main difference with respect to Section 4.2.1 is that now we will only represent the
candidates for the first `2 vertices of the “long” path, denoted by V (P u2 ) in Lemma 14. To
this end, we define, similarly to [14], the following set for every pair of vertices u, u′ ∈ V (G)
and positive integer `2:
P`2u,u′ =
{
X : S ⊆ V (G), |X| = `2, and G[X] contains a (u, u′)-path on `2 vertices
}
.
The above sets are exactly the same as those defined by Fomin et al. [14] to solve the Long
Directed Cycle problem. Therefore, we can just apply [14, Lemma 5.2] and compute,
for every pair of vertices u, u′ ∈ V (G) and positive integers `2, q with q ≤ `1 + `2 ≤ 2`2, a
q-representative family
P̂`2,qu,u′ ⊆
q
rep P
`2
u,u′
of size 2O(`2) in time 2O(`2) · nO(1).
Now we would like to state the equivalent of Lemma 13 adapted to the new representative
families. However, it turns out that the families P̂`2,qu,u′ are not yet enough in order to find the
desired spindle. To circumvent this cul-de-sac, we use the following trick: we first try to find
“short” spindles using the color-coding technique of Alon et al. [1], and if we do not succeed,
J. Araújo, V. A. Campos, A. K. Maia, I. Sau, and A. Silva XX:15
we can guarantee that all good spindles have at least one “long” path. In this situation, we
can prove that the families P̂`2,qu,u′ are indeed enough to find a good spindle. More precisely, a
good spindle S is said to be short if both its paths have at most 2`2 vertices, and it is said
to be long otherwise. Note that the following lemma only applies to digraphs without good
short spindles.
I Lemma 15. Let G be a digraph containing no good short spindles. If G contains a good long
spindle, then there exist vertices u, u′, v, a (u, v)-path P1 of length at least `1, a (u, u′)-path
P̂ u2 on `2 vertices such that V (P̂ u2 ) ∈ P̂
`2,q
u,u′ with q = `1 + `2 − 1, and a (u′, v)-path P v2 such
that V (P1) ∩ V (P̂ u2 ) = {u}, V (P1) ∩ V (P v2 ) = {v}, and V (P̂ u2 ) ∩ V (P v2 ) = {u′}.
Proof. Let S be a good spindle in G with minimum number of vertices, which exists by
hypothesis, and let u and v be the tail and the head of S, respectively. Let P1 be the shortest
of the two (u, v)-paths of S, and let u′ be the vertex on the other path of S at distance exactly
`2 − 1 from u. Let P u2 and P v2 be the (u, u′)-path and the (u′, v)-path in S, respectively.
Note that P u2 ∈ P
`2
u,u′ . Since by hypothesis S is along spindle, it follows that |V (P v2 )| > `2.
Again, in order to apply the properties of q-representative families, we define a vertex set
B ⊆ V (S) as follows, crucially using the hypothesis that S is a good long spindle. Namely, B
contains the last `1 vertices of the path P1 together with the last `2 vertices of the path P v2 ,
including v. Note that |B| = `1 +`2−1 and that, since |V (P v2 )| > `2, we have V (P u2 )∩B = ∅.
Let q = |B|. Since P u2 ∈ P
`2
u,u′ and V (P u2 ) ∩ B = ∅, by definition of q-representative
family there exists a set in P̂`2,qu,u′ corresponding to a (u, u′)-path P̂ u2 such that V (P̂ u2 )∩B = ∅.
We claim that V (P̂ u2 )∩ V (S) ⊆ V (P u2 ), which concludes the proof of the lemma. Assume for
contradiction that (V (P̂ u2 ) ∩ V (S)) \ V (P u2 ) 6= ∅, and we again distinguish two cases.
Suppose first that P̂ u2 is disjoint from P1, except for vertex u. Let w be the first vertex of
P̂ u2 in V (P v2 ) \ {u′}; see Figure 7(a) for an illustration. We define a good spindle Ŝ in G as
follows. The tail and head of Ŝ are vertices u and v, respectively. The first path of Ŝ is equal
to P1. The second path of Ŝ starts at u, follows P̂ u2 until its first intersection with P v1 (vertex
w in Figure 7(a)), which is distinct from u1 by hypothesis, and then follows P v1 until v. By
definition of B, it follows that Ŝ is a good spindle, and by construction |V (Ŝ)| < |V (S)|, a
contradiction to the choice of S.
(b)(a)
u v
u′
Pu2
P̂u2
`1
`2
B
w1
w2
u v
u′Pu2 w
P̂u2
`1
`2
B
P1 P1
Figure 7 Illustration of the two cases in the proof of Lemma 15.
Suppose now that P̂ u2 intersects P1. Since P̂ u2 ends at vertex u′ /∈ V (P1), there exist
vertices w1, w2 such that w1 ∈ V (P1), w2 ∈ V (P̂ u2 ) ∪ V (P v2 ), and there is no vertex of P̂ u1
between w1 and w2 that belongs to V (P1)∪V (P̂ u2 )∪V (P v2 ); see Figure 7(b) for an illustration.
We define a good spindle Ŝ in G as follows. The tail and head of Ŝ are vertices w1 and v,
respectively. The first path of Ŝ starts at w1 and follows P1 until v. The second path of Ŝ
CVIT 2017
XX:16 On the complexity of finding internally vertex-disjoint long directed paths
starts at w1, follows P̂ u2 until w2, and then follows P̂ u2 ∪ P v2 until v. By the choices of B, w1,
and w2, it follows that Ŝ is a good spindle with |V (Ŝ)| < |V (S)|, contradicting again the
choice of S. J
Wrapping up the algorithm. We start by trying to find good small spindles. Namely, for
every pair of integers `′1, `′2 with `1 ≤ `′1 ≤ 2`2 and `2 ≤ `′2 ≤ 2`2, we test whether G contains
a (`′1, `′2)-spindle as a subgraph, by using the color-coding technique of Alon et al. [1]. Since
the treewidth of an undirected spindle is two, this procedure takes time 2O(`2) · nO(1).
If we succeed, the algorithm stops. Otherwise, we can guarantee that G does not contain
any good short spindle, and therefore we are in position to apply Lemma 15. Before this,
we first compute, for every pair of vertices u, u′ ∈ V (G) and positive integers `2, q with
q ≤ `1 +`2 ≤ 2`2, a q-representative family P̂`2,qu,u′ ⊆qrep P
`2
u,u′ of size 2O(`2) in time 2O(`2) ·nO(1),
using [14, Lemma 5.2].
Now, for each path P̂ u2 such that V (P̂ u2 ) ∈ P̂
`2,q
u,u′ , with q = `1 + `2 − 1, we proceed as
follows. By Lemma 14 and Lemma 15, it is enough to guess a vertex v ∈ V (G) and check
whether G contains a (u, v)-path P1 of length at least `1, and a (u′, v)-path P v2 such that
V (P1)∩V (P̂ u2 ) = {u}, V (P1)∩V (P v2 ) = {v}, and V (P̂ u2 )∩V (P v2 ) = {u′}. In order to do so, we
apply brute force and we guess the first `1 vertices of P1 in time nO(`1). Let these vertices be
u, u2, . . . , u`1 . All that remains is to test whether the graph G\{u2, . . . , u`1−1}\(V (P̂ u2 )\{u′})
contains two internally vertex-disjoint paths from u`1 and u′ to u, which can be done in
polynomial time by using a flow algorithm [2]. The correctness of the algorithm follows by
the above discussion, and its running time is 2O(`2) · nO(`1), as claimed. Again, we did not
focus on optimizing the constants involved in the algorithm.
4.2.3 Computing the representative families efficiently
We now explain how the representative families used in Sections 4.2.1 and 4.2.2 can be
efficiently computed, by using the results of Fomin et al. [14]. As discussed in Section 4.2.2,
the families P̂`2,qu,u′ are exactly the same as those used by Fomin et al. [14], so we can directly
use [14, Lemma 5.2] and compute them in time 2O(`2) · nO(1). Let us now explain how the
results of Fomin et al. [14] can be used to compute efficiently the families Ŝ`1,`2,qu,u1,u2 used in
Section 4.2.1. We need the following lemma.
I Lemma 16 (Fomin et al. [14]). Let M = (E, I) be a matroid a S be a family of subsets of
E. If S = S1 ∪ · · · ∪ Sk and Ŝi ⊆qrep Si for 1 ≤ i ≤ k, then ∪ki=1Ŝi ⊆qrep S.
The key observation is that the families S`1,`2u,u1,u2 can be obtained by combining pairs
of elements in the families P`2u,u′ . More precisely, for every triple of vertices u, u1, u2 and
positive integers `1, `2, it holds that
S`1,`2u,u1,u2 ⊆ P
`1
u,u1 ∪ P
`2
u,u2 .
Note that in the above equation we do not have equality, as some pairs of paths in P`1u,u1 and
P`2u,u2 , respectively, may intersect at other vertices distinct from u.
By Lemma 16, if P̂`1,qu,u1 ⊆
q
rep P`1u,u1 and P̂
`2,q
u,u2 ⊆
q
rep P`2u,u2 , then
P̂`1,qu,u1 ∪ P̂
`2,q
u,u2 ⊆
q
rep P`1u,u1 ∪ P
`2
u,u2 .
To conclude, it just remains to observe that, by the definition of q-representative family, it
holds that if M = (E, I) is a matroid, S is a family of subsets of E, S ′ ⊆ S and Ŝ ⊆qrep S,
then Ŝ ⊆qrep S ′ as well.
J. Araújo, V. A. Campos, A. K. Maia, I. Sau, and A. Silva XX:17
Therefore, for every triple of vertices u, u1, u2 and positive integers `1, `2 with `1, `2 ≤ `,
in order to compute a q-representative family for S`1,`2u,u1,u2 , we can just take the union of
q-representative families for P`1u,u1 and P
`2
u,u2 , and these latter families can be computed in
time 2O(`) · nO(1) by [14, Lemma 5.2].
5 Finding spindles on directed acyclic graphs
In this section we focus on the case where the input digraph is acyclic. We start by proving
Theorem 4. The proof uses classical dynamic programming along a topological ordering of
the vertices of the input acyclic digraph.
Proof of Theorem 4. Given an acyclic digraph G and positive integers k, `, recall that we
want to prove that one can decide in time O(`k · n2k+1) whether G has a subdivision of a
(k× `)-spindle. For this, let H be obtained from the empty digraph by adding, for each vertex
u ∈ V (G), vertices u+, u− and an arc (u+, u−) between them, and adding arc (u−, v+) for
each arc (u, v) ∈ A(G). Note that H is also acyclic, and fix an arbitrary topological ordering
of V (H).
I Claim 2. There exists a subdivision of a (k × `)-spindle in G if and only if there exist
x, y ∈ V (H) and k arc-disjoint (x, y)-paths in H, each of length at least 2`− 1.
Proof of the claim. On the one hand, each path of a (k × `)-spindle gives rise to a path
in H of length at least 2`− 1, since each internal vertex of a path is split into two (these
paths are actually vertex-disjoint). On the other hand, let P1, . . . , Pk be arc-disjoint paths
between x, y ∈ V (H), each of length at least 2`− 1. Since either |N+(z)| = 1 or |N−(z)| = 1
for every z ∈ V (H), and since P1, . . . , Pk are arc-disjoint, we get that P1, . . . , Pk are actually
internally vertex-disjoint. Now, to obtain the desired (k × `)-spindle, it suffices to observe
that if u+ ∈ V (Pi) \ {y}, for some u ∈ V (G) and some i ∈ {1, . . . , k}, then u− ∈ V (Pi). 
We want to decide whether H has the desired paths. For each x ∈ V (H), we define the
table Px with entries (e1, t1, . . . , ek, tk), for each choice of at most k distinct arcs e1, . . . , ek
(some of these may not exist, in which case we represent it by ‘null’), and for each choice of k
values t1, . . . , tk from the set {0, 1, . . . , 2`− 1}. Observe that Px has size (|A(H)|+ 1)k · (2`)k,
which, since we need to analyze the table of each vertex, gives us the claimed complexity of
the algorithm. The meaning of an entry is given below:
Px(e1, t1, . . . , ek, tk) = true if and only if there exist k arc-disjoint paths P1, . . . , Pk
starting at x and ending at e1, . . . , ek of length at least t1, . . . , tk, respectively.
We compute these tables starting at small values of
∑k
i=1 ti. Namely, for t1 = t2 = . . . =
tk = 0, it holds that Px(e1, t1, . . . , ek, tk) = true if and only if {e1, . . . , ek} = ∅.
Now, to compute Px(e1, t1, . . . , ek, tk), let w be the greatest vertex in {z ∈ V (H) :
(z′, z) ∈ {e1, . . . , ek}}, and let w′ be the greatest vertex in {z ∈ V (H) : (z, w) ∈ {e1, . . . , ek}},
according to the chosen topological ordering of V (H). Also, let ei = (w′, w). If w = x, then
the entry is given above, so suppose otherwise.
I Claim 3. Px(e1, t1, . . . , ek, tk) = true if and only if Px(e1, t1, . . . , e, ti−1, . . . , ek, tk) = true,
for some arc e ∈ A(H) \ {e1, . . . , ek} incoming at w′.
Proof of the claim. Suppose first that Px(e1, t1, . . . , ek, tk) = true, and let P1, . . . , Pk be
arc-disjoint paths starting at x and ending at e1, . . . , ek of length at least t1, . . . , tk, re-
spectively. Let e be the arc preceding ei in path Pi (e can denote the empty set when ei
CVIT 2017
XX:18 On the complexity of finding internally vertex-disjoint long directed paths
is incident to x). Then, P1, . . . , Pi−1, Pi − ei, Pi+1, . . . , Pk are arc-disjoint paths ending at
e1, . . . , ei−1, e, ei+1, . . . , ek of length at least t1, . . . , ti−1, ti − 1, ti+1, . . . , tk, respectively.
Conversely, let P1, . . . , Pk be arc-disjoint paths that certify entry Px(e1, t1, . . . , e, ti −
1, . . . , ek, tk). If ei /∈ A(Pj), for every j ∈ {1, . . . , k}, then P1, . . . , Pi−1, Pi + ei, Pi+1, . . . , Pk
are the desired paths. So suppose that ei ∈ A(Pj). If j = i, then we get a cycle in H, a
contradiction. Otherwise, because ei 6= ej and Pj ends in ej , we get that there is a path
starting in w and ending in z′, where ej = (z, z′). This contradicts the choice of w. 
By Claim 3, the entry Px(e1, t1, . . . , ek, tk) can be computed by verifying at most |N+(w′)|
smaller entries. By Claim 2, the desired spindle exists if and only if there exist x, y ∈ V (H)
and k arcs e1, . . . , ek incoming at y such that Px(e1, 2`− 1, e2, 2`− 1, . . . , ek, 2`− 1) = true.
The theorem follows. 
Motivated by the fact that finding a subdivision of a general digraph F is in XP para-
meterized by |V (F )| on acyclic digraphs [3,23], we now present two hardness results about
finding subdivisions of disjoint spindles on acyclic digraphs. The first result holds even for
planar acyclic digraphs.
I Proposition 17. If F is the disjoint union of (2 × 1)-spindles, then deciding whether a
planar acyclic digraph contains a subdivision of F is NP-complete.
Proof. We reduce from the problem of deciding whether the edges of a tripartite graph can
be partitioned into triangles, which is known to be NP-complete [15], even restricted to
planar tripartite graphs [30]. Let G be an input planar tripartite (undirected) graph, and
let A ∪ B ∪ C be a tripartition of V (G). We build from G a planar acyclic digraph G′ by
orienting all edges from A to B, from B to C, and from A to C. It is clear that E(G) admits
a partition into triangles if and only if G′ contains as a subdivision (in fact, as a subdigraph)
the digraph containing |E(G)|/3 disjoint copies of a (2× 1)-spindle. J
Our next result shows that, for some choices of F , finding a subdivision of F is W[1]-hard
on acyclic digraphs. We just present a sketch of proof, as the reduction is based on a minor
modification of an existing reduction of Slivkins [29].
I Proposition 18. If F is the disjoint union of a (k1×1)-spindle and a (k2×1)-spindle, then
deciding whether an acyclic digraph contains a subdivision of F is W[1]-hard parameterized
by k1 + k2.
Sketch of proof. The proof is done by appropriately modifying the reduction for Edge-
Disjoint Paths on acyclic digraphs given by Slivkins [29], which carries over to the
vertex-disjoint version as well. The reduction is from k-Clique, and the sets of demands to
be satisfied consist just of a multiarc with multiplicity
(
k
2
)
and another one with multiplicity
k between two given pairs of terminals. The idea is the following: since in our problem we
do not have fixed terminals, we “simulate” them by leaving only four vertices of high degree,
so that finding the desired subdivision will only be possible by using the prescribed four
vertices as endpoints. To do so, we take the construction of Slivkins [29] and for each vertex,
except for the four prescribed ones, we replace its outgoing (resp. incoming) arcs by an
out-arborescence (resp. in-arborescence) of out-degree (resp. in-degree) at most two. Note
that this operation may blow up the size of the subdivision, but it does not matter, as the
parameter remains the same. By taking F to be the disjoint union of a (
(
k
2
)
× 1)-spindle and
a (k × 1)-spindle, the result follows. 
It is worth noting that the problem considered in Proposition 18 is para-NP-hard on
general digraphs, as the conditions of [3, Theorem 8] are easily seen to be fulfilled.
J. Araújo, V. A. Campos, A. K. Maia, I. Sau, and A. Silva XX:19
6 Conclusions
We studied the complexity of several problems consisting in finding subdivisions of spindles
on digraphs. For a general spindle F , we do not know if finding a subdivision of F is FPT on
general digraphs parameterized by |V (F )|, although we believe that it is indeed the case. As
a partial result, one could try to prove that, for a fixed value of ` ≥ 4, finding a subdivision
of a (k × `)-spindle is FPT parameterized by k (the problem is NP-hard by Theorem 1).
The above question is open even if the input digraph is acyclic (note that Theorem 4
does not answer this question), or even if F is a 2-spindle. Concerning 2-spindles, one may
try use the technique we used to prove Theorems 2 and 3, based on representative families in
matroids. However, the technique does not seem to be easily applicable when the parameter is
the total size of a prescribed 2-spindle. Namely, using the terminology from Section 4.2.2, the
bottleneck is to find spindles that have one “short” and one “long” path. On the other hand,
generalizing this technique to spindles with more than two paths seems pretty complicated.
Cai and Ye [8] recently studied the problem of finding two edge-disjoint paths on undirected
graphs with length constraints between specified vertices. These length constraints can be
an upper bound, a lower bound, or an equality on the lengths of each of the two desired
paths, or no restriction at all, resulting in nine different problems. Interestingly, out of these
nine problems, Cai and Ye [8] gave FPT algorithms for seven of them, and left open only
the following two cases: when there is only one constraint of type ‘at least’, and when both
constraints are of type ‘at least’. Interestingly, this latter problem is closely related to finding
a subdivision of a 2-spindle.
In general, very little is known about the complexity of finding subdivisions on digraphs.
Bang-Jensen et al. [3] conjectured that, considering |V (F )| as a constant, the problem of
finding a subdivision of F is either polynomial-time solvable or NP-complete. This conjecture
is wide open. Recently, Havet et al. [17] studied the cases where |V (F )| = 4, and managed
to classify all of them up to five exceptions. Even less is known about the parameterized
complexity of the cases that are polynomial-time solvable for fixed F , that is, the cases in
XP. In this article we focused on spindles, but there are other potential candidates such as,
using the terminology of [3], windmills, palms, or antipaths.
References
1 N. Alon, R. Yuster, and U. Zwick. Color-coding. Journal of the ACM, 42(4):844–856, 1995.
2 J. Bang-Jensen and G. Gutin. Digraphs: Theory, Algorithms and Applications. Springer-
Verlag, 2nd edition, 2008.
3 J. Bang-Jensen, F. Havet, and A. K. Maia. Finding a subdivision of a digraph. Theoretical
Computer Science, 562:283–303, 2015.
4 A. Benhocine and A. P. Wojda. On the existence of specified cycles in a tournament.
Journal of Graph Theory, 7(4):469–473, 1983.
5 A. Björklund, T. Husfeldt, and S. Khanna. Approximating longest directed paths and cycles.
In Proc. of the 31st International Colloquium on Automata, Languages and Programming
(ICALP), volume 3142 of LNCS, pages 222–233, 2004.
6 H. L. Bodlaender, B. M. P. Jansen, and S. Kratsch. Kernelization lower bounds by cross-
composition. SIAM Journal on Discrete Mathematics, 28(1):277–305, 2014.
7 R. C. Brewster, P. Hell, S. H. Pantel, R. Rizzi, and A. Yeo. Packing paths in digraphs.
Journal of Graph Theory, 44(2):81–94, 2003.
8 L. Cai and J. Ye. Finding two edge-disjoint paths with length constraints. In Proc. of the
42nd International Workshop on Graph-Theoretic Concepts in Computer Science (WG),
volume 9941 of LNCS, pages 62–73, 2016.
CVIT 2017
XX:20 On the complexity of finding internally vertex-disjoint long directed paths
9 N. Cohen, F. Havet, W. Lochet, and N. Nisse. Subdivisions of oriented cycles in digraphs
with large chromatic number. CoRR, abs/1605.07762, 2016.
10 M. Cygan, F. V. Fomin, L. Kowalik, D. Lokshtanov, D. Marx, M. Pilipczuk, M. Pilipczuk,
and S. Saurabh. Parameterized Algorithms. Springer, 2015.
11 R. Diestel. Graph Theory, 4th Edition, volume 173 of Graduate texts in mathematics.
Springer, 2012.
12 R. G. Downey and M. R. Fellows. Fundamentals of Parameterized Complexity. Texts in
Computer Science. Springer, 2013.
13 J. Flum and M. Grohe. Parameterized Complexity Theory. Springer-Verlag, 2006.
14 F. V. Fomin, D. Lokshtanov, F. Panolan, and S. Saurabh. Efficient computation of repres-
entative families with applications in parameterized and exact algorithms. Journal of the
ACM, 63(4):29:1–29:60, 2016.
15 M. R. Garey and D. S. Johnson. Computers and intractability. A guide to the theory of
NP-completeness. W. H. Freeman and Co., 1979.
16 M. Grohe, K. Kawarabayashi, D. Marx, and P. Wollan. Finding topological subgraphs is
fixed-parameter tractable. In Proc. of the 43rd ACM Symposium on Theory of Computing
(STOC), pages 479–488, 2011.
17 F. Havet, A. K. Maia, and B. Mohar. Finding a subdivision of a prescribed di-
graph of order 4. Journal of Graph Theory, to appear. Technical report available at
https://hal.inria.fr/hal-01202650.
18 R. Impagliazzo, R. Paturi, and F. Zane. Which problems have strongly exponential com-
plexity? Journal of Computer and System Sciences, 63(4):512–530, 2001.
19 A. Itai, Y. Perl, and Y. Shiloach. The complexity of finding maximum disjoint paths with
length constraints. Networks, 12(3):277–286, 1982.
20 R. Kim, S.-J. Kim, J. Ma, and B. Park. Cycles with two blocks in k-chromatic digraphs.
CoRR, abs/1610.05839, 2016.
21 M. Kriesell. Disjoint A-paths in digraphs. Journal of Combinatorial Theory, Series B,
95(1):168–2005, 2005.
22 L. Lovász. Matroid matching and some applications. Journal of Combinatorial Theory,
Series B, 28(2):208–236, 1980.
23 A. Metzlar. Disjoint paths in acyclic digraphs. Journal of Combinatorial Theory, Series B,
57(2):228–238, 1993.
24 B. Monien. How to find long paths efficiently. Annals of Discrete Mathematics, 25:239–254,
1985.
25 R. Niedermeier. Invitation to Fixed-Parameter Algorithms. Oxford University Press, 2006.
26 J. G. Oxley. Matroid theory. Oxford University Press, 1992.
27 A. Schrijver. A Short Proof of Mader’s S-Paths Theorem. Journal of Combinatorial Theory,
Series B, 82(2):319–321, 2001.
28 R. Sedgewick and K. Wayne. Algorithms (4th Edition). Addison-Wesley, YEAR = 2011,.
29 A. Slivkins. Parameterized tractability of edge-disjoint paths on directed acyclic graphs.
SIAM Journal on Discrete Mathematics, 24(1):146–157, 2010.
30 G. Venkatesan and C. Pandu Rangan. Approximate triclique coloring for register allocation.
Information Processing Letters, 60:249–253, 1996.

