Contraction and Deletion Blockers
for Perfect Graphs and H-free Graphs?
Öznur Yaşar Diner1??, Daniël Paulusma2? ? ?,
Christophe Picouleau3, and Bernard Ries4
1 Kadir Has University, Istanbul, Turkey oznur.yasar@khas.edu.tr
2 Durham University, Durham, UK, daniel.paulusma@durham.ac.uk
3 CNAM, Laboratoire CEDRIC, Paris, France christophe.picouleau@cnam.fr
4 University of Fribourg, Fribourg, Switzerland, bernard.ries@unifr.ch
Abstract. We study the following problem: for given integers d, k and graph G,
can we reduce some fixed graph parameter π of G by at least d via at most k graph
operations from some fixed set S? As parameters we take the chromatic number χ,
clique number ω and independence number α, and as operations we choose the
edge contraction ec and vertex deletion vd. We determine the complexity of this
problem for S = {ec} and S = {vd} and π ∈ {χ, ω, α} for a number of subclasses
of perfect graphs. We use these results to determine the complexity of the problem
for S = {ec} and S = {vd} and π ∈ {χ, ω, α} restricted to H-free graphs.
1 Introduction
A typical graph modification problem aims to modify a graph G, via a small number of
operations from a specified set S, into some other graph H that has a certain desired
property, which usually describes a certain graph class G to which H must belong. In
this way a variety of classical graph-theoretic problems is captured. For instance, if only
k vertex deletions are allowed and H must be an independent set or a clique, we obtain
the Independent Set or Clique problem, respectively.
Now, instead of fixing a particular graph class G, we fix a certain graph parameter π.
That is, for a fixed set S of graph operations, we ask, given a graph G, integers k and d,
whether G can be transformed into a graph G′ by using at most k operations from S,
such that π(G′) ≤ π(G) − d. The integer d is called the threshold. Such problems are
called blocker problems, as the set of vertices or edges involved “block” some desirable
graph property, such as being colourable with only a few colours. Identifying the part
of the graph responsible for a significant decrease of the parameter under consideration
gives crucial information on the graph.
Blocker problems have been given much attention over the last few years, see for
instance [2,3,4,13,39,40,43,45]. Graph parameters considered were the chromatic number,
the independence number, the clique number, the matching number, the weight of a
minimum dominating set and the vertex cover number. So far, the set S always consisted
of a single graph operation, which was a vertex deletion, edge deletion or an edge addition.
In this paper, we keep the restriction on the size of S by letting S consist of either a single
vertex deletion or, for the first time, a single edge contraction. As graph parameters we
consider the independence number α, the clique number ω and the chromatic number χ.
Before we can define our problems formally, we first need to give some terminology.
The contraction of an edge uv of a graph G removes the vertices u and v from G, and
? A number of results in this paper have appeared in extended abstracts of the proceedings of
CIAC 2016 [16], ISCO 2016 [37], LAGOS 2017 [36] and TAMC 2017 [38].
?? Author supported by Marie Curie International Reintegration Grant
PIRG07/GA/2010/268322.
? ? ? Author supported by EPSRC (EP/K025090/1) and the Leverhulme Trust (RPG-2016-258).
ar
X
iv
:1
70
6.
09
05
2v
1 
 [
cs
.D
S]
  2
7 
Ju
n 
20
17
replaces them by a new vertex made adjacent to precisely those vertices that were adjacent
to u or v in G (neither introducing self-loops nor multiple edges). We say that G can be k-
contracted or k-vertex-deleted into a graph G′, if G can be modified into G′ by a sequence
of at most k edge contractions or vertex deletions, respectively. We let π denote the (fixed)
graph parameter; as mentioned, in this paper π belongs to {α, ω, χ}.
We are now ready to define our decision problems in a general way:
Contraction Blocker(π)
Instance: a graph G and two integers d, k ≥ 0
Question: can G be k-contracted into a graph G′ such that π(G′) ≤ π(G)− d?
Deletion Blocker(π)
Instance: a graph G and two integers d, k ≥ 0
Question: can G be k-vertex-deleted into a graph G′ such that π(G′) ≤ π(G)−d?
If we remove d from the input and fix it instead, then we call the resulting problems
d-Contraction Blocker(π) and d-Deletion Blocker(π), respectively.
d-Contraction Blocker(π)
Instance: a graph G and an integer k ≥ 0
Question: can G be k-contracted into a graph G′ such that π(G′) ≤ π(G)− d?
d-Deletion Blocker(π)
Instance: a graph G and an integer k ≥ 0
Question: can G be k-vertex-deleted into a graph G′ such that π(G′) ≤ π(G)−d?
The goal of our paper is to increase our understanding of the complexities of Con-
traction Blocker(π) and Deletion Blocker(π) fo π ∈ {ω, χ, α}. In order to do
so, we will also consider the problems d-Contraction Blocker(π) and d-deletion
blocker(π).
1.1 Known Results and Relations to Other Problems
It is known that Deletion Blocker(α) is polynomial-time solvable for bipartite graphs,
as proven both by Bazgan, Toubaline and Tuza [3] and Costa, de Werra and Picouleau [13].
The former authors also proved that Deletion Blocker(α) is polynomial-time solvable
for cographs and graphs of bounded treewidth. The latter authors also proved that for
π ∈ {ω, χ}, Deletion Blocker(π) is polynomial-time solvable for cobipartite graphs.
Moreover, they showed that for π ∈ {ω, χ, α}, Deletion Blocker(π) is NP-complete
for the class of split graphs, but becomes polynomial-time solvable for this graph class if
d is fixed.
By using a number of example problems we will now illustrate how the blocker prob-
lems studied in this paper relate to a number of other problems known in the literature.
As we will see, this immediately leads to new complexity results for the blocker problems.
1. Hadwidger Number and Club Contraction. The Contraction Blocker(α)
problem generalizes the well-known Hadwiger Number problem, which is that of testing
whether a graph can be contracted into the complete graph Kr on r vertices for some
given integer r. Indeed, we obtain the latter problem from the first by restricting instances
to instances (G, d, k) where d = α(G) − 1 and k = |V (G)| − r. Note that the diameter
and independence number of Kr are both equal to 1. Hence, one can also generalize
Hadwiger Number in another way: the Club Contraction problem (see e.g. [21])
2
is that of testing whether a graph G can be k-contracted into a graph with diameter at
most s for some given integers k and s. As such, Contraction Blocker(α) can be
seen as a natural counterpart of Club Contraction.
2. Graph transversals. Blocker problems generalize so-called graph transversal prob-
lems. To explain the latter type of problems, for a family of graphsH, theH-transversal
problem is to test if a graph G can be k-vertex-deleted, for some integer k, into a graph G′
that has no induced subgraph isomorphic to a graph in H. For instance, the problem
{K2}-transversal is the same as Vertex Cover. Here are some examples of specific
connections between graph transversals and blocker problems.
– Let H be the family {Kp | p ≥ 2} of all complete graphs on at least two ver-
tices. Then H-transversal is equivalent to Deletion Blocker(ω) restricted to
instances (G, d, k) with d = ω(G)− 1.
– In our paper we will prove that for a graph G with at least one edge and an integer k ≥
1, the instance (G,ω(G) − 1, k) is a yes-instance of Deletion Blocker(ω) if and
only if (G, k) is a yes-instance of Vertex Cover.
– The Odd Cycle Transversal problem is to test whether a given graph can be made
bipartite by removing at most k vertices for some given integer k ≥ 0. This problem
is NP-complete [31], and it is equivalent to Deletion Blocker(χ) for instances
(G, d, k) where d = χ(G)− 2.
– The d-Transversal or d-Cover problem [13] is to decide whether a graph G =
(V,E) contains a set V ′ that intersects each maximum set satisfying some specified
property π by at least d vertices. For instance, if the property is being an independent
set, 1-Transversal is equivalent to 1-Deletion Blocker(α).
3. Bipartite Contraction. The problem Bipartite Contraction is to test whether a
graph can be made bipartite by at most k edge contractions. Heggernes et al. [26] proved
that this problem is NP-complete. It is readily seen that 1-Contraction Blocker(χ)
and Bipartite Contraction are equivalent for graphs of chromatic number 3.
4. Maximum induced bipartite subgraphs. The Maximum Induced Bipartite
Subgraph problem is to decide if a given graph contains an induced bipartite subgraph
with at least k vertices for some integer k. Addario-Berry et al.[1] proved that this prob-
lem is NP-complete for the class of 3-colourable perfect graphs. We observe that, for
3-colourable graphs, 1-Deletion Blocker(χ) is equivalent to Maximum Induced Bi-
partite Subgraph.
5. Cores. The two problems 1-Deletion Blocker(α) and 1-Deletion Blocker(ω)
are equivalent to testing whether the input graph contains a set of S of size at most k
that intersects every maximum independent set or every maximum clique, respectively. If
k = 1, these two problems become equivalent to testing whether the input graph contains
a vertex that is in every maximum independent set, or in every maximum clique, respec-
tively. In particular, the intersection of all maximum independent sets is known as the core
of a graph. Properties of the core have been well studied (see, for example, [25,29,30]). In
particular, Boros, Golumbic and Levit [7] proved that computing if the core of a graph
has size at least ` is co-NP-hard for every fixed ` ≥ 1. Taking ` = 1 gives co-NP-hardness
of 1-Deletion Blocker(α).
6. Critical vertices and edges. The restriction d = k = 1 has also been studied
when π = χ. A vertex of a graph G is critical if its deletion reduces the chromatic
number of G by 1. An edge of a graph is critical or contraction-critical if its deletion
or contraction, respectively, reduces the chromatic number of G by 1. The problems
Critical Vertex, Critical Edge and Contraction-Critical are to test if a graph
has a critical vertex, critical edge or contraction-critical edge, respectively. We note that
the first two problems are the restrictions of Contraction Blocker(χ) and Deletion
3
Blocker(χ) to instances (G, d, k) where d = k = 1. Complexity dichotomies exist for
each of the three problems on H-free graphs, and moreover the latter two problems are
shown to be equivalent [36]. Graphs with a critical (or equivalently contraction-critical)
edge are also called colour-critical (see, for instance, [41]).
Due to links to problems as the ones above, it is of no surprise that many results for
blocker problems are known implicitly in the literature already in various settings. For
example, Belmonte et al. [5] proved that 1-Contraction Blocker(∆), where ∆ denotes
the maximum vertex-degree, is NP-complete even for split graphs. We make use of several
known complexity results for some of the related problems stated above for proving our
results.
1.2 Our Results
In Section 1.1 we mentioned that Deletion Blocker(π) is known to be NP-complete
for π ∈ {α, ω, χ} even when restricted to special graph classes. Non-surprisingly, Con-
traction Blocker(π) is NP-complete for π ∈ {α, ω, χ} as well (this follows from our
results in Section 8, but it is also easy to show this directly).
Due to the above, it is natural to restrict inputs to some special graph classes in order to
obtain tractable results and to increase our understanding of the computational hardness
of the problems. Note that it is not always clear whether Contraction Blocker(π)
and Deletion Blocker(π) belong to NP when restricted to a graph class G. However,
when G is closed under edge contraction or vertex deletion, respectively, and π can be
verified in polynomial time, then membership of NP holds: we can take as certificate the
sequence of edge contractions or vertex deletions, respectively.
Contraction Blocker(π) Deletion Blocker(π)
Class π = α π = ω = χ π = α π ∈ {ω, χ}
tree P P P [3,13] P
bipartite (χ = 2) NP-h P P [3,13] P
cobipartite d = 1: NP-c NP-c; d fixed: P P P [13]
cograph P P P [3] P
split NP-c; d fixed: P NP-c; d fixed: P NP-c; d fixed: P [13] NP-c; d fixed: P [13]
interval P P
chordal NP-c d = 1: NP-c NP-c d = 1: NP-c
C4-free perfect & ω = 3 d = 1: NP-c
perfect d = 1: NP-h d = 1: NP-h NP-c d = 1: NP-c
Table 1. Summary of results for subclasses of perfect graphs. Here NP-c and NP-h stand for
NP-complete and NP-hard, respectively, whereas P stands for polynomial-time solvable. A blank
entry indicates an open case. All entries apart from the five referenced ones and their consequences
for chordal and perfect graphs are new results proven in Part I of this paper.
We present our results in two parts.
Part I. In the first part of our paper we focus on the class of perfect graphs and a
number of well-known subclasses of perfect graphs. Most of these classes are not only
closed under vertex deletion but also under edge contraction. This enables us to get unified
results for the cases π = ω and π = χ (note that ω = χ holds by definition of a perfect
graph). Another reason for considering subclasses of perfect graphs is that α, ω, χ can
be computed in polynomial time for perfect graphs; Grötschel, Lovász, and Schrijver [23]
proved this for χ and thus for ω, whereas the result for α follows from combining this
result with the fact that perfect graphs are closed under complementation. This helps us
4
with finding tractable results or at least with obtaining membership of NP (if in addition
the subclass under consideration is closed under edge contraction or vertex deletion).
Table 1 gives an overview of the known results and our new results for the classes of
perfect graphs we consider. We have unified results for the cases π = ω and π = χ even for
the perfect graph classes in this table that are not closed under edge contraction, namely
the classes of bipartite graphs; C4-free perfect graphs with clique number 3; and the class
of perfect graphs itself. As the class of perfect graphs is not closed under edge contraction
we could for perfect graphs only deduce that the three contraction blocker problems are
NP-hard (even if d = 1). As the class of cographs coincides with the class of P4-free graphs
(where Pr denotes the r-vertex path) and split graphs are P5-free, the corresponding rows
in Table 1 show a complexity jump of all our problems for Pt-free graphs from t = 4 to
t = 5. Recall also from Section 1.1 that the Hadwiger Number problem is a special
case of Contraction Blocker(α)) As such, our polynomial-time result in Table 1 for
Contraction Blocker(α) restricted to cographs generalizes a result of Golovach et
al. [21], who proved that the Hadwiger Number problem is polynomial time solvable
on cographs.
Part II. In the second part of our paper we give several dichotomy results. First we give,
for π ∈ {α, ω, χ}, complete classifications of Deletion Blocker(π) and Contraction
Blocker(π) depending on the size of π, that is, we prove the following theorem.
Theorem 1. The following six dichotomies hold:
(i) Contraction Blocker(α) is polynomial-time solvable for graphs with α = 1 and
1-Contraction Blocker(α) is NP-complete for graphs with α = 2;
(ii) Contraction Blocker(χ) is polynomial-time solvable for graphs with χ = 2 and
1-Contraction Blocker(χ) is NP-complete for graphs with χ = 3;
(iii) Contraction Blocker(ω) is polynomial-time solvable for graphs with ω = 2 and
1-Contraction Blocker(ω) is NP-complete for graphs with ω = 3;
(iv) Deletion Blocker(α) is polynomial-time solvable for graphs with α = 1 and
1-Deletion Blocker(α) is NP-complete for graphs with α = 2;
(v) Deletion Blocker(χ) is polynomial-time solvable for graphs with χ = 2 and
1-Deletion Blocker(χ) is NP-complete for graphs with χ = 3;
(vi) Deletion Blocker(ω) is polynomial-time solvable for graphs with ω = 1 and
1-Deletion Blocker(ω) is NP-complete for graphs with ω = 2;
In particular we extend the hardness proof of Theorem 1 (iii) in order to obtain the
hardness result for C4-free perfect graphs with ω = 3 in Table 1. We note that some of the
results in Table 1, such as this result, may at first sight seem somewhat arbitrary. However,
we need the result for C4-free perfect graphs with ω = 3 and other results of Table 1 to
prove our other results of the second part of our paper. Namely, by combining the results
for subclasses of perfect graphs with other results, we obtain complexity dichotomies
for our six blockers problems restricted to H-free graphs, that is, graphs that do not
contain some (fixed) graph H as an induced subgraph. These dichotomies are stated in
the following summary; here, Pr is the r-vertex path, C3 is the triangle, and the paw is
the triangle with an extra vertex adjacent to exactly one vertex of the triangle, whereas
⊆i denotes the induced subgraph relation and ⊕ denotes the disjoint union of two vertex
disjoint graphs.
Theorem 2. Let H be a graph. Then the following holds:
(i) If H ⊆i P4, then Deletion Blocker(α) is polynomial-time solvable for H-free
graphs, otherwise it is NP-hard or co-NP-hard for H-free graphs.
5
(ii) If H ⊆i P4, then Contraction Blocker(α) is polynomial-time solvable for H-free
graphs, otherwise it is NP-hard for H-free graphs.
(iii) f H ⊆i P4, then Deletion Blocker(ω) is polynomial-time solvable for H-free
graphs; otherwise it is NP-hard or co-NP-hard for H-free graphs.
(iv) Let H 6= C3 ⊕ P1. If H ⊆i P4 or H ⊆i paw, then Contraction Blocker(ω) is
polynomial-time solvable for H-free graphs, otherwise it is NP-hard or co-NP-hard for
H-free graphs.
(v) If H ⊆i P1⊕P3 or H ⊆i P4, then Deletion Blocker(χ) is polynomial-time solvable
for H-free graphs, otherwise it is NP-hard or co-NP-hard for H-free graphs.
(vi) If H ⊆i P4, then Contraction Blocker(χ) is polynomial-time solvable for H-free
graphs, otherwise it is NP-hard or co-NP-hard for H-free graphs.
Statements (i), (ii), (iii), (v), (vi) of Theorem 2 correspond to complete complexity di-
chotomies, whereas there is one missing case in statement (iv). In particular we note that
statements (v) and (vi) do not coincide for disconnected graphs H. We also observe from
Theorem 2 (i) that Deletion Blocker(α) is computationally hard for triangle-free
graphs; in fact we will show co-NP-hardness even if d = k = 1. This in contrast to the
problem being polynomial-time solvable for bipartite graphs, as shown in [3,13] (see also
Table 1).
1.3 Paper Organization
Section 2 contains notation and terminology.
Sections 3–7 contain the results mentioned in Part I. To be more precise, Section 3
contains our results for cobipartite graphs, bipartite graphs and trees. In Sections 4 and 5,
we prove our results for cographs and split graphs, respectively. In Section 5 we also show
that our NP-hardness reduction for split graphs can be used to prove that the three con-
traction blockers problems, restricted to split graphs, are W[1]-hard when parameterized
by d. The latter result means that for split graphs these problems are unlikely to be
fixed-parameter tractable with parameter d. In Sections 6 and 7 we prove our results for
interval graphs and chordal graphs, respectively.
Sections 8 and 9 contain the results mentioned in Part II. In Section 8 we first prove
dichotomies for the three contraction blocker and three vertex blocker problems when
we classify on basis of the size of π ∈ {α, χ, ω}. In the same section, we modify the
hardness construction for 1-Contraction Blocker(ω) to prove that 1-Contraction
Blocker(ω) is NP-complete even for C4-free perfect graphs with ω = 3. In Section 9 we
prove Theorem 2.
Section 10 contains a number of open problems and directions for future research.
2 Preliminaries
We only consider finite, undirected graphs that have no self-loops and no multiple edges;
we recall that when we contract an edge no self-loops or multiple edges are created. We
refer to [14] or [47] for undefined terminology and to [15] for more on parameterized
complexity.
Let G = (V,E) be a graph. For a subset S ⊆ V , we let G[S] denote the subgraph
of G induced by S, which has vertex set S and edge set {uv ∈ E | u, v ∈ S}. We write
H ⊆i G if a graph H is an induced subgraph of G. Moreover, for a vertex v ∈ V , we write
G− v = G[V \ {v}] and for a subset V ′ ⊆ V we write G− V ′ = G[V \ V ′].
For a set {H1, . . . ,Hp} of graphs, a graph G is (H1, . . . ,Hp)-free if G has no induced
subgraph isomorphic to a graph in {H1, . . . ,Hp}; if p = 1 we may write H1-free instead
6
of (H1)-free. The complement of G is the graph G = (V,E) with vertex set V and an edge
between two vertices u and v if and only if uv /∈ E.
Recall that the contraction of an edge uv ∈ E removes the vertices u and v from
a graph G and replaces them by a new vertex that is made adjacent to precisely those
vertices that were adjacent to u or v in G. This new graph will be denoted by G|uv. In
that case we may also say that u is contracted onto v, and we use v to denote the new
vertex resulting from the edge contraction. The subdivision of an edge uv ∈ E removes
the edge uv from G and replaces it by a new vertex w and two edges uw and wv.
Let G and H be two vertex-disjoint graphs. The join operation ⊗ adds an edge between
every vertex of G and every vertex of H. The union operation ⊕ takes the disjoint union
of G and H, that is, G⊕H = (V (G)∪V (H), E(G)∪E(H)). We denote the disjoint union
of p copies of G by pG. For n ≥ 1, the graph Pn denotes the path on n vertices, that is,
V (Pn) = {u1, . . . , un} and E(Pn) = {uiui+1 | 1 ≤ i ≤ n − 1}. For n ≥ 3, the graph Cn
denotes the cycle on n vertices, that is, V (Cn) = {u1, . . . , un} and E(Cn) = {uiui+1 | 1 ≤
i ≤ n−1}∪{unu1}. The graph C3 is also called the triangle. The claw K1,3 is the 4-vertex
star, that is, the graph with vertices u, v1, v2, v3 and edges uv1, uv2, uv3.
Let G = (V,E) be a graph. A subset K ⊆ V is called a clique of G if any two vertices
in K are adjacent to each other. The clique number ω(G) is the number of vertices in
a maximum clique of G. A subset I ⊆ V is called an independent set of G if any two
vertices in I are non-adjacent to each other. The independence number α(G) is the number
of vertices in a maximum independent set of G. For a positive integer k, a k-colouring
of G is a mapping c : V → {1, 2, . . . , k} such that c(u) 6= c(v) whenever uv ∈ E. The
chromatic number χ(G) is the smallest integer k for which G has a k-colouring. A subset
of edges M ⊆ E is called a matching if no two edges of M share a common end-vertex.
The matching number µ(G) is the number of edges in a maximum matching of a graph G.
A vertex v such that M contains an edge incident with v is saturated by M ; otherwise v
is unsaturated by M . A subset S ⊆ V is a vertex cover of G if every edge of G is incident
with at least one vertex of S.
The Coloring problem is that of testing if a graph has a k-colouring for some given
integer k. The problems Clique and Independent Set are those of testing if a graph
has a clique or independent set, respectively, of size at least k. The Vertex Cover
problem is that of testing if a graph has a vertex cover of size at most k. We need the
following lemma at several places in our paper.
Lemma 1 ([42]). Vertex Cover is NP-complete for C3-free graphs.
An interval graph is a graph such that one can associate an interval of the real line with
every vertex such that two vertices are adjacent if and only if the corresponding intervals
intersect. A graph is cobipartite if it is the complement of a bipartite (2-colourable) graph.
A graph is chordal if it contains no induced cycle on more than three vertices. A graph is
a split graph if it has a split partition, which is a partition of its vertex set into a clique K
and an independent set I. Split graphs coincide with (2P2, C4, C5)-free graphs [18]. A
P4-free graph is also called a cograph.
A graph is perfect if the chromatic number of every induced subgraph equals the size
of a largest clique in that subgraph. A hole is an induced cycle on at least five vertices
and an antihole is the complement of a hole. A hole or antihole is odd if it contains
an odd number of vertices. We need the following well-known theorem of Chudnovsky,
Robertson, Seymour, and Thomas. This theorem can also be used to verify that the other
graph classes in Table 1 are indeed subclasses of perfect graphs.
Theorem 3 (Strong Perfect Graph Theorem [9]). A graph is perfect if and only if
it contains no odd hole and no odd antihole.
7
3 Cobipartite Graphs, Bipartite Graphs and Trees
We first consider the contraction blocker problems and then the deletion blocker problems.
3.1 Contraction Blockers
Our first result is a hardness result for cobipartite graphs that follows directly from a
known result.
Theorem 4. 1-Contraction Blocker(α) is NP-complete for cobipartite graphs.
Proof. Golovach, Heggernes, van ’t Hof and Paul [21] considered the s-Club Contrac-
tion problem. Recall that this problem takes as input a graph G and an integer k and
asks whether G can be k-contracted into a graph with diameter at most s for some fixed
integer s. They showed that 1-Club Contraction is NP-complete even for cobipartite
graphs. Graphs of diameter 1 are complete graphs, that is, graphs with independence
number 1, whereas cobipartite graphs that are not complete have independence num-
ber 2. ut
We now focus on π = χ and π = ω. For our next result (Theorem 5) we need some
additional terminology. A biclique is a complete bipartite graph, which is nontrivial if
it has at least one edge. A biclique vertex-partition of a graph G = (V,E) is a set S of
mutually vertex-disjoint bicliques in G such that every vertex of G is contained in one of
the bicliques of S. The Biclique Vertex-Partition problem consists in testing whether
a given graph G has a biclique vertex-partition of size at most k, for some positive integer
k. Fleischner et al. [17] showed that this problem is NP-complete even for bipartite graphs
and k = 3.
We are now ready to prove Theorem 5.
Theorem 5. For π ∈ {χ, ω}, Contraction Blocker(π) is NP-complete for cobipar-
tite graphs.
Proof. Since cobipartite graphs are perfect and closed under edge contractions, we may
assume without loss of generality that π = χ. The problem is in NP, as Coloring is
polynomial-time solvable on cobipartite graphs and then we can take the sequence of
edge contractions as certificate. We reduce from Biclique Vertex-Partition. Recall
that this problem is NP-complete even for bipartite graphs and k = 3 [17]. As the problem
is polynomial-time solvable for bipartite graphs and k = 2 (see [17]), we may ask for a
biclique vertex-partition of size exactly 3, in which each biclique is nontrivial.
Let (G, 3) be an instance of Biclique Vertex-Partition, where G is a connected
bipartite graph on n vertices that has partition classes X and Y . We claim that G has a
biclique vertex-partition consisting of three non-trivial bicliques if and only if G can be
(n− 6)-contracted into a graph G′ with χ(G′) ≤ 3 (so d = χ(G)− 3).
First suppose that G has a biclique vertex-partition S of size 3. Let S1, S2, S3 be
the three (nontrivial) bicliques in S. Let Ai, Bi be the two bipartition classes of Si for
i = 1, 2, 3. So, in G, we have that A1, A2, A3, B1, B2, B3 are six cliques that partition the
vertices of G, and moreover, there is no edge between a vertex of Ai and a vertex of Bi,
for i = 1, 2, 3. In G we contract each clique Ai to a single vertex that we give colour i,
and we contract each clique Bi to a single vertex that we give colour i as well. In this
way we have obtained a 6-vertex graph G′ (so the number of contractions is n− 6) with
a 3-colouring. Thus, χ(G′) ≤ 3.
Now suppose that G can be (n − 6)-contracted into a graph G′ with χ(G′) ≤ 3. We
first observe that the class of cobipartite graphs is closed under taking edge contractions;
indeed, if e is an edge connecting two vertices of the same partition class, then contracting
e results in a smaller clique, and if e is an edge connecting two vertices of two different
8
partition classes, then contracting e is equivalent to removing one of its end-vertices and
making its other end-vertex adjacent to every other vertex in the resulting graph.
As the class of cobipartite graphs is closed under taking contractions, G′ is cobipar-
tite. As cobipartite graphs have independence number at most 2, each colour class in a
colouring of G′ must have size at most 2. Consequently, G′ must have exactly six vertices
a1, a2, a3, b1, b2, b3 such that a1, a2, a3 form a clique, b1, b2, b3 form a clique, and moreover,
ai and bi are not adjacent, for i = 1, 2, 3. This means that we did not contract an edge uv
with u ∈ X and v ∈ Y (as the resulting vertex would be adjacent to all other vertices).
Hence, we may assume without loss of generality that for i = 1, 2, 3, each ai corresponds
to a set of vertices Ai ⊂ X (that we contracted into the single vertex ai) and that each bi
corresponds to a set of vertices Bi ⊂ Y (that we contracted into the single vertex bi). As
each pair ai, bi is non-adjacent, no vertex of Ai is adjacent to a vertex of Bi. Consequently,
in G, we find that each set Ai ∪Bi induces a biclique. Hence, the sets A1 ∪B1, A2 ∪B2
and A3 ∪B3 form a biclique vertex-partition of G that has size 3. ut
We now assume that d is fixed. We show that d-Contraction Blocker(π) becomes
polynomial-time solvable on cobipartite graphs for π ∈ {χ, ω}. For π = χ, we can prove
this even for the class of graphs with independence number at most 2, or equivalently,
the class of 3P1-free graphs, which properly contains the class of cobipartite graphs.
Theorem 6. For any fixed d ≥ 0, the d-Contraction Blocker(χ) problem can be
solved in polynomial time for 3P1-free graphs.
Proof. Let G be a graph with α(G) ≤ 2. Consider a colouring with χ(G) colours. The
size of every colour class is at most 2. Hence every subgraph of G induced by two colour
classes has at most 4 vertices, and as such has a spanning forest with in total at most 3
edges. This means that we can contract two colour classes to an independent set (that
is, to a new colour class) by using at most 3 contractions. This observation gives us the
following algorithm. We guess a set of at most 3 contractions. Afterward we decrease
d by 1 and repeat this procedure until d = 0. For each resulting graph G′ we check
whether χ(G′) ≤ χ(G)− d. If so, then the algorithm returns a yes-answer and otherwise
a no-answer.
Let m be the number of edges of G. Then the total number of guesses is at most
m3d, which is polynomial as d is fixed. Because Coloring is polynomial-time solvable
on graphs with independence number at most 2 and this class is closed under edge con-
tractions, our algorithm runs in polynomial time. ut
Corollary 1. Let π ∈ {χ, ω}. For any fixed d ≥ 0, the d-Contraction Blocker(π)
problem can be solved in polynomial time on cobipartite graphs.
Proof. For π = χ this follows immediately from Theorem 6. As cobipartite graphs are
perfect and closed under edge contraction, we obtain the same result for π = ω. ut
We now consider the class of bipartite graphs. If π ∈ {χ, ω}, then Contraction
Blocker(π) is trivial for bipartite graphs (and thus also for trees). To the contrary, for
π = α, we will show that Contraction Blocker(π) is NP-hard for bipartite graphs.
The complexity of d-Contraction Blocker(α) remains open for bipartite graphs.
Bipartite graphs are not closed under edge contraction. Therefore membership to NP
cannot be established by taking a sequence of edge contractions as the certificate, even
though due to König’s Theorem (see, for example, [14]), Independent Set is polynomial-
time solvable for bipartite graphs.
Theorem 7. Contraction Blocker(α) is NP-hard on bipartite graphs.
Proof. We know from Theorem 4 that 1-Contraction Blocker(α) is NP-complete on
cobipartite graphs. Consider a cobipartite graph G with m edges and an integer k, which
9
together form an instance of 1-Contraction Blocker(α). Subdivide each of the m
edges of G in order to obtain a bipartite graph G′. We claim that (G, k) is a yes-instance
of 1-Contraction Blocker(α) if and only if (G′, α(G′)− 1, k+m) is a yes-instance of
Contraction Blocker(α).
First suppose that (G, k) is a yes-instance of 1-Contraction Blocker(α). In G′
we first perform m edge contractions to get G back. We then perform k edge contractions
to get independence number 1 = α(G′)− (α(G′)− 1). Hence, (G′, α(G′)− 1, k +m) is a
yes-instance of Contraction Blocker(α).
Now suppose that (G′, α(G′)−1, k+m) is a yes-instance of Contraction Blocker(α).
Then there exists a sequence of k+m edge contractions that transform G′ into a complete
graph K. We may assume that K has size at least 4 (as we could have added without
loss of generality three dominating vertices to G without increasing k). As K has size at
least 4, each subdivided edge must be contracted back to the original edge again. This
operation costs m edge contractions, so we contract G to K using at most k edge opera-
tions. Hence, (G, k) is a yes-instance of 1-Contraction Blocker(α). This proves the
claim and hence the theorem. ut
We complement Theorem 7 by showing that Contraction Blocker(α) is linear-
time solvable on trees. In order to prove this result we make a connection to the matching
number µ of a graph.
Theorem 8. Contraction Blocker(α) is linear-time solvable on trees.
Proof. Let (T, d, k) be an instance of Contraction Blocker(α), where T is a tree on n
vertices. We first describe our algorithm and prove its correctness. Afterwards, we analyze
its running time. Throughout the proof let M denote a maximum matching of T .
As α(T )+µ(T ) = n by König’s Theorem (see, for example, [14]), we find that (T, d, k)
is a no-instance if d > n−µ(T ). Assume that d ≤ n−µ(T ). We observe that trees are closed
under edge contraction. Hence, contracting an edge of T results in a new tree T ′. Moreover,
T ′ has n−1 vertices and the edge contraction neither increased the independence number
nor the matching number. As α(T ) + µ(T ) = n and similarly α(T ′) + µ(T ′) = n− 1, this
means that either α(T ′) = α(T )− 1 or µ(T ′) = µ(T )− 1.
First suppose that d ≤ n−2µ(T ). There are exactly σ(T ) = n−2µ(T ) vertices that are
unsaturated by M . Let uv be an edge, such that u is unsaturated. As M is maximum, v
must be saturated. Then, by contracting uv, we obtain a tree T ′ such that µ(T ′) = µ(T ).
It follows from the above that α(T ′) = α(T )−1. Say that we contracted u onto v. Then in
T ′ we have that v is saturated by M , which is a maximum matching of T ′ as well. Thus,
if d ≤ n− 2µ(T ), contracting d edges, one of the end-vertices of which is unsaturated by
M , yields a tree T ′ with µ(T ′) = µ(T ) and α(T ′) = α(T )− d. Since an edge contraction
reduces the independence number by at most 1, it follows that this is optimal. Hence, as
d ≤ n− 2µ(T ), we find that (G,T, k) is a yes-instance if k ≥ d and a no-instance if k < d.
Now suppose that d > n− 2µ(T ). Suppose that we first contract the n− 2µ(T ) edges
that have exactly one end-vertex that is unsaturated by M . It follows from the above that
this yields a tree T ′ with µ(T ′) = µ(T ) and α(T ′) = α(T )−(n−2µ(T )). Since T ′ does not
contain any unsaturated vertex, M is a perfect matching of T ′. Then, contracting any edge
in T ′ results in a tree T ′′ with µ(T ′′) = µ(T ′)−1 and thus, α(T ′′) = α(T ′). If we contract
an edge uv ∈M , the resulting vertex uv is unsaturated by M ′ = M \ {uv} in T ′′. Hence,
as explained above, if in addition we contract now an edge (uv)w, we obtain a tree T ′′′
with α(T ′′′) = α(T ′′)− 1 and µ(T ′′′) = µ(T ′′). Repeating this procedure, we may reduce
the independence number of T by d with n− 2µ(T ) + 2(d−n+ 2µ(T )) = 2(d+µ(T ))−n
edge contractions. Below we show that this is optimal.
Suppose that we contract p edges in T . Let T ′ be the resulting tree. We have α(T ′) +
µ(T ′) = n−p. As µ(T ′) ≤ 12 (n−p), this means that α(T
′) ≥ 12 (n−p). If p < 2(d+µ(T ))−n
10
we have −p2 > −(d+ µ(T )) +
n
2 , and thus
α(T ′) ≥ 12 (n− p)
> n2 − d− µ(T ) +
n
2
= α(T )− d.
So at least 2(d+ µ(T ))− n edge contractions are necessary to decrease the independence
number by d. It remains to check if k is sufficiently high for us to allow this number of
edge contractions.
As we can find a maximum matching of tree T (and thus compute µ(T )) in O(n) time
by using the algorithm of Savage [44], our algorithm runs in O(n) time. ut
Remark 1. By König’s Theorem, we have that α(G) + µ(G) = |V (G)| for any bipartite
graph G, but we can only use the proof of Theorem 8 to obtain a result for trees for the
following reason: trees form the largest subclass of (connected) bipartite graphs that are
closed under edge contraction, and this property plays a crucial role in our proof.
3.2 Deletion Blockers
We first show that all three deletion blocker problems are polynomial-time solvable for
bipartite graphs (and thus for trees). It is known already that Deletion Blocker(α)
is polynomial-time solvable for bipartite graphs [3,13]. Hence it suffices to prove that the
same holds for Deletion Blocker(π) when π ∈ {χ, ω}. In order to do so we need the
following relation between 1-Deletion Blocker(ω) and Vertex Cover.
Proposition 1. Let G be a graph with at least one edge and let k ≥ 1 be an integer.
Then (G,ω(G) − 1, k) is a yes-instance of Deletion Blocker(ω) if and only if (G, k)
is a yes-instance of Vertex Cover.
Proof. Let G = (V,E) be a graph with |E| ≥ 1. Thus, ω(G) ≥ 2. Let k ≥ 1 be an
integer. First suppose that (G, k) is a yes-instance of Vertex Cover, that is, G has a
vertex cover V ′ of size at most k. So, every edge of G is incident to at least one vertex
of V ′. Then, deleting all vertices of V ′ yields a graph G′ with no edges. This means that
ω(G′) ≤ 1, and thus (G,ω(G)− 1, k) is a yes-instance for Deletion Blocker(ω). Now
suppose that (G,ω(G) − 1, k) is a yes-instance of Deletion Blocker(ω). Then there
exists a set V ′ ⊆ V of size |V ′| ≤ k such that ω(G − V ′) ≤ 1. This implies that G − V ′
has no edges. Thus V ′ is a vertex cover of G of size at most k. So, (G, k) is a yes-instance
for Vertex Cover. ut
Proposition 1 has the following corollary, which we will apply in this section and at
some other places in our paper.
Corollary 2. Let G be a triangle-free graph with at least one edge and let k ≥ 1 be an
integer. Then (G, k) is a yes-instance of 1-Deletion Blocker(ω) if and only if (G, k)
is a yes-instance of Vertex Cover.
We are now ready to prove the following result.
Theorem 9. For π ∈ {χ, ω}, Deletion Blocker(π) can be solved in polynomial time
on bipartite graphs.
Proof. As bipartite graphs are perfect and closed under vertex deletion, the problems
Deletion Blocker(ω) and Deletion Blocker(χ) are equivalent. Therefore, we only
have to consider the case where π = ω. As bipartite graphs have clique number at
most 2, Deletion Blocker(ω) and 1-Deletion Blocker(ω) are equivalent. As bi-
partite graphs are triangle-free, we can apply Corollary 2. To solve Vertex Cover on
bipartite graphs, König’s Theorem tells us that it suffices to find a maximum matching,
which takes O(n2.5) time on n-vertex bipartite graphs [27]. ut
11
We now consider the the class of cobipartite graphs. It is known that Deletion
Blocker(π) is polynomial-time solvable on cobipartite graphs if π ∈ {ω, χ} [13]. Hence
we only have to deal with the case π = α. For this case we prove the following result,
which follows immediately from Theorem 9.
Theorem 10. Deletion Blocker(α) can be solved in polynomial time on cobipartite
graphs.
4 Cographs
It is well known (see for example [8]) that a graph G is a cograph if and only if G can
be generated from K1 by a sequence of operations, where each operation is either a join
or a union operation. Recall from Section 2 that we denote these operations by ⊗ and
⊕, respectively. Such a sequence corresponds to a decomposition tree T , which has the
following properties:
1. its root r corresponds to the graph Gr = G;
2. every leaf x of T corresponds to exactly one vertex of G, and vice versa, implying
that x corresponds to a unique single-vertex graph Gx;
3. every internal node x of T has at least two children, is either labeled ⊕ or ⊗, and
corresponds to an induced subgraph Gx of G defined as follows:
• if x is a ⊕-node, then Gx is the disjoint union of all graphs Gy where y is a child
of x;
• if x is a ⊗-node, then Gx is the join of all graphs Gy where y is a child of x.
A cograph G may have more than one such tree but has exactly one unique tree [11],
called the cotree TG of G, if the following additional property is required:
4. Labels of internal nodes on the (unique) path from any leaf to r alternate between ⊕
and ⊗.
Note that TG has O(n) vertices. For our purposes we must modify TG by applying
the following known procedure (see for example [6]). Whenever an internal node x of TG
has more than two children y1 and y2, we remove the edges xy1 and xy2 and add a new
vertex x′ with edges xx′, x′y1 and x
′y2. If x is a ⊕-node, then x′ is a ⊕-node, and if x
is a ⊗-node, then x′ is a ⊗-node. Applying this rule exhaustively yields a tree in which
each internal node has exactly two children. We denote this tree by T ′G. Because TG has
O(n) vertices, modifying TG into T
′
G takes linear time.
Corneil, Perl and Stewart [12] proved that the problem of deciding whether a graph
with n vertices and m edges is a cograph can be solved in time O(n+m). They also showed
that in the same time it is possible to construct its cotree (if it exists). As modifying TG
into T ′G takes O(n+m) time, we obtain the following lemma.
Lemma 2. Let G be a graph with n vertices and m edges. Deciding if G is a cograph and
constructing T ′G (if it exists) can be done in time O(n+m).
For two integers k and ` we say that a graph G can be (k, `)-contracted into a graph
H if G can be modified into H by a sequence containing k edge contractions and ` vertex
deletions. Note that cographs are closed under edge contraction and under vertex deletion.
In fact, to prove our results for cographs, we will prove the following more general result.
Theorem 11. Let π ∈ {α, χ, ω}. The problem of determining the largest integer d such
that a cograph G with n vertices and m edges can be (k, `)-contracted into a cograph H
with π(H) ≤ π(G)− d can be solved in O(n2 +mn+ (k + `)3n) time.
12
Proof. First consider π = α. Let G be a cograph with n vertices and m edges and let
k, ` be two positive integers. We first construct T ′G. We then consider each node of T
′
G by
following a bottom-up approach starting at the leaves of T ′G and ending in its root r.
Let x be a node of T ′G. Recall that Gx is the subgraph of G induced by all vertices
that corresponds to leaves in the subtree of T ′G rooted at x. With node x we associate a
table that records the following data: for each pair of integers i, j ≥ 0 with i+j ≤ k+` we
compute the largest integer d such that Gx can be (i, j)-contracted into a graph Hx with
α(Hx) ≤ α(Gx)− d. We denote this integer d by d(i, j, x). Let i, j ≥ 0 with i+ j ≤ k+ `.
Case 1. x is a leaf.
Then Gx is a 1-vertex graph meaning that d(i, j, x) = 0 if j = 0, whereas d(i, j, x) = 1 if
j ≥ 1.
Case 2. x is a ⊕-node.
Let y and z be the two children of x. Then, as Gx is the disjoint union of Gy and Gz, we
find that α(Gx) = α(Gy) + α(Gz). Hence, we have
d(i, j, x) = max {α(Gx)− (α(Gy)− d(a, b, y) + α(Gz)− d(i− a, j − b, z)) |
0 ≤ a ≤ i, 0 ≤ b ≤ j}
= max {d(a, b, y) + d(i− a, j − b, z) | 0 ≤ a ≤ i, 0 ≤ b ≤ j}.
Case 3. x is a ⊗-node.
Since x is a ⊗-node, Gx is connected and as such has a spanning tree T . If i+j ≥ |V (Gx)|
and j ≥ 1, then we can contract i edges of T in the graph Gx followed by j vertex deletions.
As each operation will reduce Gx by exactly one vertex, this results in the empty graph.
Hence, d(i, j, x) = α(Gx). From now on assume that i + j < |V (Gx)| or j = 0. As such,
any graph we can obtain from Gx by using i edge contractions and j vertex deletions is
non-empty and hence has independence number at least 1.
Let y and z be the two children of x. Then, as Gx is the join of Gy and Gz, we find that
α(Gx) = max{α(Gy), α(Gz)}. In order to determine d(i, j, x) we must do some further
analysis. Let S be a sequence that consists of i edge contractions and j vertex deletions of
Gx such that applying S on Gx results in a graph Hx with α(Hx) = α(Gx)−d(i, j, x). We
partition S into five sets Sey, S
e
z , S
e
yz, S
v
y , S
v
z , respectively, as follows. Let S
e
y and S
e
z be
the set of contractions of edges with both end-vertices in Gy and with both end-vertices
in Gz, respectively. Let S
e
yz be the set of contractions of edges with one end-vertex in Gy
and the other one in Gz. Let ay = |Sey| and let az = |Sez |. Then |Seyz| = i−ay−az. Let Svy
and Svz be the set of deletions of vertices in Gy and Gz, respectively. Let b = |Svy |. Then
|Svz | = j − b. We distinguish between two cases.
First assume that Seyz = ∅. Then ay + az = i. Let Hy be the graph obtained from Gy
after applying the subsequence of S, consisting of operations in Sey ∪ Svy , on Gy. Let Hz
be defined analogously. Then we have
α(Hx) = max{α(Hy), α(Hz)}
= max{α(Gy)− d(ay, b, y), α(Gz)− d(az, j − b, z)}
= max{α(Gy)− d(ay, b, y), α(Gz)− d(i− ay, j − b, z)},
where the second equality follows from the definition of S.
Now assume that Seyz 6= ∅. Recall that i + j < |V (Gx)| or j = 0. Hence α(Hx) ≥ 1. Our
approach is based on the following observations.
First, contracting an edge with one end-vertex in Gy and the other one in Gz is equiv-
alent to removing these two end-vertices and introducing a new vertex that is adjacent
to all other vertices of Gx (such a vertex is said to be universal).
Second, assume that Gy contains two distinct vertices u and u
′ and that Gz contains
two distinct vertices v and v′. Now suppose that we are to contract two edges from
13
{uv, uv′, u′v, u′v′}. Contracting two edges of this set that have a common end-vertex, say
edges uv and uv′, is equivalent to deleting u, v, v′ from Gx and introducing a new universal
vertex. Contracting two edges with no common end-vertex, say uv and u′v′, is equivalent
to deleting all four vertices u, u′, v, v′ from Gx and introducing two new universal vertices.
Because the two new universal vertices in the latter choice are adjacent, whereas the vertex
u′ may not be universal after making the former choice, the latter choice decreases the
independence number by the same or a larger value than the former choice. Hence, we
may assume without loss of generality that the latter choice happened. More generally,
the contracted edges with one end-vertex in Gy and the other one in Gz can be assumed
to form a matching. We also note that introducing a new universal vertex to a graph does
not introduce any new independent set other than the singleton set containing the vertex
itself.
We conclude that each edge contraction in Seyz may be considered to be equivalent to
deleting one vertex from Gy and one from Gz and introducing a new universal vertex.
If one of the two graphs Gy or Gz becomes empty in this way, then an edge contraction
in Seyz can be considered to be equivalent to the deletion of a vertex of the other one.
Finally, if both sets Gy and Gz become empty, then we can stop as in that case Hx has
independence number 1 (which we assumed was the smallest value of α(Hx)).
By the above observations and the definition of S we find that
α(Hx) = max{1, α(Gy)− d(ay, b+ i− ay − az, y), α(Gz)− d(az, j − b+ i− ay − az, z)}.
Hence we can do as follows. We consider all tuples (ay, b) with 0 ≤ ay ≤ i and 0 ≤ b ≤ j
and compute max{α(Gy)−d(ay, b, y), α(Gz)−d(i−ay, j− b, z)}. Let α′x be the minimum
value over all values found. We then consider all tuples (ay, az, b) with ay ≥ 0, az ≥ 0,
ay + az ≤ i and 0 ≤ b ≤ j and compute max{1, α(Gy)− d(ay, b+ i− ay − az, y), α(Gz)−
d(az, j − b + i − ay − az, z)}. Let α′′x be the minimum value over all values found. Then
d(i, j, x) = α(Gx)−min{α′x, α′′x}.
After reaching the root r, we let our algorithm return the integer d(k, `, r). By construc-
tion, d(k, `, r) is the largest integer such that G = Gr can be (k, `)-contracted into a graph
H with α(H) ≤ α(G)− d(k, `, r). We are left to analyze the running time.
Constructing T ′G can be done in O(n+m) time by Lemma 2. We now determine the
time it takes to compute one entry d(i, j, x) in the table associated with a node x. It takes
linear time to compute the independence number of a cograph1. The total number of tuples
(ay, b) and (ay, az, b) that we need to consider is O((k+`)
3). Note that the table associated
with a node x has O((k+`)2) entries but that we only have to compute α(Gx) once. Hence,
it takes O(n+m+(k+`)3) time to construct a table for a node. As TG′ has O(n) vertices,
the total running time is O(n+m) +O(n(n+m+ (k + `)3)) = O(n2 +mn+ (k + `)3n).
Now consider π = χ. Note that we cannot consider the complement of a cograph (which
is a cograph) because an edge contraction in a graph does not correspond to an edge
contraction in its complement. However, we can re-use the previous proof after making a
few modifications. Let G be a cograph with n vertices and m edges and let k, ` be two
positive integers. We follow the same approach as in the proof for π = α. We only have
to swap Cases 2 and 3 after observing that χ(Gx) = max{χ(Gy), χ(Gz)} if x is a ⊕-node
with y and z as its two children and χ(Gx) = χ(Gy) +χ(Gz) if x is a ⊗-node. We can use
the same arguments as used in the proof for π = α for the running time analysis as well;
we only have to observe that it takes O(n + m) time to compute the chromatic number
of a cograph (using the same arguments as before or by using another algorithm of [10]).
Finally consider π = ω. As cographs are perfect and closed under edge contractions, the
proof follows immediately from the corresponding result for π = χ. ut
1 For a cograph G, compute T ′G and use the formula α(Gx) = α(Gy) + α(Gz) if x is a ⊕-
node with children y and z and α(Gx) = max{α(Gy), α(Gz)} otherwise. Alternatively, see for
example [10] for a linear-time algorithm on a superclass of cographs.
14
Corollary 3. For π ∈ {α, χ, ω}, both the Contraction Blocker(π) problem and the
Deletion Blocker(π) problem can be solved in polynomial time for cographs.
Proof. We use Theorem 11 after setting ` = 0 for Contraction Blocker(π) and k = 0
for Deletion Blocker(π). ut
5 Split Graphs
A split partition (K, I) of a split graph is minimal if I ∪ {v} is not an independent set
for all v ∈ K, in other words every vertex v ∈ K is adjacent to some vertex u ∈ I. Note
that for a minimal split partition (K, I) we have α(G) = |I|. A split partition (K, I) is
maximal if K ∪ {v} is not a clique for all v ∈ I, in other words every vertex v ∈ I is non
adjacent to at least one vertex u ∈ K. Note that for a maximal split partition (K, I) we
have ω(G) = χ(G) = |K|. We first show the following result.
Theorem 12. Let π ∈ {α, χ, ω}. For any fixed d ≥ 0, the d-Contraction Blocker(π)
problem is polynomial-time solvable on split graphs.
Proof. First consider π = α. Let (G, k) be an instance of d-Contraction Blocker(α)
where G = (V,E) is a split graph. Let (K, I) be a minimal split partition of G. Let I ′ be
the set of vertices in I that have at least one neighbour in K, and let I ′′ = I \ I ′. Because
G is a split graph, all vertices of I ′ belong to the same connected component D of G.
Moreover, we have α(G) = |I| = |I ′|+ |I ′′| = α(D) + |I ′′|.
First suppose that |I ′| ≤ d. For (G, k) to be a yes-instance, G must be contracted into
a graph G′ with α(G′) ≤ α(G) − d = |I ′| + |I ′′| − d ≤ |I ′′|. This means that we must
contract D into the empty graph, which is not possible. Hence, (G, k) is a no-instance in
this case. Hence, we may assume without loss of generality that |I ′| ≥ d+ 1.
Suppose that k ≥ d + 1. If k ≥ |I ′|, then we contract every vertex of I ′ onto a
neighbour in K. In this way we have k-contracted G into a graph G′ with α(G′) =
|I ′′|+ 1 = |I ′|+ |I ′′| − (|I ′| − 1) ≤ |I ′|+ |I ′′| − d = α(G)− d. So, (G, k) is a yes-instance
in this case. If k ≤ |I ′| − 1, we contract each vertex of an arbitrary subset of k vertices
of I ′ onto a neighbour in K. In this way we have k-contracted G into a graph G′ with
α(G′) ≤ |I ′| − k+ 1 + |I ′′| ≤ |I ′|+ |I ′′| − d = α(G)− d. So, (G, k) is a yes-instance in this
case as well.
If k ≤ d, then we consider all possible sequences of at most k edge contractions.
This takes time O(|E(G)|k), which is polynomial as d, and consequently k, is fixed. For
every such sequence we check in polynomial time whether the resulting graph has stability
number at most α(G)−d. As split graphs are closed under edge contraction and moreover
are chordal graphs, the latter can be verified in linear time (see [22]).
Now let π = χ. Let (G, k) be an instance of d-Contraction Blocker(χ) where G =
(V,E) is a split graph.
Case 1. χ(G) ≤ d.
For (G, k) to be a yes-instance, G must be k-contracted into a graph G′ with χ(G′) ≤
χ(G) − d ≤ 0. The only graph with chromatic number at most 0, is the empty graph.
However, a non-empty graph cannot be contracted to an empty graph. Hence, (G, k) is a
no-instance in this case.
Case 2. χ(G) = d+ 1.
For (G, k) to be a yes-instance, G must be k-contracted into a graph G′ with χ(G′) ≤
χ(G)−d = 1. Hence, every connected component of G′ must consist of exactly one vertex.
If G has no connected components with edges, then (G, k) is a yes-instance. Otherwise,
because G is a split graph, G has exactly one connected component D containing one or
more edges. In that case, (G, k) is a yes-instance if and only if k ≥ |V (D)| − 1; this can
be checked in constant time.
15
Case 3. χ(G) ≥ d+ 2.
First, assume that k < d. Because every edge contraction reduces the chromatic number
by at most 1, (G, k) is a no-instance.
Second, assume that k = d. We consider all possible sequences of at most k edge
contractions. This takes time O(|E(G)|k), which is polynomial as d, and consequently
k, is fixed. For every such sequence we check in polynomial time whether the resulting
graph has chromatic number at most χ(G) − d. As split graphs are closed under edge
contractions and moreover are chordal graphs, the latter can be verified in polynomial
time (see [22]).
Third, assume that k > d. We claim that (G, k) is a yes-instance. This can be seen as
follows. Let (K, I) be a maximal split partition of G.
If k < |K|, then we contract k arbitrary edges of K. The resulting graph G′ has a split
partition (K ′, I) with |K ′| = |K| − k ≤ |K| − d− 1. Hence χ(G′) ≤ |K ′|+ 1 ≤ |K| − d =
χ(G)−d. Note that the latter equality follows from our assumption that (K, I) is maximal.
Now suppose that k ≥ |K|. We contract |K| arbitrary edges of K. The resulting graph
G′ has chromatic number χ(G′) = 2 ≤ χ(G)− d. Hence, in both cases, we conclude that
(G, k) is a yes-instance.
Finally consider π = ω. We use the previous result combined with the fact that split
graphs are perfect and closed under edge contractions. ut
In our next theorem we give two hardness results which, as explained in Section 1,
show that Theorem 12 can be seen as best possible. In their proofs we will reduce from
the Red-Blue Dominating Set problem. This problem takes as input a bipartite graph
G = (R∪B,E) and an integer k, and asks whether there exists a red-blue dominating set of
size at most k, that is, a subset D ⊆ B of at most k vertices such that every vertex in R has
at least one neighbour in D. This problem is NP-complete, because it is equivalent to the
NP-complete problems Set Cover and Hitting Set [20]. The Red-Blue Dominating
Set problem is also W[1]-complete when parameterized by |B|−k [24]. Belmonte et al. [5]
reduced from the same problem for showing that 1-Contraction Blocker(∆) is NP-
complete and W[2]-hard (with parameter k) for split graphs, but the arguments we use
to prove our results are quite different from the ones they used.
Theorem 13. For π ∈ {α, χ, ω}, the Contraction Blocker(π) problem, restricted to
split graphs, is NP-complete as well as W[1]-hard when parameterized by d.
Proof. The problem is in NP for π ∈ {α, χ, ω}, as split graphs are closed under edge con-
traction and the three problems Clique Coloring and Independent Set are readily
seen to be polynomial-time solvable on split graphs; hence, we can take the sequence of
edge contractions as the certificate. Recall that we reduce from Red Blue Dominating
Set in order to show NP-hardness and W[1]-hardness with parameter d.
First consider π = α. Let G = (R ∪B,E) be a bipartite graph that together with an
integer k forms an instance of Red-Blue Dominating Set. We may assume without loss
of generality that k ≤ |B|. Moreover, we may assume that every vertex of R is adjacent
to at least one vertex of B. We add all possible edges between vertices in R. This yields a
split graph G∗ with a split partition (R,B). Because every vertex in R is assumed to be
adjacent to at least one vertex of B in G, we find that (R,B) is a minimal split partition
of G∗.
Because Red-Blue Dominating Set problem is NP-complete [20] and W[1]-complete
when parameterized by |B| − k [24], it suffices to prove that G has a red-blue dominating
set of size at most k if and only if (G∗, |B|−k) is a yes-instance of (|B|−k)-Contraction
Blocker(α). We prove this claim below.
First suppose that G has a red-blue dominating set D of size at most k. Because
k ≤ |B|, we may assume without loss of generality that |D| = k (otherwise we would just
add some vertices from B \D to D).
16
In G∗ we contract every u ∈ B \D onto a neighbour in R. In this way we (|B| − k)-
contracted G∗ into a graph G′. Note that G′ is a split graph that has a split partition
(R,D). Because every vertex in R is adjacent to at least one vertex of D in G by definition
of D, it is adjacent to at least one vertex of D in G∗. The latter statement is still true
for G′, as contracting an edge incident to a vertex u ∈ B is equivalent to deleting u.
Hence, (R,D) is a minimal split partition of G′, so α(G′) = |D|. Because (R,B) is a
minimal split partition of G∗, we have α(G∗) = |B|. This means that α(G′) = |D| =
|B| − (|B| − |D|) = α(G∗)− (|B| − k). We conclude that (G∗, |B| − k) is a yes-instance of
(|B| − k)-Contraction Blocker(α).
Now suppose that (G∗, |B|−k) is a yes-instance of (|B|−k)-Blocker(α), that is, G∗
can be (|B| − k)-contracted into a graph G′ such that α(G′) ≤ α(G∗)− (|B| − k). Recall
that α(G∗) = |B|. Hence, α(G′) ≤ k. Let p be the number of contractions of edges with
one end-vertex in B. Note that any such contraction decreases the size of the independent
set B by exactly one. If p < |B|−k, then G′ contains an independent set of size |B|−p > k,
which would mean that α(G′) > k, a contradiction. Hence, p ≥ |B| − k, which implies
that p = |B| − k as we performed no more than |B| − k contractions in total. Let D
denote the independent set obtained from B after all edge contractions. Then we find that
k = |B| − (|B| − k) = |B| − p = |D| ≤ α(G′) ≤ α(G∗)− (|B| − k) = |B| − (|B| − k) = k.
Hence, |D| = α(G′), which means that (D,R) is a minimal split partition of G′. This
means that every vertex of R is adjacent to at least one vertex of D in G′. Because all our
contractions were performed on edges with one end-vertex in B, we have only removed
vertices from G∗, that is, G′ is an induced subgraph of G∗. Hence, every vertex of R is
adjacent to at least one vertex of D in G′. Consequently, D is a red-blue dominating set
of G with size |D| = k.
Now consider π = χ. Let G = (R∪B,E) be a bipartite graph that together with an integer
k forms an instance of Red-Blue Dominating Set. We may assume without loss of
generality that k ≤ |B|. Moreover, we may assume that every vertex of R is adjacent to
at least one vertex of B.
We take the bipartite complement of G, that is, we construct the bipartite graph with
partition classes R and B, and we add an edge between any two vertices u ∈ R and v ∈ B
if and only if uv /∈ E. Then, we add all possible edges between vertices in B. Finally we
add a new vertex x to the graph. We make x adjacent to all vertices of B∪R. This yields
a split graph G∗ with a split partition (B∪{x}, R). Because every vertex in R is assumed
to be adjacent to at least one vertex of B in G, it is non-adjacent to at least one vertex of
B in G∗. Hence, (B ∪ {x}, R) is a maximal split partition of G∗ (we will explain the role
of vertex x in our construction later). Similarly to the previous case, we claim that G has
a red-blue dominating set of size at most k if and only if (G∗, |B| − k) is a yes-instance
of (|B| − k)-Contraction Blocker(χ). We prove this claim below.
First suppose that G has a red-blue dominating set D of size at most k. Because
k ≤ |B|, we may assume without loss of generality that |D| = k (otherwise we would just
add some vertices from B \D to D).
In G∗ we contract every u ∈ B \ D onto x. In this way we (|B| − k)-contracted G∗
into a graph G′. Note that G′ is a split graph that has a split partition (D ∪ {x}, R).
Because every vertex in R is adjacent to at least one vertex of D in G by definition of
D, it is non-adjacent to at least one vertex of D in G∗. The latter statement is still true
for G′, as no vertex of D ∪ R was involved in any of the edge contractions performed.
Hence, (D ∪ {x}, R) is a maximal split partition of G′, so χ(G′) = |D| + 1. Because
(B∪{x}, R) is a maximal split partition of G∗, we have χ(G∗) = |B|+1. This means that
χ(G′) = |D|+ 1 = k + 1 = |B|+ 1 + k + 1− (|B|+ 1) = χ(G∗)− (|B| − k). We conclude
that (G∗, |B| − k) is a yes-instance of (|B| − k)-Contraction Blocker(χ).
Now suppose that (G∗, |B| − k) is a yes-instance of (|B| − k)-Blocker(χ), that is,
G∗ can be (|B|−k)-contracted to a graph G′ such that χ(G′) ≤ χ(G∗)− (|B|−k). Recall
that χ(G∗) = |B| + 1. Hence, χ(G′) ≤ k + 1. Let p be the number of contractions of
17
edges between two vertices of B ∪ {x}. Note that any such contraction decreases the size
of the clique B ∪ {x} by exactly one. If p < |B| − k, then G′ contains a clique of size
|B| + 1 − p > k + 1, which would mean that χ(G′) > k + 1, a contradiction. Hence,
p ≥ |B| − k, which implies that p = |B| − k as we performed no more than |B| − k
contractions in total. Let B′ denote the clique obtained from B ∪ {x} after all edge
contractions. Then we find that
k + 1 = |B|+ 1− (|B| − k)
= |B|+ 1− p
= |B′|
≤ χ(G′)
≤ χ(G∗)− (|B| − k)
= |B|+ 1− (|B| − k)
= k + 1.
Hence, |B′| = χ(G′), which means that (B′, R) is a maximal split partition of G′. This
means that no vertex of R is adjacent to all vertices of B′ in G′.
We may assume without loss of generality that x ∈ B′, as we can view any edge
contraction of an edge between a vertex u ∈ B and x as a contraction of u onto x.
Furthermore, suppose we performed a contraction of an edge uu′ with u, u′ ∈ B, say
we contracted u onto u′. We change this by contracting u onto x instead. Because x is
adjacent to all vertices of B ∪ R in G, we find that x is adjacent to all vertices (except
to itself) of G′ and of any intermediate graph that we obtained while contracting G into
G′. Hence, contracting u onto x is equivalent to deleting u. As such, contracting u onto
x does not lead to a vertex v ∈ R becoming adjacent to all vertices of B′. Consequently,
the size of a maximum clique in the modified graph is also equal to |B′| = χ(G′). As we
can do the same for any other contraction of an edge between two vertices in B, we may
assume without loss of generality that every edge contraction is a contraction of a vertex
of B onto x.
Let D = B′ \ {x} ⊆ B. As noted, contracting a vertex of B onto x is the same as
deleting such a vertex of B from the graph. Hence, every vertex of D has exactly the
same neighbours in G′ as it has in G∗. Because every vertex in R is adjacent to x but not
to all vertices of B′ = D ∪ {x}, we find that every vertex in R is non-adjacent to at least
one vertex of D in G′, and consequently, in G∗. Because x ∈ B′ and |B′| = k+ 1, we find
that |D| = k. We conclude that D is a red-blue dominating set of G with size |D| = k.
Finally, consider π = ω. As split graphs are perfect and closed under edge contractions,
this case follows directly from the previous case where π = χ. ut
Regarding the Deletion Blocker(π) problem, for π ∈ {α, χ, ω}, we know from [13]
that it is NP-complete. In the same paper it was shown that if d is fixed, all three problems
become polynomially solvable.
6 Interval Graphs
Let G = (V,E) be an interval graph with n vertices and m edges that corresponds to
a set of intervals I = {I1, I2, . . . , In} on the real line. Let V = {v1, . . . , vn} be such
that vertex vi corresponds to interval Ii for i = 1, . . . , n. Note that the class of interval
graphs is closed under edge contraction. Indeed, contracting an edge vivi corresponds to
removing the intervals Ii and Ij and adding a new interval Iij = Ii ∪ Ij . It is well known
(see e.g. [19]) that G has at most n maximal cliques which can be linearly ordered in
O(n + m) time so that the maximal cliques containing a vertex vi appear consecutively
for i = 1, . . . , n.
18
We first prove a useful lemma for the class of C4-free graphs, which contains the class
of interval graphs as a proper subclass.
Lemma 3. Let G = (V,E) be a C4-free graph and let v1v2 ∈ E. Let G|v1v2 be the graph
obtained after the contraction of v1v2 and let v12 be the new vertex replacing v1 and v2.
Then every maximal clique K in G|v1v2 containing v12 corresponds to a maximal clique
K ′ in G and vice versa, such that
(a) either |K| = |K ′| and K \ {v12} = K ′ \ {v1};
(b) or |K| = |K ′| and K \ {v12} = K ′ \ {v2};
(c) or |K| = |K ′| − 1 and K \ {v12} = K ′ \ {v1, v2}.
Moreover, every other maximal clique in G|v1v2 is a maximal clique in G and vice versa.
Proof. Let A1 (resp. A2) be the set of neighbours of v1 (resp. v2) that are nonadjacent
to v2 (resp. v1). Let A3 be the set of vertices adjacent to both v1 and v2. Now consider
a clique K in G|v1v2 containing v12. As G is C4-free, we find that G, and hence G|v1v2,
contains no edge between a vertex in A1 and a vertex in A2. Therefore we are in exactly
one of the following cases:
(i) K contains one or more vertices from both A1 and A3 but no vertices from A2;
(ii) K contains one or more vertices from both A2 and A3 but no vertices from A1;
(iii) K contains one or more vertices from A1 but no vertices from A2 and A3;
(iv) K contains one or more vertices from A2 but no vertices from A1 and A3;
(v) K contains one or more vertices from A3 but no vertices from A1 and A2.
Suppose we are in case (i). Since K is maximal, it follows that (K \ {v12}) ∪ {v1} is
a maximal clique in G and thus outcome (a) holds. By symmetry, if we are in case (ii),
outcome (b) holds. Assume now that case (iii) occurs. Since K is maximal, it follows that
(K \{v12})∪{v1} is a maximal clique in G and thus outcome (a) holds. By symmetry, we
conclude that if case (iv) occurs, outcome (b) holds. Finally, suppose that we are in case
(v). Then (K \ {v12})∪{v1, v2} is a maximal clique in G and thus outcome (c) holds. ut
Lemma 3 tells us that if we contract an edge e in a C4-free graph, every maximal
clique containing both end-vertices of e will have its size reduced by exactly one in the
resulting graph, and moreover, the size of every other maximal clique of the original graph
will remain the same and we do not create any new maximal clique.
Lemma 4. Let G = (V,E) be an interval graph and let d ≥ 0 be an integer. Let K1
be the first maximal clique of size strictly greater than ω(G) − d starting left on the real
line, and let Ix, Iy be the intervals with the rightmost right endpoints among all intervals
corresponding to the vertices in K1. Let B ⊆ E be a set of edges such that the graph G′
obtained from G after having contracted all edges from B satisfies ω(G′) ≤ ω(G) − d.
Then there exists a set B′ ⊆ E such that B′ = (B \ {v1v2}) ∪ {xy}, where v1, v2 ∈ K1
and such that the graph G′′ obtained from G after contracting all edges in B′ satisfies
ω(G′′) ≤ ω(G)− d.
Proof. We first note that, by their definition, x and y are contained in all maximal cliques
of size strictly greater than ω(G)− d that contain at least two vertices of K1. Moreover,
contracting the edge xy instead of another edge v1v2 of K
1 does not create cliques of
larger size, due to Lemma 3. ut
Lemma 4 tells us that if for an interval graph the answer of the Contraction
Blocker(ω) problem is yes, then there always exists a set B ⊆ E with |B| ≤ k such
that ω(H) ≤ ω(G)− d, where H is the graph obtained from G by contracting the edges
of B, and xy ∈ B where x, y belong to the first maximal clique K in G with size strictly
19
greater than ω(G) − d starting left on the real line and such that Ix, Iy have the right-
most right endpoints among all intervals corresponding to vertices in K. Since interval
graphs are closed under edge contractions, we can use this property recursively to obtain a
polynomial-time algorithm for Contraction Blocker(π), with π ∈ {χ, ω}, in interval
graphs.
Theorem 14. Let π ∈ {χ, ω}. Then Contraction Blocker(π) can be solved in poly-
nomial time on interval graphs.
Proof. Since interval graphs are perfect and closed under edge contractions, we may as-
sume without loss of generality that π = ω. Let G = (V,E) be an interval graph and let
d ≥ 0 be an integer. Our algorithm goes as follows. Let K1 be the first maximal clique of
size strictly greater than ω(G) − d starting left on the real line. By Lemma 4, we know
that if there exists a solution, then there exists one in which we contract the edge xy
where x, y ∈ K1 are such that the corresponding intervals Ix, Iy have the rightmost right
endpoints among all intervals corresponding to vertices in K1. So we contract the edge
xy. Since the resulting graph is still an interval graph, we may repeat our procedure. We
consider again the first maximal clique of size strictly greater than ω(G)− d starting left
on the real line and contract the edge whose end-vertices correspond to the intervals with
the rightmost right endpoints among all intervals corresponding to vertices in that clique.
We continue like this until there is no more maximal clique of size strictly greater than
ω(G)− d in the graph.
The correctness of our algorithm follows from Lemmas 3 and 4. Indeed, by Lemma 3
we know that our choice of the edges that we contract is such that at each step there is
at least one maximal clique of size strictly greater than ω(G)−d whose size is reduced by
one and furthermore, we do not create any new maximal clique. Since an interval graph
on n vertices contains at most n maximal cliques, it follows that our algorithms stop after
at most nd steps. Since all maximal cliques of an interval graph can be found in time
O(n+m), where m is the number of edges, we then find that our algorithm runs in time
O(nd(n+m)). Finally, Lemma 4 ensures that the set of edges we choose to contract has
minimum size. ut
The proof of Theorem 14 can be readily adapted to show polynomial-time solvability
of the Deletion Blocker(π) problem on interval graphs for π ∈ {χ, ω}.
Theorem 15. Let π ∈ {χ, ω}. Then Deletion Blocker(π) can be solved in polynomial
time on interval graphs.
We recall that for π = α the complexity of both problems is open for interval graphs.
7 Chordal Graphs
The following result shows that Theorem 14 cannot be generalized to chordal graphs.
Theorem 16. For π ∈ {χ, ω}, 1-Contraction Blocker(π) is NP-complete for chordal
graphs.
Proof. Since chordal graphs are perfect and closed under taking edge contractions, we may
assume without loss of generality that π = ω. As Clique is polynomial-time solvable
on chordal graphs, this means that the problem is in NP (take the sequence of edge
contractions as the certificate). We reduce from Vertex Cover, which is well known to
be NP-complete (see [20]).
Let G = (V,E) be a graph that together with an integer k forms an instance of
Vertex Cover. From G we construct a chordal graph G′ as follows. We introduce a
new vertex y not in G. We represent each edge e of G by a clique Ke in G
′ of size |V |
20
so that Ke ∩Kf = ∅ whenever e 6= f . We represent each vertex v of G by a vertex in G′
that we also denote by v. Then we let the vertex set of G′ be V ∪
⋃
e∈E Ke ∪{y}. We add
an edge between every vertex in Ke and a vertex v ∈ V if and only if v is incident with
e in G. In G′ we let the vertices of V form a clique. Finally, we add all edges between y
and any vertex in V ∪
⋃
e∈E Ke. Note that the resulting graph G
′ is indeed chordal. Note
also that ω(G′) = |V | + 3 (every maximum clique consists of y, the vertices of a clique
Ke and their two neighbours in V ).
We claim that G has a vertex cover of size at most k if and only if G′ can be k-
contracted to a graph H with ω(H) ≤ ω(G′)− 1. First suppose that G has a vertex cover
U of size at most k. For each vertex v ∈ U , we contract the corresponding vertex v in G′
to y. As |U | ≤ k, this means that we k-contracted G′ into a graph H. Since U is a vertex
cover, we obtain ω(H) ≤ |V |+ 2 = ω(G′)− 1.
Now suppose that G′ can be k-contracted to a graph H with ω(H) ≤ ω(G′)− 1. Let
S be a corresponding sequence of edge contractions (so |S| ≤ k holds). By Lemma 3
and the fact that chordal graphs are closed under taking edge contractions, we find that
no contraction in S results in a new maximum clique. Hence, as we need to reduce the
size of each maximum clique Kuv ∪ {u, v, y} by at least 1, we may assume without loss
of generality that each contraction in S concerns an edge with both its end-vertices in
V ∪ {y}. We construct a set U as follows. If S contains the contraction of an edge uy
we select u. If S contains the contraction of an edge uv, we select one of u, v arbitrarily.
Because each maximum clique Kuv ∪ {u, v, y} must be reduced, we find that U ⊆ V is a
vertex cover. By construction, |U | ≤ k. This completes the proof. ut
Similar arguments as in the above proof can be readily used to prove the following
result, which shows that Theorem 15 cannot be generalized to chordal graphs.
Theorem 17. For π ∈ {χ, ω}, 1-Deletion Blocker(π) is NP-complete for chordal
graphs.
8 Six Dichotomy Results and C4-free Perfect Graphs with ω = 3
In this section we first prove that for π ∈ {α, χ, ω} the contraction and deletion blocker
problems become very quickly NP-hard when we increase π, that is, we prove Theorem 1.
Theorem 1 (restated). The following six dichotomies hold:
(i) Contraction Blocker(α) is polynomial-time solvable for graphs with α = 1 and
1-Contraction Blocker(α) is NP-complete for graphs with α = 2;
(ii) Contraction Blocker(χ) is polynomial-time solvable for graphs with χ = 2 and
1-Contraction Blocker(χ) is NP-complete for graphs with χ = 3;
(iii) Contraction Blocker(ω) is polynomial-time solvable for graphs with ω = 2 and
1-Contraction Blocker(ω) is NP-complete for graphs with ω = 3;
(iv) Deletion Blocker(α) is polynomial-time solvable for graphs with α = 1 and
1-Deletion Blocker(α) is NP-complete for graphs with α = 2;
(v) Deletion Blocker(χ) is polynomial-time solvable for graphs with χ = 2 and
1-Deletion Blocker(χ) is NP-complete for graphs with χ = 3;
(vi) Deletion Blocker(ω) is polynomial-time solvable for graphs with ω = 1 and
1-Deletion Blocker(ω) is NP-complete for graphs with ω = 2;
Proof. All six problems are readily seen to be in NP for the above graph classes (it suffices
to take the sequence of edge contractions or vertex deletions as a certificate). We prove
each of the six statements separately.
21
(i) The problem is trivial if α = 1. As cobipartite graphs have independence number at
most 2, we can apply Theorem 4 to obtain NP-completeness if α = 2.
(ii) The problem is trivial if χ ≤ 2. We now consider the class of graphs with χ = 3. Recall
that the problem Bipartite Contraction is to test whether a graph can be made bipar-
tite by at most k edge contractions. It is readily seen that 1-Contraction Blocker(χ)
and Bipartite Contraction are equivalent for graphs of chromatic number 3. Heg-
gernes, van ’t Hof, Lokshtanov and Paul [26] observed that Bipartite Contraction is
NP-complete by reducing from the NP-complete problem Edge Bipartization, which
is that of testing whether a graph can be made bipartite by deleting at most k edges.
Given an instance (G, k) of Edge Bipartization, they obtain an instance (G′, k′) of
Bipartite Contraction by replacing every edge in G by a path of sufficiently large
odd length. Note that the resulting graph G′ has chromatic number 3 (assign colour 1 to
the vertices of G and give the new vertices colours 2 and 3).
(iii) The problem is trivial if ω ≤ 2. We now consider the class of graphs with ω = 3. We
use a polynomial reduction from the problem ONE-IN-3-SAT, which is well known to
be NP-complete (see [20]). This problem has as input a set X = {x1, . . . , xn} of n boolean
variables and a collection C = {c1, . . . , cm} of clauses over X ∪ X̄ such that |ci| = 3 for
i = 1, . . . ,m. The question is whether there a truth assignment for X such that each
clause of C contains exactly one true literal.
Let I = (X,C) be an instance of ONE-IN-3-SAT. We construct an instance (G,n+m)
of 1-Contraction Blocker(ω), where G is constructed as follows (see Fig. 1 for an
example):
– For each variable x ∈ X, introduce five vertices forming a triangle and a square
sharing exactly one edge. This yields the gadget for the variable x, where the two
edges that do not belong to the square correspond to the two literals x and x̄.
– For each clause ci ∈ C, introduce three vertices forming a triangle Ti. This yields
the gadget for the clause ci, where each edge corresponds to one of the three literals
forming ci.
– For every edge of a triangle Ti corresponding to a literal λ, link its two end-vertices
by a matching to the two end-vertices of the edge corresponding to λ in the variable
gadget.
Observe that (G,n+m) can be obtained in polynomial time. Moreover, ω(G) = 3 and
G contains exactly n+m disjoint triangles. Thus, in order to obtain a graph G′ from G
with ω(G′) = 2, we need to contract at least one edge from each of these triangles. We
claim that I is a yes-instance of ONE-IN-3-SAT if and only if (G,n+m) is a yes-instance
of 1-Contraction Blocker(ω).
First suppose that I is a yes-instance. For each variable x which is true (resp. false),
we contract the edge corresponding to the literal x (resp. the literal x̄) in the triangle of
the variable gadget; for each clause ci, we contract the unique edge of the clause gadget
corresponding to the literal which is set to true (see Fig. 2). Thus we contract exactly
n + m edges, one in each of the n + m disjoint triangles. For each clause gadget in G,
the unique contracted edge is linked to the unique contracted edge in the variable gadget
corresponding to the true literal. Hence the four original vertices are transformed into
two adjacent vertices.
We claim that no new triangles are created by performing the n+m edge contractions.
Indeed, when contracting an edge from a clause gadget, we do create a triangle T one edge
of which belongs to a variable gadget. But by construction, this edge will necessarily be
contracted as well. Thus this triangle T is transformed into a single edge. Hence ω(G′) = 2,
which means that (G,n+m) is a yes-instance.
Suppose now that (G,n+m) is a yes-instance. This means that we can obtain a graph
G′ with ω(G′) = 2 by contracting n+m edges of G. Since G contains exactly k disjoint
22
y
x
C 1 z
y
z
C 2x
x
x x
y
y y
z
z z
Fig. 1. The graph G encoding I = (x, y, z̄) ∨ (x̄, y, z). Bold lines correspond to true literals.
C1 C2
x
x x
y
y y
z
z z
Fig. 2. The graph G after the contractions. The black vertices correspond to the contracted
vertices.
triangles, we must, as already mentioned before, contract exactly one edge in each of these
triangles. Furthermore, in a variable gadget we must contract an edge not belonging to the
square, as otherwise a new triangle is created and hence we would need more than n+m
contractions, a contradiction. Let e be an edge in a variable gadget that is contracted.
Suppose that e corresponds to a literal λ. In G, e is contained in some squares containing
edges of clause gadgets which correspond to λ. Thus, after this contraction, we create
new triangles each containing an edge of a clause gadget corresponding to λ. It follows
that we must contract the edges in the clause gadgets corresponding to the literal λ,
otherwise triangles will remain in G′. Since we use n+m edge contractions, exactly one
edge in each clause gadget is contracted. Hence, by assigning the value true to the literal
corresponding to the edge contracted in each variable gadget, one literal has value true
and the other two have value false in each clause. This yields a positive answer for I, so
I is a yes-instance.
(iv) & (vi) Both problems are trivial if π ∈ {α, ω} has value 1. Now consider the class of
graphs with ω = 2, or equivalently the class of triangle-free graphs. Since Vertex Cover
is NP-complete for triangle-free graphs by Lemma 1, we conclude from Corollary 2 that 1-
Deletion Blocker(ω) is NP-complete for triangle-free graphs. The remainder of state-
ment (iv) follows immediately after recalling that 1-Deletion Blocker(α) can be solved
by taking the complement of the input graph and solving 1-Deletion Blocker(ω) in-
stead.
23
(v) First consider the class of graphs with χ = 2, which coincides with the class of bipartite
graphs. Then the problem becomes equivalent to Independent Set, which is polynomial-
time solvable for bipartite graphs (due to König’s Theorem; see, for example, [14]). Now
consider the class of graphs with χ = 3. Recall that the Maximum Induced Bipartite
Subgraph problem is to test if a given graph contains an induced bipartite subgraph
with at least k vertices for some integer k and that this problem is NP-complete even
for the class of 3-colourable perfect graphs [1]. As for 3-colourable graphs 1-Deletion
Blocker(χ) is equivalent to Maximum Induced Bipartite Subgraph, we find that
1-Deletion Blocker(χ) is NP-complete for graphs with chromatic number 3.
We have proven each of the six claims and thus have proven the theorem. ut
We note that the graph G in the proof of Theorem 1 (iii) contains no induced diamond
(the complete graph K4 on four vertices minus an edge) and no induced butterfly (the
graph with vertices a, b, c, d, e and edges ab, bc, ca, cd, de, ec). As a graph G is K4-free if
and only if ω(G) ≤ 3, we have in fact proven the following.
Corollary 4. The 1-Contraction Blocker(ω) problem is NP-complete for the class
of (butterfly,diamond,K4)-free graphs.
We use Theorem 1 (iii) to prove the following hardness result.
Theorem 18. For π ∈ {χ, ω}, 1-Contraction Blocker(π) is NP-complete for the
class of C4-free perfect graphs with clique number 3.
Proof. As before, the problem is readily seen to be in NP. Let π = ω, or equivalently,
π = χ. We adapt the construction used in the proof of Theorem 1 (iii) by doing as follows
for each edge e of the graph G in this proof. First we subdivide e. This gives us two new
edges e1 and e2. We introduce two new non-adjacent vertices ue and ve and make them
adjacent to both end-vertices of e1. Denote the resulting graph by G
∗. Note that we got
rid of all the induced C4s while not creating any new induced C4 in this way. Hence G
∗ is
C4-free. Moreover, we did not introduce any clique on four vertices. Hence, as ω(G) = 3,
we also have ω(G∗) = 3. The vertices of the original graph together with the subdivision
vertices form a bipartite graph on top of which we placed a number of triangles. Hence,
G∗ contains no odd hole and no odd antihole. By Theorem 3, G∗ is perfect.
We increase the allowed number of edge contractions accordingly and observe that,
because of the presence of the vertices ue and ve for each edge e, we are always forced
to contract the edge e1, which gives us back the original construction extended with a
number of pendant edges (which do not play a role). Note that we have left the class of
C4-free perfect graphs after contracting away the triangles, but this is allowed. ut
We recall that Contraction Blocker(α) is still open for the class of C4-free perfect
graphs as well as Deletion Blocker(π) for π ∈ {α, χ, ω}, even if d is fixed.
9 H-free Graphs
In this section we prove our complexity results for the six blocker problems restricted to
H-free graphs, that is, we prove Theorem 2. To summarize, for π ∈ {α, ω, χ} we are able
to give a dichotomy both for the contraction and deletion blocker problem except for one
open case for the contraction blocker problem when π = ω. We first consider π = α, then
π = ω and then π = χ.
24
9.1 When π = α
We call a vertex forced if it is in every maximum independent set of a graph [13]. Recall
that the set of all forced vertices is called the core of a graph and that Boros, Golumbic
and Levit [7] proved that computing whether the core of a graph has size at least k is
co-NP-hard for every fixed k ≥ 1. As a special case of their result, the problem of testing
the existence of a forced vertex is co-NP-hard. We prove that the latter problem, or
equivalently, Deletion Blocker(α) with d = k = 1, stays co-NP-hard even for graphs
of girth p+ 1, or equivalently, (C3, . . . , Cp)-free graphs, for any constant p ≥ 3 ((the girth
of a graph is the length of a shortest cycle in it).
Theorem 19. Deletion Blocker(α) is co-NP-hard for (C3, . . . , Cp)-free graphs for
any constant p ≥ 3 even if d = k = 1.
Proof. Let G be a graph. We pick one of its edges uv and subdivide uv twice, that is, we
replace the edge uv by two new vertices x and y and edges ux, xy, yv. We let G′ denote
the resulting graph. Note that α(G′) = α(G) + 1 (see also [42]). We claim that G has a
forced vertex if and only if G′ has a forced vertex.
First suppose that G has a forced vertex s. Then s is also a forced vertex of G′. In
order to see this consider a maximum independent set I ′ of G′. For contradiction, suppose
that I ′ does not contain s. Recall that I has size α(G)+1. If x is in I ′, then its neighbour
y is not in I ′, and thus I ′ \ {x} is a maximum independent set of G that does not contain
s, a contradiction. Hence x is not in I ′, and for the same reason y is not in I ′ either.
Then u is in I ′, as otherwise we could put x in I ′ to get a larger independent set than
I ′. However, we now find that I ′ \ {u} is a maximum independent set of G that does not
contain s, a contradiction. Hence s belongs I ′. We conclude that s is a forced vertex of
G′ as well.
Now suppose that G′ has a forced vertex s. First suppose s ∈ {x, y}, say s = x. Then
v is a forced vertex of G. In order to see this consider a maximum independent set I of
G. For contradiction, suppose that I does not contain v. Then I ∪ {y} is a maximum
independent set of G′ not containing s = x, a contradiction. Hence s does not belong
to {x, y}, so s must be in G. Then s is also a forced vertex of G. In order to see this
consider a maximum independent set I of G. For contradiction, suppose that I does not
contain s. As u and v are adjacent in G, not both of them are in I. Assume without loss
of generality that u is not in I. Then I ∪ {x} is a maximum independent set of G′ that
does not contain s, a contradiction. We conclude that s is a forced vertex of G.
We now subdivide each edge of G a sufficiently number of times (say p times) so that
the resulting graph G′′ is (C3, . . . , Cp)-free. By repeatedly applying the above claim, we
find that G has a forced vertex if and only if G′′ has a forced vertex. As deciding whether
a graph has a forced vertex is co-NP-hard [7], the result follows. ut
Before we present our two complexity dichotomies for π = α we need one additional
observation.
Lemma 5. If H is a (3P1, 2P2)-free forest, then H ⊆i P4.
Proof. As H is 3P1-free, H contains at most two connected components. Suppose H
contains exactly two connected components. Then, as H is 2P2-free, at least one of these
components must be a P1. As H is 3P1-free, this means that H is an induced subgraph
of P1 ⊕ P2, so H ⊆i P4. Suppose H is connected. As H is 3P1-free, H contains no claw
and no path on more than five vertices. Hence, H ⊆i P4. ut
We are now ready to present our first dichotomy.
Theorem 20. Let H be a graph. If H ⊆i P4, then Deletion Blocker(α) is polynomial-
time solvable for H-free graphs, otherwise it is NP-hard or co-NP-hard for H-free graphs.
25
Proof. Let H be a graph. If H ⊆i P4, then we use Corollary 3 to obtain polynomial-time
solvability. Suppose H is not an induced subgraph of P4. If H contains an induced cycle
Cr for some r ≥ 3, then we pick p = r + 1 and apply Theorem 19 to obtain co-NP-
hardness even if d = k = 1. Note that for r = 5, we could have applied Theorem 13
to obtain NP-hardness, as split graphs are C5-free. Similarly, if r ≥ 6, then H contains
an induced 2P2 and we could have applied Theorem 13 (as split graphs are 2P2-free) to
obtain NP-hardness as well.
Now assume that H is forest. As H is not an induced subgraph of P4, by Lemma 5
either 2P2 ⊆i H or 3P1 ⊆i H. If 2P2 ⊆i H, then we apply Theorem 13 again to obtain
NP-hardness. If 3P1 ⊆i H, then we use Theorem 1 (iv) to obtain NP-hardness even if
d = 1, after observing that a graph G is 3P1-free if and only if α(G) = 2. ut
Remark 2. Recall that H-free graphs are closed under vertex deletion. Hence, Deletion
Blocker(α) for H-free graphs will be in NP if we can solve Independent Set for H-
free graphs in polynomial time; in that case we can take a sequence of vertex deletions
as certificate. To give an example, Independent Set is polynomial-time solvable for
P5-free graphs [32]. Hence, for P5-free graphs, Deletion Blocker(α) is not only NP-
hard (which, as argued in the proof of Theorem 20, follows from Theorem 12) but even
NP-complete.
We now consider the edge contraction variant and present our second dichotomy.
Theorem 21. Let H be a graph. If H ⊆i P4, then Contraction Blocker(α) is
polynomial-time solvable for H-free graphs, otherwise it is NP-hard for H-free graphs.
Proof. Let H be a graph. If H is an induced subgraph of P4, then we use Corollary 3
to obtain polynomial-time solvability. Now suppose that H is not an induced subgraph
of P4. If H contains an induced cycle that is odd, then we use Theorem 7 to obtain NP-
hardness. If H contains an induced cycle that is even, then H either contains an induced
C4 or, if the even cycle has at least six vertices, an induced 2P2. This means that we can
use Theorem 13 to obtain NP-hardness after recalling that split graphs are (2P2, C4)-free.
Assume H contains no cycle. Then H is a forest. If H contains an induced 3P1, then we
use Theorem 1 (i) to obtain NP-hardness even if d = 1, after observing that a graph G
is 3P1-free if and only if α(G) = 2. Assume H is 3P1-free. Then 2P2 ⊆i H by Lemma 5,
which means we can use Theorem 13 again to obtain NP-hardness. ut
9.2 When π = ω
The complexity dichotomy for Deletion Blocker(ω) follows immediately from Theo-
rem 20 after making two observations. First, Deletion Blocker(ω) for H-free graphs
is equivalent to Deletion Blocker(α) for H-free graphs. Second, the graph P4 is self-
complementary, that is, P4 = P4.
Theorem 22. Let H be a graph. If H ⊆i P4, then Deletion Blocker(ω) is polynomial-
time solvable for H-free graphs; otherwise it is co-NP-hard or NP-hard for H-free graphs.
We now consider the Contraction Blocker(ω) problem for H-free graphs. We start
by giving a sufficient condition for computational hardness. Let G be a graph class with
the following property: if G ∈ G, then so are 2G and G⊕Kr for any r ≥ 1. We call such
a graph class clique-proof.
Theorem 23. If Clique is NP-complete for a clique-proof graph class G, then Con-
traction Blocker(ω) is co-NP-hard for G, even if d = k = 1.
26
Proof. Let G be a graph class that is clique-proof. From a given graph G ∈ G and given
integer ` ≥ 1 we construct the graph G′ = 2G ⊕ K`+1. Note that G′ ∈ G by definition
and that ω(G′) = max{ω(G), ` + 1}. It suffice to prove that ω(G) ≤ ` if and only if G′
can be 1-contracted into a graph G∗ with ω(G∗) ≤ ω(G′)− 1.
First suppose that ω(G) ≤ `. Then ω(G′) = ω(K`+1) = `+1. In G′ we contract an edge
of the K`+1. This yields the graph G
∗ = 2G ⊕K`, which has clique number ω(G∗) = `,
as ω(K`) = ` and ω(G) ≤ `. As ω(G′) = `+ 1, this means that ω(G∗) ≤ ω(G′)− 1.
Now suppose that G′ can be 1-contracted into a graph G∗ with ω(G∗) ≤ ω(G′) − 1.
As contracting an edge in one of the two copies of G in G′ does not lower the clique
number of G′, the contracted edge must be in the K`+1, that is, G
∗ = 2G⊕K`. As this
did result in a lower clique number, we conclude that ω(G′) = ω(K`+1) = ` + 1 and
ω(G∗) = ω(2G⊕K`) = max{ω(G), `} = `. The latter equality implies that ω(G) ≤ `. ut
We need a number of special graphs, namely the cobanner, bull, the aforementioned
butterfly and the paw (the graph P1 ⊕ P3), which are all displayed in Figure 3.
(a) (b) (c) (d)
Fig. 3. (a) Paw. (b) Cobanner. (c) Bull. (d) Butterfly.
We also need the following lemma from Poljak.
Lemma 6 ([42]). The Clique problem is NP-complete for the following classes: (C5, P5)-
free graphs, K1,3-free graphs, cobanner-free graphs and (bull, P5)-free graphs.
We use Lemma 6 in the proof of our next lemma.
Lemma 7. Let H be a connected graph. If H is neither an induced subgraph of P4 nor of
the paw, then 1-Contraction Blocker(ω) is NP-hard or co-NP-hard for H-free graphs.
Proof. Let H be a connected graph that is neither an induced subgraph of P4 nor of
the paw. If H contains an induced C4, use Theorem 18. If H contains an induced K4,
diamond or butterfly, use Corollary 4. If H contains an induced K1,3, C5, P5, bull or
cobanner, use Lemma 6 with Theorem 23. So from now on we may assume that H
is (C4, C5, P5,K1,3,K4,diamond,bull,butterfly, cobanner)-free. Below we show that this
leads to a contradiction.
First suppose that H contains no cycle. Then, as H is connected, H is a tree. Because
H is K1,3-free, H is a path. Our assumption that H is neither an induced subgraph of
P4 nor of the paw implies that H contains an induced P5, which is not possible as H is
P5-free.
Now suppose that H contains a cycle C. Then C must have exactly three vertices,
because H is (C4, C5, P5)-free. As H is not an induced subgraph of the paw, we find that
H contains at least one vertex x not on C. As H is connected, we may assume that x has
27
a neighbour on C. Because H is (diamond,K4)-free, x has exactly one neighbour on C.
Let v be this neighbour. Hence, H contains an induced paw (consisting of x, v and the
other two vertices of C). As H is not an induced subgraph of the paw and H is connected,
it follows that H contains a vertex y /∈ V (C) ∪ {x} that is adjacent to a vertex on C or
to x.
Suppose that y is adjacent to a vertex of C. Then, as H is (diamond,K4)-free, y has
exactly one neighbour u in C. If u = v then H either contains an induced claw (if x
and y are non-adjacent) or an induced butterfly (if x and y are adjacent). Since, by our
assumption, this is not possible, it follows that u 6= v. Then, because H is bull-free, we
deduce that x and y are adjacent. However, then the vertices, u, v, x, y form an induced
C4, which is not possible as H is C4-free. We conclude that y is not adjacent to a vertex
of C, so y must be adjacent to x only. However, then H contains an induced cobanner, a
contradiction. This completes the proof of Lemma 7. ut
A graph G is complete multipartite if V (G) can be partitioned into k independent
sets V1, . . . , Vk for some integer k, such that two vertices are adjacent if and only if they
belong to two different sets Vi and Vj . We need a result of Olariu on paw-free graphs.
Lemma 8 ([34]). Every connected paw-free graph is either triangle-free or complete mul-
tipartite.
We are ready to present our result for Contraction Blocker(ω) restricted to H-
free graphs. This is the only result where we do not have a dichotomy due to one missing
case.
Theorem 24. Let H 6= C3⊕P1 be a graph. If H ⊆i P4 or H ⊆i paw, then Contraction
Blocker(ω) is polynomial-time solvable for H-free graphs, otherwise it is NP-hard or co-
NP-hard for H-free graphs.
Proof. First assume that H is connected. If H is an induced subgraph of P4 then we use
Corollary 3. If H is an induced subgraph of the paw, then we know from Lemma 8 that
G is either C3-free or complete multipartite. In the first case one must contract all the
edges of an H-free graph in order to decrease its clique number. Hence Contraction
Blocker(ω) is polynomial-time solvable for C3-free graphs. In the second case H is P4-
free, so we can use Corollary 3 again. If H is neither an induced subgraph of P4 nor of
the paw, then we use Lemma 7.
Now assume that H is not connected. If H contains a connected component that is
not an induced subgraph of P4 or the paw then we use Lemma 7 again. Assume that each
connected component of H is an induced subgraph of P4 or the paw. If 3P1 ⊆i H or 2P2 ⊆i
H then we use Theorem 5 or Theorem 13, respectively. Hence, H ∈ {2P1, P2⊕P1, C3⊕P1}.
In the first two cases H ⊆i P4 and thus we can use Corollary 3, whereas we excluded the
last case. ut
9.3 When π = χ
Recall that Deletion Blocker(χ) and Contraction Blocker(χ) are called Crit-
ical Vertex and Contraction-Critical Edge, respectively, if d = k = 1. We need
the following result announced in [36]; see [35] for its proof.
Theorem 25 ([36]). If a graph H ⊆i P4 or of H ⊆i P1⊕P3, then Critical Vertex and
Contraction-Critical Edge restricted to H-free graphs are polynomial-time solvable,
otherwise they are NP-hard or co-NP-hard.
We also need the following result of Král’, Kratochv́ıl, Tuza, and Woeginger.
28
Theorem 26 ([28]). Let H be a graph. If H ⊆i P4 or of H ⊆i P1⊕P3, then Coloring is
polynomial-time solvable for H-free graphs, otherwise it is NP-complete for H-free graphs.
We also need the following lemma.
Lemma 9. Deletion Blocker(χ) is polynomial-time solvable for 3P1-free graphs.
Proof. Let G = (V,E) be a 3P1-free graph with |V | = n and let k ≥ 1 be an integer.
Consider an instance (G, k, d) of Deletion Blocker(χ). We proceed as follows. Consider
an optimal colouring of G. Since G is 3P1-free, the size of each colour class is at most 2.
Moreover, the number of colour classes of size 1 is the same for every optimal colouring of
G. Let ` be this number. Hence, there are n−`2 colour classes of size 2 and χ(G) = `+
n−`
2 .
Now (G, k, d) is a yes-instance if and only if we can obtain a graph G′ from G by
deleting at most k vertices such that χ(G′) ≤ χ(G) − d = ` + n−`2 − d. Since G
′ is also
3P1-free, the colour classes in any optimal colouring of G
′ have size at most 2 and thus,
G′ contains at most 2(` + n−`2 − d) = n + ` − 2d vertices. In other words, we need to
delete at least 2d − ` vertices from G in order to get such a graph G′. As such, (G, k, d)
is a no-instance if k < 2d− `.
Next we will show that if k ≥ 2d − `, then (G, k, d) is a yes-instance and this will
complete the proof. If d ≤ `, we delete d vertices representing colour classes of size 1. If
d > `, we delete the ` vertices representing the colour classes of size 1 and 2(d−`) vertices
of d−` colour classes of size 2. In this way we obtain a graph G′ whose chromatic number
is exactly χ(G)− d.
Due to the above, all we need to do is check if k ≥ 2d − `. This can be done in
polynomial time, since we can compute ` in polynomial time due to Theorem 26. ut
Two disjoint subsets of vertices in a graph are complete if there is an edge between
every vertex of A and every vertex of B. Lemma 8 implies the following lemma, which we
use together with Corollary 3 and Lemma 9 to prove Lemma 11.
Lemma 10. The vertex set of every (P1 ⊕ P3)-free graph G can be decomposed into two
disjoint sets A and B such that G[A] is 3P1-free, G[B] is P4-free and A and B are complete
to each other.
Proof. Let G = (V,E) be a (P1 ⊕ P3)-free graph. Then G is P1 ⊕ P3-free. By Lemma 8
every connected component of G is triangle-free or complete multipartite. Let A be the
union of the vertices of all triangle-free components. Then G[A] = K3-free, so G[A] is
3P1-free. Let B = V \ A. As every component of G[B] is complete multipartite, G[B] is
P4-free. As P4 = P4, this means that G[B] is P4-free. Moreover, A and B are complete to
each other in G. ut
Lemma 11. Deletion Blocker(χ) is polynomial-time solvable for (P1⊕P3)-free graphs.
Proof. Let (G, d, k) be an instance of Vertex Deletion Blocker(χ), where G = (V,E)
is (P1 ⊕ P3)-free. By Lemma 10, the vertex set of G can be decomposed into two disjoint
sets A and B such that G1 = G[A] is 3P1-free, G2 = G[B] is P4-free and A and B
are complete to each other. The latter implies that χ(G) = χ(G1) + χ(G2). Moreover,
this property is maintained when deleting vertices from V . For each pair (k1, k2) with
k1 + k2 = k we check by how much we can decrease χ(G1) using at most k1 vertex
deletions and by how much we can decrease χ(G2) using at most k2 vertex deletions. We
can do this in polynomial time by Corollary 3 and Lemma 9, respectively. We keep track
of the maximum sum of these values. In the end, we are left to check if the value found is
at least d or not. Since the number of pairs (k1, k2) is at most k, the total running time
is polynomial. ut
We can now state and prove the following two dichotomies.
29
Theorem 27. Let H be a graph. Then the following holds:
– If H ⊆i P1⊕P3 or P4, then Deletion Blocker(χ) for H-free graphs is polynomial-
time solvable, and it is NP-hard or co-NP-hard otherwise.
– If H ⊆i P4, then Contraction Blocker(χ) for H-free graphs is polynomial-time
solvable for H-free graphs, and it is NP-hard or co-NP-hard otherwise.
Proof. Let H be a graph. If H is neither an induced subgraph of P4 nor of P1 ⊕ P3,
then for both problems we can apply Theorem 25. If H ⊆i P4, then for both problems
we apply Corollary 3. In the remaining case H = 3P1 or H = P1 ⊕ P3. Then applying
Lemma 11 gives us the desired dichotomy for Deletion Blocker(χ). And applying
Theorem 5 gives us the desired dichotomy for Contraction Blocker(χ) after recalling
that cobipartite graphs are 3P1-free. ut
After proving Theorem 27 we have shown all six cases of Theorem 2. Note that,
unlike the case d = k = 1 (see Theorem 25), the complexity dichotomies of the problems
Contraction Blocker(χ) and Deletion Blocker(χ) restricted to H-free graphs
are different when H is disconnected.
10 Future Work
We aim to solve the blank entries in Table 1. In particular, we pose the following open
problems:
Q1. Determine the complexity of Contraction Blocker(α) for interval graphs.
Q2. Determine the complexity of Deletion Blocker(α) for interval graphs.
We observe that the complexity of the two problems in Q1 and Q2 is unknown for interval
graphs even if d is fixed. We also aim to research the complexity of 1-Contraction
Blocker(α) for bipartite graphs and chordal graphs, and the complexity of 1-Deletion
Blocker(α) for perfect graphs and chordal graphs.
In addition to the above it would be interesting to generalize our results for the blocker
problems restricted to H-free graphs in Section 9 to families of more than one forbidden
induced subgraph H. However, we still need to complete one stubborn remaining case for
one problem:
Q3. Determine the complexity of Contraction Blocker(ω) for (C3 ⊕ P1)-free graphs.
We observe that it is not difficult to construct graph classes for which a blocker problem
is tractable, but the original problem is NP-complete. However, we do not know of such
examples of hereditary graph classes. Hence it would be interesting to solve the following
question.
Q4. For π ∈ {α, ω, χ}, are Contraction Blocker(π) and Deletion Blocker(π)
computationally hard on every hereditary graph class G, for which Independent
Set, Clique or Coloring, respectively, is NP-complete?
Several computationally hard cases of our dichotomies for H-free graphs in Theorem 2
hold in fact even when d = 1 or d = k = 1. In particular, from Theorems 25 and 27 we
immediately deduce that if H ⊆i P1 ⊕ P3 or P4, then 1-Deletion Blocker(χ) for H-
free graphs is polynomial-time solvable, and NP-hard or co-NP-hard otherwise. However,
for the other five variants we still have a number of missing cases to solve.
Finally, we aim to determine a dichotomy with respect to H-free graphs for the variant
(π ∈ {α, ω, χ}), where S consists of other graph operations, for instance when S consists
30
of an edge deletion. This variant has been less studied than the vertex deletion and
edge contraction variant. The reason for this is that no class of H-free graphs is closed
under edge deletion, whereas such a class is closed under vertex deletion, and in the case
when H is a linear forest, under edge contraction as well. For π = χ we are close to a
dichotomy. Recall that an edge of a graph is critical or contraction-critical if its deletion
or contraction, respectively, reduces the chromatic number of G by 1. It is known that an
edge is contraction-critical if and only if it is critical [36]. Hence by Theorem 25 we only
need to consider the cases where H ⊆i P4 or H ⊆i P1⊕P3. Bazgan et al. [2] showed that
the edge deletion variant for chromatic number is polynomial-time solvable for threshold
graphs, that is, for (C4, 2P2, P4)-free graphs, and NP-hard for cobipartite graphs, and
thus for 3P1-free graphs. This means that the only two open cases for chromatic number
are when H = P1 + P2 or H = P4.
References
1. L. Addario-Berry, W.S. Kennedy, A. D. King, Z. Li and B. Reed, Finding a maximum-weight
induced k-partite subgraph of an i-triangulated graph. Discrete Applied Mathematics 158(7)
(2010), 765–770.
2. C. Bazgan, C. Bentz, C. Picouleau and B. Ries, Blockers for the stability number and the
chromatic number, Graphs and Combinatorics 31 (2015) 73–90.
3. C. Bazgan, S. Toubaline and Z. Tuza, The most vital nodes with respect to independent set
and vertex cover, Discrete Applied Mathematics 159 (2011) 1933–1946.
4. C. Bentz, M.-C. Costa, D. de Werra, C. Picouleau and B. Ries, Weighted transversals and
blockers for some optimization problems in graphs, Progress in Combinatorial Optimization,
Wiley-ISTE, 2012.
5. R. Belmonte, P.A. Golovach, P. van ’t Hof and D. Paulusma, Parameterized complexity of
two edge contraction problems with degree constraints, Proc. IPEC 2013, LNCS 8246 (2013)
16–27.
6. H.L. Bodlaender, R.H. Möhring, The pathwidth and treewidth of cographs, SIAM Journal
on Discrete Mathematics 6 (1993) 181–188.
7. E. Boros, M.C. Golumbic and V.E. Levit, On the number of vertices belonging to all maxi-
mum stable sets of a graph, Discrete Applied Mathematics 124 (2002) 17-25.
8. A. Brandstädt, V.B. Le and J. Spinrad, Graph Classes: A Survey, SIAM Monographs on
Discrete Mathematics and Applications, 1999.
9. M. Chudnovsky, N. Robertson, P.D. Seymour, and R. Thomas, The strong perfect graph
theorem, Annals of Mathematics 164 (2006) 51–229.
10. V. Chvátal, C.T. Hoàng, N.V.R. Mahadev and D. de Werra, Four classes of perfectly order-
able graphs, Journal of Graph Theory 11 (1987) 481–495.
11. D.G. Corneil, H. Lerchs, L. Stewart Burlingham, Complement reducible graphs, Discrete
Applied Mathematics 3 (1981) 163–174.
12. D.G. Corneil, Y. Perl, L.K. Stewart, A linear recognition algorithm for cographs, SIAM
Journal on Computing 14 (1985) 926–934.
13. M.-C. Costa, D. de Werra, C. Picouleau, Minimum d-blockers and d-transversals in graphs,
Journal of Combinatorial Optimization 22 (2011) 857–872.
14. R. Diestel, Graph Theory, Springer-Verlag, 2005.
15. Downey, R.G., Fellows, M.R.: Parameterized Complexity. Springer, 1999.
16. Ö. Diner, D. Paulusma, C. Picouleau and B. Ries, Contraction blockers for graphs with
forbidden induced paths, Proc. CIAC 2015, LNCS 9079 (2015) 194–207.
17. H. Fleischner, E. Mujuni, D. Paulusma and S. Szeider, Covering graphs with few complete
bipartite subgraphs, Theoretical Computer Science 410 (2009) 2045–2053.
18. S. Földes, P.L. Hammer, Split graphs, 8th South–Eastern Conf. on Combinatorics, Graph
Theory and Computing, Congressus Numerantium 19 (1977) 311–315.
19. D. Fulkerson and O. Gross, Incidence matrices and interval graphs, Pacific Journal of Math-
ematics 15 (1965) 835–855.
20. M. R. Garey and D. S. Johnson, Computers and Intractability: A Guide to the Theory of
NP-Completeness, Freeman, 1979.
31
21. P.A. Golovach, P. Heggernes, P. van ’t Hof and C. Paul, Hadwiger number of graphs with
small chordality, Proc. WG 2014, LNCS 8747 (2014) 201–213.
22. M.C. Golumbic, Algorithmic Graph Theory and Perfect Graphs, Academic Press, New York,
1980.
23. M. Grötschel, L. Lovász and A. Schrijver, Polynomial algorithms for perfect graphs, Annals
of Discrete Mathematics, 21 (1984) 325–356.
24. G. Gutin, M. Jones and A. Yeo, Kernels for below-upper-bound parameterizations of the
hitting set and directed dominating set problems. Theoretical Computer Science 412 (2011)
5744–5751.
25. P.L. Hammer, P. Hansen, B. Simeone, Vertices belonging to all or to no maximum stable
sets of a graph, SIAM J. Algebraic Discrete Methods 3 (1982) 511–522.
26. P. Heggernes, P. van ’t Hof, D. Lokshtanov, and C. Paul, Obtaining a bipartite graph by
contracting few edges, SIAM Journal on Discrete Mathematics 27 (2013) 2143–2156.
27. J.E. Hopcroft, R.M. Karp, An n5/2 algorithm for maximum matchings in bipartite graphs,
SIAM Journal on Computing 2 (1973) 225–231.
28. D. Král’, J. Kratochv́ıl, Z. Tuza, and G.J. Woeginger, Complexity of coloring graphs without
forbidden induced subgraphs, Proc. WG 2001, LNCS 2204 (2001) 254–262.
29. V.E. Levit and E. Mandrescu, Combinatorial properties of the family of maximum stable
sets of a graph, Discrete Applied Mathematics 117 (2002) 149–161.
30. V.E. Levit and E. Mandrescu, Vertices belonging to all critical sets of a graph, SIAM Journal
on Discrete Mathematics 26 (2012) 399–403.
31. J.M. Lewis and M. Yannakakis, The node-deletion problem for hereditary proper- ties is
NP-complete. Journal of Computer and System Sciences, 20 (1980) 219–230.
32. D. Lokshantov, M. Vatshelle and Y. Villanger, Independent set in P5-free graphs in polyno-
mial time, Proc. SODA 2014 (2014) 570–581.
33. F. Maffray and M. Preissmann, On the NP-completeness of the k-colorability problem for
triangle-free graphs, Discrete Mathematics 162 (1996) 313–317.
34. S. Olariu, Paw-free graphs, Information Processing Letters 28 (1988) 53–54.
35. D. Paulusma, C. Picouleau and B. Ries, Critical vertices and edges in H-free graphs,
Manuscript, arXiv.
36. D. Paulusma, C. Picouleau and B. Ries, Reducing the chromatic number by vertex or edge
deletions, Proc. LAGOS, Electronic Notes in Discrete Mathematics, to appear.
37. D. Paulusma, C. Picouleau and B. Ries, Reducing the clique and chromatic number via edge
contractions and vertex deletions, Proc. ISCO 2016, LNCS 9849 (2016) 38-49.
38. D. Paulusma, C. Picouleau and B. Ries, Blocking independent sets for H-free graphs via
edge contractions and vertex deletions, Proc. TAMC 2017, LNCS 10185 (2017) 470–483.
39. F.M. Pajouh, V. Boginski and E. L. Pasiliao, Minimum vertex blocker clique problem, Net-
works 64 (2014) 48–64.
40. F.M. Pajouh, V. Boginski and E. L. Pasiliao, Minimum edge blocker dominating set problem,
European Journal of Operations Research 247 (2015) 16–26.
41. O. Pikhurko and Z.B. Yilma, Supersaturation problem for color-critical graphs, Journal of
Combinatorial Theory, Series B 123 (2017) 148–185.
42. S. Poljak, A note on the stable sets and coloring of graphs, Comment. Math. Univ. Carolin.
15 (1974) 307–309.
43. B. Ries, C. Bentz, C. Picouleau, D. de Werra, M.-C. Costa and R. Zenklusen, Blockers and
transversals in some subclasses of bipartite graphs : when caterpillars are dancing on a grid,
Discrete Mathematics 310 (2010) 132–146.
44. C. Savage, Maximum matchings and trees, Information Processing Letters 10 (1980) 202–205.
45. S. Toubaline, Détermination des éléments les plus vitaux pour des problèmes de graphes,
PhD Thesis, Université Paris-Dauphine, 2010.
46. T. Watanabe, A.E. Tadashi and A. Nakamura, On the NP-hardness of edge-deletion and
-contraction problems, Discrete Applied Mathematics 6 (1983) 63–78.
47. D. B. West, Introduction to Graph Theory, Prentice-Hall, 1996.
32

